/*!
\page vtkrendering_vtkselectvisiblepoints vtkSelectVisiblePoints

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkSelectVisiblePoints is a filter that selects points based on
 whether they are visible or not. Visibility is determined by
 accessing the z-buffer of a rendering window. (The position of each
 input point is converted into display coordinates, and then the
 z-value at that point is obtained. If within the user-specified
 tolerance, the point is considered visible.)

 Points that are visible (or if the ivar SelectInvisible is on,
 invisible points) are passed to the output. Associated data
 attributes are passed to the output as well.

 This filter also allows you to specify a rectangular window in display
 (pixel) coordinates in which the visible points must lie. This can be
 used as a sort of local "brushing" operation to select just data within
 a window.
 

To create an instance of class vtkSelectVisiblePoints, simply
invoke its constructor as follows
\verbatim
  obj = vtkSelectVisiblePoints
\endverbatim
\section Methods
The class vtkSelectVisiblePoints has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSelectVisiblePoints class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkSelectVisiblePoints = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkSelectVisiblePoints = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetRenderer (vtkRenderer ren)</tt> -  Specify the renderer in which the visibility computation is to be
 performed.
 </LI>
<LI>  <tt>vtkRenderer = obj.GetRenderer ()</tt> -  Set/Get the flag which enables selection in a rectangular display
 region.
 </LI>
<LI>  <tt>obj.SetSelectionWindow (int )</tt> -  Set/Get the flag which enables selection in a rectangular display
 region.
 </LI>
<LI>  <tt>int = obj.GetSelectionWindow ()</tt> -  Set/Get the flag which enables selection in a rectangular display
 region.
 </LI>
<LI>  <tt>obj.SelectionWindowOn ()</tt> -  Set/Get the flag which enables selection in a rectangular display
 region.
 </LI>
<LI>  <tt>obj.SelectionWindowOff ()</tt> -  Set/Get the flag which enables selection in a rectangular display
 region.
 </LI>
<LI>  <tt>obj.SetSelection (int , int , int , int )</tt> -  Specify the selection window in display coordinates. You must specify
 a rectangular region using (xmin,xmax,ymin,ymax).
 </LI>
<LI>  <tt>obj.SetSelection (int  a[4])</tt> -  Specify the selection window in display coordinates. You must specify
 a rectangular region using (xmin,xmax,ymin,ymax).
 </LI>
<LI>  <tt>int = obj. GetSelection ()</tt> -  Specify the selection window in display coordinates. You must specify
 a rectangular region using (xmin,xmax,ymin,ymax).
 </LI>
<LI>  <tt>obj.SetSelectInvisible (int )</tt> -  Set/Get the flag which enables inverse selection; i.e., invisible points
 are selected.
 </LI>
<LI>  <tt>int = obj.GetSelectInvisible ()</tt> -  Set/Get the flag which enables inverse selection; i.e., invisible points
 are selected.
 </LI>
<LI>  <tt>obj.SelectInvisibleOn ()</tt> -  Set/Get the flag which enables inverse selection; i.e., invisible points
 are selected.
 </LI>
<LI>  <tt>obj.SelectInvisibleOff ()</tt> -  Set/Get the flag which enables inverse selection; i.e., invisible points
 are selected.
 </LI>
<LI>  <tt>obj.SetTolerance (double )</tt> -  Set/Get a tolerance to use to determine whether a point is visible. A
 tolerance is usually required because the conversion from world space
 to display space during rendering introduces numerical round-off.
 </LI>
<LI>  <tt>double = obj.GetToleranceMinValue ()</tt> -  Set/Get a tolerance to use to determine whether a point is visible. A
 tolerance is usually required because the conversion from world space
 to display space during rendering introduces numerical round-off.
 </LI>
<LI>  <tt>double = obj.GetToleranceMaxValue ()</tt> -  Set/Get a tolerance to use to determine whether a point is visible. A
 tolerance is usually required because the conversion from world space
 to display space during rendering introduces numerical round-off.
 </LI>
<LI>  <tt>double = obj.GetTolerance ()</tt> -  Set/Get a tolerance to use to determine whether a point is visible. A
 tolerance is usually required because the conversion from world space
 to display space during rendering introduces numerical round-off.
 </LI>
<LI>  <tt>bool = obj.IsPointOccluded (double x[], float zPtr)</tt> -  Tests if a point x is being occluded or not against the Z-Buffer array passed in by
 zPtr. Call Initialize before calling this method.
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Return MTime also considering the renderer.
 </LI>
</UL>
*/
