/*!
\page vtkrendering_vtkcamera vtkCamera

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkCamera is a virtual camera for 3D rendering. It provides methods
 to position and orient the view point and focal point. Convenience 
 methods for moving about the focal point also are provided. More 
 complex methods allow the manipulation of the computer graphics
 model including view up vector, clipping planes, and 
 camera perspective.

To create an instance of class vtkCamera, simply
invoke its constructor as follows
\verbatim
  obj = vtkCamera
\endverbatim
\section Methods
The class vtkCamera has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkCamera class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkCamera = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkCamera = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetPosition (double x, double y, double z)</tt> -  Set/Get the position of the camera in world coordinates.
 The default position is (0,0,1).
 </LI>
<LI>  <tt>obj.SetPosition (double a[3])</tt> -  Set/Get the position of the camera in world coordinates.
 The default position is (0,0,1).
 </LI>
<LI>  <tt>double = obj. GetPosition ()</tt> -  Set/Get the position of the camera in world coordinates.
 The default position is (0,0,1).
 </LI>
<LI>  <tt>obj.SetFocalPoint (double x, double y, double z)</tt> -  Set/Get the focal of the camera in world coordinates.
 The default focal point is the origin.
 </LI>
<LI>  <tt>obj.SetFocalPoint (double a[3])</tt> -  Set/Get the focal of the camera in world coordinates.
 The default focal point is the origin.
 </LI>
<LI>  <tt>double = obj. GetFocalPoint ()</tt> -  Set/Get the focal of the camera in world coordinates.
 The default focal point is the origin.
 </LI>
<LI>  <tt>obj.SetViewUp (double vx, double vy, double vz)</tt> -  Set/Get the view up direction for the camera.  The default
 is (0,1,0).
 </LI>
<LI>  <tt>obj.SetViewUp (double a[3])</tt> -  Set/Get the view up direction for the camera.  The default
 is (0,1,0).
 </LI>
<LI>  <tt>double = obj. GetViewUp ()</tt> -  Set/Get the view up direction for the camera.  The default
 is (0,1,0).
 </LI>
<LI>  <tt>obj.OrthogonalizeViewUp ()</tt> -  Recompute the ViewUp vector to force it to be perpendicular to
 camera->focalpoint vector.  Unless you are going to use
 Yaw or Azimuth on the camera, there is no need to do this.
 </LI>
<LI>  <tt>obj.SetDistance (double )</tt> -  Move the focal point so that it is the specified distance from
 the camera position.  This distance must be positive.
 </LI>
<LI>  <tt>double = obj.GetDistance ()</tt> -  Return the distance from the camera position to the focal point.
 This distance is positive.
 </LI>
<LI>  <tt>double = obj. GetDirectionOfProjection ()</tt> -  Get the vector in the direction from the camera position to the
 focal point.  This is usually the opposite of the ViewPlaneNormal,
 the vector perpendicular to the screen, unless the view is oblique.
 </LI>
<LI>  <tt>obj.Dolly (double value)</tt> -  Divide the camera's distance from the focal point by the given
 dolly value.  Use a value greater than one to dolly-in toward
 the focal point, and use a value less than one to dolly-out away
 from the focal point.
 </LI>
<LI>  <tt>obj.SetRoll (double angle)</tt> -  Set the roll angle of the camera about the direction of projection.
 </LI>
<LI>  <tt>double = obj.GetRoll ()</tt> -  Set the roll angle of the camera about the direction of projection.
 </LI>
<LI>  <tt>obj.Roll (double angle)</tt> -  Rotate the camera about the direction of projection.  This will
 spin the camera about its axis.
 </LI>
<LI>  <tt>obj.Azimuth (double angle)</tt> -  Rotate the camera about the view up vector centered at the focal point.
 Note that the view up vector is whatever was set via SetViewUp, and is
 not necessarily perpendicular to the direction of projection.  The
 result is a horizontal rotation of the camera.
 </LI>
<LI>  <tt>obj.Yaw (double angle)</tt> -  Rotate the focal point about the view up vector, using the camera's
 position as the center of rotation. Note that the view up vector is
 whatever was set via SetViewUp, and is not necessarily perpendicular
 to the direction of projection.  The result is a horizontal rotation
 of the scene.
 </LI>
<LI>  <tt>obj.Elevation (double angle)</tt> -  Rotate the camera about the cross product of the negative of the
 direction of projection and the view up vector, using the focal point
 as the center of rotation.  The result is a vertical rotation of the
 scene.
 </LI>
<LI>  <tt>obj.Pitch (double angle)</tt> -  Rotate the focal point about the cross product of the view up vector
 and the direction of projection, using the camera's position as the
 center of rotation.  The result is a vertical rotation of the camera.
 </LI>
<LI>  <tt>obj.SetParallelProjection (int flag)</tt> -  Set/Get the value of the ParallelProjection instance variable. This
 determines if the camera should do a perspective or parallel projection.
 </LI>
<LI>  <tt>int = obj.GetParallelProjection ()</tt> -  Set/Get the value of the ParallelProjection instance variable. This
 determines if the camera should do a perspective or parallel projection.
 </LI>
<LI>  <tt>obj.ParallelProjectionOn ()</tt> -  Set/Get the value of the ParallelProjection instance variable. This
 determines if the camera should do a perspective or parallel projection.
 </LI>
<LI>  <tt>obj.ParallelProjectionOff ()</tt> -  Set/Get the value of the ParallelProjection instance variable. This
 determines if the camera should do a perspective or parallel projection.
 </LI>
<LI>  <tt>obj.SetUseHorizontalViewAngle (int flag)</tt> -  Set/Get the value of the UseHorizontalViewAngle instance variable. If
 set, the camera's view angle represents a horizontal view angle, rather
 than the default vertical view angle. This is useful if the application
 uses a display device which whose specs indicate a particular horizontal
 view angle, or if the application varies the window height but wants to
 keep the perspective transform unchanges.
 </LI>
<LI>  <tt>int = obj.GetUseHorizontalViewAngle ()</tt> -  Set/Get the value of the UseHorizontalViewAngle instance variable. If
 set, the camera's view angle represents a horizontal view angle, rather
 than the default vertical view angle. This is useful if the application
 uses a display device which whose specs indicate a particular horizontal
 view angle, or if the application varies the window height but wants to
 keep the perspective transform unchanges.
 </LI>
<LI>  <tt>obj.UseHorizontalViewAngleOn ()</tt> -  Set/Get the value of the UseHorizontalViewAngle instance variable. If
 set, the camera's view angle represents a horizontal view angle, rather
 than the default vertical view angle. This is useful if the application
 uses a display device which whose specs indicate a particular horizontal
 view angle, or if the application varies the window height but wants to
 keep the perspective transform unchanges.
 </LI>
<LI>  <tt>obj.UseHorizontalViewAngleOff ()</tt> -  Set/Get the value of the UseHorizontalViewAngle instance variable. If
 set, the camera's view angle represents a horizontal view angle, rather
 than the default vertical view angle. This is useful if the application
 uses a display device which whose specs indicate a particular horizontal
 view angle, or if the application varies the window height but wants to
 keep the perspective transform unchanges.
 </LI>
<LI>  <tt>obj.SetViewAngle (double angle)</tt> -  Set/Get the camera view angle, which is the angular height of the
 camera view measured in degrees.  The default angle is 30 degrees.
 This method has no effect in parallel projection mode.
 The formula for setting the angle up for perfect perspective viewing
 is: angle = 2*atan((h/2)/d) where h is the height of the RenderWindow
 (measured by holding a ruler up to your screen) and d is the
 distance from your eyes to the screen.
 </LI>
<LI>  <tt>double = obj.GetViewAngle ()</tt> -  Set/Get the camera view angle, which is the angular height of the
 camera view measured in degrees.  The default angle is 30 degrees.
 This method has no effect in parallel projection mode.
 The formula for setting the angle up for perfect perspective viewing
 is: angle = 2*atan((h/2)/d) where h is the height of the RenderWindow
 (measured by holding a ruler up to your screen) and d is the
 distance from your eyes to the screen.
 </LI>
<LI>  <tt>obj.SetParallelScale (double scale)</tt> -  Set/Get the scaling used for a parallel projection, i.e. the height
 of the viewport in world-coordinate distances. The default is 1.
 Note that the "scale" parameter works as an "inverse scale" ---
 larger numbers produce smaller images.
 This method has no effect in perspective projection mode.
 </LI>
<LI>  <tt>double = obj.GetParallelScale ()</tt> -  Set/Get the scaling used for a parallel projection, i.e. the height
 of the viewport in world-coordinate distances. The default is 1.
 Note that the "scale" parameter works as an "inverse scale" ---
 larger numbers produce smaller images.
 This method has no effect in perspective projection mode.
 </LI>
<LI>  <tt>obj.Zoom (double factor)</tt> -  In perspective mode, decrease the view angle by the specified factor.
 In parallel mode, decrease the parallel scale by the specified factor.
 A value greater than 1 is a zoom-in, a value less than 1 is a zoom-out.
 </LI>
<LI>  <tt>obj.SetClippingRange (double dNear, double dFar)</tt> -  Set/Get the location of the near and far clipping planes along the
 direction of projection.  Both of these values must be positive.
 How the clipping planes are set can have a large impact on how 
 well z-buffering works.  In particular the front clipping
 plane can make a very big difference. Setting it to 0.01 when it
 really could be 1.0 can have a big impact on your z-buffer resolution
 farther away.  The default clipping range is (0.1,1000).
 </LI>
<LI>  <tt>obj.SetClippingRange (double a[2])</tt> -  Set/Get the location of the near and far clipping planes along the
 direction of projection.  Both of these values must be positive.
 How the clipping planes are set can have a large impact on how 
 well z-buffering works.  In particular the front clipping
 plane can make a very big difference. Setting it to 0.01 when it
 really could be 1.0 can have a big impact on your z-buffer resolution
 farther away.  The default clipping range is (0.1,1000).
 </LI>
<LI>  <tt>double = obj. GetClippingRange ()</tt> -  Set/Get the location of the near and far clipping planes along the
 direction of projection.  Both of these values must be positive.
 How the clipping planes are set can have a large impact on how 
 well z-buffering works.  In particular the front clipping
 plane can make a very big difference. Setting it to 0.01 when it
 really could be 1.0 can have a big impact on your z-buffer resolution
 farther away.  The default clipping range is (0.1,1000).
 </LI>
<LI>  <tt>obj.SetThickness (double )</tt> -  Set the distance between clipping planes.  This method adjusts the 
 far clipping plane to be set a distance 'thickness' beyond the
 near clipping plane.
 </LI>
<LI>  <tt>double = obj.GetThickness ()</tt> -  Set the distance between clipping planes.  This method adjusts the 
 far clipping plane to be set a distance 'thickness' beyond the
 near clipping plane.
 </LI>
<LI>  <tt>obj.SetWindowCenter (double x, double y)</tt> -  Set/Get the center of the window in viewport coordinates.
 The viewport coordinate range is ([-1,+1],[-1,+1]).  This method
 is for if you have one window which consists of several viewports,
 or if you have several screens which you want to act together as
 one large screen.
 </LI>
<LI>  <tt>double = obj. GetWindowCenter ()</tt> -  Set/Get the center of the window in viewport coordinates.
 The viewport coordinate range is ([-1,+1],[-1,+1]).  This method
 is for if you have one window which consists of several viewports,
 or if you have several screens which you want to act together as
 one large screen.
 </LI>
<LI>  <tt>obj.SetObliqueAngles (double alpha, double beta)</tt> -  Get/Set the oblique viewing angles.  The first angle, alpha, is the
 angle (measured from the horizontal) that rays along the direction
 of projection will follow once projected onto the 2D screen.  
 The second angle, beta, is the angle between the view plane and
 the direction of projection.  This creates a shear transform
 x' = x + dz*cos(alpha)/tan(beta), y' = dz*sin(alpha)/tan(beta)
 where dz is the distance of the point from the focal plane.
 The angles are (45,90) by default.  Oblique projections 
 commonly use (30,63.435).
 </LI>
<LI>  <tt>obj.ApplyTransform (vtkTransform t)</tt> -  Apply a transform to the camera.  The camera position, focal-point,
 and view-up are re-calculated using the transform's matrix to
 multiply the old points by the new transform.
 </LI>
<LI>  <tt>double = obj. GetViewPlaneNormal ()</tt> -  Get the ViewPlaneNormal.  This vector will point opposite to
 the direction of projection, unless you have created an sheared output
 view using SetViewShear/SetObliqueAngles.
 </LI>
<LI>  <tt>obj.SetViewShear (double dxdz, double dydz, double center)</tt> -  Set/get the shear transform of the viewing frustum.  Parameters are
 dx/dz, dy/dz, and center.  center is a factor that describes where
 to shear around. The distance dshear from the camera where
 no shear occurs is given by (dshear = center * FocalDistance).
 </LI>
<LI>  <tt>obj.SetViewShear (double d[3])</tt> -  Set/get the shear transform of the viewing frustum.  Parameters are
 dx/dz, dy/dz, and center.  center is a factor that describes where
 to shear around. The distance dshear from the camera where
 no shear occurs is given by (dshear = center * FocalDistance).
 </LI>
<LI>  <tt>double = obj. GetViewShear ()</tt> -  Set/get the shear transform of the viewing frustum.  Parameters are
 dx/dz, dy/dz, and center.  center is a factor that describes where
 to shear around. The distance dshear from the camera where
 no shear occurs is given by (dshear = center * FocalDistance).
 </LI>
<LI>  <tt>obj.SetEyeAngle (double )</tt> -  Set/Get the separation between eyes (in degrees). This is used
 when generating stereo images.
 </LI>
<LI>  <tt>double = obj.GetEyeAngle ()</tt> -  Set/Get the separation between eyes (in degrees). This is used
 when generating stereo images.
 </LI>
<LI>  <tt>obj.SetFocalDisk (double )</tt> -  Set the size of the cameras lens in world coordinates. This is only
 used when the renderer is doing focal depth rendering. When that is
 being done the size of the focal disk will effect how significant the
 depth effects will be.
 </LI>
<LI>  <tt>double = obj.GetFocalDisk ()</tt> -  Set the size of the cameras lens in world coordinates. This is only
 used when the renderer is doing focal depth rendering. When that is
 being done the size of the focal disk will effect how significant the
 depth effects will be.
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetViewTransformMatrix ()</tt> -  Return the matrix of the view transform.
 The ViewTransform depends on only three ivars:  the Position, the
 FocalPoint, and the ViewUp vector.  All the other methods are there
 simply for the sake of the users' convenience.
 </LI>
<LI>  <tt>vtkTransform = obj.GetViewTransformObject ()</tt> -  Return the projection transform matrix, which converts from camera
 coordinates to viewport coordinates.  The 'aspect' is the
 width/height for the viewport, and the nearz and farz are the
 Z-buffer values that map to the near and far clipping planes.
 The viewport coordinates of a point located inside the frustum are in the
 range ([-1,+1],[-1,+1],[nearz,farz]).
 WARNING: the name of the method is wrong, it should be
 GetProjectionTransformMatrix() (it is used also in parallel projection)
 @deprecated Replaced by GetProjectionTransformMatrix() as of VTK 5.4.
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetPerspectiveTransformMatrix (double aspect, double nearz, double farz)</tt> -  Return the projection transform matrix, which converts from camera
 coordinates to viewport coordinates.  The 'aspect' is the
 width/height for the viewport, and the nearz and farz are the
 Z-buffer values that map to the near and far clipping planes.
 The viewport coordinates of a point located inside the frustum are in the
 range ([-1,+1],[-1,+1],[nearz,farz]).
 WARNING: the name of the method is wrong, it should be
 GetProjectionTransformMatrix() (it is used also in parallel projection)
 @deprecated Replaced by GetProjectionTransformMatrix() as of VTK 5.4.
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetProjectionTransformMatrix (double aspect, double nearz, double farz)</tt> -  Return the projection transform matrix, which converts from camera
 coordinates to viewport coordinates.  The 'aspect' is the
 width/height for the viewport, and the nearz and farz are the
 Z-buffer values that map to the near and far clipping planes.
 The viewport coordinates of a point located inside the frustum are in the
 range ([-1,+1],[-1,+1],[nearz,farz]).
 </LI>
<LI>  <tt>vtkPerspectiveTransform = obj.GetProjectionTransformObject (double aspect, double nearz, double farz)</tt> -  Return the projection transform matrix, which converts from camera
 coordinates to viewport coordinates.  The 'aspect' is the
 width/height for the viewport, and the nearz and farz are the
 Z-buffer values that map to the near and far clipping planes.
 The viewport coordinates of a point located inside the frustum are in the
 range ([-1,+1],[-1,+1],[nearz,farz]).
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetCompositePerspectiveTransformMatrix (double aspect, double nearz, double farz)</tt> -  Return the concatenation of the ViewTransform and the
 ProjectionTransform.  This transform will convert world
 coordinates to viewport coordinates.  The 'aspect' is the
 width/height for the viewport, and the nearz and farz are the
 Z-buffer values that map to the near and far clipping planes.
 The viewport coordinates of a point located inside the frustum are in the
 range ([-1,+1],[-1,+1],[nearz,farz]).
 WARNING: the name of the method is wrong, it should be
 GetCompositeProjectionTransformMatrix() (it is used also in parallel
 projection)
 @deprecated Replaced by GetCompositeProjectionTransformMatrix() as of
 VTK 5.4.
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetCompositeProjectionTransformMatrix (double aspect, double nearz, double farz)</tt> -  Return the concatenation of the ViewTransform and the
 ProjectionTransform.  This transform will convert world
 coordinates to viewport coordinates.  The 'aspect' is the
 width/height for the viewport, and the nearz and farz are the
 Z-buffer values that map to the near and far clipping planes.
 The viewport coordinates of a point located inside the frustum are in the
 range ([-1,+1],[-1,+1],[nearz,farz]).
 </LI>
<LI>  <tt>obj.SetUserViewTransform (vtkHomogeneousTransform transform)</tt> -  In addition to the instance variables such as position and orientation,
 you can add an additional transformation for your own use.  This
 transformation is concatenated to the camera's ViewTransform
 </LI>
<LI>  <tt>vtkHomogeneousTransform = obj.GetUserViewTransform ()</tt> -  In addition to the instance variables such as position and orientation,
 you can add an additional transformation for your own use.  This
 transformation is concatenated to the camera's ViewTransform
 </LI>
<LI>  <tt>obj.SetUserTransform (vtkHomogeneousTransform transform)</tt> -  In addition to the instance variables such as position and orientation,
 you can add an additional transformation for your own use.  This
 transformation is concatenated to the camera's ProjectionTransform
 </LI>
<LI>  <tt>vtkHomogeneousTransform = obj.GetUserTransform ()</tt> -  In addition to the instance variables such as position and orientation,
 you can add an additional transformation for your own use.  This
 transformation is concatenated to the camera's ProjectionTransform
 </LI>
<LI>  <tt>obj.Render (vtkRenderer )</tt> -  Return the MTime that concerns recomputing the view rays of the camera.
 </LI>
<LI>  <tt>long = obj.GetViewingRaysMTime ()</tt> -  Return the MTime that concerns recomputing the view rays of the camera.
 </LI>
<LI>  <tt>obj.ViewingRaysModified ()</tt> -  Mark that something has changed which requires the view rays
 to be recomputed.
 </LI>
<LI>  <tt>obj.GetFrustumPlanes (double aspect, double planes[24])</tt> -  Get the plane equations that bound the view frustum.
 The plane normals point inward. The planes array contains six
 plane equations of the form (Ax+By+Cz+D=0), the first four
 values are (A,B,C,D) which repeats for each of the planes.
 The planes are given in the following order: -x,+x,-y,+y,-z,+z.
 Warning: it means left,right,bottom,top,far,near (NOT near,far)
 The aspect of the viewport is needed to correctly compute the planes
 </LI>
<LI>  <tt>double = obj.GetOrientation ()</tt> -  Get the orientation of the camera.
 </LI>
<LI>  <tt>double = obj.GetOrientationWXYZ ()</tt> -  Get the orientation of the camera.
 </LI>
<LI>  <tt>obj.SetViewPlaneNormal (double x, double y, double z)</tt> -  @deprecated The view plane normal is automatically set from the
 DirectionOfProjection according to the ViewShear.
 </LI>
<LI>  <tt>obj.SetViewPlaneNormal (double a[3])</tt> -  @deprecated The view plane normal is automatically set from the
 DirectionOfProjection according to the ViewShear.
 </LI>
<LI>  <tt>obj.ComputeViewPlaneNormal ()</tt> -  This method is called automatically whenever necessary, it
 should never be used outside of vtkCamera.cxx.
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetCameraLightTransformMatrix ()</tt> -  Returns a transformation matrix for a coordinate frame attached to
 the camera, where the camera is located at (0, 0, 1) looking at the
 focal point at (0, 0, 0), with up being (0, 1, 0).
 </LI>
<LI>  <tt>obj.UpdateViewport (vtkRenderer )</tt> -  Set the Left Eye setting
 </LI>
<LI>  <tt>obj.SetLeftEye (int )</tt> -  Set the Left Eye setting
 </LI>
<LI>  <tt>int = obj.GetLeftEye ()</tt> -  Set the Left Eye setting
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkCamera source)</tt> -  Copy the properties of `source' into `this'.
 Copy pointers of matrices.
 \pre source_exists!=0
 \pre not_this: source!=this
 </LI>
<LI>  <tt>obj.DeepCopy (vtkCamera source)</tt> -  Copy the properties of `source' into `this'.
 Copy the contents of the matrices.
 \pre source_exists!=0
 \pre not_this: source!=this
 </LI>
</UL>
*/
