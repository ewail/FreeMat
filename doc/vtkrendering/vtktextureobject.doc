/*!
\page vtkrendering_vtktextureobject vtkTextureObject

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkTextureObject represents an OpenGL texture object. It provides API to
 create textures using data already loaded into pixel buffer objects. It can
 also be used to create textures without uploading any data.

To create an instance of class vtkTextureObject, simply
invoke its constructor as follows
\verbatim
  obj = vtkTextureObject
\endverbatim
\section Methods
The class vtkTextureObject has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkTextureObject class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkTextureObject = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkTextureObject = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetContext (vtkRenderWindow )</tt> -  Get/Set the context. This does not increase the reference count of the 
 context to avoid reference loops.
 SetContext() may raise an error is the OpenGL context does not support the
 required OpenGL extensions.
 </LI>
<LI>  <tt>vtkRenderWindow = obj.GetContext ()</tt> -  Get/Set the context. This does not increase the reference count of the 
 context to avoid reference loops.
 SetContext() may raise an error is the OpenGL context does not support the
 required OpenGL extensions.
 </LI>
<LI>  <tt>int = obj.GetWidth ()</tt> -  Get the texture dimensions.
 These are the properties of the OpenGL texture this instance represents.
 </LI>
<LI>  <tt>int = obj.GetHeight ()</tt> -  Get the texture dimensions.
 These are the properties of the OpenGL texture this instance represents.
 </LI>
<LI>  <tt>int = obj.GetDepth ()</tt> -  Get the texture dimensions.
 These are the properties of the OpenGL texture this instance represents.
 </LI>
<LI>  <tt>int = obj.GetComponents ()</tt> -  Get the texture dimensions.
 These are the properties of the OpenGL texture this instance represents.
 </LI>
<LI>  <tt>int = obj.GetNumberOfDimensions ()</tt>
 </LI>
<LI>  <tt>int = obj.GetTarget ()</tt> -  Returns OpenGL texture target to which the texture is/can be bound.
 </LI>
<LI>  <tt>int = obj.GetHandle ()</tt> -  Returns the OpenGL handle.
 </LI>
<LI>  <tt>obj.Bind ()</tt> -  Activate the texture. The texture must have been created using Create().
 RenderWindow must be set before calling this. 
 </LI>
<LI>  <tt>obj.UnBind ()</tt> -  Activate the texture. The texture must have been created using Create().
 RenderWindow must be set before calling this. 
 </LI>
<LI>  <tt>bool = obj.IsBound ()</tt> -  Tells if the texture object is bound to the active texture image unit.
 (a texture object can be bound to multiple texture image unit).
 </LI>
<LI>  <tt>obj.SendParameters ()</tt> -  Send all the texture object parameters to the hardware if not done yet.
 \pre is_bound: IsBound()
 </LI>
<LI>  <tt>bool = obj.Create1D (int numComps, vtkPixelBufferObject pbo, bool shaderSupportsTextureInt)</tt> -  Create a 1D texture using the PBO.
 Eventually we may start supporting creating a texture from subset of data
 in the PBO, but for simplicity we'll begin with entire PBO data.
 numComps must be in [1-4].
 shaderSupportsTextureInt is true if the shader has an alternate
 implementation supporting sampler with integer values.
 Even if the card supports texture int, it does not mean that
 the implementor of the shader made a version that supports texture int.
 </LI>
<LI>  <tt>bool = obj.Create2D (int width, int height, int numComps, vtkPixelBufferObject pbo, bool shaderSupportsTextureInt)</tt> -  Create a 2D texture using the PBO.
 Eventually we may start supporting creating a texture from subset of data
 in the PBO, but for simplicity we'll begin with entire PBO data.
 numComps must be in [1-4].
 </LI>
<LI>  <tt>bool = obj.CreateDepth (int width, int height, int internalFormat, vtkPixelBufferObject pbo)</tt> -  Create a 2D depth texture using a PBO.
 \pre: valid_internalFormat: internalFormat>=0 && internalFormat<NumberOfDepthFormats
 </LI>
<LI>  <tt>bool = obj.AllocateDepth (int width, int height, int internalFormat)</tt> -  Create a 2D depth texture but does not initialize its values.
 </LI>
<LI>  <tt>bool = obj.Allocate1D (int width, int numComps, int vtkType)</tt> -  Create a 1D color texture but does not initialize its values.
 Internal format is deduced from numComps and vtkType.
 </LI>
<LI>  <tt>bool = obj.Allocate2D (int width, int height, int numComps, int vtkType)</tt> -  Create a 2D color texture but does not initialize its values.
 Internal format is deduced from numComps and vtkType.
 </LI>
<LI>  <tt>bool = obj.Allocate3D (int width, int height, int depth, int numComps, int vtkType)</tt> -  Create a 3D color texture but does not initialize its values.
 Internal format is deduced from numComps and vtkType.
 </LI>
<LI>  <tt>bool = obj.Create3D (int width, int height, int depth, int numComps, vtkPixelBufferObject pbo, bool shaderSupportsTextureInt)</tt> -  Create a 3D texture using the PBO.
 Eventually we may start supporting creating a texture from subset of data
 in the PBO, but for simplicity we'll begin with entire PBO data.
 numComps must be in [1-4].
 </LI>
<LI>  <tt>bool = obj.Create2D (int width, int height, int numComps, int vtktype, bool shaderSupportsTextureInt)</tt> -  Create texture without uploading any data.
 To create a DEPTH_COMPONENT texture, vtktype must be set to VTK_VOID and
 numComps must be 1.
 </LI>
<LI>  <tt>bool = obj.Create3D (int width, int height, int depth, int numComps, int vtktype, bool shaderSupportsTextureInt)</tt> -  Create texture without uploading any data.
 To create a DEPTH_COMPONENT texture, vtktype must be set to VTK_VOID and
 numComps must be 1.
 </LI>
<LI>  <tt>vtkPixelBufferObject = obj.Download ()</tt> -  This is used to download raw data from the texture into a pixel bufer. The
 pixel buffer API can then be used to download the pixel buffer data to CPU
 arrays. The caller takes on the responsibility of deleting the returns
 vtkPixelBufferObject once it done with it.
 </LI>
<LI>  <tt>int = obj.GetDataType ()</tt> -  Get the data type for the texture as a vtk type int i.e. VTK_INT etc.
 </LI>
<LI>  <tt>int = obj.GetInternalFormat (int vtktype, int numComps, bool shaderSupportsTextureInt)</tt>
 </LI>
<LI>  <tt>int = obj.GetFormat (int vtktype, int numComps, bool shaderSupportsTextureInt)</tt>
 </LI>
<LI>  <tt>int = obj.GetWrapS ()</tt> -  Wrap mode for the first texture coordinate "s"
 Valid values are:
 - Clamp
 - ClampToEdge
 - Repeat
 - ClampToBorder
 - MirroredRepeat
 Initial value is Repeat (as in OpenGL spec)
 </LI>
<LI>  <tt>obj.SetWrapS (int )</tt> -  Wrap mode for the first texture coordinate "s"
 Valid values are:
 - Clamp
 - ClampToEdge
 - Repeat
 - ClampToBorder
 - MirroredRepeat
 Initial value is Repeat (as in OpenGL spec)
 </LI>
<LI>  <tt>int = obj.GetWrapT ()</tt> -  Wrap mode for the first texture coordinate "t"
 Valid values are:
 - Clamp
 - ClampToEdge
 - Repeat
 - ClampToBorder
 - MirroredRepeat
 Initial value is Repeat (as in OpenGL spec)
 </LI>
<LI>  <tt>obj.SetWrapT (int )</tt> -  Wrap mode for the first texture coordinate "t"
 Valid values are:
 - Clamp
 - ClampToEdge
 - Repeat
 - ClampToBorder
 - MirroredRepeat
 Initial value is Repeat (as in OpenGL spec)
 </LI>
<LI>  <tt>int = obj.GetWrapR ()</tt> -  Wrap mode for the first texture coordinate "r"
 Valid values are:
 - Clamp
 - ClampToEdge
 - Repeat
 - ClampToBorder
 - MirroredRepeat
 Initial value is Repeat (as in OpenGL spec)
 </LI>
<LI>  <tt>obj.SetWrapR (int )</tt> -  Wrap mode for the first texture coordinate "r"
 Valid values are:
 - Clamp
 - ClampToEdge
 - Repeat
 - ClampToBorder
 - MirroredRepeat
 Initial value is Repeat (as in OpenGL spec)
 </LI>
<LI>  <tt>int = obj.GetMinificationFilter ()</tt> -  Minification filter mode.
 Valid values are:
 - Nearest
 - Linear
 - NearestMipmapNearest
 - NearestMipmapLinear
 - LinearMipmapNearest
 - LinearMipmapLinear
 Initial value is Nearest (note initial value in OpenGL spec
 is NearestMipMapLinear but this is error-prone because it makes the
 texture object incomplete. ).
 </LI>
<LI>  <tt>obj.SetMinificationFilter (int )</tt> -  Minification filter mode.
 Valid values are:
 - Nearest
 - Linear
 - NearestMipmapNearest
 - NearestMipmapLinear
 - LinearMipmapNearest
 - LinearMipmapLinear
 Initial value is Nearest (note initial value in OpenGL spec
 is NearestMipMapLinear but this is error-prone because it makes the
 texture object incomplete. ).
 </LI>
<LI>  <tt>bool = obj.GetLinearMagnification ()</tt> -  Tells if the magnification mode is linear (true) or nearest (false).
 Initial value is false (initial value in OpenGL spec is true).
 </LI>
<LI>  <tt>obj.SetLinearMagnification (bool )</tt> -  Tells if the magnification mode is linear (true) or nearest (false).
 Initial value is false (initial value in OpenGL spec is true).
 </LI>
<LI>  <tt>obj.SetBorderColor (float , float , float , float )</tt> -  Border Color (RGBA). Each component is in [0.0f,1.0f].
 Initial value is (0.0f,0.0f,0.0f,0.0f), as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetBorderColor (float  a[4])</tt> -  Border Color (RGBA). Each component is in [0.0f,1.0f].
 Initial value is (0.0f,0.0f,0.0f,0.0f), as in OpenGL spec.
 </LI>
<LI>  <tt>float = obj. GetBorderColor ()</tt> -  Border Color (RGBA). Each component is in [0.0f,1.0f].
 Initial value is (0.0f,0.0f,0.0f,0.0f), as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetPriority (float )</tt> -  Priority of the texture object to be resident on the card for higher
 performance in the range [0.0f,1.0f].
 Initial value is 1.0f, as in OpenGL spec.
 </LI>
<LI>  <tt>float = obj.GetPriority ()</tt> -  Priority of the texture object to be resident on the card for higher
 performance in the range [0.0f,1.0f].
 Initial value is 1.0f, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetMinLOD (float )</tt> -  Lower-clamp the computed LOD against this value. Any float value is valid.
 Initial value is -1000.0f, as in OpenGL spec.
 </LI>
<LI>  <tt>float = obj.GetMinLOD ()</tt> -  Lower-clamp the computed LOD against this value. Any float value is valid.
 Initial value is -1000.0f, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetMaxLOD (float )</tt> -  Upper-clamp the computed LOD against this value. Any float value is valid.
 Initial value is 1000.0f, as in OpenGL spec.
 </LI>
<LI>  <tt>float = obj.GetMaxLOD ()</tt> -  Upper-clamp the computed LOD against this value. Any float value is valid.
 Initial value is 1000.0f, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetBaseLevel (int )</tt> -  Level of detail of the first texture image. A texture object is a list of
 texture images. It is a non-negative integer value.
 Initial value is 0, as in OpenGL spec.
 </LI>
<LI>  <tt>int = obj.GetBaseLevel ()</tt> -  Level of detail of the first texture image. A texture object is a list of
 texture images. It is a non-negative integer value.
 Initial value is 0, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetMaxLevel (int )</tt> -  Level of detail of the first texture image. A texture object is a list of
 texture images. It is a non-negative integer value.
 Initial value is 1000, as in OpenGL spec.
 </LI>
<LI>  <tt>int = obj.GetMaxLevel ()</tt> -  Level of detail of the first texture image. A texture object is a list of
 texture images. It is a non-negative integer value.
 Initial value is 1000, as in OpenGL spec.
 </LI>
<LI>  <tt>bool = obj.GetDepthTextureCompare ()</tt> -  Tells if the output of a texture unit with a depth texture uses
 comparison or not.
 Comparison happens between D_t the depth texture value in the range [0,1]
 and with R the interpolated third texture coordinate clamped to range
 [0,1]. The result of the comparison is noted `r'. If this flag is false,
 r=D_t.
 Initial value is false, as in OpenGL spec.
 Ignored if the texture object is not a depth texture.
 </LI>
<LI>  <tt>obj.SetDepthTextureCompare (bool )</tt> -  Tells if the output of a texture unit with a depth texture uses
 comparison or not.
 Comparison happens between D_t the depth texture value in the range [0,1]
 and with R the interpolated third texture coordinate clamped to range
 [0,1]. The result of the comparison is noted `r'. If this flag is false,
 r=D_t.
 Initial value is false, as in OpenGL spec.
 Ignored if the texture object is not a depth texture.
 </LI>
<LI>  <tt>int = obj.GetDepthTextureCompareFunction ()</tt> -  In case DepthTextureCompare is true, specify the comparison function in
 use. The result of the comparison is noted `r'.
 Valid values are:
 - Value
 - Lequal: r=R<=Dt ? 1.0 : 0.0
 - Gequal: r=R>=Dt ? 1.0 : 0.0
 - Less: r=R<D_t ? 1.0 : 0.0
 - Greater: r=R>Dt ? 1.0 : 0.0
 - Equal: r=R==Dt ? 1.0 : 0.0
 - NotEqual: r=R!=Dt ? 1.0 : 0.0
 - AlwaysTrue: r=1.0
 - Never: r=0.0
 If the magnification of minification factor are not nearest, percentage
 closer filtering (PCF) is used: R is compared to several D_t and r is
 the average of the comparisons (it is NOT the average of D_t compared
 once to R).
 Initial value is Lequal, as in OpenGL spec.
 Ignored if the texture object is not a depth texture.
 </LI>
<LI>  <tt>obj.SetDepthTextureCompareFunction (int )</tt> -  In case DepthTextureCompare is true, specify the comparison function in
 use. The result of the comparison is noted `r'.
 Valid values are:
 - Value
 - Lequal: r=R<=Dt ? 1.0 : 0.0
 - Gequal: r=R>=Dt ? 1.0 : 0.0
 - Less: r=R<D_t ? 1.0 : 0.0
 - Greater: r=R>Dt ? 1.0 : 0.0
 - Equal: r=R==Dt ? 1.0 : 0.0
 - NotEqual: r=R!=Dt ? 1.0 : 0.0
 - AlwaysTrue: r=1.0
 - Never: r=0.0
 If the magnification of minification factor are not nearest, percentage
 closer filtering (PCF) is used: R is compared to several D_t and r is
 the average of the comparisons (it is NOT the average of D_t compared
 once to R).
 Initial value is Lequal, as in OpenGL spec.
 Ignored if the texture object is not a depth texture.
 </LI>
<LI>  <tt>int = obj.GetDepthTextureMode ()</tt> -  Defines the mapping from depth component `r' to RGBA components.
 Ignored if the texture object is not a depth texture.
 Valid modes are:
 - Luminance: (R,G,B,A)=(r,r,r,1)
 - Intensity: (R,G,B,A)=(r,r,r,r)
 - Alpha: (R.G.B.A)=(0,0,0,r)
 Initial value is Luminance, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetDepthTextureMode (int )</tt> -  Defines the mapping from depth component `r' to RGBA components.
 Ignored if the texture object is not a depth texture.
 Valid modes are:
 - Luminance: (R,G,B,A)=(r,r,r,1)
 - Intensity: (R,G,B,A)=(r,r,r,r)
 - Alpha: (R.G.B.A)=(0,0,0,r)
 Initial value is Luminance, as in OpenGL spec.
 </LI>
<LI>  <tt>bool = obj.GetGenerateMipmap ()</tt> -  Tells the hardware to generate mipmap textures from the first texture
 image at BaseLevel.
 Initial value is false, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.SetGenerateMipmap (bool )</tt> -  Tells the hardware to generate mipmap textures from the first texture
 image at BaseLevel.
 Initial value is false, as in OpenGL spec.
 </LI>
<LI>  <tt>obj.CopyToFrameBuffer (int srcXmin, int srcYmin, int srcXmax, int srcYmax, int dstXmin, int dstYmin, int width, int height)</tt> -  Copy a sub-part of the texture (src) in the current framebuffer
 at location (dstXmin,dstYmin). (dstXmin,dstYmin) is the location of the
 lower left corner of the rectangle. width and height are the dimensions
 of the framebuffer.
 - texture coordinates are sent on texture coordinate processing unit 0.
 - if the fixed-pipeline fragment shader is used, texturing has to be set
 on texture image unit 0 and the texture object has to be bound on texture
 image unit 0.
 - if a customized fragment shader is used, you are free to pick the
 texture image unit you want. You can even have multiple texture objects
 attached on multiple texture image units. In this case, you call this
 method only on one of them.
 \pre positive_srcXmin: srcXmin>=0
 \pre max_srcXmax: srcXmax<this->GetWidth()
 \pre increasing_x: srcXmin<=srcXmax
 \pre positive_srcYmin: srcYmin>=0
 \pre max_srcYmax: srcYmax<this->GetHeight()
 \pre increasing_y: srcYmin<=srcYmax
 \pre positive_dstXmin: dstXmin>=0
 \pre positive_dstYmin: dstYmin>=0
 \pre positive_width: width>0
 \pre positive_height: height>0
 \pre x_fit: destXmin+(srcXmax-srcXmin)<width
 \pre y_fit: destYmin+(srcYmax-srcYmin)<height
 </LI>
<LI>  <tt>obj.CopyFromFrameBuffer (int srcXmin, int srcYmin, int dstXmin, int dstYmin, int width, int height)</tt> -  Copy a sub-part of a logical buffer of the framebuffer (color or depth)
 to the texture object. src is the framebuffer, dst is the texture.
 (srcXmin,srcYmin) is the location of the lower left corner of the
 rectangle in the framebuffer. (dstXmin,dstYmin) is the location of the
 lower left corner of the rectangle in the texture. width and height
 specifies the size of the rectangle in pixels.
 If the logical buffer is a color buffer, it has to be selected first with
 glReadBuffer().
 \pre is2D: GetNumberOfDimensions()==2
 </LI>
</UL>
*/
