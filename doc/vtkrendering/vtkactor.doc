/*!
\page vtkrendering_vtkactor vtkActor

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 
 vtkActor is used to represent an entity in a rendering scene.  It inherits
 functions related to the actors position, and orientation from
 vtkProp. The actor also has scaling and maintains a reference to the
 defining geometry (i.e., the mapper), rendering properties, and possibly a
 texture map. vtkActor combines these instance variables into one 4x4
 transformation matrix as follows: [x y z 1] = [x y z 1] Translate(-origin)
 Scale(scale) Rot(y) Rot(x) Rot (z) Trans(origin) Trans(position)

To create an instance of class vtkActor, simply
invoke its constructor as follows
\verbatim
  obj = vtkActor
\endverbatim
\section Methods
The class vtkActor has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkActor class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkActor = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkActor = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.GetActors (vtkPropCollection )</tt> -  For some exporters and other other operations we must be
 able to collect all the actors or volumes. These methods
 are used in that process.
 </LI>
<LI>  <tt>int = obj.RenderOpaqueGeometry (vtkViewport viewport)</tt> -  Support the standard render methods.
 </LI>
<LI>  <tt>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport viewport)</tt> -  Support the standard render methods.
 </LI>
<LI>  <tt>int = obj.HasTranslucentPolygonalGeometry ()</tt> -  Does this prop have some translucent polygonal geometry?
 </LI>
<LI>  <tt>obj.Render (vtkRenderer , vtkMapper )</tt> -  Shallow copy of an actor. Overloads the virtual vtkProp method.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkProp prop)</tt> -  Shallow copy of an actor. Overloads the virtual vtkProp method.
 </LI>
<LI>  <tt>obj.ReleaseGraphicsResources (vtkWindow )</tt> -  Release any graphics resources that are being consumed by this actor.
 The parameter window could be used to determine which graphic
 resources to release.
 </LI>
<LI>  <tt>obj.SetProperty (vtkProperty lut)</tt> -  Set/Get the property object that controls this actors surface
 properties.  This should be an instance of a vtkProperty object.  Every
 actor must have a property associated with it.  If one isn't specified,
 then one will be generated automatically. Multiple actors can share one
 property object.
 </LI>
<LI>  <tt>vtkProperty = obj.GetProperty ()</tt> -  Set/Get the property object that controls this actors surface
 properties.  This should be an instance of a vtkProperty object.  Every
 actor must have a property associated with it.  If one isn't specified,
 then one will be generated automatically. Multiple actors can share one
 property object.
 </LI>
<LI>  <tt>vtkProperty = obj.MakeProperty ()</tt> -  Create a new property suitable for use with this type of Actor.
 For example, a vtkMesaActor should create a vtkMesaProperty 
 in this function.   The default is to just call vtkProperty::New.
 </LI>
<LI>  <tt>obj.SetBackfaceProperty (vtkProperty lut)</tt> -  Set/Get the property object that controls this actors backface surface
 properties.  This should be an instance of a vtkProperty object. If one
 isn't specified, then the front face properties will be used.  Multiple
 actors can share one property object.
 </LI>
<LI>  <tt>vtkProperty = obj.GetBackfaceProperty ()</tt> -  Set/Get the property object that controls this actors backface surface
 properties.  This should be an instance of a vtkProperty object. If one
 isn't specified, then the front face properties will be used.  Multiple
 actors can share one property object.
 </LI>
<LI>  <tt>obj.SetTexture (vtkTexture )</tt> -  Set/Get the texture object to control rendering texture maps.  This will
 be a vtkTexture object. An actor does not need to have an associated
 texture map and multiple actors can share one texture.
 </LI>
<LI>  <tt>vtkTexture = obj.GetTexture ()</tt> -  Set/Get the texture object to control rendering texture maps.  This will
 be a vtkTexture object. An actor does not need to have an associated
 texture map and multiple actors can share one texture.
 </LI>
<LI>  <tt>obj.SetMapper (vtkMapper )</tt> -  This is the method that is used to connect an actor to the end of a
 visualization pipeline, i.e. the mapper. This should be a subclass
 of vtkMapper. Typically vtkPolyDataMapper and vtkDataSetMapper will
 be used.
 </LI>
<LI>  <tt>vtkMapper = obj.GetMapper ()</tt> -  Returns the Mapper that this actor is getting its data from.
 </LI>
<LI>  <tt>obj.GetBounds (double bounds[6])</tt> -  Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The
 method GetBounds(double bounds[6]) is available from the superclass.)
 </LI>
<LI>  <tt>double = obj.GetBounds ()</tt> -  Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The
 method GetBounds(double bounds[6]) is available from the superclass.)
 </LI>
<LI>  <tt>obj.ApplyProperties ()</tt> -  Get the actors mtime plus consider its properties and texture if set.
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Get the actors mtime plus consider its properties and texture if set.
 </LI>
<LI>  <tt>long = obj.GetRedrawMTime ()</tt> -  Return the mtime of anything that would cause the rendered image to 
 appear differently. Usually this involves checking the mtime of the 
 prop plus anything else it depends on such as properties, textures
 etc.
 </LI>
<LI>  <tt>obj.InitPartTraversal ()</tt> -  The following methods are for compatibility. The methods will be deprecated
 in the near future. Use vtkProp::GetNextPath() (and related functionality)
 to get the parts in an assembly (or more correctly, the paths in the
 assembly).
 </LI>
<LI>  <tt>vtkActor = obj.GetNextPart ()</tt> -  The following methods are for compatibility. The methods will be deprecated
 in the near future. Use vtkProp::GetNextPath() (and related functionality)
 to get the parts in an assembly (or more correctly, the paths in the
 assembly).
 </LI>
<LI>  <tt>int = obj.GetNumberOfParts ()</tt> -  The following methods are for compatibility. The methods will be deprecated
 in the near future. Use vtkProp::GetNextPath() (and related functionality)
 to get the parts in an assembly (or more correctly, the paths in the
 assembly).
 </LI>
<LI>  <tt>bool = obj.GetSupportsSelection ()</tt> -  WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
 DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS
 Used by vtkHardwareSelector to determine if the prop supports hardware
 selection.
 </LI>
</UL>
*/
