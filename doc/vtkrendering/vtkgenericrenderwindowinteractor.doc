/*!
\page vtkrendering_vtkgenericrenderwindowinteractor vtkGenericRenderWindowInteractor

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkGenericRenderWindowInteractor provides a way to translate native
 mouse and keyboard events into vtk Events.   By calling the methods on
 this class, vtk events will be invoked.   This will allow scripting
 languages to use vtkInteractorStyles and 3D widgets.

To create an instance of class vtkGenericRenderWindowInteractor, simply
invoke its constructor as follows
\verbatim
  obj = vtkGenericRenderWindowInteractor
\endverbatim
\section Methods
The class vtkGenericRenderWindowInteractor has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkGenericRenderWindowInteractor class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkGenericRenderWindowInteractor = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkGenericRenderWindowInteractor = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.MouseMoveEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.RightButtonPressEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.RightButtonReleaseEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.LeftButtonPressEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.LeftButtonReleaseEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.MiddleButtonPressEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.MiddleButtonReleaseEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.MouseWheelForwardEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.MouseWheelBackwardEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.ExposeEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.ConfigureEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.EnterEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.LeaveEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.TimerEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.KeyPressEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.KeyReleaseEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.CharEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.ExitEvent ()</tt> -  Fire various events. SetEventInformation should be called just prior
 to calling any of these methods. These methods will Invoke the
 corresponding vtk event.
 </LI>
<LI>  <tt>obj.SetTimerEventResetsTimer (int )</tt> -  Flag that indicates whether the TimerEvent method should call ResetTimer
 to simulate repeating timers with an endless stream of one shot timers.
 By default this flag is on and all repeating timers are implemented as a
 stream of sequential one shot timers. If the observer of
 CreateTimerEvent actually creates a "natively repeating" timer, setting
 this flag to off will prevent (perhaps many many) unnecessary calls to
 ResetTimer. Having the flag on by default means that "natively one
 shot" timers can be either one shot or repeating timers with no
 additional work. Also, "natively repeating" timers still work with the
 default setting, but with potentially many create and destroy calls.
 </LI>
<LI>  <tt>int = obj.GetTimerEventResetsTimer ()</tt> -  Flag that indicates whether the TimerEvent method should call ResetTimer
 to simulate repeating timers with an endless stream of one shot timers.
 By default this flag is on and all repeating timers are implemented as a
 stream of sequential one shot timers. If the observer of
 CreateTimerEvent actually creates a "natively repeating" timer, setting
 this flag to off will prevent (perhaps many many) unnecessary calls to
 ResetTimer. Having the flag on by default means that "natively one
 shot" timers can be either one shot or repeating timers with no
 additional work. Also, "natively repeating" timers still work with the
 default setting, but with potentially many create and destroy calls.
 </LI>
<LI>  <tt>obj.TimerEventResetsTimerOn ()</tt> -  Flag that indicates whether the TimerEvent method should call ResetTimer
 to simulate repeating timers with an endless stream of one shot timers.
 By default this flag is on and all repeating timers are implemented as a
 stream of sequential one shot timers. If the observer of
 CreateTimerEvent actually creates a "natively repeating" timer, setting
 this flag to off will prevent (perhaps many many) unnecessary calls to
 ResetTimer. Having the flag on by default means that "natively one
 shot" timers can be either one shot or repeating timers with no
 additional work. Also, "natively repeating" timers still work with the
 default setting, but with potentially many create and destroy calls.
 </LI>
<LI>  <tt>obj.TimerEventResetsTimerOff ()</tt> -  Flag that indicates whether the TimerEvent method should call ResetTimer
 to simulate repeating timers with an endless stream of one shot timers.
 By default this flag is on and all repeating timers are implemented as a
 stream of sequential one shot timers. If the observer of
 CreateTimerEvent actually creates a "natively repeating" timer, setting
 this flag to off will prevent (perhaps many many) unnecessary calls to
 ResetTimer. Having the flag on by default means that "natively one
 shot" timers can be either one shot or repeating timers with no
 additional work. Also, "natively repeating" timers still work with the
 default setting, but with potentially many create and destroy calls.
 </LI>
</UL>
*/
