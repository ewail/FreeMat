/*!
\page vtkrendering_vtkshaderprogram vtkShaderProgram

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkShaderProgram is a superclass for managing Hardware Shaders
 defined in the XML Material file and interfacing VTK to those shaders.
 It's concrete descendants are responsible for installing vertex and
 fragment programs to the graphics hardware.

 .SECTION Shader Operations are shader library operations that are performed
 on individual shaders, that is, without consideration of the partner shader.

 .SECTION Program Operations are shader library operations that treat the 
 vertex and fragment shader as a single unit.

 .SECTION Design
 This class is a Strategy pattern for 'Program' operations, which treat
 vertex/fragment shader pairs as a single 'Program', as required by some
 shader libraries (GLSL). Typically, 'Shader' operations are delegated
 to instances of vtkShader (managed by descendants of this class)
 while 'Program' operations are handled by descendants of this class,
 vtkCgShaderProgram, vtkGLSLShaderProgram.


To create an instance of class vtkShaderProgram, simply
invoke its constructor as follows
\verbatim
  obj = vtkShaderProgram
\endverbatim
\section Methods
The class vtkShaderProgram has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkShaderProgram class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkShaderProgram = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkShaderProgram = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>vtkXMLMaterial = obj.GetMaterial ()</tt>
 </LI>
<LI>  <tt>obj.SetMaterial (vtkXMLMaterial )</tt>
 </LI>
<LI>  <tt>int = obj.AddShader (vtkShader shader)</tt>
 </LI>
<LI>  <tt>obj.RemoveShader (int index)</tt> -  Remove a shader at the given index.
 </LI>
<LI>  <tt>obj.RemoveShader (vtkShader shader)</tt> -  Removes the given shader.
 </LI>
<LI>  <tt>vtkCollectionIterator = obj.NewShaderIterator ()</tt> -  Returns a new iterator to iterate over the shaders.
 </LI>
<LI>  <tt>int = obj.GetNumberOfShaders ()</tt> -  Returns the number of shaders available in this
 shader program.
 </LI>
<LI>  <tt>obj.ReadMaterial ()</tt>
 </LI>
<LI>  <tt>obj.Render (vtkActor , vtkRenderer )</tt>
 </LI>
<LI>  <tt>obj.AddShaderVariable (string name, int numVars, int x)</tt>
 </LI>
<LI>  <tt>obj.AddShaderVariable (string name, int numVars, float x)</tt>
 </LI>
<LI>  <tt>obj.AddShaderVariable (string name, int numVars, double x)</tt>
 </LI>
<LI>  <tt>obj.PostRender (vtkActor , vtkRenderer )</tt> -  Called to unload the shaders after the actor has been rendered.
 </LI>
<LI>  <tt>obj.ReleaseGraphicsResources (vtkWindow )</tt> -  Release any graphics resources that are being consumed by this actor.
 The parameter window could be used to determine which graphic
 resources to release.
 </LI>
<LI>  <tt>vtkShaderDeviceAdapter = obj.GetShaderDeviceAdapter ()</tt> -  Get the vtkShaderDeviceAdapter which can be used to execute this
 shader program.
 </LI>
</UL>
*/
