/*!
\page vtkrendering_vtkinteractorstyle vtkInteractorStyle

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkInteractorStyle is a base class implementing the majority of motion
 control routines and defines an event driven interface to support
 vtkRenderWindowInteractor. vtkRenderWindowInteractor implements 
 platform dependent key/mouse routing and timer control, which forwards
 events in a neutral form to vtkInteractorStyle.

 vtkInteractorStyle implements the "joystick" style of interaction. That
 is, holding down the mouse keys generates a stream of events that cause
 continuous actions (e.g., rotate, translate, pan, zoom). (The class
 vtkInteractorStyleTrackball implements a grab and move style.) The event
 bindings for this class include the following:
 - Keypress j / Keypress t: toggle between joystick (position sensitive) and
 trackball (motion sensitive) styles. In joystick style, motion occurs
 continuously as long as a mouse button is pressed. In trackball style,
 motion occurs when the mouse button is pressed and the mouse pointer
 moves.
 - Keypress c / Keypress a: toggle between camera and actor modes. In
 camera mode, mouse events affect the camera position and focal point. In
 actor mode, mouse events affect the actor that is under the mouse pointer.
 - Button 1: rotate the camera around its focal point (if camera mode) or
 rotate the actor around its origin (if actor mode). The rotation is in the
 direction defined from the center of the renderer's viewport towards
 the mouse position. In joystick mode, the magnitude of the rotation is
 determined by the distance the mouse is from the center of the render
 window.
 - Button 2: pan the camera (if camera mode) or translate the actor (if
 actor mode). In joystick mode, the direction of pan or translation is
 from the center of the viewport towards the mouse position. In trackball
 mode, the direction of motion is the direction the mouse moves. (Note:
 with 2-button mice, pan is defined as \<Shift\>-Button 1.)
 - Button 3: zoom the camera (if camera mode) or scale the actor (if
 actor mode). Zoom in/increase scale if the mouse position is in the top
 half of the viewport; zoom out/decrease scale if the mouse position is in
 the bottom half. In joystick mode, the amount of zoom is controlled by the
 distance of the mouse pointer from the horizontal centerline of the
 window.
 - Keypress 3: toggle the render window into and out of stereo mode. By
 default, red-blue stereo pairs are created. Some systems support Crystal
 Eyes LCD stereo glasses; you have to invoke SetStereoTypeToCrystalEyes()
 on the rendering window.
 - Keypress e: exit the application.
 - Keypress f: fly to the picked point
 - Keypress p: perform a pick operation. The render window interactor has
 an internal instance of vtkCellPicker that it uses to pick. 
 - Keypress r: reset the camera view along the current view
 direction. Centers the actors and moves the camera so that all actors are
 visible.
 - Keypress s: modify the representation of all actors so that they are
 surfaces.  
 - Keypress u: invoke the user-defined function. Typically,
 this keypress will bring up an interactor that you can type commands in.
 Typing u calls UserCallBack() on the vtkRenderWindowInteractor, which
 invokes a vtkCommand::UserEvent. In other words, to define a user-defined
 callback, just add an observer to the vtkCommand::UserEvent on the
 vtkRenderWindowInteractor object. 
 - Keypress w: modify the representation of all actors so that they are
 wireframe.

 vtkInteractorStyle can be subclassed to provide new interaction styles and
 a facility to override any of the default mouse/key operations which
 currently handle trackball or joystick styles is provided. Note that this
 class will fire a variety of events that can be watched using an observer,
 such as LeftButtonPressEvent, LeftButtonReleaseEvent,
 MiddleButtonPressEvent, MiddleButtonReleaseEvent, RightButtonPressEvent,
 RightButtonReleaseEvent, EnterEvent, LeaveEvent, KeyPressEvent,
 KeyReleaseEvent, CharEvent, ExposeEvent, ConfigureEvent, TimerEvent,
 MouseMoveEvent,

To create an instance of class vtkInteractorStyle, simply
invoke its constructor as follows
\verbatim
  obj = vtkInteractorStyle
\endverbatim
\section Methods
The class vtkInteractorStyle has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkInteractorStyle class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkInteractorStyle = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkInteractorStyle = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetInteractor (vtkRenderWindowInteractor interactor)</tt> -  Set/Get the Interactor wrapper being controlled by this object.
 (Satisfy superclass API.)
 </LI>
<LI>  <tt>obj.SetEnabled (int )</tt> -  Turn on/off this interactor. Interactor styles operate a little
 bit differently than other types of interactor observers. When
 the SetInteractor() method is invoked, the automatically enable
 themselves. This is a legacy requirement, and convenient for the
 user.
 </LI>
<LI>  <tt>obj.SetAutoAdjustCameraClippingRange (int )</tt> -  If AutoAdjustCameraClippingRange is on, then before each render the
 camera clipping range will be adjusted to "fit" the whole scene. Clipping
 will still occur if objects in the scene are behind the camera or
 come very close. If AutoAdjustCameraClippingRange is off, no adjustment
 will be made per render, but the camera clipping range will still
 be reset when the camera is reset.
 </LI>
<LI>  <tt>int = obj.GetAutoAdjustCameraClippingRangeMinValue ()</tt> -  If AutoAdjustCameraClippingRange is on, then before each render the
 camera clipping range will be adjusted to "fit" the whole scene. Clipping
 will still occur if objects in the scene are behind the camera or
 come very close. If AutoAdjustCameraClippingRange is off, no adjustment
 will be made per render, but the camera clipping range will still
 be reset when the camera is reset.
 </LI>
<LI>  <tt>int = obj.GetAutoAdjustCameraClippingRangeMaxValue ()</tt> -  If AutoAdjustCameraClippingRange is on, then before each render the
 camera clipping range will be adjusted to "fit" the whole scene. Clipping
 will still occur if objects in the scene are behind the camera or
 come very close. If AutoAdjustCameraClippingRange is off, no adjustment
 will be made per render, but the camera clipping range will still
 be reset when the camera is reset.
 </LI>
<LI>  <tt>int = obj.GetAutoAdjustCameraClippingRange ()</tt> -  If AutoAdjustCameraClippingRange is on, then before each render the
 camera clipping range will be adjusted to "fit" the whole scene. Clipping
 will still occur if objects in the scene are behind the camera or
 come very close. If AutoAdjustCameraClippingRange is off, no adjustment
 will be made per render, but the camera clipping range will still
 be reset when the camera is reset.
 </LI>
<LI>  <tt>obj.AutoAdjustCameraClippingRangeOn ()</tt> -  If AutoAdjustCameraClippingRange is on, then before each render the
 camera clipping range will be adjusted to "fit" the whole scene. Clipping
 will still occur if objects in the scene are behind the camera or
 come very close. If AutoAdjustCameraClippingRange is off, no adjustment
 will be made per render, but the camera clipping range will still
 be reset when the camera is reset.
 </LI>
<LI>  <tt>obj.AutoAdjustCameraClippingRangeOff ()</tt> -  If AutoAdjustCameraClippingRange is on, then before each render the
 camera clipping range will be adjusted to "fit" the whole scene. Clipping
 will still occur if objects in the scene are behind the camera or
 come very close. If AutoAdjustCameraClippingRange is off, no adjustment
 will be made per render, but the camera clipping range will still
 be reset when the camera is reset.
 </LI>
<LI>  <tt>obj.FindPokedRenderer (int , int )</tt> -  When an event occurs, we must determine which Renderer the event
 occurred within, since one RenderWindow may contain multiple
 renderers. 
 </LI>
<LI>  <tt>int = obj.GetState ()</tt> -  Some useful information for interaction
 </LI>
<LI>  <tt>int = obj.GetUseTimers ()</tt> -  Set/Get timer hint
 </LI>
<LI>  <tt>obj.SetUseTimers (int )</tt> -  Set/Get timer hint
 </LI>
<LI>  <tt>obj.UseTimersOn ()</tt> -  Set/Get timer hint
 </LI>
<LI>  <tt>obj.UseTimersOff ()</tt> -  Set/Get timer hint
 </LI>
<LI>  <tt>obj.SetTimerDuration (long )</tt> -  If using timers, specify the default timer interval (in
 milliseconds). Care must be taken when adjusting the timer interval from
 the default value of 10 milliseconds--it may adversely affect the
 interactors.
 </LI>
<LI>  <tt>GetTimerDurationMinValue = obj.()</tt> -  If using timers, specify the default timer interval (in
 milliseconds). Care must be taken when adjusting the timer interval from
 the default value of 10 milliseconds--it may adversely affect the
 interactors.
 </LI>
<LI>  <tt>GetTimerDurationMaxValue = obj.()</tt> -  If using timers, specify the default timer interval (in
 milliseconds). Care must be taken when adjusting the timer interval from
 the default value of 10 milliseconds--it may adversely affect the
 interactors.
 </LI>
<LI>  <tt>long = obj.GetTimerDuration ()</tt> -  If using timers, specify the default timer interval (in
 milliseconds). Care must be taken when adjusting the timer interval from
 the default value of 10 milliseconds--it may adversely affect the
 interactors.
 </LI>
<LI>  <tt>obj.SetHandleObservers (int )</tt> -  Does ProcessEvents handle observers on this class or not
 </LI>
<LI>  <tt>int = obj.GetHandleObservers ()</tt> -  Does ProcessEvents handle observers on this class or not
 </LI>
<LI>  <tt>obj.HandleObserversOn ()</tt> -  Does ProcessEvents handle observers on this class or not
 </LI>
<LI>  <tt>obj.HandleObserversOff ()</tt> -  Does ProcessEvents handle observers on this class or not
 </LI>
<LI>  <tt>obj.OnMouseMove ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnLeftButtonDown ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnLeftButtonUp ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnMiddleButtonDown ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnMiddleButtonUp ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnRightButtonDown ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnRightButtonUp ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnMouseWheelForward ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnMouseWheelBackward ()</tt> -  Generic event bindings can be overridden in subclasses
 </LI>
<LI>  <tt>obj.OnChar ()</tt> -  OnChar is triggered when an ASCII key is pressed. Some basic key presses
 are handled here ('q' for Quit, 'p' for Pick, etc)
 </LI>
<LI>  <tt>obj.OnKeyDown ()</tt>
 </LI>
<LI>  <tt>obj.OnKeyUp ()</tt>
 </LI>
<LI>  <tt>obj.OnKeyPress ()</tt>
 </LI>
<LI>  <tt>obj.OnKeyRelease ()</tt>
 </LI>
<LI>  <tt>obj.OnExpose ()</tt> -  These are more esoteric events, but are useful in some cases.
 </LI>
<LI>  <tt>obj.OnConfigure ()</tt> -  These are more esoteric events, but are useful in some cases.
 </LI>
<LI>  <tt>obj.OnEnter ()</tt> -  These are more esoteric events, but are useful in some cases.
 </LI>
<LI>  <tt>obj.OnLeave ()</tt> -  These are more esoteric events, but are useful in some cases.
 </LI>
<LI>  <tt>obj.OnTimer ()</tt> -  OnTimer calls Rotate, Rotate etc which should be overridden by
 style subclasses.
 </LI>
<LI>  <tt>obj.Rotate ()</tt> -  These methods for the different interactions in different modes
 are overridden in subclasses to perform the correct motion. Since
 they might be called from OnTimer, they do not have mouse coord parameters
 (use interactor's GetEventPosition and GetLastEventPosition)
 </LI>
<LI>  <tt>obj.Spin ()</tt> -  These methods for the different interactions in different modes
 are overridden in subclasses to perform the correct motion. Since
 they might be called from OnTimer, they do not have mouse coord parameters
 (use interactor's GetEventPosition and GetLastEventPosition)
 </LI>
<LI>  <tt>obj.Pan ()</tt> -  These methods for the different interactions in different modes
 are overridden in subclasses to perform the correct motion. Since
 they might be called from OnTimer, they do not have mouse coord parameters
 (use interactor's GetEventPosition and GetLastEventPosition)
 </LI>
<LI>  <tt>obj.Dolly ()</tt> -  These methods for the different interactions in different modes
 are overridden in subclasses to perform the correct motion. Since
 they might be called from OnTimer, they do not have mouse coord parameters
 (use interactor's GetEventPosition and GetLastEventPosition)
 </LI>
<LI>  <tt>obj.Zoom ()</tt> -  These methods for the different interactions in different modes
 are overridden in subclasses to perform the correct motion. Since
 they might be called from OnTimer, they do not have mouse coord parameters
 (use interactor's GetEventPosition and GetLastEventPosition)
 </LI>
<LI>  <tt>obj.UniformScale ()</tt> -  These methods for the different interactions in different modes
 are overridden in subclasses to perform the correct motion. Since
 they might be called from OnTimer, they do not have mouse coord parameters
 (use interactor's GetEventPosition and GetLastEventPosition)
 </LI>
<LI>  <tt>obj.StartState (int newstate)</tt> -  utility routines used by state changes
 </LI>
<LI>  <tt>obj.StopState ()</tt> -  utility routines used by state changes
 </LI>
<LI>  <tt>obj.StartAnimate ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StopAnimate ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartRotate ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndRotate ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartZoom ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndZoom ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartPan ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndPan ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartSpin ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndSpin ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartDolly ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndDolly ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartUniformScale ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndUniformScale ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.StartTimer ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.EndTimer ()</tt> -  Interaction mode entry points used internally.  
 </LI>
<LI>  <tt>obj.HighlightProp (vtkProp prop)</tt> -  When picking successfully selects an actor, this method highlights the
 picked prop appropriately. Currently this is done by placing a bounding 
 box around a picked vtkProp3D, and using the PickColor to highlight a
 vtkProp2D. 
 </LI>
<LI>  <tt>obj.HighlightActor2D (vtkActor2D actor2D)</tt> -  When picking successfully selects an actor, this method highlights the
 picked prop appropriately. Currently this is done by placing a bounding 
 box around a picked vtkProp3D, and using the PickColor to highlight a
 vtkProp2D. 
 </LI>
<LI>  <tt>obj.HighlightProp3D (vtkProp3D prop3D)</tt> -  When picking successfully selects an actor, this method highlights the
 picked prop appropriately. Currently this is done by placing a bounding 
 box around a picked vtkProp3D, and using the PickColor to highlight a
 vtkProp2D. 
 </LI>
<LI>  <tt>obj.SetPickColor (double , double , double )</tt> -  Set/Get the pick color (used by default to color vtkActor2D's).
 The color is expressed as red/green/blue values between (0.0,1.0).
 </LI>
<LI>  <tt>obj.SetPickColor (double  a[3])</tt> -  Set/Get the pick color (used by default to color vtkActor2D's).
 The color is expressed as red/green/blue values between (0.0,1.0).
 </LI>
<LI>  <tt>double = obj. GetPickColor ()</tt> -  Set/Get the pick color (used by default to color vtkActor2D's).
 The color is expressed as red/green/blue values between (0.0,1.0).
 </LI>
<LI>  <tt>obj.SetMouseWheelMotionFactor (double )</tt> -  Set/Get the mouse wheel motion factor. Default to 1.0. Set it to a 
 different value to emphasize or de-emphasize the action triggered by
 mouse wheel motion.
 </LI>
<LI>  <tt>double = obj.GetMouseWheelMotionFactor ()</tt> -  Set/Get the mouse wheel motion factor. Default to 1.0. Set it to a 
 different value to emphasize or de-emphasize the action triggered by
 mouse wheel motion.
 </LI>
<LI>  <tt>vtkTDxInteractorStyle = obj.GetTDxStyle ()</tt> -  3Dconnexion device interactor style. Initial value is a pointer to an
 object of class vtkTdxInteractorStyleCamera.
 </LI>
<LI>  <tt>obj.SetTDxStyle (vtkTDxInteractorStyle tdxStyle)</tt> -  3Dconnexion device interactor style. Initial value is a pointer to an
 object of class vtkTdxInteractorStyleCamera.
 </LI>
</UL>
*/
