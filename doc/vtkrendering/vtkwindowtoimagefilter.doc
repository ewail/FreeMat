/*!
\page vtkrendering_vtkwindowtoimagefilter vtkWindowToImageFilter

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkWindowToImageFilter provides methods needed to read the data in
 a vtkWindow and use it as input to the imaging pipeline. This is
 useful for saving an image to a file for example. The window can
 be read as either RGB or RGBA pixels;  in addition, the depth buffer
 can also be read.   RGB and RGBA pixels are of type unsigned char,
 while Z-Buffer data is returned as floats.  Use this filter
 to convert RenderWindows or ImageWindows to an image format.  


To create an instance of class vtkWindowToImageFilter, simply
invoke its constructor as follows
\verbatim
  obj = vtkWindowToImageFilter
\endverbatim
\section Methods
The class vtkWindowToImageFilter has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkWindowToImageFilter class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkWindowToImageFilter = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkWindowToImageFilter = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetInput (vtkWindow input)</tt> -  Indicates what renderer to get the pixel data from. Initial value is 0.
 </LI>
<LI>  <tt>vtkWindow = obj.GetInput ()</tt> -  Returns which renderer is being used as the source for the pixel data.
 Initial value is 0.
 </LI>
<LI>  <tt>obj.SetMagnification (int )</tt> -  The magnification of the current render window. Initial value is 1.
 </LI>
<LI>  <tt>int = obj.GetMagnificationMinValue ()</tt> -  The magnification of the current render window. Initial value is 1.
 </LI>
<LI>  <tt>int = obj.GetMagnificationMaxValue ()</tt> -  The magnification of the current render window. Initial value is 1.
 </LI>
<LI>  <tt>int = obj.GetMagnification ()</tt> -  The magnification of the current render window. Initial value is 1.
 </LI>
<LI>  <tt>obj.ReadFrontBufferOn ()</tt> -  Set/Get the flag that determines which buffer to read from.
 The default is to read from the front buffer.   
 </LI>
<LI>  <tt>obj.ReadFrontBufferOff ()</tt> -  Set/Get the flag that determines which buffer to read from.
 The default is to read from the front buffer.   
 </LI>
<LI>  <tt>int = obj.GetReadFrontBuffer ()</tt> -  Set/Get the flag that determines which buffer to read from.
 The default is to read from the front buffer.   
 </LI>
<LI>  <tt>obj.SetReadFrontBuffer (int )</tt> -  Set/Get the flag that determines which buffer to read from.
 The default is to read from the front buffer.   
 </LI>
<LI>  <tt>obj.ShouldRerenderOn ()</tt> -  Set/get whether to re-render the input window. Initial value is true.
 (This option makes no difference if Magnification > 1.)
 </LI>
<LI>  <tt>obj.ShouldRerenderOff ()</tt> -  Set/get whether to re-render the input window. Initial value is true.
 (This option makes no difference if Magnification > 1.)
 </LI>
<LI>  <tt>obj.SetShouldRerender (int )</tt> -  Set/get whether to re-render the input window. Initial value is true.
 (This option makes no difference if Magnification > 1.)
 </LI>
<LI>  <tt>int = obj.GetShouldRerender ()</tt> -  Set/get whether to re-render the input window. Initial value is true.
 (This option makes no difference if Magnification > 1.)
 </LI>
<LI>  <tt>obj.SetViewport (double , double , double , double )</tt> -  Set/get the extents to be used to generate the image. Initial value is
 {0,0,1,1} (This option does not work if Magnification > 1.)
 </LI>
<LI>  <tt>obj.SetViewport (double  a[4])</tt> -  Set/get the extents to be used to generate the image. Initial value is
 {0,0,1,1} (This option does not work if Magnification > 1.)
 </LI>
<LI>  <tt>double = obj. GetViewport ()</tt> -  Set/get the extents to be used to generate the image. Initial value is
 {0,0,1,1} (This option does not work if Magnification > 1.)
 </LI>
<LI>  <tt>obj.SetInputBufferType (int )</tt> -  Set/get the window buffer from which data will be read.  Choices
 include VTK_RGB (read the color image from the window), VTK_RGBA 
 (same, but include the alpha channel), and VTK_ZBUFFER (depth
 buffer, returned as a float array). Initial value is VTK_RGB.
 </LI>
<LI>  <tt>int = obj.GetInputBufferType ()</tt> -  Set/get the window buffer from which data will be read.  Choices
 include VTK_RGB (read the color image from the window), VTK_RGBA 
 (same, but include the alpha channel), and VTK_ZBUFFER (depth
 buffer, returned as a float array). Initial value is VTK_RGB.
 </LI>
<LI>  <tt>obj.SetInputBufferTypeToRGB ()</tt> -  Set/get the window buffer from which data will be read.  Choices
 include VTK_RGB (read the color image from the window), VTK_RGBA 
 (same, but include the alpha channel), and VTK_ZBUFFER (depth
 buffer, returned as a float array). Initial value is VTK_RGB.
 </LI>
<LI>  <tt>obj.SetInputBufferTypeToRGBA ()</tt> -  Set/get the window buffer from which data will be read.  Choices
 include VTK_RGB (read the color image from the window), VTK_RGBA 
 (same, but include the alpha channel), and VTK_ZBUFFER (depth
 buffer, returned as a float array). Initial value is VTK_RGB.
 </LI>
<LI>  <tt>obj.SetInputBufferTypeToZBuffer ()</tt> -  Set/get the window buffer from which data will be read.  Choices
 include VTK_RGB (read the color image from the window), VTK_RGBA 
 (same, but include the alpha channel), and VTK_ZBUFFER (depth
 buffer, returned as a float array). Initial value is VTK_RGB.
 </LI>
<LI>  <tt>vtkImageData = obj.GetOutput ()</tt> -  Get the output data object for a port on this algorithm.
 </LI>
</UL>
*/
