/*!
\page vtkrendering_vtklightkit vtkLightKit

<p>
Section: \ref sec_vtkrendering "Visualization Toolkit Rendering Classes"
\section Usage
 vtkLightKit is designed to make general purpose lighting of vtk
 scenes simple, flexible, and attractive (or at least not horribly
 ugly without significant effort).  Use a LightKit when you want
 more control over your lighting than you can get with the default
 vtk light, which is a headlight located at the camera. (HeadLights
 are very simple to use, but they don't show the shape of objects very 
 well, don't give a good sense of "up" and "down", and don't evenly
 light the object.)

 A LightKit consists of three lights, a key light, a fill light, and
 a headlight.  The main light is the key light.  It is usually
 positioned so that it appears like an overhead light (like the sun,
 or a ceiling light).  It is generally positioned to shine down on the
 scene from about a 45 degree angle vertically and at least a little
 offset side to side.  The key light usually at least about twice as 
 bright as the total of all other lights in the scene to provide good
 modeling of object features.
 
 The other lights in the kit (the fill light, headlight, and a pair of
 back lights) are weaker sources that provide extra
 illumination to fill in the spots that the key light misses.  The
 fill light is usually positioned across from or opposite from the
 key light (though still on the same side of the object as the
 camera) in order to simulate diffuse reflections from other objects
 in the scene.  The headlight, always located at the position of the
 camera, reduces the contrast between areas lit by the key and fill
 light. The two back lights, one on the left of the object as seen
 from the observer and one on the right, fill on the high-contrast
 areas behind the object.  To enforce the relationship between the
 different lights, the intensity of the fill, back and headlights
 are set as a ratio to the key light brightness.  Thus, the
 brightness of all the lights in the scene can be changed by
 changing the key light intensity.

 All lights are directional lights (infinitely far away with no
 falloff).  Lights move with the camera.

 For simplicity, the position of lights in the LightKit can only be
 specified using angles: the elevation (latitude) and azimuth
 (longitude) of each light with respect to the camera, expressed in
 degrees.  (Lights always shine on the camera's lookat point.) For
 example, a light at (elevation=0, azimuth=0) is located at the
 camera (a headlight).  A light at (elevation=90, azimuth=0) is
 above the lookat point, shining down.  Negative azimuth values move
 the lights clockwise as seen above, positive values
 counter-clockwise.  So, a light at (elevation=45, azimuth=-20) is
 above and in front of the object and shining slightly from the left
 side.

 vtkLightKit limits the colors that can be assigned to any light to
 those of incandescent sources such as light bulbs and sunlight.  It
 defines a special color spectrum called "warmth" from which light
 colors can be chosen, where 0 is cold blue, 0.5 is neutral white,
 and 1 is deep sunset red.  Colors close to 0.5 are "cool whites" and
 "warm whites," respectively. 

 Since colors far from white on the warmth scale appear less bright,
 key-to-fill and key-to-headlight ratios are skewed by 
 key, fill, and headlight colors.  If the flag MaintainLuminance
 is set, vtkLightKit will attempt to compensate for these perceptual
 differences by increasing the brightness of more saturated colors.

 A LightKit is not explicitly part of the vtk pipeline.  Rather, it
 is a composite object that controls the behavior of lights using a
 unified user interface.  Every time a parameter of vtkLightKit is
 adjusted, the properties of its lights are modified.

 .SECTION Credits
 vtkLightKit was originally written and contributed to vtk by
 Michael Halle (mhalle@bwh.harvard.edu) at the Surgical Planning
 Lab, Brigham and Women's Hospital.

To create an instance of class vtkLightKit, simply
invoke its constructor as follows
\verbatim
  obj = vtkLightKit
\endverbatim
\section Methods
The class vtkLightKit has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkLightKit class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkLightKit = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkLightKit = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetKeyLightIntensity (double )</tt> -  Set/Get the intensity of the key light.  The key light is the
 brightest light in the scene.  The intensities of the other two
 lights are ratios of the key light's intensity.  
 </LI>
<LI>  <tt>double = obj.GetKeyLightIntensity ()</tt> -  Set/Get the intensity of the key light.  The key light is the
 brightest light in the scene.  The intensities of the other two
 lights are ratios of the key light's intensity.  
 </LI>
<LI>  <tt>obj.SetKeyToFillRatio (double )</tt> -  Set/Get the key-to-fill ratio.  This ratio controls
 how bright the fill light is compared to the key light: larger
 values correspond to a dimmer fill light.  The purpose of the
 fill light is to light parts of the object not lit by the key
 light, while still maintaining constrast.  This type of lighting
 may correspond to indirect illumination from the key light, bounced
 off a wall, floor, or other object.  The fill light should never
 be brighter than the key light:  a good range for the key-to-fill
 ratio is between 2 and 10.
 </LI>
<LI>  <tt>double = obj.GetKeyToFillRatioMinValue ()</tt> -  Set/Get the key-to-fill ratio.  This ratio controls
 how bright the fill light is compared to the key light: larger
 values correspond to a dimmer fill light.  The purpose of the
 fill light is to light parts of the object not lit by the key
 light, while still maintaining constrast.  This type of lighting
 may correspond to indirect illumination from the key light, bounced
 off a wall, floor, or other object.  The fill light should never
 be brighter than the key light:  a good range for the key-to-fill
 ratio is between 2 and 10.
 </LI>
<LI>  <tt>double = obj.GetKeyToFillRatioMaxValue ()</tt> -  Set/Get the key-to-fill ratio.  This ratio controls
 how bright the fill light is compared to the key light: larger
 values correspond to a dimmer fill light.  The purpose of the
 fill light is to light parts of the object not lit by the key
 light, while still maintaining constrast.  This type of lighting
 may correspond to indirect illumination from the key light, bounced
 off a wall, floor, or other object.  The fill light should never
 be brighter than the key light:  a good range for the key-to-fill
 ratio is between 2 and 10.
 </LI>
<LI>  <tt>double = obj.GetKeyToFillRatio ()</tt> -  Set/Get the key-to-fill ratio.  This ratio controls
 how bright the fill light is compared to the key light: larger
 values correspond to a dimmer fill light.  The purpose of the
 fill light is to light parts of the object not lit by the key
 light, while still maintaining constrast.  This type of lighting
 may correspond to indirect illumination from the key light, bounced
 off a wall, floor, or other object.  The fill light should never
 be brighter than the key light:  a good range for the key-to-fill
 ratio is between 2 and 10.
 </LI>
<LI>  <tt>obj.SetKeyToHeadRatio (double )</tt> -  Set/Get the key-to-headlight ratio.  Similar to the key-to-fill
 ratio, this ratio controls how bright the headlight light is
 compared to the key light: larger values correspond to a dimmer
 headlight light.  The headlight is special kind of fill light,
 lighting only the parts of the object that the camera can see.
 As such, a headlight tends to reduce the contrast of a scene.  It
 can be used to fill in "shadows" of the object missed by the key
 and fill lights.  The headlight should always be significantly
 dimmer than the key light:  ratios of 2 to 15 are typical.
 </LI>
<LI>  <tt>double = obj.GetKeyToHeadRatioMinValue ()</tt> -  Set/Get the key-to-headlight ratio.  Similar to the key-to-fill
 ratio, this ratio controls how bright the headlight light is
 compared to the key light: larger values correspond to a dimmer
 headlight light.  The headlight is special kind of fill light,
 lighting only the parts of the object that the camera can see.
 As such, a headlight tends to reduce the contrast of a scene.  It
 can be used to fill in "shadows" of the object missed by the key
 and fill lights.  The headlight should always be significantly
 dimmer than the key light:  ratios of 2 to 15 are typical.
 </LI>
<LI>  <tt>double = obj.GetKeyToHeadRatioMaxValue ()</tt> -  Set/Get the key-to-headlight ratio.  Similar to the key-to-fill
 ratio, this ratio controls how bright the headlight light is
 compared to the key light: larger values correspond to a dimmer
 headlight light.  The headlight is special kind of fill light,
 lighting only the parts of the object that the camera can see.
 As such, a headlight tends to reduce the contrast of a scene.  It
 can be used to fill in "shadows" of the object missed by the key
 and fill lights.  The headlight should always be significantly
 dimmer than the key light:  ratios of 2 to 15 are typical.
 </LI>
<LI>  <tt>double = obj.GetKeyToHeadRatio ()</tt> -  Set/Get the key-to-headlight ratio.  Similar to the key-to-fill
 ratio, this ratio controls how bright the headlight light is
 compared to the key light: larger values correspond to a dimmer
 headlight light.  The headlight is special kind of fill light,
 lighting only the parts of the object that the camera can see.
 As such, a headlight tends to reduce the contrast of a scene.  It
 can be used to fill in "shadows" of the object missed by the key
 and fill lights.  The headlight should always be significantly
 dimmer than the key light:  ratios of 2 to 15 are typical.
 </LI>
<LI>  <tt>obj.SetKeyToBackRatio (double )</tt> -  Set/Get the key-to-back light ratio.  This ratio controls
 how bright the back lights are compared to the key light: larger
 values correspond to dimmer back lights.  The back lights fill
 in the remaining high-contrast regions behind the object.
 Values between 2 and 10 are good.
 </LI>
<LI>  <tt>double = obj.GetKeyToBackRatioMinValue ()</tt> -  Set/Get the key-to-back light ratio.  This ratio controls
 how bright the back lights are compared to the key light: larger
 values correspond to dimmer back lights.  The back lights fill
 in the remaining high-contrast regions behind the object.
 Values between 2 and 10 are good.
 </LI>
<LI>  <tt>double = obj.GetKeyToBackRatioMaxValue ()</tt> -  Set/Get the key-to-back light ratio.  This ratio controls
 how bright the back lights are compared to the key light: larger
 values correspond to dimmer back lights.  The back lights fill
 in the remaining high-contrast regions behind the object.
 Values between 2 and 10 are good.
 </LI>
<LI>  <tt>double = obj.GetKeyToBackRatio ()</tt> -  Set/Get the key-to-back light ratio.  This ratio controls
 how bright the back lights are compared to the key light: larger
 values correspond to dimmer back lights.  The back lights fill
 in the remaining high-contrast regions behind the object.
 Values between 2 and 10 are good.
 </LI>
<LI>  <tt>obj.SetKeyLightWarmth (double )</tt> -  Set the warmth of each the lights.  Warmth is a parameter that
 varies from 0 to 1, where 0 is "cold" (looks icy or lit by a very
 blue sky), 1 is "warm" (the red of a very red sunset, or the
 embers of a campfire), and 0.5 is a neutral white.  The warmth
 scale is non-linear. Warmth values close to 0.5 are subtly
 "warmer" or "cooler," much like a warmer tungsten incandescent
 bulb, a cooler halogen, or daylight (cooler still).  Moving
 further away from 0.5, colors become more quickly varying towards
 blues and reds.  With regards to aesthetics, extremes of warmth
 should be used sparingly.
 </LI>
<LI>  <tt>double = obj.GetKeyLightWarmth ()</tt> -  Set the warmth of each the lights.  Warmth is a parameter that
 varies from 0 to 1, where 0 is "cold" (looks icy or lit by a very
 blue sky), 1 is "warm" (the red of a very red sunset, or the
 embers of a campfire), and 0.5 is a neutral white.  The warmth
 scale is non-linear. Warmth values close to 0.5 are subtly
 "warmer" or "cooler," much like a warmer tungsten incandescent
 bulb, a cooler halogen, or daylight (cooler still).  Moving
 further away from 0.5, colors become more quickly varying towards
 blues and reds.  With regards to aesthetics, extremes of warmth
 should be used sparingly.
 </LI>
<LI>  <tt>obj.SetFillLightWarmth (double )</tt>
 </LI>
<LI>  <tt>double = obj.GetFillLightWarmth ()</tt>
 </LI>
<LI>  <tt>obj.SetHeadLightWarmth (double )</tt>
 </LI>
<LI>  <tt>double = obj.GetHeadLightWarmth ()</tt>
 </LI>
<LI>  <tt>obj.SetBackLightWarmth (double )</tt>
 </LI>
<LI>  <tt>double = obj.GetBackLightWarmth ()</tt>
 </LI>
<LI>  <tt>double = obj. GetKeyLightColor ()</tt> -  Returns the floating-point RGB values of each of the light's color.
 </LI>
<LI>  <tt>double = obj. GetFillLightColor ()</tt> -  Returns the floating-point RGB values of each of the light's color.
 </LI>
<LI>  <tt>double = obj. GetHeadLightColor ()</tt> -  Returns the floating-point RGB values of each of the light's color.
 </LI>
<LI>  <tt>double = obj. GetBackLightColor ()</tt> -  Returns the floating-point RGB values of each of the light's color.
 </LI>
<LI>  <tt>obj.SetHeadlightWarmth (double v)</tt> -  To maintain a deprecation API:
 </LI>
<LI>  <tt>double = obj.GetHeadlightWarmth ()</tt> -  To maintain a deprecation API:
 </LI>
<LI>  <tt>obj.GetHeadlightColor (double color)</tt> -  To maintain a deprecation API:
 </LI>
<LI>  <tt>obj.MaintainLuminanceOn ()</tt> -  If MaintainLuminance is set, the LightKit will attempt to maintain
 the apparent intensity of lights based on their perceptual brightnesses.
 By default, MaintainLuminance is off.
 </LI>
<LI>  <tt>obj.MaintainLuminanceOff ()</tt> -  If MaintainLuminance is set, the LightKit will attempt to maintain
 the apparent intensity of lights based on their perceptual brightnesses.
 By default, MaintainLuminance is off.
 </LI>
<LI>  <tt>int = obj.GetMaintainLuminance ()</tt> -  If MaintainLuminance is set, the LightKit will attempt to maintain
 the apparent intensity of lights based on their perceptual brightnesses.
 By default, MaintainLuminance is off.
 </LI>
<LI>  <tt>obj.SetMaintainLuminance (int )</tt> -  If MaintainLuminance is set, the LightKit will attempt to maintain
 the apparent intensity of lights based on their perceptual brightnesses.
 By default, MaintainLuminance is off.
 </LI>
<LI>  <tt>obj.SetKeyLightAngle (double elevation, double azimuth)</tt> -  Get/Set the position of the key, fill, and back lights
 using angular methods.  Elevation corresponds to latitude,
 azimuth to longitude.  It is recommended that the key light
 always be on the viewer's side of the object and above the
 object, while the fill light generally lights the part of the object
 not lit by the fill light.  The headlight, which is always located
 at the viewer, can then be used to reduce the contrast in the image.
 There are a pair of back lights.  They are located at the same
 elevation and at opposing azimuths (ie, one to the left, and one to
 the right).  They are generally set at the equator (elevation = 0),
 and at approximately 120 degrees (lighting from each side and behind).
 </LI>
<LI>  <tt>obj.SetKeyLightAngle (double angle[2])</tt> -  Get/Set the position of the key, fill, and back lights
 using angular methods.  Elevation corresponds to latitude,
 azimuth to longitude.  It is recommended that the key light
 always be on the viewer's side of the object and above the
 object, while the fill light generally lights the part of the object
 not lit by the fill light.  The headlight, which is always located
 at the viewer, can then be used to reduce the contrast in the image.
 There are a pair of back lights.  They are located at the same
 elevation and at opposing azimuths (ie, one to the left, and one to
 the right).  They are generally set at the equator (elevation = 0),
 and at approximately 120 degrees (lighting from each side and behind).
 </LI>
<LI>  <tt>obj.SetKeyLightElevation (double x)</tt>
 </LI>
<LI>  <tt>obj.SetKeyLightAzimuth (double x)</tt>
 </LI>
<LI>  <tt>double = obj. GetKeyLightAngle ()</tt>
 </LI>
<LI>  <tt>double = obj.GetKeyLightElevation ()</tt>
 </LI>
<LI>  <tt>double = obj.GetKeyLightAzimuth ()</tt>
 </LI>
<LI>  <tt>obj.SetFillLightAngle (double elevation, double azimuth)</tt>
 </LI>
<LI>  <tt>obj.SetFillLightAngle (double angle[2])</tt>
 </LI>
<LI>  <tt>obj.SetFillLightElevation (double x)</tt>
 </LI>
<LI>  <tt>obj.SetFillLightAzimuth (double x)</tt>
 </LI>
<LI>  <tt>double = obj. GetFillLightAngle ()</tt>
 </LI>
<LI>  <tt>double = obj.GetFillLightElevation ()</tt>
 </LI>
<LI>  <tt>double = obj.GetFillLightAzimuth ()</tt>
 </LI>
<LI>  <tt>obj.SetBackLightAngle (double elevation, double azimuth)</tt>
 </LI>
<LI>  <tt>obj.SetBackLightAngle (double angle[2])</tt>
 </LI>
<LI>  <tt>obj.SetBackLightElevation (double x)</tt>
 </LI>
<LI>  <tt>obj.SetBackLightAzimuth (double x)</tt>
 </LI>
<LI>  <tt>double = obj. GetBackLightAngle ()</tt>
 </LI>
<LI>  <tt>double = obj.GetBackLightElevation ()</tt>
 </LI>
<LI>  <tt>double = obj.GetBackLightAzimuth ()</tt>
 </LI>
<LI>  <tt>obj.AddLightsToRenderer (vtkRenderer renderer)</tt> -  Add lights to, or remove lights from, a renderer.  
 Lights may be added to more than one renderer, if desired.
 </LI>
<LI>  <tt>obj.RemoveLightsFromRenderer (vtkRenderer renderer)</tt> -  Add lights to, or remove lights from, a renderer.  
 Lights may be added to more than one renderer, if desired.
 </LI>
<LI>  <tt>obj.DeepCopy (vtkLightKit kit)</tt>
 </LI>
<LI>  <tt>obj.Modified ()</tt>
 </LI>
<LI>  <tt>obj.Update ()</tt>
 </LI>
</UL>
*/
