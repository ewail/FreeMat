/*!
\page vtkhybrid_vtktemporalinterpolator vtkTemporalInterpolator

<p>
Section: \ref sec_vtkhybrid "Visualization Toolkit Hybrid Classes"
\section Usage
 vtkTemporalInterpolator interpolates between two time steps to
 produce new data for an arbitrary T.
 vtkTemporalInterpolator has three modes of operation. 
 The default mode is to produce a continuous range of time 
 values as output, which enables a filter downstream to request 
 any value of T within the range. 
 The second mode of operation is enabled by setting
 DiscreteTimeStepInterval to a non zero value. When this mode is
 activated, the filter will report a finite number of Time steps
 separated by deltaT between the original range of values.
 This mode is useful when a dataset of N time steps has one (or more)
 missing datasets for certain T values and you simply wish to smooth
 over the missing steps but otherwise use the original data.
 The third mode of operation is enabled by setting
 ResampleFactor to a non zero positive integer value. 
 When this mode is activated, the filter will report a finite number 
 of Time steps which contain the original steps, plus N new values between
 each original step 1/ResampleFactor time units apart.
 Note that if the input time steps are irregular, then using ResampleFactor
 will produce an irregular sequence of regular steps between 
 each of the original irregular steps (clear enough, yes?).

 @TODO
 Higher order interpolation schemes will require changes to the API
 as most calls assume only two timesteps are used.

To create an instance of class vtkTemporalInterpolator, simply
invoke its constructor as follows
\verbatim
  obj = vtkTemporalInterpolator
\endverbatim
\section Methods
The class vtkTemporalInterpolator has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkTemporalInterpolator class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkTemporalInterpolator = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkTemporalInterpolator = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetDiscreteTimeStepInterval (double )</tt> -  If you require a discrete number of outputs steps, to be 
 generated from an input source - for example, you required
 N steps separated by T, then set DiscreteTimeStepInterval to T
 and you will get TIME_RANGE/DiscreteTimeStepInterval steps
 This is a useful option to use if you have a dataset with one
 missing time step and wish to 'fill-in' the missing data
 with an interpolated value from the steps either side
 </LI>
<LI>  <tt>double = obj.GetDiscreteTimeStepInterval ()</tt> -  If you require a discrete number of outputs steps, to be 
 generated from an input source - for example, you required
 N steps separated by T, then set DiscreteTimeStepInterval to T
 and you will get TIME_RANGE/DiscreteTimeStepInterval steps
 This is a useful option to use if you have a dataset with one
 missing time step and wish to 'fill-in' the missing data
 with an interpolated value from the steps either side
 </LI>
<LI>  <tt>obj.SetResampleFactor (int )</tt> -  When ResampleFactor is a non zero positive integer, each pair
 of input time steps will be interpolated between with the number
 of steps specified. For example an input of 1,2,3,4,5 and a resample factor
 of 10, will produce steps 0f 1.0, 1.1, 1.2.....1.9, 2.0 etc
 NB. Irregular input steps will produce irregular output steps.
 Resample factor wuill only be used if DiscreteTimeStepInterval is zero
 otherwise the DiscreteTimeStepInterval takes precedence
 </LI>
<LI>  <tt>int = obj.GetResampleFactor ()</tt> -  When ResampleFactor is a non zero positive integer, each pair
 of input time steps will be interpolated between with the number
 of steps specified. For example an input of 1,2,3,4,5 and a resample factor
 of 10, will produce steps 0f 1.0, 1.1, 1.2.....1.9, 2.0 etc
 NB. Irregular input steps will produce irregular output steps.
 Resample factor wuill only be used if DiscreteTimeStepInterval is zero
 otherwise the DiscreteTimeStepInterval takes precedence
 </LI>
</UL>
*/
