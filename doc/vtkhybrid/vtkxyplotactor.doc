/*!
\page vtkhybrid_vtkxyplotactor vtkXYPlotActor

<p>
Section: \ref sec_vtkhybrid "Visualization Toolkit Hybrid Classes"
\section Usage
 vtkXYPlotActor creates an x-y plot of data from one or more input data
 sets or field data. The class plots dataset scalar values (y-axis) against
 the points (x-axis). The x-axis values are generated by taking the point
 ids, computing a cumulative arc length, or a normalized arc length. More
 than one input data set can be specified to generate multiple plots.
 Alternatively, if field data is supplied as input, the class plots one
 component against another. (The user must specify which component to use
 as the x-axis and which for the y-axis.)

 To use this class to plot dataset(s), you must specify one or more
 input datasets containing scalar and point data.  You'll probably also
 want to invoke a method to control how the point coordinates are converted
 into x values (by default point ids are used).

 To use this class to plot field data, you must specify one or more input
 data objects with its associated field data. You'll also want to specify
 which component to use as the x-axis and which to use as the y-axis.
 Note that when plotting field data, the x and y values are used directly
 (i.e., there are no options to normalize the components).

 Once you've set up the plot, you'll want to position it.  The
 PositionCoordinate defines the lower-left location of the x-y plot
 (specified in normalized viewport coordinates) and the Position2Coordinate
 define the upper-right corner. (Note: the Position2Coordinate is relative
 to PositionCoordinate, so you can move the vtkXYPlotActor around the
 viewport by setting just the PositionCoordinate.) The combination of the
 two position coordinates specifies a rectangle in which the plot will lie.

 Optional features include the ability to specify axes labels, label
 format and plot title. You can also
 manually specify the x and y plot ranges (by default they are computed
 automatically). The Border instance variable is used to create space 
 between the boundary of the plot window (specified by PositionCoordinate
 and Position2Coordinate) and the plot itself.

 The font property of the plot title can be modified through the 
 TitleTextProperty attribute.
 The font property of the axes titles and labels can be modified through the
 AxisTitleTextProperty and AxisLabelTextProperty attributes. You may also
 use the GetXAxisActor2D or GetYAxisActor2D methods 
 to access each individual axis actor to modify their font properties.
 In the same way, the GetLegendBoxActor method can be used to access
 the legend box actor to modify its font properties.

 There are several advanced features as well. You can assign per curve 
 properties (such as color and a plot symbol). (Note that each input 
 dataset and/or data object creates a single curve.) Another option is to
 add a plot legend that graphically indicates the correspondance between
 the curve, curve symbols, and the data source. You can also exchange the
 x and y axes if you prefer you plot orientation that way.

To create an instance of class vtkXYPlotActor, simply
invoke its constructor as follows
\verbatim
  obj = vtkXYPlotActor
\endverbatim
\section Methods
The class vtkXYPlotActor has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkXYPlotActor class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkXYPlotActor = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkXYPlotActor = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.AddInput (vtkDataSet in, string arrayName, int component)</tt> -  Add a dataset to the list of data to append. The array name specifies
 which point array to plot. The array must be a vtkDataArray subclass, i.e. 
 a numeric array. If the array name is NULL, then the default
 scalars are used.  The array can have multiple components, but only the
 first component is ploted.
 </LI>
<LI>  <tt>obj.AddInput (vtkDataSet in)</tt> -  Remove a dataset from the list of data to append.
 </LI>
<LI>  <tt>obj.RemoveInput (vtkDataSet in, string arrayName, int component)</tt> -  Remove a dataset from the list of data to append.
 </LI>
<LI>  <tt>obj.RemoveInput (vtkDataSet in)</tt> -  This removes all of the data set inputs, 
 but does not change the data object inputs.
 </LI>
<LI>  <tt>obj.RemoveAllInputs ()</tt> -  This removes all of the data set inputs, 
 but does not change the data object inputs.
 </LI>
<LI>  <tt>vtkDataSetCollection = obj.GetInputList ()</tt> -  If plotting points by value, which component to use to determine the
 value. This sets a value per each input dataset (i.e., the ith dataset).
 </LI>
<LI>  <tt>obj.SetPointComponent (int i, int comp)</tt> -  If plotting points by value, which component to use to determine the
 value. This sets a value per each input dataset (i.e., the ith dataset).
 </LI>
<LI>  <tt>int = obj.GetPointComponent (int i)</tt> -  If plotting points by value, which component to use to determine the
 value. This sets a value per each input dataset (i.e., the ith dataset).
 </LI>
<LI>  <tt>obj.SetXValues (int )</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>int = obj.GetXValuesMinValue ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>int = obj.GetXValuesMaxValue ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>int = obj.GetXValues ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>obj.SetXValuesToIndex ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>obj.SetXValuesToArcLength ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>obj.SetXValuesToNormalizedArcLength ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>obj.SetXValuesToValue ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>string = obj.GetXValuesAsString ()</tt> -  Specify how the independent (x) variable is computed from the points.
 The independent variable can be the scalar/point index (i.e., point id),
 the accumulated arc length along the points, the normalized arc length,
 or by component value. If plotting datasets (e.g., points), the value
 that is used is specified by the PointComponent ivar.  (Note: these
 methods also control how field data is plotted. Field data is usually
 plotted by value or index, if plotting length 1-dimensional length
 measures are used.)
 </LI>
<LI>  <tt>obj.AddDataObjectInput (vtkDataObject in)</tt> -  Add a dataset to the list of data to append.
 </LI>
<LI>  <tt>obj.RemoveDataObjectInput (vtkDataObject in)</tt> -  Remove a dataset from the list of data to append.
 </LI>
<LI>  <tt>vtkDataObjectCollection = obj.GetDataObjectInputList ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>obj.SetDataObjectPlotMode (int )</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>int = obj.GetDataObjectPlotModeMinValue ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>int = obj.GetDataObjectPlotModeMaxValue ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>int = obj.GetDataObjectPlotMode ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>obj.SetDataObjectPlotModeToRows ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>obj.SetDataObjectPlotModeToColumns ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>string = obj.GetDataObjectPlotModeAsString ()</tt> -  Indicate whether to plot rows or columns. If plotting rows, then
 the dependent variables is taken from a specified row,
 versus rows (y). 
 </LI>
<LI>  <tt>obj.SetDataObjectXComponent (int i, int comp)</tt> -  Specify which component of the input data object to use as the
 independent variable for the ith input data object. (This ivar is
 ignored if plotting the index.) Note that the value is interpreted
 differently depending on DataObjectPlotMode. If the mode is Rows, then
 the value of DataObjectXComponent is the row number; otherwise it's the
 column number.
 </LI>
<LI>  <tt>int = obj.GetDataObjectXComponent (int i)</tt> -  Specify which component of the input data object to use as the
 independent variable for the ith input data object. (This ivar is
 ignored if plotting the index.) Note that the value is interpreted
 differently depending on DataObjectPlotMode. If the mode is Rows, then
 the value of DataObjectXComponent is the row number; otherwise it's the
 column number.
 </LI>
<LI>  <tt>obj.SetDataObjectYComponent (int i, int comp)</tt> -  Specify which component of the input data object to use as the
 dependent variable for the ith input data object. (This ivar is
 ignored if plotting the index.) Note that the value is interpreted
 differently depending on DataObjectPlotMode. If the mode is Rows, then
 the value of DataObjectYComponent is the row number; otherwise it's the
 column number.
 </LI>
<LI>  <tt>int = obj.GetDataObjectYComponent (int i)</tt> -  Specify which component of the input data object to use as the
 dependent variable for the ith input data object. (This ivar is
 ignored if plotting the index.) Note that the value is interpreted
 differently depending on DataObjectPlotMode. If the mode is Rows, then
 the value of DataObjectYComponent is the row number; otherwise it's the
 column number.
 </LI>
<LI>  <tt>obj.SetPlotColor (int i, double r, double g, double b)</tt>
 </LI>
<LI>  <tt>obj.SetPlotColor (int i, double color[3])</tt>
 </LI>
<LI>  <tt>double = obj.GetPlotColor (int i)</tt>
 </LI>
<LI>  <tt>obj.SetPlotSymbol (int i, vtkPolyData input)</tt>
 </LI>
<LI>  <tt>vtkPolyData = obj.GetPlotSymbol (int i)</tt>
 </LI>
<LI>  <tt>obj.SetPlotLabel (int i, string label)</tt>
 </LI>
<LI>  <tt>string = obj.GetPlotLabel (int i)</tt>
 </LI>
<LI>  <tt>int = obj.GetPlotCurvePoints ()</tt>
 </LI>
<LI>  <tt>obj.SetPlotCurvePoints (int )</tt>
 </LI>
<LI>  <tt>obj.PlotCurvePointsOn ()</tt>
 </LI>
<LI>  <tt>obj.PlotCurvePointsOff ()</tt>
 </LI>
<LI>  <tt>int = obj.GetPlotCurveLines ()</tt>
 </LI>
<LI>  <tt>obj.SetPlotCurveLines (int )</tt>
 </LI>
<LI>  <tt>obj.PlotCurveLinesOn ()</tt>
 </LI>
<LI>  <tt>obj.PlotCurveLinesOff ()</tt>
 </LI>
<LI>  <tt>obj.SetPlotLines (int i, int )</tt>
 </LI>
<LI>  <tt>int = obj.GetPlotLines (int i)</tt>
 </LI>
<LI>  <tt>obj.SetPlotPoints (int i, int )</tt>
 </LI>
<LI>  <tt>int = obj.GetPlotPoints (int i)</tt>
 </LI>
<LI>  <tt>obj.SetExchangeAxes (int )</tt> -  Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
 vice-versa). Exchanging axes affects the labeling as well.
 </LI>
<LI>  <tt>int = obj.GetExchangeAxes ()</tt> -  Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
 vice-versa). Exchanging axes affects the labeling as well.
 </LI>
<LI>  <tt>obj.ExchangeAxesOn ()</tt> -  Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
 vice-versa). Exchanging axes affects the labeling as well.
 </LI>
<LI>  <tt>obj.ExchangeAxesOff ()</tt> -  Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
 vice-versa). Exchanging axes affects the labeling as well.
 </LI>
<LI>  <tt>obj.SetReverseXAxis (int )</tt> -  Normally the x-axis is plotted from minimum to maximum. Setting this instance
 variable causes the x-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the x-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>int = obj.GetReverseXAxis ()</tt> -  Normally the x-axis is plotted from minimum to maximum. Setting this instance
 variable causes the x-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the x-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>obj.ReverseXAxisOn ()</tt> -  Normally the x-axis is plotted from minimum to maximum. Setting this instance
 variable causes the x-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the x-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>obj.ReverseXAxisOff ()</tt> -  Normally the x-axis is plotted from minimum to maximum. Setting this instance
 variable causes the x-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the x-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>obj.SetReverseYAxis (int )</tt> -  Normally the y-axis is plotted from minimum to maximum. Setting this instance
 variable causes the y-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the y-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>int = obj.GetReverseYAxis ()</tt> -  Normally the y-axis is plotted from minimum to maximum. Setting this instance
 variable causes the y-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the y-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>obj.ReverseYAxisOn ()</tt> -  Normally the y-axis is plotted from minimum to maximum. Setting this instance
 variable causes the y-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the y-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>obj.ReverseYAxisOff ()</tt> -  Normally the y-axis is plotted from minimum to maximum. Setting this instance
 variable causes the y-axis to be plotted from maximum to minimum. Note that
 boolean always applies to the y-axis even if ExchangeAxes is set.
 </LI>
<LI>  <tt>vtkLegendBoxActor = obj.GetLegendActor ()</tt> -  Retrieve handles to the legend box and glyph source. This is useful
 if you would like to change the default behavior of the legend box
 or glyph source. For example, the default glyph can be changed from
 a line to a vertex plus line, etc.)
 </LI>
<LI>  <tt>vtkGlyphSource2D = obj.GetGlyphSource ()</tt> -  Retrieve handles to the legend box and glyph source. This is useful
 if you would like to change the default behavior of the legend box
 or glyph source. For example, the default glyph can be changed from
 a line to a vertex plus line, etc.)
 </LI>
<LI>  <tt>obj.SetTitle (string )</tt> -  Set/Get the title of the x-y plot, and the title along the 
 x and y axes.
 </LI>
<LI>  <tt>string = obj.GetTitle ()</tt> -  Set/Get the title of the x-y plot, and the title along the 
 x and y axes.
 </LI>
<LI>  <tt>obj.SetXTitle (string )</tt> -  Set/Get the title of the x-y plot, and the title along the 
 x and y axes.
 </LI>
<LI>  <tt>string = obj.GetXTitle ()</tt> -  Set/Get the title of the x-y plot, and the title along the 
 x and y axes.
 </LI>
<LI>  <tt>obj.SetYTitle (string )</tt> -  Set/Get the title of the x-y plot, and the title along the 
 x and y axes.
 </LI>
<LI>  <tt>string = obj.GetYTitle ()</tt> -  Set/Get the title of the x-y plot, and the title along the 
 x and y axes.
 </LI>
<LI>  <tt>vtkAxisActor2D = obj.GetXAxisActor2D ()</tt> -  Retrieve handles to the X and Y axis (so that you can set their text
 properties for example)
 </LI>
<LI>  <tt>vtkAxisActor2D = obj.GetYAxisActor2D ()</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>obj.SetXRange (double , double )</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>obj.SetXRange (double  a[2])</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>double = obj. GetXRange ()</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>obj.SetYRange (double , double )</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>obj.SetYRange (double  a[2])</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>double = obj. GetYRange ()</tt> -  Set the plot range (range of independent and dependent variables)
 to plot. Data outside of the range will be clipped. If the plot
 range of either the x or y variables is set to (v1,v2), where
 v1 == v2, then the range will be computed automatically. Note that
 the x-range values should be consistent with the way the independent
 variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
 </LI>
<LI>  <tt>obj.SetPlotRange (double xmin, double ymin, double xmax, double ymax)</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>obj.SetNumberOfXLabels (int )</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>int = obj.GetNumberOfXLabelsMinValue ()</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>int = obj.GetNumberOfXLabelsMaxValue ()</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>int = obj.GetNumberOfXLabels ()</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>obj.SetNumberOfYLabels (int )</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>int = obj.GetNumberOfYLabelsMinValue ()</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>int = obj.GetNumberOfYLabelsMaxValue ()</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>int = obj.GetNumberOfYLabels ()</tt> -  Set/Get the number of annotation labels to show along the x and y axes.
 This values is a suggestion: the number of labels may vary depending
 on the particulars of the data. The convenience method 
 SetNumberOfLables() sets the number of x and y labels to the same value.
 </LI>
<LI>  <tt>obj.SetNumberOfLabels (int num)</tt> -  Set/Get the flag that controls whether the labels and ticks are
 adjusted for "nice" numerical values to make it easier to read 
 the labels. The adjustment is based in the Range instance variable.
 Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
 range and number of labels.
 </LI>
<LI>  <tt>obj.SetAdjustXLabels (int adjust)</tt> -  Set/Get the flag that controls whether the labels and ticks are
 adjusted for "nice" numerical values to make it easier to read 
 the labels. The adjustment is based in the Range instance variable.
 Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
 range and number of labels.
 </LI>
<LI>  <tt>int = obj.GetAdjustXLabels ()</tt> -  Set/Get the flag that controls whether the labels and ticks are
 adjusted for "nice" numerical values to make it easier to read 
 the labels. The adjustment is based in the Range instance variable.
 Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
 range and number of labels.
 </LI>
<LI>  <tt>obj.SetAdjustYLabels (int adjust)</tt> -  Set/Get the flag that controls whether the labels and ticks are
 adjusted for "nice" numerical values to make it easier to read 
 the labels. The adjustment is based in the Range instance variable.
 Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
 range and number of labels.
 </LI>
<LI>  <tt>int = obj.GetAdjustYLabels ()</tt> -  Set/Get the flag that controls whether the labels and ticks are
 adjusted for "nice" numerical values to make it easier to read 
 the labels. The adjustment is based in the Range instance variable.
 Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
 range and number of labels.
 </LI>
<LI>  <tt>obj.SetXTitlePosition (double position)</tt> -  Set/Get the position of the title of X or Y axis.
 </LI>
<LI>  <tt>double = obj.GetXTitlePosition ()</tt> -  Set/Get the position of the title of X or Y axis.
 </LI>
<LI>  <tt>obj.SetYTitlePosition (double position)</tt> -  Set/Get the position of the title of X or Y axis.
 </LI>
<LI>  <tt>double = obj.GetYTitlePosition ()</tt> -  Set/Get the position of the title of X or Y axis.
 </LI>
<LI>  <tt>obj.SetNumberOfXMinorTicks (int num)</tt> -  Set/Get the number of minor ticks in X or Y.
 </LI>
<LI>  <tt>int = obj.GetNumberOfXMinorTicks ()</tt> -  Set/Get the number of minor ticks in X or Y.
 </LI>
<LI>  <tt>obj.SetNumberOfYMinorTicks (int num)</tt> -  Set/Get the number of minor ticks in X or Y.
 </LI>
<LI>  <tt>int = obj.GetNumberOfYMinorTicks ()</tt> -  Set/Get the number of minor ticks in X or Y.
 </LI>
<LI>  <tt>obj.SetLegend (int )</tt> -  Enable/Disable the creation of a legend. If on, the legend labels will
 be created automatically unless the per plot legend symbol has been
 set.
 </LI>
<LI>  <tt>int = obj.GetLegend ()</tt> -  Enable/Disable the creation of a legend. If on, the legend labels will
 be created automatically unless the per plot legend symbol has been
 set.
 </LI>
<LI>  <tt>obj.LegendOn ()</tt> -  Enable/Disable the creation of a legend. If on, the legend labels will
 be created automatically unless the per plot legend symbol has been
 set.
 </LI>
<LI>  <tt>obj.LegendOff ()</tt> -  Enable/Disable the creation of a legend. If on, the legend labels will
 be created automatically unless the per plot legend symbol has been
 set.
 </LI>
<LI>  <tt>obj.SetTitlePosition (double , double )</tt> -  Set/Get the position of the title. This has no effect if 
 AdjustTitlePosition is true.
 </LI>
<LI>  <tt>obj.SetTitlePosition (double  a[2])</tt> -  Set/Get the position of the title. This has no effect if 
 AdjustTitlePosition is true.
 </LI>
<LI>  <tt>double = obj. GetTitlePosition ()</tt> -  Set/Get the position of the title. This has no effect if 
 AdjustTitlePosition is true.
 </LI>
<LI>  <tt>obj.SetAdjustTitlePosition (int )</tt> -  If true, the xyplot actor will adjust the position of the title
 automatically to be upper-middle. Default is true.
 </LI>
<LI>  <tt>int = obj.GetAdjustTitlePosition ()</tt> -  If true, the xyplot actor will adjust the position of the title
 automatically to be upper-middle. Default is true.
 </LI>
<LI>  <tt>obj.AdjustTitlePositionOn ()</tt> -  If true, the xyplot actor will adjust the position of the title
 automatically to be upper-middle. Default is true.
 </LI>
<LI>  <tt>obj.AdjustTitlePositionOff ()</tt> -  If true, the xyplot actor will adjust the position of the title
 automatically to be upper-middle. Default is true.
 </LI>
<LI>  <tt>obj.SetAdjustTitlePositionMode (int )</tt> -  If AdjustTitlePosition is truem, the xyplot actor will
 adjust the position of the title automatically depending on the
 given mode, the mode is a combination of the Alignment flags.
 by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
 | vtkXYPlotActor::AlignAxisVCenter 
 </LI>
<LI>  <tt>int = obj.GetAdjustTitlePositionMode ()</tt> -  If AdjustTitlePosition is truem, the xyplot actor will
 adjust the position of the title automatically depending on the
 given mode, the mode is a combination of the Alignment flags.
 by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
 | vtkXYPlotActor::AlignAxisVCenter 
 </LI>
<LI>  <tt>obj.SetLegendPosition (double , double )</tt> -  Use these methods to control the position of the legend. The variables
 LegendPosition and LegendPosition2 define the lower-left and upper-right
 position of the legend. The coordinates are expressed as normalized
 values with respect to the rectangle defined by PositionCoordinate and
 Position2Coordinate. Note that LegendPosition2 is relative to
 LegendPosition.
 </LI>
<LI>  <tt>obj.SetLegendPosition (double  a[2])</tt> -  Use these methods to control the position of the legend. The variables
 LegendPosition and LegendPosition2 define the lower-left and upper-right
 position of the legend. The coordinates are expressed as normalized
 values with respect to the rectangle defined by PositionCoordinate and
 Position2Coordinate. Note that LegendPosition2 is relative to
 LegendPosition.
 </LI>
<LI>  <tt>double = obj. GetLegendPosition ()</tt> -  Use these methods to control the position of the legend. The variables
 LegendPosition and LegendPosition2 define the lower-left and upper-right
 position of the legend. The coordinates are expressed as normalized
 values with respect to the rectangle defined by PositionCoordinate and
 Position2Coordinate. Note that LegendPosition2 is relative to
 LegendPosition.
 </LI>
<LI>  <tt>obj.SetLegendPosition2 (double , double )</tt> -  Use these methods to control the position of the legend. The variables
 LegendPosition and LegendPosition2 define the lower-left and upper-right
 position of the legend. The coordinates are expressed as normalized
 values with respect to the rectangle defined by PositionCoordinate and
 Position2Coordinate. Note that LegendPosition2 is relative to
 LegendPosition.
 </LI>
<LI>  <tt>obj.SetLegendPosition2 (double  a[2])</tt> -  Use these methods to control the position of the legend. The variables
 LegendPosition and LegendPosition2 define the lower-left and upper-right
 position of the legend. The coordinates are expressed as normalized
 values with respect to the rectangle defined by PositionCoordinate and
 Position2Coordinate. Note that LegendPosition2 is relative to
 LegendPosition.
 </LI>
<LI>  <tt>double = obj. GetLegendPosition2 ()</tt> -  Use these methods to control the position of the legend. The variables
 LegendPosition and LegendPosition2 define the lower-left and upper-right
 position of the legend. The coordinates are expressed as normalized
 values with respect to the rectangle defined by PositionCoordinate and
 Position2Coordinate. Note that LegendPosition2 is relative to
 LegendPosition.
 </LI>
<LI>  <tt>obj.SetTitleTextProperty (vtkTextProperty p)</tt> -  Set/Get the title text property.
 </LI>
<LI>  <tt>vtkTextProperty = obj.GetTitleTextProperty ()</tt> -  Set/Get the title text property.
 </LI>
<LI>  <tt>obj.SetAxisTitleTextProperty (vtkTextProperty p)</tt> -  Set/Get the title text property of all axes. Note that each axis can
 be controlled individually through the GetX/YAxisActor2D() methods.
 </LI>
<LI>  <tt>vtkTextProperty = obj.GetAxisTitleTextProperty ()</tt> -  Set/Get the title text property of all axes. Note that each axis can
 be controlled individually through the GetX/YAxisActor2D() methods.
 </LI>
<LI>  <tt>obj.SetAxisLabelTextProperty (vtkTextProperty p)</tt> -  Set/Get the labels text property of all axes. Note that each axis can
 be controlled individually through the GetX/YAxisActor2D() methods.
 </LI>
<LI>  <tt>vtkTextProperty = obj.GetAxisLabelTextProperty ()</tt> -  Set/Get the labels text property of all axes. Note that each axis can
 be controlled individually through the GetX/YAxisActor2D() methods.
 </LI>
<LI>  <tt>obj.SetLogx (int )</tt> -  Enable/Disable plotting of Log of x-values.
 </LI>
<LI>  <tt>int = obj.GetLogx ()</tt> -  Enable/Disable plotting of Log of x-values.
 </LI>
<LI>  <tt>obj.LogxOn ()</tt> -  Enable/Disable plotting of Log of x-values.
 </LI>
<LI>  <tt>obj.LogxOff ()</tt> -  Enable/Disable plotting of Log of x-values.
 </LI>
<LI>  <tt>obj.SetLabelFormat (string _arg)</tt> -  Set/Get the format with which to print the labels . This sets both X
 and Y label formats. GetLabelFormat() returns X label format.
 </LI>
<LI>  <tt>string = obj.GetLabelFormat ()</tt> -  Set/Get the format with which to print the X label.
 </LI>
<LI>  <tt>obj.SetXLabelFormat (string _arg)</tt> -  Set/Get the format with which to print the X label.
 </LI>
<LI>  <tt>string = obj.GetXLabelFormat ()</tt> -  Set/Get the format with which to print the X label.
 </LI>
<LI>  <tt>obj.SetYLabelFormat (string _arg)</tt> -  Set/Get the format with which to print the Y label.
 </LI>
<LI>  <tt>string = obj.GetYLabelFormat ()</tt> -  Set/Get the format with which to print the Y label.
 </LI>
<LI>  <tt>obj.SetBorder (int )</tt> -  Set/Get the spacing between the plot window and the plot. The value
 is specified in pixels.
 </LI>
<LI>  <tt>int = obj.GetBorderMinValue ()</tt> -  Set/Get the spacing between the plot window and the plot. The value
 is specified in pixels.
 </LI>
<LI>  <tt>int = obj.GetBorderMaxValue ()</tt> -  Set/Get the spacing between the plot window and the plot. The value
 is specified in pixels.
 </LI>
<LI>  <tt>int = obj.GetBorder ()</tt> -  Set/Get the spacing between the plot window and the plot. The value
 is specified in pixels.
 </LI>
<LI>  <tt>int = obj.GetPlotPoints ()</tt> -  Set/Get whether the points are rendered.  The point size can be set in
 the property object. This is a global flag which affects the plot only 
 if per curve symbols are not defined.
 </LI>
<LI>  <tt>obj.SetPlotPoints (int )</tt> -  Set/Get whether the points are rendered.  The point size can be set in
 the property object. This is a global flag which affects the plot only 
 if per curve symbols are not defined.
 </LI>
<LI>  <tt>obj.PlotPointsOn ()</tt> -  Set/Get whether the points are rendered.  The point size can be set in
 the property object. This is a global flag which affects the plot only 
 if per curve symbols are not defined.
 </LI>
<LI>  <tt>obj.PlotPointsOff ()</tt> -  Set/Get whether the points are rendered.  The point size can be set in
 the property object. This is a global flag which affects the plot only 
 if per curve symbols are not defined.
 </LI>
<LI>  <tt>int = obj.GetPlotLines ()</tt> -  Set/Get whether the lines are rendered.  The line width can be set in
 the property object. 
 </LI>
<LI>  <tt>obj.SetPlotLines (int )</tt> -  Set/Get whether the lines are rendered.  The line width can be set in
 the property object. 
 </LI>
<LI>  <tt>obj.PlotLinesOn ()</tt> -  Set/Get whether the lines are rendered.  The line width can be set in
 the property object. 
 </LI>
<LI>  <tt>obj.PlotLinesOff ()</tt> -  Set/Get whether the lines are rendered.  The line width can be set in
 the property object. 
 </LI>
<LI>  <tt>obj.SetGlyphSize (double )</tt> -  Set/Get the factor that controls how big glyphs are in the plot.
 The number is expressed as a fraction of the length of the diagonal
 of the plot bounding box.
 </LI>
<LI>  <tt>double = obj.GetGlyphSizeMinValue ()</tt> -  Set/Get the factor that controls how big glyphs are in the plot.
 The number is expressed as a fraction of the length of the diagonal
 of the plot bounding box.
 </LI>
<LI>  <tt>double = obj.GetGlyphSizeMaxValue ()</tt> -  Set/Get the factor that controls how big glyphs are in the plot.
 The number is expressed as a fraction of the length of the diagonal
 of the plot bounding box.
 </LI>
<LI>  <tt>double = obj.GetGlyphSize ()</tt> -  Set/Get the factor that controls how big glyphs are in the plot.
 The number is expressed as a fraction of the length of the diagonal
 of the plot bounding box.
 </LI>
<LI>  <tt>obj.ViewportToPlotCoordinate (vtkViewport viewport)</tt> -  An alternate form of ViewportToPlotCoordinate() above. This method
 inputs the viewport coordinate pair (defined by the ivar 
 ViewportCoordinate)and then stores them in the ivar PlotCoordinate. 
 </LI>
<LI>  <tt>obj.SetPlotCoordinate (double , double )</tt> -  An alternate form of ViewportToPlotCoordinate() above. This method
 inputs the viewport coordinate pair (defined by the ivar 
 ViewportCoordinate)and then stores them in the ivar PlotCoordinate. 
 </LI>
<LI>  <tt>obj.SetPlotCoordinate (double  a[2])</tt> -  An alternate form of ViewportToPlotCoordinate() above. This method
 inputs the viewport coordinate pair (defined by the ivar 
 ViewportCoordinate)and then stores them in the ivar PlotCoordinate. 
 </LI>
<LI>  <tt>double = obj. GetPlotCoordinate ()</tt> -  An alternate form of ViewportToPlotCoordinate() above. This method
 inputs the viewport coordinate pair (defined by the ivar 
 ViewportCoordinate)and then stores them in the ivar PlotCoordinate. 
 </LI>
<LI>  <tt>obj.PlotToViewportCoordinate (vtkViewport viewport)</tt> -  An alternate form of PlotToViewportCoordinate() above. This method
 inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
 and then stores them in the ivar ViewportCoordinate. (This method 
 can be wrapped.)
 </LI>
<LI>  <tt>obj.SetViewportCoordinate (double , double )</tt> -  An alternate form of PlotToViewportCoordinate() above. This method
 inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
 and then stores them in the ivar ViewportCoordinate. (This method 
 can be wrapped.)
 </LI>
<LI>  <tt>obj.SetViewportCoordinate (double  a[2])</tt> -  An alternate form of PlotToViewportCoordinate() above. This method
 inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
 and then stores them in the ivar ViewportCoordinate. (This method 
 can be wrapped.)
 </LI>
<LI>  <tt>double = obj. GetViewportCoordinate ()</tt> -  An alternate form of PlotToViewportCoordinate() above. This method
 inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
 and then stores them in the ivar ViewportCoordinate. (This method 
 can be wrapped.)
 </LI>
<LI>  <tt>int = obj.IsInPlot (vtkViewport viewport, double u, double v)</tt> -  Is the specified viewport position within the plot area (as opposed to the
 region used by the plot plus the labels)?
 </LI>
<LI>  <tt>obj.SetChartBox (int )</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the chart box.
 </LI>
<LI>  <tt>int = obj.GetChartBox ()</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the chart box.
 </LI>
<LI>  <tt>obj.ChartBoxOn ()</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the chart box.
 </LI>
<LI>  <tt>obj.ChartBoxOff ()</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the chart box.
 </LI>
<LI>  <tt>obj.SetChartBorder (int )</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the legend box.
 </LI>
<LI>  <tt>int = obj.GetChartBorder ()</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the legend box.
 </LI>
<LI>  <tt>obj.ChartBorderOn ()</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the legend box.
 </LI>
<LI>  <tt>obj.ChartBorderOff ()</tt> -  Set/Get the flag that controls whether a box will be drawn/filled
 corresponding to the legend box.
 </LI>
<LI>  <tt>vtkProperty2D = obj.GetChartBoxProperty ()</tt> -  Get the box vtkProperty2D.
 </LI>
<LI>  <tt>obj.SetShowReferenceXLine (int )</tt> -  Set/Get if the X reference line is visible. hidden by default
 </LI>
<LI>  <tt>int = obj.GetShowReferenceXLine ()</tt> -  Set/Get if the X reference line is visible. hidden by default
 </LI>
<LI>  <tt>obj.ShowReferenceXLineOn ()</tt> -  Set/Get if the X reference line is visible. hidden by default
 </LI>
<LI>  <tt>obj.ShowReferenceXLineOff ()</tt> -  Set/Get if the X reference line is visible. hidden by default
 </LI>
<LI>  <tt>obj.SetReferenceXValue (double )</tt>
 </LI>
<LI>  <tt>double = obj.GetReferenceXValue ()</tt>
 </LI>
<LI>  <tt>obj.SetShowReferenceYLine (int )</tt> -  Set/Get if the Y reference line is visible. hidden by default
 </LI>
<LI>  <tt>int = obj.GetShowReferenceYLine ()</tt> -  Set/Get if the Y reference line is visible. hidden by default
 </LI>
<LI>  <tt>obj.ShowReferenceYLineOn ()</tt> -  Set/Get if the Y reference line is visible. hidden by default
 </LI>
<LI>  <tt>obj.ShowReferenceYLineOff ()</tt> -  Set/Get if the Y reference line is visible. hidden by default
 </LI>
<LI>  <tt>obj.SetReferenceYValue (double )</tt>
 </LI>
<LI>  <tt>double = obj.GetReferenceYValue ()</tt>
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Take into account the modified time of internal helper classes.
 </LI>
</UL>
*/
