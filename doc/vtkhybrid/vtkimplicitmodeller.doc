/*!
\page vtkhybrid_vtkimplicitmodeller vtkImplicitModeller

<p>
Section: \ref sec_vtkhybrid "Visualization Toolkit Hybrid Classes"
\section Usage
 vtkImplicitModeller is a filter that computes the distance from the input
 geometry to the points of an output structured point set. This distance
 function can then be "contoured" to generate new, offset surfaces from
 the original geometry. An important feature of this object is
 "capping". If capping is turned on, after the implicit model is created,
 the values on the boundary of the structured points dataset are set to
 the cap value. This is used to force closure of the resulting contoured
 surface. Note, however, that large cap values can generate weird surface
 normals in those cells adjacent to the boundary of the dataset. Using
 smaller cap value will reduce this effect.
<P>
 Another important ivar is MaximumDistance. This controls how far into the
 volume the distance function is computed from the input geometry.  Small
 values give significant increases in performance. However, there can
 strange sampling effects at the extreme range of the MaximumDistance.
<P>
 In order to properly execute and sample the input data, a rectangular
 region in space must be defined (this is the ivar ModelBounds).  If not
 explicitly defined, the model bounds will be computed. Note that to avoid
 boundary effects, it is possible to adjust the model bounds (i.e., using
 the AdjustBounds and AdjustDistance ivars) to strictly contain the
 sampled data.
<P>
 This filter has one other unusual capability: it is possible to append
 data in a sequence of operations to generate a single output. This is
 useful when you have multiple datasets and want to create a
 conglomeration of all the data.  However, the user must be careful to
 either specify the ModelBounds or specify the first item such that its
 bounds completely contain all other items.  This is because the 
 rectangular region of the output can not be changed after the 1st Append.
<P>
 The ProcessMode ivar controls the method used within the Append function
 (where the actual work is done regardless if the Append function is
 explicitly called) to compute the implicit model.  If set to work in voxel
 mode, each voxel is visited once.  If set to cell mode, each cell is visited
 once.  Tests have shown once per voxel to be faster when there are a 
 lot of cells (at least a thousand?); relative performance improvement 
 increases with addition cells. Primitives should not be stripped for best
 performance of the voxel mode.  Also, if explicitly using the Append feature
 many times, the cell mode will probably be better because each voxel will be
 visited each Append.  Append the data before input if possible when using
 the voxel mode.  Do not switch between voxel and cell mode between execution
 of StartAppend and EndAppend.
<P>
 Further performance improvement is now possible using the PerVoxel process
 mode on multi-processor machines (the mode is now multithreaded).  Each
 thread processes a different "slab" of the output.  Also, if the input is 
 vtkPolyData, it is appropriately clipped for each thread; that is, each 
 thread only considers the input which could affect its slab of the output.
<P>
 This filter can now produce output of any type supported by vtkImageData.  
 However to support this change, additional sqrts must be executed during the
 Append step.  Previously, the output was initialized to the squared CapValue 
 in StartAppend, the output was updated with squared distance values during 
 the Append, and then the sqrt of the distances was computed in EndAppend.  
 To support different scalar types in the output (largely to reduce memory 
 requirements as an vtkImageShiftScale and/or vtkImageCast could have 
 achieved the same result), we can't "afford" to save squared value in the
 output, because then we could only represent up to the sqrt of the scalar
 max for an integer type in the output; 1 (instead of 255) for an unsigned
 char; 11 for a char (instead of 127).  Thus this change may result in a
 minor performance degradation.  Non-float output types can be scaled to the
 CapValue by turning ScaleToMaximumDistance On.


To create an instance of class vtkImplicitModeller, simply
invoke its constructor as follows
\verbatim
  obj = vtkImplicitModeller
\endverbatim
\section Methods
The class vtkImplicitModeller has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkImplicitModeller class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkImplicitModeller = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkImplicitModeller = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>double = obj.ComputeModelBounds (vtkDataSet inputNULL)</tt> -  Compute ModelBounds from input geometry. If input is not specified, the
 input of the filter will be used.
 </LI>
<LI>  <tt>int = obj. GetSampleDimensions ()</tt> -  Set/Get the i-j-k dimensions on which to sample distance function.
 </LI>
<LI>  <tt>obj.SetSampleDimensions (int i, int j, int k)</tt> -  Set/Get the i-j-k dimensions on which to sample distance function.
 </LI>
<LI>  <tt>obj.SetSampleDimensions (int dim[3])</tt> -  Set/Get the i-j-k dimensions on which to sample distance function.
 </LI>
<LI>  <tt>obj.SetMaximumDistance (double )</tt> -  Set / get the distance away from surface of input geometry to
 sample. Smaller values make large increases in performance.
 </LI>
<LI>  <tt>double = obj.GetMaximumDistanceMinValue ()</tt> -  Set / get the distance away from surface of input geometry to
 sample. Smaller values make large increases in performance.
 </LI>
<LI>  <tt>double = obj.GetMaximumDistanceMaxValue ()</tt> -  Set / get the distance away from surface of input geometry to
 sample. Smaller values make large increases in performance.
 </LI>
<LI>  <tt>double = obj.GetMaximumDistance ()</tt> -  Set / get the distance away from surface of input geometry to
 sample. Smaller values make large increases in performance.
 </LI>
<LI>  <tt>obj.SetModelBounds (double , double , double , double , double , double )</tt> -  Set / get the region in space in which to perform the sampling. If
 not specified, it will be computed automatically.
 </LI>
<LI>  <tt>obj.SetModelBounds (double  a[6])</tt> -  Set / get the region in space in which to perform the sampling. If
 not specified, it will be computed automatically.
 </LI>
<LI>  <tt>double = obj. GetModelBounds ()</tt> -  Set / get the region in space in which to perform the sampling. If
 not specified, it will be computed automatically.
 </LI>
<LI>  <tt>obj.SetAdjustBounds (int )</tt> -  Control how the model bounds are computed. If the ivar AdjustBounds
 is set, then the bounds specified (or computed automatically) is modified
 by the fraction given by AdjustDistance. This means that the model
 bounds is expanded in each of the x-y-z directions.
 </LI>
<LI>  <tt>int = obj.GetAdjustBounds ()</tt> -  Control how the model bounds are computed. If the ivar AdjustBounds
 is set, then the bounds specified (or computed automatically) is modified
 by the fraction given by AdjustDistance. This means that the model
 bounds is expanded in each of the x-y-z directions.
 </LI>
<LI>  <tt>obj.AdjustBoundsOn ()</tt> -  Control how the model bounds are computed. If the ivar AdjustBounds
 is set, then the bounds specified (or computed automatically) is modified
 by the fraction given by AdjustDistance. This means that the model
 bounds is expanded in each of the x-y-z directions.
 </LI>
<LI>  <tt>obj.AdjustBoundsOff ()</tt> -  Control how the model bounds are computed. If the ivar AdjustBounds
 is set, then the bounds specified (or computed automatically) is modified
 by the fraction given by AdjustDistance. This means that the model
 bounds is expanded in each of the x-y-z directions.
 </LI>
<LI>  <tt>obj.SetAdjustDistance (double )</tt> -  Specify the amount to grow the model bounds (if the ivar AdjustBounds
 is set). The value is a fraction of the maximum length of the sides
 of the box specified by the model bounds.
 </LI>
<LI>  <tt>double = obj.GetAdjustDistanceMinValue ()</tt> -  Specify the amount to grow the model bounds (if the ivar AdjustBounds
 is set). The value is a fraction of the maximum length of the sides
 of the box specified by the model bounds.
 </LI>
<LI>  <tt>double = obj.GetAdjustDistanceMaxValue ()</tt> -  Specify the amount to grow the model bounds (if the ivar AdjustBounds
 is set). The value is a fraction of the maximum length of the sides
 of the box specified by the model bounds.
 </LI>
<LI>  <tt>double = obj.GetAdjustDistance ()</tt> -  Specify the amount to grow the model bounds (if the ivar AdjustBounds
 is set). The value is a fraction of the maximum length of the sides
 of the box specified by the model bounds.
 </LI>
<LI>  <tt>obj.SetCapping (int )</tt> -  The outer boundary of the structured point set can be assigned a 
 particular value. This can be used to close or "cap" all surfaces.
 </LI>
<LI>  <tt>int = obj.GetCapping ()</tt> -  The outer boundary of the structured point set can be assigned a 
 particular value. This can be used to close or "cap" all surfaces.
 </LI>
<LI>  <tt>obj.CappingOn ()</tt> -  The outer boundary of the structured point set can be assigned a 
 particular value. This can be used to close or "cap" all surfaces.
 </LI>
<LI>  <tt>obj.CappingOff ()</tt> -  The outer boundary of the structured point set can be assigned a 
 particular value. This can be used to close or "cap" all surfaces.
 </LI>
<LI>  <tt>obj.SetCapValue (double value)</tt> -  Specify the capping value to use. The CapValue is also used as an
 initial distance value at each point in the dataset.
 </LI>
<LI>  <tt>double = obj.GetCapValue ()</tt> -  Specify the capping value to use. The CapValue is also used as an
 initial distance value at each point in the dataset.
 </LI>
<LI>  <tt>obj.SetScaleToMaximumDistance (int )</tt> -  If a non-floating output type is specified, the output distances can be
 scaled to use the entire positive scalar range of the output type 
 specified (up to the CapValue which is equal to the max for the type 
 unless modified by the user).  For example, if ScaleToMaximumDistance
 is On and the OutputScalarType is UnsignedChar the distances saved in the
 output would be linearly scaled between 0 (for distances "very close" to
 the surface) and 255 (at the specifed maximum distance)... assuming the 
 CapValue is not changed from 255.
 </LI>
<LI>  <tt>int = obj.GetScaleToMaximumDistance ()</tt> -  If a non-floating output type is specified, the output distances can be
 scaled to use the entire positive scalar range of the output type 
 specified (up to the CapValue which is equal to the max for the type 
 unless modified by the user).  For example, if ScaleToMaximumDistance
 is On and the OutputScalarType is UnsignedChar the distances saved in the
 output would be linearly scaled between 0 (for distances "very close" to
 the surface) and 255 (at the specifed maximum distance)... assuming the 
 CapValue is not changed from 255.
 </LI>
<LI>  <tt>obj.ScaleToMaximumDistanceOn ()</tt> -  If a non-floating output type is specified, the output distances can be
 scaled to use the entire positive scalar range of the output type 
 specified (up to the CapValue which is equal to the max for the type 
 unless modified by the user).  For example, if ScaleToMaximumDistance
 is On and the OutputScalarType is UnsignedChar the distances saved in the
 output would be linearly scaled between 0 (for distances "very close" to
 the surface) and 255 (at the specifed maximum distance)... assuming the 
 CapValue is not changed from 255.
 </LI>
<LI>  <tt>obj.ScaleToMaximumDistanceOff ()</tt> -  If a non-floating output type is specified, the output distances can be
 scaled to use the entire positive scalar range of the output type 
 specified (up to the CapValue which is equal to the max for the type 
 unless modified by the user).  For example, if ScaleToMaximumDistance
 is On and the OutputScalarType is UnsignedChar the distances saved in the
 output would be linearly scaled between 0 (for distances "very close" to
 the surface) and 255 (at the specifed maximum distance)... assuming the 
 CapValue is not changed from 255.
 </LI>
<LI>  <tt>obj.SetProcessMode (int )</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>int = obj.GetProcessModeMinValue ()</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>int = obj.GetProcessModeMaxValue ()</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>int = obj.GetProcessMode ()</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>obj.SetProcessModeToPerVoxel ()</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>obj.SetProcessModeToPerCell ()</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>string = obj.GetProcessModeAsString (void )</tt> -  Specify whether to visit each cell once per append or each voxel once
 per append.  Some tests have shown once per voxel to be faster
 when there are a lot of cells (at least a thousand?); relative
 performance improvement increases with addition cells.  Primitives
 should not be stripped for best performance of the voxel mode.  
 </LI>
<LI>  <tt>obj.SetLocatorMaxLevel (int )</tt> -  Specify the level of the locator to use when using the per voxel
 process mode.
 </LI>
<LI>  <tt>int = obj.GetLocatorMaxLevel ()</tt> -  Specify the level of the locator to use when using the per voxel
 process mode.
 </LI>
<LI>  <tt>obj.SetNumberOfThreads (int )</tt> -  Set / Get the number of threads used during Per-Voxel processing mode
 </LI>
<LI>  <tt>int = obj.GetNumberOfThreadsMinValue ()</tt> -  Set / Get the number of threads used during Per-Voxel processing mode
 </LI>
<LI>  <tt>int = obj.GetNumberOfThreadsMaxValue ()</tt> -  Set / Get the number of threads used during Per-Voxel processing mode
 </LI>
<LI>  <tt>int = obj.GetNumberOfThreads ()</tt> -  Set / Get the number of threads used during Per-Voxel processing mode
 </LI>
<LI>  <tt>obj.SetOutputScalarType (int type)</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>int = obj.GetOutputScalarType ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToFloat ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToDouble ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToInt ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToUnsignedInt ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToLong ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToUnsignedLong ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToShort ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToUnsignedShort ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToUnsignedChar ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.SetOutputScalarTypeToChar ()</tt> -  Set the desired output scalar type.
 </LI>
<LI>  <tt>obj.StartAppend ()</tt> -  Initialize the filter for appending data. You must invoke the
 StartAppend() method before doing successive Appends(). It's also a
 good idea to manually specify the model bounds; otherwise the input
 bounds for the data will be used.
 </LI>
<LI>  <tt>obj.Append (vtkDataSet input)</tt> -  Append a data set to the existing output. To use this function,
 you'll have to invoke the StartAppend() method before doing
 successive appends. It's also a good idea to specify the model
 bounds; otherwise the input model bounds is used. When you've
 finished appending, use the EndAppend() method.
 </LI>
<LI>  <tt>obj.EndAppend ()</tt> -  Method completes the append process.
 </LI>
</UL>
*/
