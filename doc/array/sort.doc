/*!
\page array_sort SORT Sort 

<p>
Section: \ref sec_array "Array Generation and Manipulations"
\section Usage
Sorts an n-dimensional array along the specified dimensional.  The first
form sorts the array along the first non-singular dimension.
\verbatim
  B = sort(A)
\endverbatim
Alternately, the dimension along which to sort can be explicitly specified
\verbatim
  B = sort(A,dim)
\endverbatim
FreeMat does not support vector arguments for <tt>dim</tt> - if you need <tt>A</tt> to be
sorted along multiple dimensions (i.e., row first, then columns), make multiple
calls to <tt>sort</tt>.  Also, the direction of the sort can be specified using the 
<tt>mode</tt> argument
\verbatim
  B = sort(A,dim,mode)
\endverbatim
where <tt>mode = 'ascend'</tt> means to sort the data in ascending order (the default),
and <tt>mode = 'descend'</tt> means to sort the data into descending order.  

When two outputs are requested from <tt>sort</tt>, the indexes are also returned.
Thus, for 
\verbatim
  [B,IX] = sort(A)
  [B,IX] = sort(A,dim)
  [B,IX] = sort(A,dim,mode)
\endverbatim
an array <tt>IX</tt> of the same size as <tt>A</tt>, where <tt>IX</tt> records the indices of <tt>A</tt>
(along the sorting dimension) corresponding to the output array <tt>B</tt>. 

Two additional issues worth noting.  First, a cell array can be sorted if each 
cell contains a <tt>string</tt>, in which case the strings are sorted by lexical order.
The second issue is that FreeMat uses the same method as MATLAB to sort complex
numbers.  In particular, a complex number <tt>a</tt> is less than another complex
number <tt>b</tt> if <tt>abs(a) < abs(b)</tt>.  If the magnitudes are the same then we 
test the angle of <tt>a</tt>, i.e. <tt>angle(a) < angle(b)</tt>, where <tt>angle(a)</tt> is the
phase of <tt>a</tt> between <tt>-pi,pi</tt>.
\section Example
Here are some examples of sorting on numerical arrays.

\if FRAGMENT
frag_array_sort_000.m
0
A = int32(10*rand(4,3))
[B,IX] = sort(A)
[B,IX] = sort(A,2)
[B,IX] = sort(A,1,'descend')
\endif


\verbinclude frag_array_sort_000.m.out 

Here we sort a cell array of strings.

\if FRAGMENT
frag_array_sort_001.m
0
a = {'hello','abba','goodbye','jockey','cake'}
b = sort(a)
\endif


\verbinclude frag_array_sort_001.m.out 

*/
