/*!
\page array_nan NAN Not-a-Number Constant

<p>
Section: \ref sec_array "Array Generation and Manipulations"
\section Usage
Returns a value that represents ``not-a-number'' for both 32 and 64-bit 
floating point values.  This constant is meant to represent the result of
arithmetic operations whose output cannot be meaningfully defined (like 
zero divided by zero).  There are several forms for the <tt>NaN</tt> function.
The first form returns a double precision <tt>NaN</tt>.
\verbatim
   y = nan
\endverbatim
The next form takes a class name that can be either <tt>'double'</tt> 
\verbatim
   y = nan('double')
\endverbatim
or <tt>'single'</tt>:
\verbatim
   y = nan('single')
\endverbatim
With a single parameter it generates a square matrix of <tt>nan</tt>s.
\verbatim
   y = nan(n)
\endverbatim
Alternatively, you can specify the dimensions of the array via
\verbatim
   y = nan(m,n,p,...)
\endverbatim
or
\verbatim
   y = nan([m,n,p,...])
\endverbatim
Finally, you can add a classname of either <tt>'single'</tt> or <tt>'double'</tt>.
\section Example
The following examples demonstrate a few calculations with the not-a-number constant.

\if FRAGMENT
frag_array_nan_000.m
0
nan*0
nan-nan
\endif


\verbinclude frag_array_nan_000.m.out 

Note that <tt>NaN</tt>s are preserved under type conversion to floating point types (i.e., <tt>float</tt>, <tt>double</tt>, <tt>complex</tt> and <tt>dcomplex</tt> types), but not integer  types.

\if FRAGMENT
frag_array_nan_001.m
0
uint32(nan)
complex(nan)
\endif


\verbinclude frag_array_nan_001.m.out 

*/
