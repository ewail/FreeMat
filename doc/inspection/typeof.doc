/*!
\page inspection_typeof TYPEOF Determine the Type of an Argument

<p>
Section: \ref sec_inspection "Inspection Functions"
\section Usage
Returns a string describing the type of an array.  The syntax for its use is
\verbatim
   y = typeof(x),
\endverbatim
The returned string is one of
<UL>
<LI>  <tt>'cell'</tt> for cell-arrays
 </LI>
<LI>  <tt>'struct'</tt> for structure-arrays
 </LI>
<LI>  <tt>'logical'</tt> for logical arrays
 </LI>
<LI>  <tt>'uint8'</tt> for unsigned 8-bit integers
 </LI>
<LI>  <tt>'int8'</tt> for signed 8-bit integers
 </LI>
<LI>  <tt>'uint16'</tt> for unsigned 16-bit integers
 </LI>
<LI>  <tt>'int16'</tt> for signed 16-bit integers
 </LI>
<LI>  <tt>'uint32'</tt> for unsigned 32-bit integers
 </LI>
<LI>  <tt>'int32'</tt> for signed 32-bit integers
 </LI>
<LI>  <tt>'float'</tt> for 32-bit floating point numbers
 </LI>
<LI>  <tt>'double'</tt> for 64-bit floating point numbers
 </LI>
<LI>  <tt>'string'</tt> for string arrays
 </LI>
</UL>
\section Example
The following piece of code demonstrates the output of the <tt>typeof</tt> 
command for each possible type.  The first example is with a simple cell array.

\if FRAGMENT
frag_inspection_typeof_000.m
0
typeof({1})
\endif


\verbinclude frag_inspection_typeof_000.m.out 

The next example uses the <tt>struct</tt> constructor to make a simple scalar struct.

\if FRAGMENT
frag_inspection_typeof_001.m
0
typeof(struct('foo',3))
\endif


\verbinclude frag_inspection_typeof_001.m.out 

The next example uses a comparison between two scalar integers to generate 
a scalar logical type.

\if FRAGMENT
frag_inspection_typeof_002.m
0
typeof(3>5)
\endif


\verbinclude frag_inspection_typeof_002.m.out 

For the integers, the typecast operations are used to generate the arguments.

\if FRAGMENT
frag_inspection_typeof_003.m
0
typeof(uint8(3))
typeof(int8(8))
typeof(uint16(3))
typeof(int16(8))
typeof(uint32(3))
typeof(int32(3))
typeof(uint64(3))
typeof(int64(3))
\endif


\verbinclude frag_inspection_typeof_003.m.out 

Float, and double can be created using the suffixes.

\if FRAGMENT
frag_inspection_typeof_004.m
0
typeof(1.0f)
typeof(1.0D)
typeof(1.0f+i)
typeof(1.0D+2.0D*i)
\endif


\verbinclude frag_inspection_typeof_004.m.out 

*/
