/*!
\page inspection_isa ISA Test Type of Variable

<p>
Section: \ref sec_inspection "Inspection Functions"
\section Usage
Tests the type of a variable.  The syntax for its
use is
\verbatim
   y = isa(x,type)
\endverbatim
where <tt>x</tt> is the variable to test, and <tt>type</tt> is
the type.  Supported built-in types are
<UL>
<LI>  <tt>'cell'</tt> for cell-arrays
 </LI>
<LI>  <tt>'struct'</tt> for structure-arrays
 </LI>
<LI>  <tt>'logical'</tt> for logical arrays
 </LI>
<LI>  <tt>'uint8'</tt> for unsigned 8-bit integers
 </LI>
<LI>  <tt>'int8'</tt> for signed 8-bit integers
 </LI>
<LI>  <tt>'uint16'</tt> for unsigned 16-bit integers
 </LI>
<LI>  <tt>'int16'</tt> for signed 16-bit integers
 </LI>
<LI>  <tt>'uint32'</tt> for unsigned 32-bit integers
 </LI>
<LI>  <tt>'int32'</tt> for signed 32-bit integers
 </LI>
<LI>  <tt>'uint64'</tt> for unsigned 64-bit integers
 </LI>
<LI>  <tt>'int64'</tt> for signed 64-bit integers
 </LI>
<LI>  <tt>'single'</tt> for 32-bit floating point numbers
 </LI>
<LI>  <tt>'double'</tt> for 64-bit floating point numbers
 </LI>
<LI>  <tt>'char'</tt> for string arrays
 </LI>
</UL>
If the argument is a user-defined type (via the <tt>class</tt> function), then
the name of that class is returned.
\section Examples
Here are some examples of the <tt>isa</tt> call.

\if FRAGMENT
frag_inspection_isa_000.m
0
a = {1}
isa(a,'char')
isa(a,'cell')
\endif


\verbinclude frag_inspection_isa_000.m.out 

Here we use <tt>isa</tt> along with shortcut boolean evaluation to 
safely determine if a variable contains the string <tt>'hello'</tt>

\if FRAGMENT
frag_inspection_isa_001.m
0
a = 'hello'
isa(a,'char') && strcmp(a,'hello')
\endif


\verbinclude frag_inspection_isa_001.m.out 

*/
