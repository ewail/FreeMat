/*!
\page vtkcommon_vtkidlist vtkIdList

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 vtkIdList is used to represent and pass data id's between
 objects. vtkIdList may represent any type of integer id, but
 usually represents point and cell ids.

To create an instance of class vtkIdList, simply
invoke its constructor as follows
\verbatim
  obj = vtkIdList
\endverbatim
\section Methods
The class vtkIdList has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkIdList class.
<UL>
<LI>  <tt>obj.Initialize ()</tt>
 </LI>
<LI>  <tt>int = obj.Allocate (vtkIdType sz, int strategy)</tt>
 </LI>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkIdList = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkIdList = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfIds ()</tt> -  Return the number of id's in the list.
 </LI>
<LI>  <tt>vtkIdType = obj.GetId (vtkIdType i)</tt> -  Return the id at location i.
 </LI>
<LI>  <tt>obj.SetNumberOfIds (vtkIdType number)</tt> -  Specify the number of ids for this object to hold. Does an
 allocation as well as setting the number of ids.
 </LI>
<LI>  <tt>obj.SetId (vtkIdType i, vtkIdType vtkid)</tt> -  Set the id at location i. Doesn't do range checking so it's a bit
 faster than InsertId. Make sure you use SetNumberOfIds() to allocate
 memory prior to using SetId().
 </LI>
<LI>  <tt>obj.InsertId (vtkIdType i, vtkIdType vtkid)</tt> -  Set the id at location i. Does range checking and allocates memory
 as necessary.
 </LI>
<LI>  <tt>vtkIdType = obj.InsertNextId (vtkIdType vtkid)</tt> -  Add the id specified to the end of the list. Range checking is performed.
 </LI>
<LI>  <tt>vtkIdType = obj.InsertUniqueId (vtkIdType vtkid)</tt> -  If id is not already in list, insert it and return location in
 list. Otherwise return just location in list.
 </LI>
<LI>  <tt>vtkIdType = obj.GetPointer (vtkIdType i)</tt> -  Get a pointer to a particular data index.
 </LI>
<LI>  <tt>vtkIdType = obj.WritePointer (vtkIdType i, vtkIdType number)</tt> -  Get a pointer to a particular data index. Make sure data is allocated
 for the number of items requested. Set MaxId according to the number of
 data values requested.
 </LI>
<LI>  <tt>obj.Reset ()</tt> -  Reset to an empty state.
 </LI>
<LI>  <tt>obj.Squeeze ()</tt> -  Free any unused memory.
 </LI>
<LI>  <tt>obj.DeepCopy (vtkIdList ids)</tt> -  Copy an id list by explicitly copying the internal array.
 </LI>
<LI>  <tt>obj.DeleteId (vtkIdType vtkid)</tt> -  Delete specified id from list. Will remove all occurrences of id in list.
 </LI>
<LI>  <tt>vtkIdType = obj.IsId (vtkIdType vtkid)</tt> -  Return -1 if id specified is not contained in the list; otherwise return
 the position in the list.
 </LI>
<LI>  <tt>obj.IntersectWith (vtkIdList &otherIds)</tt> -  Intersect this list with another vtkIdList. Updates current list according
 to result of intersection operation.
 </LI>
</UL>
*/
