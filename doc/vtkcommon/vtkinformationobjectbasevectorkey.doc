/*!
\page vtkcommon_vtkinformationobjectbasevectorkey vtkInformationObjectBaseVectorKey

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 vtkInformationObjectBaseVectorKey is used to represent keys for double
 vector values in vtkInformation.h. NOTE the interface in this key differs
 from that in other similar keys because of our internal use of smart
 pointers.

To create an instance of class vtkInformationObjectBaseVectorKey, simply
invoke its constructor as follows
\verbatim
  obj = vtkInformationObjectBaseVectorKey
\endverbatim
\section Methods
The class vtkInformationObjectBaseVectorKey has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkInformationObjectBaseVectorKey class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkInformationObjectBaseVectorKey = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkInformationObjectBaseVectorKey = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>vtkInformationObjectBaseVectorKey = obj.(string name, string location, string requiredClass)</tt> -  The name of the static instance and the class in which
 it is defined(location) should be passed to the constructor.
 Providing "requiredClass" name one can insure that only 
 objects of type "requiredClass" are stored in vectors 
 associated with the instance of this key type created.
 These should be string literals as they are not coppied.
 </LI>
<LI>  <tt>~vtkInformationObjectBaseVectorKey = obj.()</tt> -  The name of the static instance and the class in which
 it is defined(location) should be passed to the constructor.
 Providing "requiredClass" name one can insure that only 
 objects of type "requiredClass" are stored in vectors 
 associated with the instance of this key type created.
 These should be string literals as they are not coppied.

 </LI>
<LI>  <tt>obj.Clear (vtkInformation info)</tt> -  Clear the vector.
 </LI>
<LI>  <tt>obj.Resize (vtkInformation info, int n)</tt> -  Resize (extend) the vector to hold n objects. Any new elements
 created will be null initialized.
 </LI>
<LI>  <tt>int = obj.Size (vtkInformation info)</tt> -  Get the vector's length.
 </LI>
<LI>  <tt>int = obj.Length (vtkInformation info)</tt> -  Put the value on the back of the vector, with ref counting.
 </LI>
<LI>  <tt>obj.Append (vtkInformation info, vtkObjectBase value)</tt> -  Put the value on the back of the vector, with ref counting.
 </LI>
<LI>  <tt>obj.Set (vtkInformation info, vtkObjectBase value, int i)</tt> -  Set element i of the vector to value. Resizes the vector
 if needed.
 </LI>
<LI>  <tt>vtkObjectBase = obj.Get (vtkInformation info, int idx)</tt> -  Get the vtkObjectBase at a specific location in the vector.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkInformation from, vtkInformation to)</tt> -  Copy the entry associated with this key from one information
 object to another.  If there is no entry in the first information
 object for this key, the value is removed from the second.
 </LI>
</UL>
*/
