/*!
\page vtkcommon_vtkextenttranslator vtkExtentTranslator

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 vtkExtentTranslator generates a structured extent from an unstructured
 extent.  It uses a recursive scheme that splits the largest axis.  A hard
 coded extent can be used for a starting point.

To create an instance of class vtkExtentTranslator, simply
invoke its constructor as follows
\verbatim
  obj = vtkExtentTranslator
\endverbatim
\section Methods
The class vtkExtentTranslator has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkExtentTranslator class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkExtentTranslator = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkExtentTranslator = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetWholeExtent (int , int , int , int , int , int )</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>obj.SetWholeExtent (int  a[6])</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>int = obj. GetWholeExtent ()</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>obj.SetExtent (int , int , int , int , int , int )</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>obj.SetExtent (int  a[6])</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>int = obj. GetExtent ()</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>obj.SetPiece (int )</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>int = obj.GetPiece ()</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>obj.SetNumberOfPieces (int )</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>int = obj.GetNumberOfPieces ()</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>obj.SetGhostLevel (int )</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>int = obj.GetGhostLevel ()</tt> -  Set the Piece/NumPieces. Set the WholeExtent and then call PieceToExtent.
 The result can be obtained from the Extent ivar.
 </LI>
<LI>  <tt>int = obj.PieceToExtent ()</tt> -  These are the main methods that should be called. These methods 
 are responsible for converting a piece to an extent. The signatures
 without arguments are only thread safe when each thread accesses a
 different instance. The signatures with arguements are fully thread
 safe. 
 </LI>
<LI>  <tt>int = obj.PieceToExtentByPoints ()</tt> -  These are the main methods that should be called. These methods 
 are responsible for converting a piece to an extent. The signatures
 without arguments are only thread safe when each thread accesses a
 different instance. The signatures with arguements are fully thread
 safe. 
 </LI>
<LI>  <tt>int = obj.PieceToExtentThreadSafe (int piece, int numPieces, int ghostLevel, int wholeExtent, int resultExtent, int splitMode, int byPoints)</tt> -  These are the main methods that should be called. These methods 
 are responsible for converting a piece to an extent. The signatures
 without arguments are only thread safe when each thread accesses a
 different instance. The signatures with arguements are fully thread
 safe. 
 </LI>
<LI>  <tt>obj.SetSplitModeToBlock ()</tt> -  How should the streamer break up extents. Block mode
 tries to break an extent up into cube blocks.  It always chooses
 the largest axis to split.
 Slab mode first breaks up the Z axis.  If it gets to one slice,
 then it starts breaking up other axes.
 </LI>
<LI>  <tt>obj.SetSplitModeToXSlab ()</tt> -  How should the streamer break up extents. Block mode
 tries to break an extent up into cube blocks.  It always chooses
 the largest axis to split.
 Slab mode first breaks up the Z axis.  If it gets to one slice,
 then it starts breaking up other axes.
 </LI>
<LI>  <tt>obj.SetSplitModeToYSlab ()</tt> -  How should the streamer break up extents. Block mode
 tries to break an extent up into cube blocks.  It always chooses
 the largest axis to split.
 Slab mode first breaks up the Z axis.  If it gets to one slice,
 then it starts breaking up other axes.
 </LI>
<LI>  <tt>obj.SetSplitModeToZSlab ()</tt> -  How should the streamer break up extents. Block mode
 tries to break an extent up into cube blocks.  It always chooses
 the largest axis to split.
 Slab mode first breaks up the Z axis.  If it gets to one slice,
 then it starts breaking up other axes.
 </LI>
<LI>  <tt>int = obj.GetSplitMode ()</tt> -  How should the streamer break up extents. Block mode
 tries to break an extent up into cube blocks.  It always chooses
 the largest axis to split.
 Slab mode first breaks up the Z axis.  If it gets to one slice,
 then it starts breaking up other axes.
 </LI>
<LI>  <tt>obj.SetSplitPath (int len, int splitpath)</tt>
 </LI>
</UL>
*/
