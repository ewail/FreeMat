/*!
\page vtkcommon_vtkparametricfunction vtkParametricFunction

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 vtkParametricFunction is an abstract interface for functions
 defined by parametric mapping i.e. f(u,v,w)->(x,y,z) where 
 u_min <= u < u_max, v_min <= v < v_max, w_min <= w < w_max. (For
 notational convenience, we will write f(u)->x and assume that
 u means (u,v,w) and x means (x,y,z).)

 The interface contains the pure virtual function, Evaluate(), that
 generates a point and the derivatives at that point which are then used to
 construct the surface. A second pure virtual function, EvaluateScalar(),
 can be used to generate a scalar for the surface. Finally, the
 GetDimension() virtual function is used to differentiate 1D, 2D, and 3D
 parametric functions. Since this abstract class defines a pure virtual
 API, its subclasses must implement the pure virtual functions
 GetDimension(), Evaluate() and EvaluateScalar().

 This class has also methods for defining a range of parametric values (u,v,w).
 
 .SECTION Thanks
 Andrew Maclean a.maclean@cas.edu.au for creating and contributing the
 class.


To create an instance of class vtkParametricFunction, simply
invoke its constructor as follows
\verbatim
  obj = vtkParametricFunction
\endverbatim
\section Methods
The class vtkParametricFunction has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkParametricFunction class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkParametricFunction = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkParametricFunction = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetDimension ()</tt>
 </LI>
<LI>  <tt>obj.Evaluate (double uvw[3], double Pt[3], double Duvw[9])</tt> -  Performs the mapping \$f(uvw)->(Pt,Duvw)\$f.
 This is a pure virtual function that must be instantiated in 
 a derived class. 

 uvw are the parameters, with u corresponding to uvw[0],
 v to uvw[1] and w to uvw[2] respectively. Pt is the returned Cartesian point, 
 Duvw are the derivatives of this point with respect to u, v and w.  
 Note that the first three values in Duvw are Du, the next three are Dv, 
 and the final three are Dw. Du Dv Dw are the partial derivatives of the 
 function at the point Pt with respect to u, v and w respectively.
 </LI>
<LI>  <tt>double = obj.EvaluateScalar (double uvw[3], double Pt[3], double Duvw[9])</tt> -  Calculate a user defined scalar using one or all of uvw, Pt, Duvw.
 This is a pure virtual function that must be instantiated in 
 a derived class. 

 uvw are the parameters with Pt being the the cartesian point, 
 Duvw are the derivatives of this point with respect to u, v, and w.
 Pt, Duvw are obtained from Evaluate().
 </LI>
<LI>  <tt>obj.SetMinimumU (double )</tt> -  Set/Get the minimum u-value.
 </LI>
<LI>  <tt>double = obj.GetMinimumU ()</tt> -  Set/Get the minimum u-value.
 </LI>
<LI>  <tt>obj.SetMaximumU (double )</tt> -  Set/Get the maximum u-value.
 </LI>
<LI>  <tt>double = obj.GetMaximumU ()</tt> -  Set/Get the maximum u-value.
 </LI>
<LI>  <tt>obj.SetMinimumV (double )</tt> -  Set/Get the minimum v-value.
 </LI>
<LI>  <tt>double = obj.GetMinimumV ()</tt> -  Set/Get the minimum v-value.
 </LI>
<LI>  <tt>obj.SetMaximumV (double )</tt> -  Set/Get the maximum v-value.
 </LI>
<LI>  <tt>double = obj.GetMaximumV ()</tt> -  Set/Get the maximum v-value.
 </LI>
<LI>  <tt>obj.SetMinimumW (double )</tt> -  Set/Get the minimum w-value.
 </LI>
<LI>  <tt>double = obj.GetMinimumW ()</tt> -  Set/Get the minimum w-value.
 </LI>
<LI>  <tt>obj.SetMaximumW (double )</tt> -  Set/Get the maximum w-value.
 </LI>
<LI>  <tt>double = obj.GetMaximumW ()</tt> -  Set/Get the maximum w-value.
 </LI>
<LI>  <tt>obj.SetJoinU (int )</tt> -  Set/Get the flag which joins the first triangle strip to the last one.
 </LI>
<LI>  <tt>int = obj.GetJoinU ()</tt> -  Set/Get the flag which joins the first triangle strip to the last one.
 </LI>
<LI>  <tt>obj.JoinUOn ()</tt> -  Set/Get the flag which joins the first triangle strip to the last one.
 </LI>
<LI>  <tt>obj.JoinUOff ()</tt> -  Set/Get the flag which joins the first triangle strip to the last one.
 </LI>
<LI>  <tt>obj.SetJoinV (int )</tt> -  Set/Get the flag which joins the the ends of the triangle strips.
 </LI>
<LI>  <tt>int = obj.GetJoinV ()</tt> -  Set/Get the flag which joins the the ends of the triangle strips.
 </LI>
<LI>  <tt>obj.JoinVOn ()</tt> -  Set/Get the flag which joins the the ends of the triangle strips.
 </LI>
<LI>  <tt>obj.JoinVOff ()</tt> -  Set/Get the flag which joins the the ends of the triangle strips.
 </LI>
<LI>  <tt>obj.SetTwistU (int )</tt> -  Set/Get the flag which joins the first triangle strip to 
 the last one with a twist.
 JoinU must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>int = obj.GetTwistU ()</tt> -  Set/Get the flag which joins the first triangle strip to 
 the last one with a twist.
 JoinU must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>obj.TwistUOn ()</tt> -  Set/Get the flag which joins the first triangle strip to 
 the last one with a twist.
 JoinU must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>obj.TwistUOff ()</tt> -  Set/Get the flag which joins the first triangle strip to 
 the last one with a twist.
 JoinU must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>obj.SetTwistV (int )</tt> -  Set/Get the flag which joins the ends of the 
 triangle strips with a twist.
 JoinV must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>int = obj.GetTwistV ()</tt> -  Set/Get the flag which joins the ends of the 
 triangle strips with a twist.
 JoinV must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>obj.TwistVOn ()</tt> -  Set/Get the flag which joins the ends of the 
 triangle strips with a twist.
 JoinV must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>obj.TwistVOff ()</tt> -  Set/Get the flag which joins the ends of the 
 triangle strips with a twist.
 JoinV must also be set if this is set. Used when building
 some non-orientable surfaces.
 </LI>
<LI>  <tt>obj.SetClockwiseOrdering (int )</tt> -  Set/Get the flag which determines the ordering of the the 
 vertices forming the triangle strips. The ordering of the 
 points being inserted into the triangle strip is important 
 because it determines the direction of the normals for the 
 lighting. If set, the ordering is clockwise, otherwise the
 ordering is anti-clockwise. Default is true (i.e. clockwise
 ordering).
 </LI>
<LI>  <tt>int = obj.GetClockwiseOrdering ()</tt> -  Set/Get the flag which determines the ordering of the the 
 vertices forming the triangle strips. The ordering of the 
 points being inserted into the triangle strip is important 
 because it determines the direction of the normals for the 
 lighting. If set, the ordering is clockwise, otherwise the
 ordering is anti-clockwise. Default is true (i.e. clockwise
 ordering).
 </LI>
<LI>  <tt>obj.ClockwiseOrderingOn ()</tt> -  Set/Get the flag which determines the ordering of the the 
 vertices forming the triangle strips. The ordering of the 
 points being inserted into the triangle strip is important 
 because it determines the direction of the normals for the 
 lighting. If set, the ordering is clockwise, otherwise the
 ordering is anti-clockwise. Default is true (i.e. clockwise
 ordering).
 </LI>
<LI>  <tt>obj.ClockwiseOrderingOff ()</tt> -  Set/Get the flag which determines the ordering of the the 
 vertices forming the triangle strips. The ordering of the 
 points being inserted into the triangle strip is important 
 because it determines the direction of the normals for the 
 lighting. If set, the ordering is clockwise, otherwise the
 ordering is anti-clockwise. Default is true (i.e. clockwise
 ordering).
 </LI>
<LI>  <tt>obj.SetDerivativesAvailable (int )</tt> -  Set/Get the flag which determines whether derivatives are available 
 from the parametric function (i.e., whether the Evaluate() method 
 returns valid derivatives).
 </LI>
<LI>  <tt>int = obj.GetDerivativesAvailable ()</tt> -  Set/Get the flag which determines whether derivatives are available 
 from the parametric function (i.e., whether the Evaluate() method 
 returns valid derivatives).
 </LI>
<LI>  <tt>obj.DerivativesAvailableOn ()</tt> -  Set/Get the flag which determines whether derivatives are available 
 from the parametric function (i.e., whether the Evaluate() method 
 returns valid derivatives).
 </LI>
<LI>  <tt>obj.DerivativesAvailableOff ()</tt> -  Set/Get the flag which determines whether derivatives are available 
 from the parametric function (i.e., whether the Evaluate() method 
 returns valid derivatives).
 </LI>
</UL>
*/
