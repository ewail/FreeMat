/*!
\page vtkcommon_vtkprop vtkProp

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 vtkProp is an abstract superclass for any objects that can exist in a
 rendered scene (either 2D or 3D). Instances of vtkProp may respond to
 various render methods (e.g., RenderOpaqueGeometry()). vtkProp also
 defines the API for picking, LOD manipulation, and common instance 
 variables that control visibility, picking, and dragging.

To create an instance of class vtkProp, simply
invoke its constructor as follows
\verbatim
  obj = vtkProp
\endverbatim
\section Methods
The class vtkProp has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkProp class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkProp = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkProp = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.GetActors (vtkPropCollection )</tt> -  For some exporters and other other operations we must be
 able to collect all the actors or volumes. These methods
 are used in that process.
 </LI>
<LI>  <tt>obj.GetActors2D (vtkPropCollection )</tt> -  For some exporters and other other operations we must be
 able to collect all the actors or volumes. These methods
 are used in that process.
 </LI>
<LI>  <tt>obj.GetVolumes (vtkPropCollection )</tt> -  Set/Get visibility of this vtkProp. Initial value is true.
 </LI>
<LI>  <tt>obj.SetVisibility (int )</tt> -  Set/Get visibility of this vtkProp. Initial value is true.
 </LI>
<LI>  <tt>int = obj.GetVisibility ()</tt> -  Set/Get visibility of this vtkProp. Initial value is true.
 </LI>
<LI>  <tt>obj.VisibilityOn ()</tt> -  Set/Get visibility of this vtkProp. Initial value is true.
 </LI>
<LI>  <tt>obj.VisibilityOff ()</tt> -  Set/Get visibility of this vtkProp. Initial value is true.
 </LI>
<LI>  <tt>obj.SetPickable (int )</tt> -  Set/Get the pickable instance variable.  This determines if the vtkProp
 can be picked (typically using the mouse). Also see dragable.
 Initial value is true.
 </LI>
<LI>  <tt>int = obj.GetPickable ()</tt> -  Set/Get the pickable instance variable.  This determines if the vtkProp
 can be picked (typically using the mouse). Also see dragable.
 Initial value is true.
 </LI>
<LI>  <tt>obj.PickableOn ()</tt> -  Set/Get the pickable instance variable.  This determines if the vtkProp
 can be picked (typically using the mouse). Also see dragable.
 Initial value is true.
 </LI>
<LI>  <tt>obj.PickableOff ()</tt> -  Set/Get the pickable instance variable.  This determines if the vtkProp
 can be picked (typically using the mouse). Also see dragable.
 Initial value is true.
 </LI>
<LI>  <tt>obj.Pick ()</tt> -  Method fires PickEvent if the prop is picked.
 </LI>
<LI>  <tt>obj.SetDragable (int )</tt> -  Set/Get the value of the dragable instance variable. This determines if 
 an Prop, once picked, can be dragged (translated) through space.
 This is typically done through an interactive mouse interface.
 This does not affect methods such as SetPosition, which will continue
 to work.  It is just intended to prevent some vtkProp'ss from being
 dragged from within a user interface.
 Initial value is true.
 </LI>
<LI>  <tt>int = obj.GetDragable ()</tt> -  Set/Get the value of the dragable instance variable. This determines if 
 an Prop, once picked, can be dragged (translated) through space.
 This is typically done through an interactive mouse interface.
 This does not affect methods such as SetPosition, which will continue
 to work.  It is just intended to prevent some vtkProp'ss from being
 dragged from within a user interface.
 Initial value is true.
 </LI>
<LI>  <tt>obj.DragableOn ()</tt> -  Set/Get the value of the dragable instance variable. This determines if 
 an Prop, once picked, can be dragged (translated) through space.
 This is typically done through an interactive mouse interface.
 This does not affect methods such as SetPosition, which will continue
 to work.  It is just intended to prevent some vtkProp'ss from being
 dragged from within a user interface.
 Initial value is true.
 </LI>
<LI>  <tt>obj.DragableOff ()</tt> -  Set/Get the value of the dragable instance variable. This determines if 
 an Prop, once picked, can be dragged (translated) through space.
 This is typically done through an interactive mouse interface.
 This does not affect methods such as SetPosition, which will continue
 to work.  It is just intended to prevent some vtkProp'ss from being
 dragged from within a user interface.
 Initial value is true.
 </LI>
<LI>  <tt>long = obj.GetRedrawMTime ()</tt> -  In case the Visibility flag is true, tell if the bounds of this prop
 should be taken into account or ignored during the computation of other
 bounding boxes, like in vtkRenderer::ResetCamera().
 Initial value is true.
 </LI>
<LI>  <tt>obj.SetUseBounds (bool )</tt> -  In case the Visibility flag is true, tell if the bounds of this prop
 should be taken into account or ignored during the computation of other
 bounding boxes, like in vtkRenderer::ResetCamera().
 Initial value is true.
 </LI>
<LI>  <tt>bool = obj.GetUseBounds ()</tt> -  In case the Visibility flag is true, tell if the bounds of this prop
 should be taken into account or ignored during the computation of other
 bounding boxes, like in vtkRenderer::ResetCamera().
 Initial value is true.
 </LI>
<LI>  <tt>obj.UseBoundsOn ()</tt> -  In case the Visibility flag is true, tell if the bounds of this prop
 should be taken into account or ignored during the computation of other
 bounding boxes, like in vtkRenderer::ResetCamera().
 Initial value is true.
 </LI>
<LI>  <tt>obj.UseBoundsOff ()</tt> -  In case the Visibility flag is true, tell if the bounds of this prop
 should be taken into account or ignored during the computation of other
 bounding boxes, like in vtkRenderer::ResetCamera().
 Initial value is true.
 </LI>
<LI>  <tt>double = obj.GetBounds ()</tt> -  Shallow copy of this vtkProp.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkProp prop)</tt> -  Shallow copy of this vtkProp.
 </LI>
<LI>  <tt>obj.InitPathTraversal ()</tt> -  vtkProp and its subclasses can be picked by subclasses of
 vtkAbstractPicker (e.g., vtkPropPicker). The following methods interface
 with the picking classes and return "pick paths". A pick path is a
 hierarchical, ordered list of props that form an assembly.  Most often,
 when a vtkProp is picked, its path consists of a single node (i.e., the
 prop). However, classes like vtkAssembly and vtkPropAssembly can return
 more than one path, each path being several layers deep. (See
 vtkAssemblyPath for more information.)  To use these methods - first
 invoke InitPathTraversal() followed by repeated calls to GetNextPath().
 GetNextPath() returns a NULL pointer when the list is exhausted.
 </LI>
<LI>  <tt>vtkAssemblyPath = obj.GetNextPath ()</tt> -  vtkProp and its subclasses can be picked by subclasses of
 vtkAbstractPicker (e.g., vtkPropPicker). The following methods interface
 with the picking classes and return "pick paths". A pick path is a
 hierarchical, ordered list of props that form an assembly.  Most often,
 when a vtkProp is picked, its path consists of a single node (i.e., the
 prop). However, classes like vtkAssembly and vtkPropAssembly can return
 more than one path, each path being several layers deep. (See
 vtkAssemblyPath for more information.)  To use these methods - first
 invoke InitPathTraversal() followed by repeated calls to GetNextPath().
 GetNextPath() returns a NULL pointer when the list is exhausted.
 </LI>
<LI>  <tt>int = obj.GetNumberOfPaths ()</tt> -  These methods are used by subclasses to place a matrix (if any) in the
 prop prior to rendering. Generally used only for picking. See vtkProp3D
 for more information.
 </LI>
<LI>  <tt>obj.PokeMatrix (vtkMatrix4x4 )</tt> -  These methods are used by subclasses to place a matrix (if any) in the
 prop prior to rendering. Generally used only for picking. See vtkProp3D
 for more information.
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetMatrix ()</tt> -  Set/Get property keys. Property keys can be digest by some rendering
 passes.
 For instance, the user may mark a prop as a shadow caster for a
 shadow mapping render pass. Keys are documented in render pass classes.
 Initial value is NULL.
 </LI>
<LI>  <tt>vtkInformation = obj.GetPropertyKeys ()</tt> -  Set/Get property keys. Property keys can be digest by some rendering
 passes.
 For instance, the user may mark a prop as a shadow caster for a
 shadow mapping render pass. Keys are documented in render pass classes.
 Initial value is NULL.
 </LI>
<LI>  <tt>obj.SetPropertyKeys (vtkInformation keys)</tt> -  Set/Get property keys. Property keys can be digest by some rendering
 passes.
 For instance, the user may mark a prop as a shadow caster for a
 shadow mapping render pass. Keys are documented in render pass classes.
 Initial value is NULL.
 </LI>
<LI>  <tt>bool = obj.HasKeys (vtkInformation requiredKeys)</tt> -  Tells if the prop has all the required keys.
 \pre keys_can_be_null: requiredKeys==0 || requiredKeys!=0
 </LI>
</UL>
*/
