/*!
\page vtkcommon_vtkquadratureschemedefinition vtkQuadratureSchemeDefinition

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 An Elemental data type that holds a definition of a
 numerical quadrature scheme. The definition contains
 the requisite information to interpolate to the so called
 quadrature points of the specific scheme. namely:

 <pre>
 1)
 A matrix of shape function weights(shape functions evaluated
 at parametric coordinates of the quadrature points).

 2)
 The number of quadrature points and cell nodes. These parameters
 size the matrix, and allow for convinent evaluation by users
 of the definition.
 </pre>

To create an instance of class vtkQuadratureSchemeDefinition, simply
invoke its constructor as follows
\verbatim
  obj = vtkQuadratureSchemeDefinition
\endverbatim
\section Methods
The class vtkQuadratureSchemeDefinition has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkQuadratureSchemeDefinition class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkQuadratureSchemeDefinition = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkQuadratureSchemeDefinition = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.DeepCopy (vtkQuadratureSchemeDefinition other)</tt> -  Deep copy.
 </LI>
<LI>  <tt>int = obj.SaveState (vtkXMLDataElement e)</tt> -  Put the object into an XML representation. The element
 passed in is assumed to be empty.
 </LI>
<LI>  <tt>int = obj.RestoreState (vtkXMLDataElement e)</tt> -  Restore the object from an XML representation.
 </LI>
<LI>  <tt>obj.Clear ()</tt> -  Release all allocated resources and set the 
 object to an unitialized state.
 </LI>
<LI>  <tt>obj.Initialize (int cellType, int numberOfNodes, int numberOfQuadraturePoints, double shapeFunctionWeights)</tt> -  Initialize the object allocating resources as needed.
 </LI>
<LI>  <tt>obj.Initialize (int cellType, int numberOfNodes, int numberOfQuadraturePoints, double shapeFunctionWeights, double quadratureWeights)</tt> -  Initialize the object allocating resources as needed.
 </LI>
<LI>  <tt>int = obj.GetCellType () const</tt> -  Access to an alternative key.
 </LI>
<LI>  <tt>int = obj.GetQuadratureKey () const</tt> -  Get the number of nodes associated with the interpolation.
 </LI>
<LI>  <tt>int = obj.GetNumberOfNodes () const</tt> -  Get the number of quadrature points associated with the scheme.
 </LI>
<LI>  <tt>int = obj.GetNumberOfQuadraturePoints () const</tt> -  Get the array of shape function weights. Shape function weights are
 the shape functions evaluated at the quadrature points. There are 
 "NumberOfNodes" weights for each quadrature point.
 </LI>
</UL>
*/
