/*!
\page vtkcommon_vtkplanes vtkPlanes

<p>
Section: \ref sec_vtkcommon "Visualization Toolkit Common Classes"
\section Usage
 vtkPlanes computes the implicit function and function gradient for a set
 of planes. The planes must define a convex space.

 The function value is the closest first order distance of a point to the
 convex region defined by the planes. The function gradient is the plane
 normal at the function value.  Note that the normals must point outside of
 the convex region. Thus, a negative function value means that a point is
 inside the convex region.

 There are several methods to define the set of planes. The most general is
 to supply an instance of vtkPoints and an instance of vtkDataArray. (The 
 points define a point on the plane, and the normals corresponding plane 
 normals.) Two other specialized ways are to 1) supply six planes defining 
 the view frustrum of a camera, and 2) provide a bounding box.

To create an instance of class vtkPlanes, simply
invoke its constructor as follows
\verbatim
  obj = vtkPlanes
\endverbatim
\section Methods
The class vtkPlanes has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkPlanes class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkPlanes = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkPlanes = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>double = obj.EvaluateFunction (double x[3])</tt>
 </LI>
<LI>  <tt>double = obj.EvaluateFunction (double x, double y, double z)</tt>
 </LI>
<LI>  <tt>obj.EvaluateGradient (double x[3], double n[3])</tt>
 </LI>
<LI>  <tt>obj.SetPoints (vtkPoints )</tt> -  Specify a list of points defining points through which the planes pass.
 </LI>
<LI>  <tt>vtkPoints = obj.GetPoints ()</tt> -  Specify a list of points defining points through which the planes pass.
 </LI>
<LI>  <tt>obj.SetNormals (vtkDataArray normals)</tt> -  Specify a list of normal vectors for the planes. There is a one-to-one
 correspondence between plane points and plane normals.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetNormals ()</tt> -  Specify a list of normal vectors for the planes. There is a one-to-one
 correspondence between plane points and plane normals.
 </LI>
<LI>  <tt>obj.SetFrustumPlanes (double planes[24])</tt> -  An alternative method to specify six planes defined by the camera view 
 frustrum. See vtkCamera::GetFrustumPlanes() documentation.
 </LI>
<LI>  <tt>obj.SetBounds (double bounds[6])</tt> -  An alternative method to specify six planes defined by a bounding box.
 The bounding box is a six-vector defined as (xmin,xmax,ymin,ymax,zmin,zmax).
 It defines six planes orthogonal to the x-y-z coordinate axes.
 </LI>
<LI>  <tt>obj.SetBounds (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</tt> -  An alternative method to specify six planes defined by a bounding box.
 The bounding box is a six-vector defined as (xmin,xmax,ymin,ymax,zmin,zmax).
 It defines six planes orthogonal to the x-y-z coordinate axes.
 </LI>
<LI>  <tt>int = obj.GetNumberOfPlanes ()</tt> -  Return the number of planes in the set of planes.
 </LI>
<LI>  <tt>vtkPlane = obj.GetPlane (int i)</tt> -  Create and return a pointer to a vtkPlane object at the ith
 position. Asking for a plane outside the allowable range returns NULL.
 This method always returns the same object. 
 Use GetPlane(int i, vtkPlane *plane) instead
 </LI>
<LI>  <tt>obj.GetPlane (int i, vtkPlane plane)</tt> -  Create and return a pointer to a vtkPlane object at the ith
 position. Asking for a plane outside the allowable range returns NULL.
 This method always returns the same object. 
 Use GetPlane(int i, vtkPlane *plane) instead
 </LI>
</UL>
*/
