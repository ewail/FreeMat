/*!
\page vtkfiltering_vtkpolygon vtkPolygon

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkPolygon is a concrete implementation of vtkCell to represent a 2D
 n-sided polygon. The polygons cannot have any internal holes, and cannot
 self-intersect. Define the polygon with n-points ordered in the counter-
 clockwise direction; do not repeat the last point.

To create an instance of class vtkPolygon, simply
invoke its constructor as follows
\verbatim
  obj = vtkPolygon
\endverbatim
\section Methods
The class vtkPolygon has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkPolygon class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkPolygon = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkPolygon = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetCellType ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetCellDimension ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfEdges ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfFaces ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetEdge (int edgeId)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetFace (int )</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Clip (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray tris, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int insideOut)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.IsPrimaryCell ()</tt> -  Compute the area of a polygon. This is a convenience function
 which simply calls static double ComputeArea(vtkPoints *p, 
 vtkIdType numPts, vtkIdType *pts, double normal[3]);
 with the appropriate parameters from the instantiated vtkPolygon.
 </LI>
<LI>  <tt>double = obj.ComputeArea ()</tt> -  Compute the area of a polygon. This is a convenience function
 which simply calls static double ComputeArea(vtkPoints *p, 
 vtkIdType numPts, vtkIdType *pts, double normal[3]);
 with the appropriate parameters from the instantiated vtkPolygon.
 </LI>
<LI>  <tt>obj.InterpolateFunctions (double pcoords[3], double sf)</tt> -  Compute the interpolation functions/derivatives
 (aka shape functions/derivatives)
 </LI>
<LI>  <tt>obj.InterpolateDerivs (double pcoords[3], double derivs)</tt> -  Compute the interpolation functions/derivatives
 (aka shape functions/derivatives)
 </LI>
<LI>  <tt>obj.ComputeWeights (double x[3], double weights)</tt> -  Compute interpolation weights using 1/r**2 normalized sum.
 @deprecated Replaced by vtkPolygon::InterpolateFunctions as of VTK 5.2
 </LI>
<LI>  <tt>int = obj.Triangulate (vtkIdList outTris)</tt> -  Triangulate this polygon. The user must provide the vtkIdList outTris.
 On output, the outTris list contains the ids of the points defining
 the triangulation. The ids are ordered into groups of three: each
 three-group defines one triangle.
 </LI>
<LI>  <tt>int = obj.NonDegenerateTriangulate (vtkIdList outTris)</tt> -  Same as Triangulate(vtkIdList *outTris)
 but with a first pass to split the polygon into non-degenerate polygons.
 </LI>
</UL>
*/
