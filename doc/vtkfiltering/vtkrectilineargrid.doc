/*!
\page vtkfiltering_vtkrectilineargrid vtkRectilinearGrid

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkRectilinearGrid is a data object that is a concrete implementation of
 vtkDataSet. vtkRectilinearGrid represents a geometric structure that is 
 topologically regular with variable spacing in the three coordinate
 directions x-y-z.

 To define a vtkRectilinearGrid, you must specify the dimensions of the
 data and provide three arrays of values specifying the coordinates 
 along the x-y-z axes. The coordinate arrays are specified using three 
 vtkDataArray objects (one for x, one for y, one for z).

To create an instance of class vtkRectilinearGrid, simply
invoke its constructor as follows
\verbatim
  obj = vtkRectilinearGrid
\endverbatim
\section Methods
The class vtkRectilinearGrid has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkRectilinearGrid class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkRectilinearGrid = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkRectilinearGrid = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetDataObjectType ()</tt> -  Return what type of dataset this is.
 </LI>
<LI>  <tt>obj.CopyStructure (vtkDataSet ds)</tt> -  Copy the geometric and topological structure of an input rectilinear grid
 object.
 </LI>
<LI>  <tt>obj.Initialize ()</tt> -  Restore object to initial state. Release memory back to system.
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfCells ()</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfPoints ()</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>double = obj.GetPoint (vtkIdType ptId)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.GetPoint (vtkIdType id, double x[3])</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>vtkCell = obj.GetCell (vtkIdType cellId)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.GetCell (vtkIdType cellId, vtkGenericCell cell)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.GetCellBounds (vtkIdType cellId, double bounds[6])</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>vtkIdType = obj.FindPoint (double x, double y, double z)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>vtkIdType = obj.FindPoint (double x[3])</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>int = obj.GetCellType (vtkIdType cellId)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.GetCellPoints (vtkIdType cellId, vtkIdList ptIds)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.GetPointCells (vtkIdType ptId, vtkIdList cellIds)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.ComputeBounds ()</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>int = obj.GetMaxCellSize ()</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.GetCellNeighbors (vtkIdType cellId, vtkIdList ptIds, vtkIdList cellIds)</tt> -  Standard vtkDataSet API methods. See vtkDataSet for more information.
 </LI>
<LI>  <tt>obj.SetDimensions (int i, int j, int k)</tt> -  Set dimensions of rectilinear grid dataset.
 This also sets the extent.
 </LI>
<LI>  <tt>obj.SetDimensions (int dim[3])</tt> -  Set dimensions of rectilinear grid dataset.
 This also sets the extent.
 </LI>
<LI>  <tt>int = obj. GetDimensions ()</tt> -  Get dimensions of this rectilinear grid dataset.
 </LI>
<LI>  <tt>int = obj.GetDataDimension ()</tt> -  Return the dimensionality of the data.
 </LI>
<LI>  <tt>int = obj.ComputeStructuredCoordinates (double x[3], int ijk[3], double pcoords[3])</tt> -  Convenience function computes the structured coordinates for a point x[3].
 The cell is specified by the array ijk[3], and the parametric coordinates
 in the cell are specified with pcoords[3]. The function returns a 0 if the
 point x is outside of the grid, and a 1 if inside the grid.
 </LI>
<LI>  <tt>vtkIdType = obj.ComputePointId (int ijk[3])</tt> -  Given a location in structured coordinates (i-j-k), return the point id.
 </LI>
<LI>  <tt>vtkIdType = obj.ComputeCellId (int ijk[3])</tt> -  Given a location in structured coordinates (i-j-k), return the cell id.
 </LI>
<LI>  <tt>obj.SetXCoordinates (vtkDataArray )</tt> -  Specify the grid coordinates in the x-direction.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetXCoordinates ()</tt> -  Specify the grid coordinates in the x-direction.
 </LI>
<LI>  <tt>obj.SetYCoordinates (vtkDataArray )</tt> -  Specify the grid coordinates in the y-direction.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetYCoordinates ()</tt> -  Specify the grid coordinates in the y-direction.
 </LI>
<LI>  <tt>obj.SetZCoordinates (vtkDataArray )</tt> -  Specify the grid coordinates in the z-direction.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetZCoordinates ()</tt> -  Specify the grid coordinates in the z-direction.
 </LI>
<LI>  <tt>obj.SetExtent (int extent[6])</tt> -  Different ways to set the extent of the data array.  The extent
 should be set before the "Scalars" are set or allocated.
 The Extent is stored  in the order (X, Y, Z).
 </LI>
<LI>  <tt>obj.SetExtent (int x1, int x2, int y1, int y2, int z1, int z2)</tt> -  Different ways to set the extent of the data array.  The extent
 should be set before the "Scalars" are set or allocated.
 The Extent is stored  in the order (X, Y, Z).
 </LI>
<LI>  <tt>int = obj. GetExtent ()</tt> -  Different ways to set the extent of the data array.  The extent
 should be set before the "Scalars" are set or allocated.
 The Extent is stored  in the order (X, Y, Z).
 </LI>
<LI>  <tt>long = obj.GetActualMemorySize ()</tt> -  Return the actual size of the data in kilobytes. This number
 is valid only after the pipeline has updated. The memory size
 returned is guaranteed to be greater than or equal to the
 memory required to represent the data (e.g., extra space in
 arrays, etc. are not included in the return value). THIS METHOD
 IS THREAD SAFE.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkDataObject src)</tt> -  Shallow and Deep copy.
 </LI>
<LI>  <tt>obj.DeepCopy (vtkDataObject src)</tt> -  Shallow and Deep copy.
 </LI>
<LI>  <tt>int = obj.GetExtentType ()</tt> -  Structured extent. The extent type is a 3D extent
 </LI>
<LI>  <tt>obj.Crop ()</tt> -  Reallocates and copies to set the Extent to the UpdateExtent.
 This is used internally when the exact extent is requested, 
 and the source generated more than the update extent. 
 </LI>
</UL>
*/
