/*!
\page vtkfiltering_vtksmootherrormetric vtkSmoothErrorMetric

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 It is a concrete error metric, based on a geometric criterium:
 a max angle between the chord passing through the midpoint and one of the
 endpoints and the other chord passing through the midpoint and the other
 endpoint of the edge. It is related to the flatness of an edge.


To create an instance of class vtkSmoothErrorMetric, simply
invoke its constructor as follows
\verbatim
  obj = vtkSmoothErrorMetric
\endverbatim
\section Methods
The class vtkSmoothErrorMetric has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSmoothErrorMetric class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Standard VTK type and error macros.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Standard VTK type and error macros.
 </LI>
<LI>  <tt>vtkSmoothErrorMetric = obj.NewInstance ()</tt> -  Standard VTK type and error macros.
 </LI>
<LI>  <tt>vtkSmoothErrorMetric = obj.SafeDownCast (vtkObject o)</tt> -  Standard VTK type and error macros.
 </LI>
<LI>  <tt>double = obj.GetAngleTolerance ()</tt> -  Return the flatness threshold.
 \post positive_result: result>90 && result<180
 </LI>
<LI>  <tt>obj.SetAngleTolerance (double value)</tt> -  Set the flatness threshold with an angle in degrees. Internally
 compute the cosine. value is supposed to be in ]90,180[, if not
 it is clamped in [90.1,179.9].
 For instance 178  will give better result than 150.
 </LI>
<LI>  <tt>int = obj.RequiresEdgeSubdivision (double leftPoint, double midPoint, double rightPoint, double alpha)</tt> -  Does the edge need to be subdivided according to the cosine between
 the two chords passing through the mid-point and the endpoints?
 The edge is defined by its `leftPoint' and its `rightPoint'.
 `leftPoint', `midPoint' and `rightPoint' have to be initialized before
 calling RequiresEdgeSubdivision().
 Their format is global coordinates, parametric coordinates and
 point centered attributes: xyx rst abc de...
 `alpha' is the normalized abscissa of the midpoint along the edge.
 (close to 0 means close to the left point, close to 1 means close to the
 right point)
 \pre leftPoint_exists: leftPoint!=0
 \pre midPoint_exists: midPoint!=0
 \pre rightPoint_exists: rightPoint!=0
 \pre clamped_alpha: alpha>0 && alpha<1
 \pre valid_size: sizeof(leftPoint)=sizeof(midPoint)=sizeof(rightPoint)
          =GetAttributeCollection()->GetNumberOfPointCenteredComponents()+6
 </LI>
<LI>  <tt>double = obj.GetError (double leftPoint, double midPoint, double rightPoint, double alpha)</tt> -  Return the error at the mid-point. It will return an error relative to
 the bounding box size if GetRelative() is true, a square absolute error
 otherwise.
 See RequiresEdgeSubdivision() for a description of the arguments.
 \pre leftPoint_exists: leftPoint!=0
 \pre midPoint_exists: midPoint!=0
 \pre rightPoint_exists: rightPoint!=0
 \pre clamped_alpha: alpha>0 && alpha<1
 \pre valid_size: sizeof(leftPoint)=sizeof(midPoint)=sizeof(rightPoint)
          =GetAttributeCollection()->GetNumberOfPointCenteredComponents()+6
 \post positive_result: result>=0
 </LI>
</UL>
*/
