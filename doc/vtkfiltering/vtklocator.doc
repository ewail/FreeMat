/*!
\page vtkfiltering_vtklocator vtkLocator

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkLocator is an abstract base class for spatial search objects, or 
 locators. The principle behind locators is that they divide 3-space into 
 small pieces (or "buckets") that can be quickly found in response to 
 queries like point location, line intersection, or object-object 
 intersection.

 The purpose of this base class is to provide ivars and methods shared by 
 all locators. The GenerateRepresentation() is one such interesting method.
 This method works in conjunction with vtkLocatorFilter to create polygonal
 representations for the locator. For example, if the locator is an OBB tree
 (i.e., vtkOBBTree.h), then the representation is a set of one or more 
 oriented bounding boxes, depending upon the specified level.
 
 Locators typically work as follows. One or more "entities", such as 
 points or cells, are inserted into the tree. These entities are associated
 with one or more buckets. Then, when performing geometric operations, the
 operations are performed first on the buckets, and then if the operation
 tests positive, then on the entities in the bucket. For example, during
 collision tests, the locators are collided first to identify intersecting
 buckets. If an intersection is found, more expensive operations are then
 carried out on the entities in the bucket.
 
 To obtain good performance, locators are often organized in a tree
 structure.  In such a structure, there are frequently multiple "levels"
 corresponding to different nodes in the tree. So the word level (in the
 context of the locator) can be used to specify a particular representation
 in the tree.  For example, in an octree (which is a tree with 8 children),
 level 0 is the bounding box, or root octant, and level 1 consists of its
 eight children.

To create an instance of class vtkLocator, simply
invoke its constructor as follows
\verbatim
  obj = vtkLocator
\endverbatim
\section Methods
The class vtkLocator has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkLocator class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkLocator = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkLocator = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetDataSet (vtkDataSet )</tt> -  Build the locator from the points/cells defining this dataset.
 </LI>
<LI>  <tt>vtkDataSet = obj.GetDataSet ()</tt> -  Build the locator from the points/cells defining this dataset.
 </LI>
<LI>  <tt>obj.SetMaxLevel (int )</tt> -  Set the maximum allowable level for the tree. If the Automatic ivar is 
 off, this will be the target depth of the locator.
 Initial value is 8.
 </LI>
<LI>  <tt>int = obj.GetMaxLevelMinValue ()</tt> -  Set the maximum allowable level for the tree. If the Automatic ivar is 
 off, this will be the target depth of the locator.
 Initial value is 8.
 </LI>
<LI>  <tt>int = obj.GetMaxLevelMaxValue ()</tt> -  Set the maximum allowable level for the tree. If the Automatic ivar is 
 off, this will be the target depth of the locator.
 Initial value is 8.
 </LI>
<LI>  <tt>int = obj.GetMaxLevel ()</tt> -  Set the maximum allowable level for the tree. If the Automatic ivar is 
 off, this will be the target depth of the locator.
 Initial value is 8.
 </LI>
<LI>  <tt>int = obj.GetLevel ()</tt> -  Get the level of the locator (determined automatically if Automatic is 
 true). The value of this ivar may change each time the locator is built.
 Initial value is 8.
 </LI>
<LI>  <tt>obj.SetAutomatic (int )</tt> -  Boolean controls whether locator depth/resolution of locator is computed
 automatically from average number of entities in bucket. If not set,
 there will be an explicit method to control the construction of the
 locator (found in the subclass).
 </LI>
<LI>  <tt>int = obj.GetAutomatic ()</tt> -  Boolean controls whether locator depth/resolution of locator is computed
 automatically from average number of entities in bucket. If not set,
 there will be an explicit method to control the construction of the
 locator (found in the subclass).
 </LI>
<LI>  <tt>obj.AutomaticOn ()</tt> -  Boolean controls whether locator depth/resolution of locator is computed
 automatically from average number of entities in bucket. If not set,
 there will be an explicit method to control the construction of the
 locator (found in the subclass).
 </LI>
<LI>  <tt>obj.AutomaticOff ()</tt> -  Boolean controls whether locator depth/resolution of locator is computed
 automatically from average number of entities in bucket. If not set,
 there will be an explicit method to control the construction of the
 locator (found in the subclass).
 </LI>
<LI>  <tt>obj.SetTolerance (double )</tt> -  Specify absolute tolerance (in world coordinates) for performing
 geometric operations.
 </LI>
<LI>  <tt>double = obj.GetToleranceMinValue ()</tt> -  Specify absolute tolerance (in world coordinates) for performing
 geometric operations.
 </LI>
<LI>  <tt>double = obj.GetToleranceMaxValue ()</tt> -  Specify absolute tolerance (in world coordinates) for performing
 geometric operations.
 </LI>
<LI>  <tt>double = obj.GetTolerance ()</tt> -  Specify absolute tolerance (in world coordinates) for performing
 geometric operations.
 </LI>
<LI>  <tt>obj.Update ()</tt> -  Cause the locator to rebuild itself if it or its input dataset has 
 changed.
 </LI>
<LI>  <tt>obj.Initialize ()</tt> -  Initialize locator. Frees memory and resets object as appropriate.
 </LI>
<LI>  <tt>obj.BuildLocator ()</tt> -  Build the locator from the input dataset.
 </LI>
<LI>  <tt>obj.FreeSearchStructure ()</tt> -  Free the memory required for the spatial data structure.
 </LI>
<LI>  <tt>obj.GenerateRepresentation (int level, vtkPolyData pd)</tt> -  Method to build a representation at a particular level. Note that the 
 method GetLevel() returns the maximum number of levels available for
 the tree. You must provide a vtkPolyData object into which to place the 
 data.
 </LI>
<LI>  <tt>long = obj.GetBuildTime ()</tt> -  Return the time of the last data structure build.
 </LI>
<LI>  <tt>obj.Register (vtkObjectBase o)</tt> -  Handle the PointSet <-> Locator loop.
 </LI>
<LI>  <tt>obj.UnRegister (vtkObjectBase o)</tt> -  Handle the PointSet <-> Locator loop.
 </LI>
</UL>
*/
