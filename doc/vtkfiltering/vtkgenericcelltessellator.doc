/*!
\page vtkfiltering_vtkgenericcelltessellator vtkGenericCellTessellator

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkGenericCellTessellator is a helper class to perform adaptive tessellation
 of particular cell topologies. The major purpose for this class is to
 transform higher-order cell types (e.g., higher-order finite elements)
 into linear cells that can then be easily visualized by VTK. This class
 works in conjunction with the vtkGenericDataSet and vtkGenericAdaptorCell
 classes.

 This algorithm is based on edge subdivision. An error metric along each
 edge is evaluated, and if the error is greater than some tolerance, the
 edge is subdivided (as well as all connected 2D and 3D cells). The process
 repeats until the error metric is satisfied. 

 A significant issue addressed by this algorithm is to insure face
 compatibility across neigboring cells. That is, diagonals due to face
 triangulation must match to insure that the mesh is compatible. The
 algorithm employs a precomputed table to accelerate the tessellation
 process. The table was generated with the help of vtkOrderedTriangulator;
 the basic idea is that the choice of diagonal is made by considering the
 relative value of the point ids.

To create an instance of class vtkGenericCellTessellator, simply
invoke its constructor as follows
\verbatim
  obj = vtkGenericCellTessellator
\endverbatim
\section Methods
The class vtkGenericCellTessellator has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkGenericCellTessellator class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkGenericCellTessellator = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkGenericCellTessellator = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.TessellateFace (vtkGenericAdaptorCell cell, vtkGenericAttributeCollection att, vtkIdType index, vtkDoubleArray points, vtkCellArray cellArray, vtkPointData internalPd)</tt> -  Tessellate a face of a 3D `cell'. The face is specified by the
 index value.
 The result is a set of smaller linear triangles in `cellArray' with
 `points' and point data `internalPd'.
 \pre cell_exists: cell!=0
 \pre valid_dimension: cell->GetDimension()==3
 \pre valid_index_range: (index>=0) && (index<cell->GetNumberOfBoundaries(2))
 \pre att_exists: att!=0
 \pre points_exists: points!=0
 \pre cellArray_exists: cellArray!=0
 \pre internalPd_exists: internalPd!=0
 </LI>
<LI>  <tt>obj.Tessellate (vtkGenericAdaptorCell cell, vtkGenericAttributeCollection att, vtkDoubleArray points, vtkCellArray cellArray, vtkPointData internalPd)</tt> -  Tessellate a 3D `cell'. The result is a set of smaller linear
 tetrahedra in `cellArray' with `points' and point data `internalPd'.
 \pre cell_exists: cell!=0
 \pre valid_dimension: cell->GetDimension()==3
 \pre att_exists: att!=0
 \pre points_exists: points!=0
 \pre cellArray_exists: cellArray!=0
 \pre internalPd_exists: internalPd!=0
 </LI>
<LI>  <tt>obj.Triangulate (vtkGenericAdaptorCell cell, vtkGenericAttributeCollection att, vtkDoubleArray points, vtkCellArray cellArray, vtkPointData internalPd)</tt> -  Triangulate a 2D `cell'. The result is a set of smaller linear triangles
 in `cellArray' with `points' and point data `internalPd'.
 \pre cell_exists: cell!=0
 \pre valid_dimension: cell->GetDimension()==2
 \pre att_exists: att!=0
 \pre points_exists: points!=0
 \pre cellArray_exists: cellArray!=0
 \pre internalPd_exists: internalPd!=0
 </LI>
<LI>  <tt>obj.SetErrorMetrics (vtkCollection someErrorMetrics)</tt> -  Specify the list of error metrics used to decide if an edge has to be
 splitted or not. It is a collection of vtkGenericSubdivisionErrorMetric-s.
 </LI>
<LI>  <tt>vtkCollection = obj.GetErrorMetrics ()</tt> -  Specify the list of error metrics used to decide if an edge has to be
 splitted or not. It is a collection of vtkGenericSubdivisionErrorMetric-s.
 </LI>
<LI>  <tt>obj.Initialize (vtkGenericDataSet ds)</tt> -  Initialize the tessellator with a data set `ds'.
 </LI>
<LI>  <tt>obj.InitErrorMetrics (vtkGenericDataSet ds)</tt> -  Init the error metric with the dataset. Should be called in each filter
 before any tessellation of any cell.
 </LI>
<LI>  <tt>int = obj.GetMeasurement ()</tt> -  If true, measure the quality of the fixed subdivision.
 </LI>
<LI>  <tt>obj.SetMeasurement (int )</tt> -  If true, measure the quality of the fixed subdivision.
 </LI>
<LI>  <tt>obj.GetMaxErrors (double errors)</tt> -  Get the maximum error measured after the fixed subdivision.
 \pre errors_exists: errors!=0
 \pre valid_size: sizeof(errors)==GetErrorMetrics()->GetNumberOfItems()
 </LI>
</UL>
*/
