/*!
\page vtkfiltering_vtktable vtkTable

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkTable is a basic data structure for storing columns of data.
 Internally, columns are stored in a vtkDataSetAttributes structure called
 RowData. However, using the vtkTable API additionally ensures that every column
 has the same number of entries, and provides row access (using vtkVariantArray)
 and single entry access (using vtkVariant).

 The field data inherited from vtkDataObject may be used to store metadata
 related to the table.


To create an instance of class vtkTable, simply
invoke its constructor as follows
\verbatim
  obj = vtkTable
\endverbatim
\section Methods
The class vtkTable has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkTable class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkTable = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkTable = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.Dump (int colWidth)</tt> -  Dump table contents.
 </LI>
<LI>  <tt>int = obj.GetDataObjectType ()</tt> -  Return the actual size of the data in kilobytes. This number
 is valid only after the pipeline has updated. The memory size
 returned is guaranteed to be greater than or equal to the
 memory required to represent the data (e.g., extra space in
 arrays, etc. are not included in the return value).
 </LI>
<LI>  <tt>long = obj.GetActualMemorySize ()</tt> -  Return the actual size of the data in kilobytes. This number
 is valid only after the pipeline has updated. The memory size
 returned is guaranteed to be greater than or equal to the
 memory required to represent the data (e.g., extra space in
 arrays, etc. are not included in the return value).
 </LI>
<LI>  <tt>vtkDataSetAttributes = obj.GetRowData ()</tt> -  Get/Set the main data (columns) of the table.
 </LI>
<LI>  <tt>obj.SetRowData (vtkDataSetAttributes data)</tt> -  Get/Set the main data (columns) of the table.
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfRows ()</tt> -  Get the number of rows in the table.
 </LI>
<LI>  <tt>obj.SetNumberOfRows (vtkIdType )</tt> -  Set the number of rows in the table. Note that memory allocation might be performed
 as a result of this, but no memory will be released. 
 </LI>
<LI>  <tt>vtkVariantArray = obj.GetRow (vtkIdType row)</tt> -  Get a row of the table as a vtkVariantArray which has one entry for each column.
 NOTE: This version of the method is NOT thread safe.
 </LI>
<LI>  <tt>obj.GetRow (vtkIdType row, vtkVariantArray values)</tt> -  Get a row of the table as a vtkVariantArray which has one entry for each column.
 </LI>
<LI>  <tt>obj.SetRow (vtkIdType row, vtkVariantArray values)</tt> -  Set a row of the table with a vtkVariantArray which has one entry for each column.
 </LI>
<LI>  <tt>vtkIdType = obj.InsertNextBlankRow (double default_num_val)</tt> -  Insert a blank row at the end of the table.
 </LI>
<LI>  <tt>vtkIdType = obj.InsertNextRow (vtkVariantArray arr)</tt> -  Insert a row specified by a vtkVariantArray.  The number of entries in the array
 should match the number of columns in the table.
 </LI>
<LI>  <tt>obj.RemoveRow (vtkIdType row)</tt> -  Delete a row from the table.  Rows below the deleted row are shifted up.
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfColumns ()</tt> -  Get the number of columns in the table.
 </LI>
<LI>  <tt>string = obj.GetColumnName (vtkIdType col)</tt>
 </LI>
<LI>  <tt>vtkAbstractArray = obj.GetColumnByName (string name)</tt> -  Get a column of the table by its name.
 </LI>
<LI>  <tt>vtkAbstractArray = obj.GetColumn (vtkIdType col)</tt> -  Get a column of the table by its column index.
 </LI>
<LI>  <tt>obj.AddColumn (vtkAbstractArray arr)</tt> -  Add a column to the table.
 </LI>
<LI>  <tt>obj.RemoveColumnByName (string name)</tt> -  Remove a column from the table by its name.
 </LI>
<LI>  <tt>obj.RemoveColumn (vtkIdType col)</tt> -  Remove a column from the table by its column index.
 </LI>
<LI>  <tt>obj.Initialize ()</tt> -  Initialize to an empty table.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkDataObject src)</tt> -  Shallow/deep copy the data from src into this object.
 </LI>
<LI>  <tt>obj.DeepCopy (vtkDataObject src)</tt> -  Shallow/deep copy the data from src into this object.
 </LI>
<LI>  <tt>vtkFieldData = obj.GetAttributesAsFieldData (int type)</tt> -  Returns the attributes of the data object as a vtkFieldData.
 This returns non-null values in all the same cases as GetAttributes,
 in addition to the case of FIELD, which will return the field data
 for any vtkDataObject subclass.
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfElements (int type)</tt> -  Get the number of elements for a specific attribute type (ROW, etc.).
 </LI>
</UL>
*/
