/*!
\page vtkfiltering_vtkcubicline vtkCubicLine

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkCubicLine is a concrete implementation of vtkNonLinearCell to represent a 1D Cubic line.
 The Cubic Line is the 4 nodes isoparametric parabolic line . The
 interpolation is the standard finite element, cubic isoparametric
 shape function. The cell includes two mid-edge nodes. The ordering of the
 four points defining the cell is point ids (0,1,2,3) where id #2 and #3 are the
 mid-edge nodes. Please note that the parametric coordinates lie between -1 and 1 
 in accordance with most standard documentations.
 .SECTION Thanks 
 <verbatim> 
 This file has been developed by Oxalya - www.oxalya.com 
 Copyright (c) EDF - www.edf.fr 
 </verbatim> 

To create an instance of class vtkCubicLine, simply
invoke its constructor as follows
\verbatim
  obj = vtkCubicLine
\endverbatim
\section Methods
The class vtkCubicLine has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkCubicLine class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkCubicLine = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkCubicLine = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetCellType ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetCellDimension ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfEdges ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfFaces ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetEdge (int )</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetFace (int )</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>double = obj.GetParametricDistance (double pcoords[3])</tt> -  Return the distance of the parametric coordinate provided to the
 cell. If inside the cell, a distance of zero is returned.
 </LI>
<LI>  <tt>obj.Clip (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray lines, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int insideOut)</tt> -  Clip this line using scalar value provided. Like contouring, except
 that it cuts the line to produce other lines.
 </LI>
<LI>  <tt>int = obj.GetParametricCenter (double pcoords[3])</tt> -  Return the center of the triangle in parametric coordinates.
 </LI>
<LI>  <tt>obj.InterpolateFunctions (double pcoords[3], double weights[4])</tt> -  Compute the interpolation functions/derivatives
 (aka shape functions/derivatives)
 </LI>
<LI>  <tt>obj.InterpolateDerivs (double pcoords[3], double derivs[4])</tt>
 </LI>
</UL>
*/
