/*!
\page vtkfiltering_vtktrianglestrip vtkTriangleStrip

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkTriangleStrip is a concrete implementation of vtkCell to represent a 2D
 triangle strip. A triangle strip is a compact representation of triangles
 connected edge to edge in strip fashion. The connectivity of a triangle
 strip is three points defining an initial triangle, then for each
 additional triangle, a single point that, combined with the previous two
 points, defines the next triangle.

To create an instance of class vtkTriangleStrip, simply
invoke its constructor as follows
\verbatim
  obj = vtkTriangleStrip
\endverbatim
\section Methods
The class vtkTriangleStrip has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkTriangleStrip class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkTriangleStrip = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkTriangleStrip = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetCellType ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetCellDimension ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfEdges ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfFaces ()</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetEdge (int edgeId)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetFace (int )</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>obj.Clip (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int insideOut)</tt> -  See the vtkCell API for descriptions of these methods.
 </LI>
<LI>  <tt>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</tt>
 </LI>
<LI>  <tt>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</tt>
 </LI>
<LI>  <tt>int = obj.IsPrimaryCell ()</tt> -  Return the center of the point cloud in parametric coordinates.
 </LI>
<LI>  <tt>int = obj.GetParametricCenter (double pcoords[3])</tt> -  Return the center of the point cloud in parametric coordinates.
 </LI>
<LI>  <tt>obj.InterpolateFunctions (double pcoords[3], double weights)</tt> -  Compute the interpolation functions/derivatives
 (aka shape functions/derivatives)
 </LI>
<LI>  <tt>obj.InterpolateDerivs (double pcoords[3], double derivs)</tt> -  Compute the interpolation functions/derivatives
 (aka shape functions/derivatives)
 </LI>
</UL>
*/
