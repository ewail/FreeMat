/*!
\page vtkfiltering_vtkdatasetattributes vtkDataSetAttributes

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkDataSetAttributes is a class that is used to represent and manipulate
 attribute data (e.g., scalars, vectors, normals, texture coordinates,
 tensors, global ids, pedigree ids, and field data). 

 This adds to vtkFieldData the ability to pick one of the arrays from the 
 field as the currently active array for each attribute type. In other 
 words, you pick one array to be called "THE" Scalars, and then filters down 
 the pipeline will treat that array specially. For example vtkContourFilter 
 will contour "THE" Scalar array unless a different array is asked for.

 Additionally vtkDataSetAttributes provides methods that filters call to 
 pass data through, copy data into, and interpolate from Fields. PassData 
 passes entire arrays from the source to the destination. Copy passes 
 through some subset of the tuples from the source to the destination. 
 Interpolate interpolates from the chosen tuple(s) in the source data, using 
 the provided weights, to produce new tuples in the destination. 
 Each attribute type has pass, copy and interpolate "copy" flags that 
 can be set in the destination to choose which attribute arrays will be
 transfered from the source to the destination. 
 
 Finally this class provides a mechanism to determine which attributes a 
 group of sources have in common, and to copy tuples from a source into 
 the destination, for only those attributes that are held by all.

To create an instance of class vtkDataSetAttributes, simply
invoke its constructor as follows
\verbatim
  obj = vtkDataSetAttributes
\endverbatim
\section Methods
The class vtkDataSetAttributes has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkDataSetAttributes class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkDataSetAttributes = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkDataSetAttributes = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.Initialize ()</tt> -  Initialize all of the object's data to NULL
 Also, clear the copy flags.
 </LI>
<LI>  <tt>obj.Update ()</tt> -  Deep copy of data (i.e., create new data arrays and
 copy from input data). 
 Ignores the copy flags but preserves them in the output.
 </LI>
<LI>  <tt>obj.DeepCopy (vtkFieldData pd)</tt> -  Deep copy of data (i.e., create new data arrays and
 copy from input data). 
 Ignores the copy flags but preserves them in the output.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkFieldData pd)</tt> -  Shallow copy of data (i.e., use reference counting).
 Ignores the copy flags but preserves them in the output.
 </LI>
<LI>  <tt>int = obj.SetScalars (vtkDataArray da)</tt> -  Set/Get the scalar data.
 </LI>
<LI>  <tt>int = obj.SetActiveScalars (string name)</tt> -  Set/Get the scalar data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetScalars ()</tt> -  Set/Get the scalar data.
 </LI>
<LI>  <tt>int = obj.SetVectors (vtkDataArray da)</tt> -  Set/Get the vector data.
 </LI>
<LI>  <tt>int = obj.SetActiveVectors (string name)</tt> -  Set/Get the vector data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetVectors ()</tt> -  Set/Get the vector data.
 </LI>
<LI>  <tt>int = obj.SetNormals (vtkDataArray da)</tt> -  Set/get the normal data.
 </LI>
<LI>  <tt>int = obj.SetActiveNormals (string name)</tt> -  Set/get the normal data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetNormals ()</tt> -  Set/get the normal data.
 </LI>
<LI>  <tt>int = obj.SetTCoords (vtkDataArray da)</tt> -  Set/Get the texture coordinate data.
 </LI>
<LI>  <tt>int = obj.SetActiveTCoords (string name)</tt> -  Set/Get the texture coordinate data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetTCoords ()</tt> -  Set/Get the texture coordinate data.
 </LI>
<LI>  <tt>int = obj.SetTensors (vtkDataArray da)</tt> -  Set/Get the tensor data.
 </LI>
<LI>  <tt>int = obj.SetActiveTensors (string name)</tt> -  Set/Get the tensor data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetTensors ()</tt> -  Set/Get the tensor data.
 </LI>
<LI>  <tt>int = obj.SetGlobalIds (vtkDataArray da)</tt> -  Set/Get the global id data.
 </LI>
<LI>  <tt>int = obj.SetActiveGlobalIds (string name)</tt> -  Set/Get the global id data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetGlobalIds ()</tt> -  Set/Get the global id data.
 </LI>
<LI>  <tt>int = obj.SetPedigreeIds (vtkAbstractArray da)</tt> -  Set/Get the pedigree id data.
 </LI>
<LI>  <tt>int = obj.SetActivePedigreeIds (string name)</tt> -  Set/Get the pedigree id data.
 </LI>
<LI>  <tt>vtkAbstractArray = obj.GetPedigreeIds ()</tt> -  Set/Get the pedigree id data.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetScalars (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetVectors (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetNormals (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetTCoords (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetTensors (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetGlobalIds (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>vtkAbstractArray = obj.GetPedigreeIds (string name)</tt> -  This will first look for an array with the correct name.
 If one exists, it is returned. Otherwise, the name argument
 is ignored, and the active attribute is returned.
 </LI>
<LI>  <tt>int = obj.SetActiveAttribute (string name, int attributeType)</tt> -  Make the array with the given name the active attribute.
 Attribute types are:
  vtkDataSetAttributes::SCALARS = 0
  vtkDataSetAttributes::VECTORS = 1
  vtkDataSetAttributes::NORMALS = 2
  vtkDataSetAttributes::TCOORDS = 3
  vtkDataSetAttributes::TENSORS = 4
  vtkDataSetAttributes::GLOBALIDS = 5
  vtkDataSetAttributes::PEDIGREEIDS = 6
 Returns the index of the array if succesful, -1 if the array 
 is not in the list of arrays.
 </LI>
<LI>  <tt>int = obj.SetActiveAttribute (int index, int attributeType)</tt> -  Make the array with the given index the active attribute.
 </LI>
<LI>  <tt>obj.GetAttributeIndices (int indexArray)</tt> -  Get the field data array indices corresponding to scalars, 
 vectors, tensors, etc.
 </LI>
<LI>  <tt>int = obj.IsArrayAnAttribute (int idx)</tt> -  Determine whether a data array of index idx is considered a data set
 attribute (i.e., scalar, vector, tensor, etc). Return less-than zero 
 if it is, otherwise an index 0<=idx<NUM_ATTRIBUTES to indicate 
 which attribute.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetAttribute (int attributeType)</tt> -  Return an attribute given the attribute type
 (see vtkDataSetAttributes::AttributeTypes).
 Some attributes (such as PEDIGREEIDS) may not be vtkDataArray subclass,
 so in that case use GetAbstractAttribute().
 </LI>
<LI>  <tt>vtkAbstractArray = obj.GetAbstractAttribute (int attributeType)</tt> -  Return an attribute given the attribute type
 (see vtkDataSetAttributes::AttributeTypes).
 This is the same as GetAttribute(), except that the returned array
 is a vtkAbstractArray instead of vtkDataArray.
 Some attributes (such as PEDIGREEIDS) may not be vtkDataArray subclass.
 </LI>
<LI>  <tt>obj.RemoveArray (string name)</tt> -  Remove an array (with the given name) from the list of arrays.
 </LI>
<LI>  <tt>obj.SetCopyAttribute (int index, int value, int ctypeALLCOPY)</tt> -  Specify whether to copy the data attribute referred to by index.
 ctype selects from the AttributeCopyOperations.
 If ctype is set to ALLCOPY, then COPYTUPLE, INTERPOLATE, and 
 PASSDATA are set to value. If value is 0, copying is disallowed.
 otherwise it is allowed.
 </LI>
<LI>  <tt>obj.SetCopyScalars (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of scalar data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyScalars (int ctypeALLCOPY)</tt> -  Turn on/off the copying of scalar data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyScalarsOn ()</tt> -  Turn on/off the copying of scalar data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyScalarsOff ()</tt> -  Turn on/off the copying of scalar data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.SetCopyVectors (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of vector data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyVectors (int ctypeALLCOPY)</tt> -  Turn on/off the copying of vector data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyVectorsOn ()</tt> -  Turn on/off the copying of vector data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyVectorsOff ()</tt> -  Turn on/off the copying of vector data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.SetCopyNormals (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of normals data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyNormals (int ctypeALLCOPY)</tt> -  Turn on/off the copying of normals data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyNormalsOn ()</tt> -  Turn on/off the copying of normals data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyNormalsOff ()</tt> -  Turn on/off the copying of normals data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.SetCopyTCoords (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of texture coordinates data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyTCoords (int ctypeALLCOPY)</tt> -  Turn on/off the copying of texture coordinates data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyTCoordsOn ()</tt> -  Turn on/off the copying of texture coordinates data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyTCoordsOff ()</tt> -  Turn on/off the copying of texture coordinates data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.SetCopyTensors (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of tensor data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyTensors (int ctypeALLCOPY)</tt> -  Turn on/off the copying of tensor data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyTensorsOn ()</tt> -  Turn on/off the copying of tensor data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyTensorsOff ()</tt> -  Turn on/off the copying of tensor data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.SetCopyGlobalIds (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of global id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyGlobalIds (int ctypeALLCOPY)</tt> -  Turn on/off the copying of global id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyGlobalIdsOn ()</tt> -  Turn on/off the copying of global id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyGlobalIdsOff ()</tt> -  Turn on/off the copying of global id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.SetCopyPedigreeIds (int i, int ctypeALLCOPY)</tt> -  Turn on/off the copying of pedigree id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>int = obj.GetCopyPedigreeIds (int ctypeALLCOPY)</tt> -  Turn on/off the copying of pedigree id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyPedigreeIdsOn ()</tt> -  Turn on/off the copying of pedigree id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyPedigreeIdsOff ()</tt> -  Turn on/off the copying of pedigree id data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyAllOn (int ctypeALLCOPY)</tt> -  Turn on copying of all data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.CopyAllOff (int ctypeALLCOPY)</tt> -  Turn off copying of all data.
 ctype is one of the AttributeCopyOperations, and controls copy, 
 interpolate and passdata behavior.
 For set, ctype=ALLCOPY means set all three flags to the same value.
 For get, ctype=ALLCOPY returns true only if all three flags are true.

 During copying, interpolation and passdata, the following rules are 
 followed for each array:
 1. If the copy/interpolate/pass flag for an attribute is set (on or off), it is applied.
    This overrides rules 2 and 3.
 2. If the copy flag for an array is set (on or off), it is applied
    This overrides rule 3.
 3. If CopyAllOn is set, copy the array.
    If CopyAllOff is set, do not copy the array
 </LI>
<LI>  <tt>obj.PassData (vtkFieldData fd)</tt> -  Pass entire arrays of input data through to output. Obey the "copy"
 flags. When passing a field,  the following copying rules are 
 followed: 1) Check if a field is an attribute, if yes and if there
 is a PASSDATA copy flag for that attribute (on or off), obey the flag 
 for that attribute, ignore (2) and (3), 2) if there is a copy field for
 that field (on or off), obey the flag, ignore (3) 3) obey
 CopyAllOn/Off
 </LI>
<LI>  <tt>obj.CopyAllocate (vtkDataSetAttributes pd, vtkIdType sze, vtkIdType ext)</tt> -  Allocates point data for point-by-point (or cell-by-cell) copy operation.
 If sze=0, then use the input DataSetAttributes to create (i.e., find 
 initial size of) new objects; otherwise use the sze variable.
 Note that pd HAS to be the vtkDataSetAttributes object which
 will later be used with CopyData. If this is not the case,
 consider using the alternative forms of CopyAllocate and CopyData.
 ext is no longer used.
 If shallowCopyArrays is true, input arrays are copied to the output
 instead of new ones being allocated.
 </LI>
<LI>  <tt>obj.CopyAllocate (vtkDataSetAttributes pd, vtkIdType sze, vtkIdType ext, int shallowCopyArrays)</tt> -  Allocates point data for point-by-point (or cell-by-cell) copy operation.
 If sze=0, then use the input DataSetAttributes to create (i.e., find 
 initial size of) new objects; otherwise use the sze variable.
 Note that pd HAS to be the vtkDataSetAttributes object which
 will later be used with CopyData. If this is not the case,
 consider using the alternative forms of CopyAllocate and CopyData.
 ext is no longer used.
 If shallowCopyArrays is true, input arrays are copied to the output
 instead of new ones being allocated.
 </LI>
<LI>  <tt>obj.CopyStructuredData (vtkDataSetAttributes inDsa, int inExt, int outExt)</tt> -  This method is used to copy data arrays in images.
 You should call "CopyAllocate" before calling this method.
 </LI>
<LI>  <tt>obj.CopyData (vtkDataSetAttributes fromPd, vtkIdType fromId, vtkIdType toId)</tt> -  Copy the attribute data from one id to another. Make sure CopyAllocate()
 has been invoked before using this method. When copying a field,  
 the following copying rules are 
 followed: 1) Check if a field is an attribute, if yes and if there
 is a COPYTUPLE copy flag for that attribute (on or off), obey the  flag 
 for that attribute, ignore (2) and (3), 2) if there is a copy field for
 that field (on or off), obey the flag, ignore (3) 3) obey
 CopyAllOn/Off
 </LI>
<LI>  <tt>obj.CopyTuple (vtkAbstractArray fromData, vtkAbstractArray toData, vtkIdType fromId, vtkIdType toId)</tt> -  Copy a tuple of data from one data array to another. This method
 assumes that the fromData and toData objects are of the
 same type, and have the same number of components. This is true if you
 invoke CopyAllocate() or InterpolateAllocate().
 </LI>
<LI>  <tt>obj.InterpolateAllocate (vtkDataSetAttributes pd, vtkIdType sze, vtkIdType ext)</tt> -  Initialize point interpolation method.
 Note that pd HAS to be the vtkDataSetAttributes object which
 will later be used with InterpolatePoint or InterpolateEdge.
 ext is no longer used.
 If shallowCopyArrays is true, input arrays are copied to the output
 instead of new ones being allocated.
 </LI>
<LI>  <tt>obj.InterpolateAllocate (vtkDataSetAttributes pd, vtkIdType sze, vtkIdType ext, int shallowCopyArrays)</tt> -  Initialize point interpolation method.
 Note that pd HAS to be the vtkDataSetAttributes object which
 will later be used with InterpolatePoint or InterpolateEdge.
 ext is no longer used.
 If shallowCopyArrays is true, input arrays are copied to the output
 instead of new ones being allocated.
 </LI>
<LI>  <tt>obj.InterpolatePoint (vtkDataSetAttributes fromPd, vtkIdType toId, vtkIdList ids, double weights)</tt> -  Interpolate data set attributes from other data set attributes
 given cell or point ids and associated interpolation weights.
 If the INTERPOLATION copy flag is set to 0 for an array, interpolation
 is prevented. If the flag is set to 1, weighted interpolation occurs.
 If the flag is set to 2, nearest neighbor interpolation is used.
 </LI>
<LI>  <tt>obj.InterpolateEdge (vtkDataSetAttributes fromPd, vtkIdType toId, vtkIdType p1, vtkIdType p2, double t)</tt> -  Interpolate data from the two points p1,p2 (forming an edge) and an 
 interpolation factor, t, along the edge. The weight ranges from (0,1), 
 with t=0 located at p1. Make sure that the method InterpolateAllocate() 
 has been invoked before using this method.
 If the INTERPOLATION copy flag is set to 0 for an array, interpolation
 is prevented. If the flag is set to 1, weighted interpolation occurs.
 If the flag is set to 2, nearest neighbor interpolation is used.
 </LI>
<LI>  <tt>obj.InterpolateTime (vtkDataSetAttributes from1, vtkDataSetAttributes from2, vtkIdType id, double t)</tt> -  Interpolate data from the same id (point or cell) at different points
 in time (parameter t). Two input data set attributes objects are input.
 The parameter t lies between (0<=t<=1). IMPORTANT: it is assumed that
 the number of attributes and number of components is the same for both
 from1 and from2, and the type of data for from1 and from2 are the same.
 Make sure that the method InterpolateAllocate() has been invoked before 
 using this method.
 If the INTERPOLATION copy flag is set to 0 for an array, interpolation
 is prevented. If the flag is set to 1, weighted interpolation occurs.
 If the flag is set to 2, nearest neighbor interpolation is used.
 </LI>
</UL>
*/
