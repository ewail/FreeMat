/*!
\page vtkfiltering_vtkdatasettodatasetfilter vtkDataSetToDataSetFilter

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkDataSetToDataSetFilter is an abstract filter class. Subclasses of
 vtkDataSetToDataSetFilter take a dataset as input and create a dataset as
 output. The form of the input geometry is not changed in these filters,
 only the point attributes (e.g. scalars, vectors, etc.).

 This is an abstract filter type. What that means is that the output of the
 filter is an abstract type (i.e., vtkDataSet), no matter what the input of
 the filter is. This can cause problems connecting together filters due to
 the change in dataset type. (For example, in a series of filters
 processing vtkPolyData, when a vtkDataSetToDataSetFilter or subclass is
 introduced into the pipeline, if the filter downstream of it takes
 vtkPolyData as input, the pipeline connection cannot be made.) To get
 around this problem, use one of the convenience methods to return a
 concrete type (e.g., vtkGetPolyDataOutput(), GetStructuredPointsOutput(),
 etc.).

To create an instance of class vtkDataSetToDataSetFilter, simply
invoke its constructor as follows
\verbatim
  obj = vtkDataSetToDataSetFilter
\endverbatim
\section Methods
The class vtkDataSetToDataSetFilter has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkDataSetToDataSetFilter class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkDataSetToDataSetFilter = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkDataSetToDataSetFilter = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetInput (vtkDataSet input)</tt> -  Specify the input data or filter.
 </LI>
<LI>  <tt>vtkDataSet = obj.GetOutput ()</tt> -  Get the output of this filter. If output is NULL then input
 hasn't been set which is necessary for abstract objects.
 </LI>
<LI>  <tt>vtkDataSet = obj.GetOutput (int idx)</tt> -  Get the output of this filter. If output is NULL then input
 hasn't been set which is necessary for abstract objects.
 </LI>
<LI>  <tt>vtkPolyData = obj.GetPolyDataOutput ()</tt> -  Get the output as vtkPolyData.
 </LI>
<LI>  <tt>vtkStructuredPoints = obj.GetStructuredPointsOutput ()</tt> -  Get the output as vtkStructuredPoints.
 </LI>
<LI>  <tt>vtkStructuredGrid = obj.GetStructuredGridOutput ()</tt> -  Get the output as vtkStructuredGrid.
 </LI>
<LI>  <tt>vtkUnstructuredGrid = obj.GetUnstructuredGridOutput ()</tt> -  Get the output as vtkUnstructuredGrid.
 </LI>
<LI>  <tt>vtkRectilinearGrid = obj.GetRectilinearGridOutput ()</tt> -  Get the output as vtkRectilinearGrid. 
 </LI>
<LI>  <tt>vtkDataSet = obj.GetInput ()</tt> -  Get the input data or filter.
 </LI>
<LI>  <tt>obj.ComputeInputUpdateExtents (vtkDataObject output)</tt> -  By default copy the output update extent to the input
 </LI>
</UL>
*/
