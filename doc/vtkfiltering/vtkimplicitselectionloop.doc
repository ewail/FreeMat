/*!
\page vtkfiltering_vtkimplicitselectionloop vtkImplicitSelectionLoop

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkImplicitSelectionLoop computes the implicit function value and
 function gradient for a irregular, cylinder-like object whose cross
 section is defined by a set of points forming a loop. The loop need
 not be convex nor its points coplanar. However, the loop must be
 non-self-intersecting when projected onto the plane defined by the
 accumulated cross product around the loop (i.e., the axis of the
 loop). (Alternatively, you can specify the normal to use.)

 The following procedure is used to compute the implicit function
 value for a point x. Each point of the loop is first projected onto
 the plane defined by the loop normal. This forms a polygon. Then,
 to evaluate the implicit function value, inside/outside tests are
 used to determine if x is inside the polygon, and the distance to
 the loop boundary is computed (negative values are inside the
 loop).

 One example application of this implicit function class is to draw a 
 loop on the surface of a mesh, and use the loop to clip or extract 
 cells from within the loop. Remember, the selection loop is "infinite" 
 in length, you can use a plane (in boolean combination) to cap the extent
 of the selection loop. Another trick is to use a connectivity filter to
 extract the closest region to a given point (i.e., one of the points used
 to define the selection loop).

To create an instance of class vtkImplicitSelectionLoop, simply
invoke its constructor as follows
\verbatim
  obj = vtkImplicitSelectionLoop
\endverbatim
\section Methods
The class vtkImplicitSelectionLoop has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkImplicitSelectionLoop class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Standard VTK methods for printing and type information.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Standard VTK methods for printing and type information.
 </LI>
<LI>  <tt>vtkImplicitSelectionLoop = obj.NewInstance ()</tt> -  Standard VTK methods for printing and type information.
 </LI>
<LI>  <tt>vtkImplicitSelectionLoop = obj.SafeDownCast (vtkObject o)</tt> -  Standard VTK methods for printing and type information.
 </LI>
<LI>  <tt>double = obj.EvaluateFunction (double x[3])</tt> -  Evaluate selection loop returning a signed distance.
 </LI>
<LI>  <tt>double = obj.EvaluateFunction (double x, double y, double z)</tt> -  Evaluate selection loop returning a signed distance.
 </LI>
<LI>  <tt>obj.EvaluateGradient (double x[3], double n[3])</tt> -  Evaluate selection loop returning the gradient.
 </LI>
<LI>  <tt>obj.SetLoop (vtkPoints )</tt> -  Set/Get the array of point coordinates defining the loop. There must
 be at least three points used to define a loop.
 </LI>
<LI>  <tt>vtkPoints = obj.GetLoop ()</tt> -  Set/Get the array of point coordinates defining the loop. There must
 be at least three points used to define a loop.
 </LI>
<LI>  <tt>obj.SetAutomaticNormalGeneration (int )</tt> -  Turn on/off automatic normal generation. By default, the normal is
 computed from the accumulated cross product of the edges. You can also
 specify the normal to use.
 </LI>
<LI>  <tt>int = obj.GetAutomaticNormalGeneration ()</tt> -  Turn on/off automatic normal generation. By default, the normal is
 computed from the accumulated cross product of the edges. You can also
 specify the normal to use.
 </LI>
<LI>  <tt>obj.AutomaticNormalGenerationOn ()</tt> -  Turn on/off automatic normal generation. By default, the normal is
 computed from the accumulated cross product of the edges. You can also
 specify the normal to use.
 </LI>
<LI>  <tt>obj.AutomaticNormalGenerationOff ()</tt> -  Turn on/off automatic normal generation. By default, the normal is
 computed from the accumulated cross product of the edges. You can also
 specify the normal to use.
 </LI>
<LI>  <tt>obj.SetNormal (double , double , double )</tt> -  Set / get the normal used to determine whether a point is inside or outside
 the selection loop.
 </LI>
<LI>  <tt>obj.SetNormal (double  a[3])</tt> -  Set / get the normal used to determine whether a point is inside or outside
 the selection loop.
 </LI>
<LI>  <tt>double = obj. GetNormal ()</tt> -  Set / get the normal used to determine whether a point is inside or outside
 the selection loop.
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Overload GetMTime() because we depend on the Loop
 </LI>
</UL>
*/
