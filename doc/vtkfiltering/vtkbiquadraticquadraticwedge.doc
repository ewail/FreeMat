/*!
\page vtkfiltering_vtkbiquadraticquadraticwedge vtkBiQuadraticQuadraticWedge

<p>
Section: \ref sec_vtkfiltering "Visualization Toolkit Filtering Classes"
\section Usage
 vtkBiQuadraticQuadraticWedge is a concrete implementation of vtkNonLinearCell to
 represent a three-dimensional, 18-node isoparametric biquadratic
 wedge. The interpolation is the standard finite element,
 biquadratic-quadratic isoparametric shape function plus the linear functions.
 The cell includes a mid-edge node. The
 ordering of the 18 points defining the cell is point ids (0-5,6-15, 16-18)
 where point ids 0-5 are the six corner vertices of the wedge; followed by
 nine midedge nodes (6-15) and 3 center-face nodes. Note that these midedge
 nodes correspond lie
 on the edges defined by (0,1), (1,2), (2,0), (3,4), (4,5), (5,3), (0,3),
 (1,4), (2,5), and the center-face nodes are lieing in quads 16-(0,1,4,3),
 17-(1,2,5,4) and (2,0,3,5).


To create an instance of class vtkBiQuadraticQuadraticWedge, simply
invoke its constructor as follows
\verbatim
  obj = vtkBiQuadraticQuadraticWedge
\endverbatim
\section Methods
The class vtkBiQuadraticQuadraticWedge has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkBiQuadraticQuadraticWedge class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkBiQuadraticQuadraticWedge = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkBiQuadraticQuadraticWedge = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetCellType ()</tt> -  Implement the vtkCell API. See the vtkCell API for descriptions
 of these methods.
 </LI>
<LI>  <tt>int = obj.GetCellDimension ()</tt> -  Implement the vtkCell API. See the vtkCell API for descriptions
 of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfEdges ()</tt> -  Implement the vtkCell API. See the vtkCell API for descriptions
 of these methods.
 </LI>
<LI>  <tt>int = obj.GetNumberOfFaces ()</tt> -  Implement the vtkCell API. See the vtkCell API for descriptions
 of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetEdge (int edgeId)</tt> -  Implement the vtkCell API. See the vtkCell API for descriptions
 of these methods.
 </LI>
<LI>  <tt>vtkCell = obj.GetFace (int faceId)</tt> -  Implement the vtkCell API. See the vtkCell API for descriptions
 of these methods.
 </LI>
<LI>  <tt>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</tt>
 </LI>
<LI>  <tt>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</tt>
 </LI>
<LI>  <tt>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</tt>
 </LI>
<LI>  <tt>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</tt>
 </LI>
<LI>  <tt>obj.Clip (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray tetras, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int insideOut)</tt> -  Clip this quadratic Wedge using scalar value provided. Like
 contouring, except that it cuts the hex to produce linear
 tetrahedron.
 </LI>
<LI>  <tt>int = obj.GetParametricCenter (double pcoords[3])</tt> -  Return the center of the quadratic wedge in parametric coordinates.
 </LI>
<LI>  <tt>obj.InterpolateFunctions (double pcoords[3], double weights[15])</tt> -  Compute the interpolation functions/derivatives
 (aka shape functions/derivatives)
 </LI>
<LI>  <tt>obj.InterpolateDerivs (double pcoords[3], double derivs[45])</tt> -  Return the ids of the vertices defining edge/face (`edgeId`/`faceId').
 Ids are related to the cell, not to the dataset.
 </LI>
</UL>
*/
