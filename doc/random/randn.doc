/*!
\page random_randn RANDN Gaussian (Normal) Random Number Generator

<p>
Section: \ref sec_random "Random Number Generation"
\section Usage
Creates an array of pseudo-random numbers of the specified size.
The numbers are normally distributed with zero mean and a unit
standard deviation (i.e., <tt>mu = 0, sigma = 1</tt>). 
 Two seperate syntaxes are possible.  The first syntax specifies the array 
dimensions as a sequence of scalar dimensions:
\verbatim
  y = randn(d1,d2,...,dn).
\endverbatim
The resulting array has the given dimensions, and is filled with
random numbers.  The type of <tt>y</tt> is <tt>double</tt>, a 64-bit floating
point array.  To get arrays of other types, use the typecast 
functions.
    
The second syntax specifies the array dimensions as a vector,
where each element in the vector specifies a dimension length:
\verbatim
  y = randn([d1,d2,...,dn]).
\endverbatim
This syntax is more convenient for calling <tt>randn</tt> using a 
variable for the argument.

Finally, <tt>randn</tt> supports two additional forms that allow
you to manipulate the state of the random number generator.
The first retrieves the state
\verbatim
  y = randn('state')
\endverbatim
which is a 625 length integer vector.  The second form sets
the state
\verbatim
  randn('state',y)
\endverbatim
or alternately, you can reset the random number generator with
\verbatim
  randn('state',0)
\endverbatim
\section Function Internals
Recall that the
probability density function (PDF) of a normal random variable is
\f[
f(x) = \frac{1}{\sqrt{2\pi \sigma^2}} e^{\frac{-(x-\mu)^2}{2\sigma^2}}.
\f]
The Gaussian random numbers are generated from pairs of uniform random numbers using a transformation technique. 
\section Example
The following example demonstrates an example of using the first form of the <tt>randn</tt> function.

\if FRAGMENT
frag_random_randn_000.m
0
randn(2,2,2)
\endif


\verbinclude frag_random_randn_000.m.out 

The second example demonstrates the second form of the <tt>randn</tt> function.

\if FRAGMENT
frag_random_randn_001.m
0
randn([2,2,2])
\endif


\verbinclude frag_random_randn_001.m.out 

In the next example, we create a large array of 10000  normally distributed pseudo-random numbers.  We then shift the mean to 10, and the variance to 5.  We then numerically calculate the mean and variance using <tt>mean</tt> and <tt>var</tt>, respectively.

\if FRAGMENT
frag_random_randn_002.m
0
x = 10+sqrt(5)*randn(1,10000);
mean(x)
var(x)
\endif


\verbinclude frag_random_randn_002.m.out 

Now, we use the state manipulation functions of <tt>randn</tt> to exactly reproduce 
a random sequence.  Note that unlike using <tt>seed</tt>, we can exactly control where
the random number generator starts by saving the state.

\if FRAGMENT
frag_random_randn_003.m
0
randn('state',0)    % restores us to startup conditions
a = randn(1,3)      % random sequence 1
b = randn('state'); % capture the state vector
c = randn(1,3)      % random sequence 2  
randn('state',b);   % restart the random generator so...
c = randn(1,3)      % we get random sequence 2 again
\endif


\verbinclude frag_random_randn_003.m.out 

*/
