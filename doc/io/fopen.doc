/*!
\page io_fopen FOPEN File Open Function

<p>
Section: \ref sec_io "Input/Ouput Functions"
\section Usage
Opens a file and returns a handle which can be used for subsequent
file manipulations.  The general syntax for its use is
\verbatim
  fp = fopen(fname,mode,byteorder)
\endverbatim
Here <tt>fname</tt> is a string containing the name of the file to be 
opened.  <tt>mode</tt> is the mode string for the file open command.
The first character of the mode string is one of the following:
<UL>
<LI>  <tt>'r'</tt>  Open  file  for  reading.  The file pointer is placed at
          the beginning of the file.  The file can be read from, but
	  not written to.
 </LI>
<LI>  <tt>'r+'</tt>   Open for reading and writing.  The file pointer is
          placed at the beginning of the file.  The file can be read
	  from and written to, but must exist at the outset.
 </LI>
<LI>  <tt>'w'</tt>    Open file for writing.  If the file already exists, it is
          truncated to zero length.  Otherwise, a new file is
	  created.  The file pointer is placed at the beginning of
	  the file.
 </LI>
<LI>  <tt>'w+'</tt>   Open for reading and writing.  The file is created  if  
          it  does not  exist, otherwise it is truncated to zero
	  length.  The file pointer placed at the beginning of the file.
 </LI>
<LI>  <tt>'a'</tt>    Open for appending (writing at end of file).  The file  is  
          created  if it does not exist.  The file pointer is placed at
	  the end of the file.
 </LI>
<LI>  <tt>'a+'</tt>   Open for reading and appending (writing at end of file).   The
          file  is created if it does not exist.  The file pointer is
	  placed at the end of the file.
 </LI>
</UL>
Starting with FreeMat 4, all files are treated as binary files by default.
To invoke the operating systems 'CR/LF <-> CR' translation (on Win32)
add a 't' to the mode string, as in 'rt+'.

Also, you can supply a second argument to <tt>fopen</tt> to retrieve error
messages if the <tt>fopen</tt> fails.
\verbatim
  [fp,messages] = fopen(fname,mode,byteorder)
\endverbatim

Finally, FreeMat has the ability to read and write files of any
byte-sex (endian).  The third (optional) input indicates the 
byte-endianness of the file.  If it is omitted, the native endian-ness
of the machine running FreeMat is used.  Otherwise, the third
argument should be one of the following strings:
<UL>
<LI>  <tt>'le','ieee-le','little-endian','littleEndian','little','l','ieee-le.l64','s'</tt>
 </LI>
<LI>  <tt>'be','ieee-be','big-endian','bigEndian','big','b','ieee-be.l64','a'</tt>
 </LI>
</UL>
	
If the file cannot be opened, or the file mode is illegal, then
an error occurs. Otherwise, a file handle is returned (which is
an integer).  This file handle can then be used with <tt>fread</tt>,
<tt>fwrite</tt>, or <tt>fclose</tt> for file access.

Note that three handles are assigned at initialization time:
<UL>
<LI>  Handle 0 - is assigned to standard input
 </LI>
<LI>  Handle 1 - is assigned to standard output
 </LI>
<LI>  Handle 2 - is assigned to standard error
 </LI>
</UL>
These handles cannot be closed, so that user created file handles start at <tt>3</tt>.

\section Examples
Here are some examples of how to use <tt>fopen</tt>.  First, we create a new 
file, which we want to be little-endian, regardless of the type of the machine.
We also use the <tt>fwrite</tt> function to write some floating point data to
the file.

\if FRAGMENT
frag_io_fopen_000.m
0
fp = fopen('test.dat','w','ieee-le')
fwrite(fp,float([1.2,4.3,2.1]))
fclose(fp)
\endif


\verbinclude frag_io_fopen_000.m.out 

Next, we open the file and read the data back

\if FRAGMENT
frag_io_fopen_001.m
0
fp = fopen('test.dat','r','ieee-le')
fread(fp,[1,3],'float')
fclose(fp)
\endif


\verbinclude frag_io_fopen_001.m.out 

Now, we re-open the file in append mode and add two additional <tt>float</tt>s to the
file.

\if FRAGMENT
frag_io_fopen_002.m
0
fp = fopen('test.dat','a+','le')
fwrite(fp,float([pi,e]))
fclose(fp)
\endif


\verbinclude frag_io_fopen_002.m.out 

Finally, we read all 5 <tt>float</tt> values from the file

\if FRAGMENT
frag_io_fopen_003.m
0
fp = fopen('test.dat','r','ieee-le')
fread(fp,[1,5],'float')
fclose(fp)
\endif


\verbinclude frag_io_fopen_003.m.out 

*/
