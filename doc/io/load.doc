/*!
\page io_load LOAD Load Variables From A File

<p>
Section: \ref sec_io "Input/Ouput Functions"
\section Usage
Loads a set of variables from a file in a machine independent format.
The <tt>load</tt> function takes one argument:
\verbatim
  load filename,
\endverbatim
or alternately,
\verbatim
  load('filename')
\endverbatim
This command is the companion to <tt>save</tt>.  It loads the contents of the
file generated by <tt>save</tt> back into the current context.  Global and 
persistent variables are also loaded and flagged appropriately.  By
default, FreeMat assumes that files that end in a <tt>.mat</tt> or <tt>.MAT</tt>
extension are MATLAB-formatted files.  Also, FreeMat assumes that 
files that end in <tt>.txt</tt> or <tt>.TXT</tt> are ASCII files. 
For other filenames, FreeMat first tries to open the file as a 
FreeMat binary format file (as created by the <tt>save</tt> function).  
If the file fails to open as a FreeMat binary file, then FreeMat 
attempts to read it as an ASCII file.  

You can force FreeMat to assume a particular format for the file
by using alternate forms of the <tt>load</tt> command.  In particular,
\verbatim
  load -ascii filename
\endverbatim
will load the data in file <tt>filename</tt> as an ASCII file (space delimited
numeric text) loaded into a single variable in the current workspace
with the name <tt>filename</tt> (without the extension).

For MATLAB-formatted data files, you can use
\verbatim
  load -mat filename
\endverbatim
which forces FreeMat to assume that <tt>filename</tt> is a MAT-file, regardless
of the extension on the filename.

You can also specify which variables to load from a file (not from 
an ASCII file - only single 2-D variables can be successfully saved and
retrieved from ASCII files) using the additional syntaxes of the <tt>load</tt>
command.  In particular, you can specify a set of variables to load by name
\verbatim
  load filename Var_1 Var_2 Var_3 ...
\endverbatim
where <tt>Var_n</tt> is the name of a variable to load from the file.  
Alternately, you can use the regular expression syntax
\verbatim
  load filename -regexp expr_1 expr_2 expr_3 ...
\endverbatim
where <tt>expr_n</tt> is a regular expression (roughly as expected by <tt>regexp</tt>).
Note that a simpler regular expression mechanism is used for this syntax
than the full mechanism used by the <tt>regexp</tt> command.

Finally, you can use <tt>load</tt> to create a variable containing the 
contents of the file, instead of automatically inserting the variables
into the curent workspace.  For this form of <tt>load</tt> you must use the
function syntax, and capture the output:
\verbatim
  V = load('arg1','arg2',...)
\endverbatim
which returns a structure <tt>V</tt> with one field for each variable
retrieved from the file.  For ASCII files, <tt>V</tt> is a double precision
matrix.

\section Example
Here is a simple example of <tt>save</tt>/<tt>load</tt>.  First, we save some variables to a file.

\if FRAGMENT
frag_io_load_000.m
0
D = {1,5,'hello'};
s = 'test string';
x = randn(512,1);
z = zeros(512);
who
save loadsave.dat
\endif


\verbinclude frag_io_load_000.m.out 

Next, we clear the variables, and then load them back from the file.

\if FRAGMENT
frag_io_load_001.m
0
clear D s x z
who
load loadsave.dat
who
\endif


\verbinclude frag_io_load_001.m.out 

*/
