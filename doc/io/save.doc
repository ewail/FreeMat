/*!
\page io_save SAVE Save Variables To A File

<p>
Section: \ref sec_io "Input/Ouput Functions"
\section Usage
Saves a set of variables to a file in a machine independent format.
There are two formats for the function call.  The first is the explicit
form, in which a list of variables are provided to write to the file:
\verbatim
  save filename a1 a2 ...
\endverbatim
In the second form,
\verbatim
  save filename
\endverbatim
all variables in the current context are written to the file.  The 
format of the file is a simple binary encoding (raw) of the data
with enough information to restore the variables with the <tt>load</tt>
command.  The endianness of the machine is encoded in the file, and
the resulting file should be portable between machines of similar
types (in particular, machines that support IEEE floating point 
representation).

You can also specify both the filename as a string, in which case
you also have to specify the names of the variables to save.  In
particular
\verbatim
   save('filename','a1','a2')
\endverbatim
will save variables <tt>a1</tt> and <tt>a2</tt> to the file.

Starting with version 2.0, FreeMat can also read and write MAT
files (the file format used by MATLAB) thanks to substantial 
work by Thomas Beutlich.  Support for MAT files in version 2.1
has improved over previous versions.  In particular, classes
should be saved properly, as well as a broader range of sparse
matrices.  Compression is supported for both reading and writing
to MAT files.  MAT file support is still in the alpha stages, so 
please be cautious with using it to store critical 
data.  The file format is triggered
by the extension.  To save files with a MAT format, simply
use a filename with a ".mat" ending.

The <tt>save</tt> function also supports ASCII output.  This is a very limited
form of the save command - it can only save numeric arrays that are
2-dimensional.  This form of the <tt>save</tt> command is triggered using
\verbatim
   save -ascii filename var1 var 2
\endverbatim
although where <tt>-ascii</tt> appears on the command line is arbitrary (provided
it comes after the <tt>save</tt> command, of course).  Be default, the <tt>save</tt>
command uses an 8-digit exponential format notation to save the values to
the file.  You can specify that you want 16-digits using the
\verbatim
   save -ascii -double filename var1 var2
\endverbatim
form of the command.  Also, by default, <tt>save</tt> uses spaces as the 
delimiters between the entries in the matrix.  If you want tabs instead,
you can use
\verbatim
   save -ascii -tabs filename var1 var2
\endverbatim
(you can also use both the <tt>-tabs</tt> and <tt>-double</tt> flags simultaneously).

Finally, you can specify that <tt>save</tt> should only save variables that
match a particular regular expression.  Any of the above forms can be
combined with the <tt>-regexp</tt> flag:
\verbatim
   save filename -regexp pattern1 pattern2
\endverbatim
in which case variables that match any of the patterns will be saved.
\section Example
Here is a simple example of <tt>save</tt>/<tt>load</tt>.  First, we save some 
variables to a file.

\if FRAGMENT
frag_io_save_000.m
0
D = {1,5,'hello'};
s = 'test string';
x = randn(512,1);
z = zeros(512);
who
save loadsave.dat
\endif


\verbinclude frag_io_save_000.m.out 

Next, we clear the variables, and then load them back from the file.

\if FRAGMENT
frag_io_save_001.m
0
clear D s x z
who
load loadsave.dat
who
\endif


\verbinclude frag_io_save_001.m.out 

*/
