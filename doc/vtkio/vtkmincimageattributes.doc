/*!
\page vtkio_vtkmincimageattributes vtkMINCImageAttributes

<p>
Section: \ref sec_vtkio "Visualization Toolkit IO Classes"
\section Usage
 This class provides methods to access all of the information
 contained in the MINC header.  If you read a MINC file into
 VTK and then write it out again, you can use 
 writer->SetImageAttributes(reader->GetImageAttributes) to
 ensure that all of the medical information contained in the
 file is tranferred from the reader to the writer.  If you
 want to change any of the header information, you must 
 use ShallowCopy to make a copy of the reader's attributes
 and then modify only the copy.

To create an instance of class vtkMINCImageAttributes, simply
invoke its constructor as follows
\verbatim
  obj = vtkMINCImageAttributes
\endverbatim
\section Methods
The class vtkMINCImageAttributes has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkMINCImageAttributes class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkMINCImageAttributes = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkMINCImageAttributes = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.Reset ()</tt> -  Reset all the attributes in preparation for loading
 new information.
 </LI>
<LI>  <tt>obj.SetName (string )</tt> -  Get the name of the image, not including the path or
 the extension.  This is only needed for printing the
 header and there is usually no need to set it.
 </LI>
<LI>  <tt>string = obj.GetName ()</tt> -  Get the name of the image, not including the path or
 the extension.  This is only needed for printing the
 header and there is usually no need to set it.
 </LI>
<LI>  <tt>obj.SetDataType (int )</tt> -  Get the image data type, as stored on disk.  This information
 is useful if the file was converted to floating-point when it
 was loaded.  When writing a file from float or double image data,
 you can use this method to prescribe the output type. 
 </LI>
<LI>  <tt>int = obj.GetDataType ()</tt> -  Get the image data type, as stored on disk.  This information
 is useful if the file was converted to floating-point when it
 was loaded.  When writing a file from float or double image data,
 you can use this method to prescribe the output type. 
 </LI>
<LI>  <tt>obj.AddDimension (string dimension)</tt> -  Add the names of up to five dimensions. The ordering of these
 dimensions will determine the dimension order of the file.  If
 no DimensionNames are set, the writer will set the dimension
 order of the file to be the same as the dimension order in memory.
 </LI>
<LI>  <tt>obj.AddDimension (string dimension, vtkIdType length)</tt> -  Add the names of up to five dimensions. The ordering of these
 dimensions will determine the dimension order of the file.  If
 no DimensionNames are set, the writer will set the dimension
 order of the file to be the same as the dimension order in memory.
 </LI>
<LI>  <tt>vtkStringArray = obj.GetDimensionNames ()</tt> -  Get the dimension names.  The dimension names are same order
 as written in the file, starting with the slowest-varying
 dimension.  Use this method to get the array if you need to
 change "space" dimensions to "frequency" after performing a
 Fourier transform. 
 </LI>
<LI>  <tt>vtkIdTypeArray = obj.GetDimensionLengths ()</tt> -  Get the lengths of all the dimensions.  The dimension lengths
 are informative, the vtkMINCImageWriter does not look at these values
 but instead uses the dimension sizes of its input.
 </LI>
<LI>  <tt>vtkStringArray = obj.GetVariableNames ()</tt> -  Get the names of all the variables.
 </LI>
<LI>  <tt>vtkStringArray = obj.GetAttributeNames (string variable)</tt> -  List the attribute names for a variable.  Set the variable
 to the empty string to get a list of the global attributes.
 </LI>
<LI>  <tt>obj.SetImageMin (vtkDoubleArray imageMin)</tt> -  Get the image min and max arrays. These are set by the reader,
 but they aren't used by the writer except to compute the full
 real data range of the original file.
 </LI>
<LI>  <tt>obj.SetImageMax (vtkDoubleArray imageMax)</tt> -  Get the image min and max arrays. These are set by the reader,
 but they aren't used by the writer except to compute the full
 real data range of the original file.
 </LI>
<LI>  <tt>vtkDoubleArray = obj.GetImageMin ()</tt> -  Get the image min and max arrays. These are set by the reader,
 but they aren't used by the writer except to compute the full
 real data range of the original file.
 </LI>
<LI>  <tt>vtkDoubleArray = obj.GetImageMax ()</tt> -  Get the image min and max arrays. These are set by the reader,
 but they aren't used by the writer except to compute the full
 real data range of the original file.
 </LI>
<LI>  <tt>int = obj.GetNumberOfImageMinMaxDimensions ()</tt> -  Get the number of ImageMinMax dimensions.
 </LI>
<LI>  <tt>obj.SetNumberOfImageMinMaxDimensions (int )</tt> -  Get the number of ImageMinMax dimensions.
 </LI>
<LI>  <tt>int = obj.HasAttribute (string variable, string attribute)</tt> -  Check to see if a particular attribute exists.
 </LI>
<LI>  <tt>obj.SetAttributeValueAsArray (string variable, string attribute, vtkDataArray array)</tt> -  Set attribute values for a variable as a vtkDataArray.
 Set the variable to the empty string to access global attributes.
 </LI>
<LI>  <tt>vtkDataArray = obj.GetAttributeValueAsArray (string variable, string attribute)</tt> -  Set attribute values for a variable as a vtkDataArray.
 Set the variable to the empty string to access global attributes.
 </LI>
<LI>  <tt>obj.SetAttributeValueAsString (string variable, string attribute, string value)</tt> -  Set an attribute value as a string.  Set the variable
 to the empty string to access global attributes.
 If you specify a variable that does not exist, it will be
 created.
 </LI>
<LI>  <tt>string = obj.GetAttributeValueAsString (string variable, string attribute)</tt> -  Set an attribute value as a string.  Set the variable
 to the empty string to access global attributes.
 If you specify a variable that does not exist, it will be
 created.
 </LI>
<LI>  <tt>obj.SetAttributeValueAsInt (string variable, string attribute, int value)</tt> -  Set an attribute value as an int. Set the variable
 to the empty string to access global attributes.
 If you specify a variable that does not exist, it will be
 created.
 </LI>
<LI>  <tt>int = obj.GetAttributeValueAsInt (string variable, string attribute)</tt> -  Set an attribute value as an int. Set the variable
 to the empty string to access global attributes.
 If you specify a variable that does not exist, it will be
 created.
 </LI>
<LI>  <tt>obj.SetAttributeValueAsDouble (string variable, string attribute, double value)</tt> -  Set an attribute value as a double.  Set the variable
 to the empty string to access global attributes.
 If you specify a variable that does not exist, it will be
 created.
 </LI>
<LI>  <tt>double = obj.GetAttributeValueAsDouble (string variable, string attribute)</tt> -  Set an attribute value as a double.  Set the variable
 to the empty string to access global attributes.
 If you specify a variable that does not exist, it will be
 created.
 </LI>
<LI>  <tt>int = obj.ValidateAttribute (string varname, string attname, vtkDataArray array)</tt> -  Validate a particular attribute.  This involves checking
 that the attribute is a MINC standard attribute, and checking
 whether it can be set (as opposed to being set automatically
 from the image information).  The return values is 0 if
 the attribute is set automatically and therefore should not
 be copied from here, 1 if this attribute is valid and should
 be set, and 2 if the attribute is non-standard.
 </LI>
<LI>  <tt>obj.ShallowCopy (vtkMINCImageAttributes source)</tt> -  Do a shallow copy.  This will copy all the attributes
 from the source.  It is much more efficient than a DeepCopy
 would be, since it only copies pointers to the attribute values
 instead of copying the arrays themselves.  You must use this
 method to make a copy if you want to modify any MINC attributes
 from a MINCReader before you pass them to a MINCWriter.
 </LI>
<LI>  <tt>obj.FindValidRange (double range[2])</tt> -  Find the valid range of the data from the information stored
 in the attributes.
 </LI>
<LI>  <tt>obj.FindImageRange (double range[2])</tt> -  Find the image range of the data from the information stored
 in the attributes.
 </LI>
<LI>  <tt>obj.PrintFileHeader ()</tt> -  A diagnostic function.  Print the header of the file in 
 the same format as ncdump or mincheader.
 </LI>
</UL>
*/
