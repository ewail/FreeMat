/*!
\page vtkio_vtkvolume16reader vtkVolume16Reader

<p>
Section: \ref sec_vtkio "Visualization Toolkit IO Classes"
\section Usage
 vtkVolume16Reader is a source object that reads 16 bit image files.

 Volume16Reader creates structured point datasets. The dimension of the 
 dataset depends upon the number of files read. Reading a single file 
 results in a 2D image, while reading more than one file results in a 
 3D volume.

 File names are created using FilePattern and FilePrefix as follows:
 sprintf (filename, FilePattern, FilePrefix, number);
 where number is in the range ImageRange[0] to ImageRange[1]. If
 ImageRange[1] <= ImageRange[0], then slice number ImageRange[0] is
 read. Thus to read an image set ImageRange[0] = ImageRange[1] = slice 
 number. The default behavior is to read a single file (i.e., image slice 1).

 The DataMask instance variable is used to read data files with imbedded
 connectivity or segmentation information. For example, some data has
 the high order bit set to indicate connected surface. The DataMask allows
 you to select this data. Other important ivars include HeaderSize, which
 allows you to skip over initial info, and SwapBytes, which turns on/off
 byte swapping.

 The Transform instance variable specifies a permutation transformation
 to map slice space into world space. vtkImageReader has replaced the
 functionality of this class and should be used instead.

To create an instance of class vtkVolume16Reader, simply
invoke its constructor as follows
\verbatim
  obj = vtkVolume16Reader
\endverbatim
\section Methods
The class vtkVolume16Reader has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkVolume16Reader class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkVolume16Reader = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkVolume16Reader = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetDataDimensions (int , int )</tt> -  Specify the dimensions for the data.
 </LI>
<LI>  <tt>obj.SetDataDimensions (int  a[2])</tt> -  Specify the dimensions for the data.
 </LI>
<LI>  <tt>int = obj. GetDataDimensions ()</tt> -  Specify the dimensions for the data.
 </LI>
<LI>  <tt>obj.SetDataMask (short )</tt> -  Specify a mask used to eliminate data in the data file (e.g.,
 connectivity bits).
 </LI>
<LI>  <tt>short = obj.GetDataMask ()</tt> -  Specify a mask used to eliminate data in the data file (e.g.,
 connectivity bits).
 </LI>
<LI>  <tt>obj.SetHeaderSize (int )</tt> -  Specify the number of bytes to seek over at start of image.
 </LI>
<LI>  <tt>int = obj.GetHeaderSize ()</tt> -  Specify the number of bytes to seek over at start of image.
 </LI>
<LI>  <tt>obj.SetDataByteOrderToBigEndian ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
 SetDataByteOrderToBigEndian. 
 </LI>
<LI>  <tt>obj.SetDataByteOrderToLittleEndian ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
 SetDataByteOrderToBigEndian. 
 </LI>
<LI>  <tt>int = obj.GetDataByteOrder ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
 SetDataByteOrderToBigEndian. 
 </LI>
<LI>  <tt>obj.SetDataByteOrder (int )</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
 SetDataByteOrderToBigEndian. 
 </LI>
<LI>  <tt>string = obj.GetDataByteOrderAsString ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
 SetDataByteOrderToBigEndian. 
 </LI>
<LI>  <tt>obj.SetSwapBytes (int )</tt> -  Turn on/off byte swapping.
 </LI>
<LI>  <tt>int = obj.GetSwapBytes ()</tt> -  Turn on/off byte swapping.
 </LI>
<LI>  <tt>obj.SwapBytesOn ()</tt> -  Turn on/off byte swapping.
 </LI>
<LI>  <tt>obj.SwapBytesOff ()</tt> -  Turn on/off byte swapping.
 </LI>
<LI>  <tt>obj.SetTransform (vtkTransform )</tt> -  Set/Get transformation matrix to transform the data from slice space
 into world space. This matrix must be a permutation matrix. To qualify,
 the sums of the rows must be + or - 1.
 </LI>
<LI>  <tt>vtkTransform = obj.GetTransform ()</tt> -  Set/Get transformation matrix to transform the data from slice space
 into world space. This matrix must be a permutation matrix. To qualify,
 the sums of the rows must be + or - 1.
 </LI>
<LI>  <tt>vtkImageData = obj.GetImage (int ImageNumber)</tt> -  Other objects make use of these methods
 </LI>
</UL>
*/
