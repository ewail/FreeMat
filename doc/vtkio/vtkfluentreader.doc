/*!
\page vtkio_vtkfluentreader vtkFLUENTReader

<p>
Section: \ref sec_vtkio "Visualization Toolkit IO Classes"
\section Usage
 vtkFLUENTReader creates an unstructured grid dataset. It reads .cas and
 .dat files stored in FLUENT native format.

 .SECTION Thanks
 Thanks to Brian W. Dotson & Terry E. Jordan (Department of Energy, National
 Energy Technology Laboratory) & Douglas McCorkle (Iowa State University)
 who developed this class.
 Please address all comments to Brian Dotson (brian.dotson@netl.doe.gov) &
 Terry Jordan (terry.jordan@sa.netl.doe.gov)
 & Doug McCorkle (mccdo@iastate.edu)


To create an instance of class vtkFLUENTReader, simply
invoke its constructor as follows
\verbatim
  obj = vtkFLUENTReader
\endverbatim
\section Methods
The class vtkFLUENTReader has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkFLUENTReader class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkFLUENTReader = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkFLUENTReader = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetFileName (string )</tt> -  Specify the file name of the Fluent case file to read.
 </LI>
<LI>  <tt>string = obj.GetFileName ()</tt> -  Specify the file name of the Fluent case file to read.
 </LI>
<LI>  <tt>int = obj.GetNumberOfCells ()</tt> -  Get the total number of cells. The number of cells is only valid after a
 successful read of the data file is performed. Initial value is 0.
 </LI>
<LI>  <tt>int = obj.GetNumberOfCellArrays (void )</tt> -  Get the number of cell arrays available in the input.
 </LI>
<LI>  <tt>string = obj.GetCellArrayName (int index)</tt> -  Get the name of the  cell array with the given index in
 the input.
 </LI>
<LI>  <tt>int = obj.GetCellArrayStatus (string name)</tt> -  Get/Set whether the cell array with the given name is to
 be read.
 </LI>
<LI>  <tt>obj.SetCellArrayStatus (string name, int status)</tt> -  Get/Set whether the cell array with the given name is to
 be read.
 </LI>
<LI>  <tt>obj.DisableAllCellArrays ()</tt> -  Turn on/off all cell arrays.
 </LI>
<LI>  <tt>obj.EnableAllCellArrays ()</tt> -  Turn on/off all cell arrays.
 </LI>
<LI>  <tt>obj.SetDataByteOrderToBigEndian ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian 
 otherwise SetDataByteOrderToBigEndian. Not used when reading
 text files. 
 </LI>
<LI>  <tt>obj.SetDataByteOrderToLittleEndian ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian 
 otherwise SetDataByteOrderToBigEndian. Not used when reading
 text files. 
 </LI>
<LI>  <tt>int = obj.GetDataByteOrder ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian 
 otherwise SetDataByteOrderToBigEndian. Not used when reading
 text files. 
 </LI>
<LI>  <tt>obj.SetDataByteOrder (int )</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian 
 otherwise SetDataByteOrderToBigEndian. Not used when reading
 text files. 
 </LI>
<LI>  <tt>string = obj.GetDataByteOrderAsString ()</tt> -  These methods should be used instead of the SwapBytes methods.
 They indicate the byte ordering of the file you are trying
 to read in. These methods will then either swap or not swap
 the bytes depending on the byte ordering of the machine it is
 being run on. For example, reading in a BigEndian file on a
 BigEndian machine will result in no swapping. Trying to read
 the same file on a LittleEndian machine will result in swapping.
 As a quick note most UNIX machines are BigEndian while PC's
 and VAX tend to be LittleEndian. So if the file you are reading
 in was generated on a VAX or PC, SetDataByteOrderToLittleEndian 
 otherwise SetDataByteOrderToBigEndian. Not used when reading
 text files. 
 </LI>
</UL>
*/
