/*!
\page vtkparallel_vtkwindbladereader vtkWindBladeReader

<p>
Section: \ref sec_vtkparallel "Visualization Toolkit Parallel Classes"
\section Usage
 vtkWindBladeReader is a source object that reads WindBlade files
 which are block binary files with tags before and after each block
 giving the number of bytes within the block.  The number of data 
 variables dumped varies.  The data is 3D rectilinear with irregular
 spacing on the Z dimension.


To create an instance of class vtkWindBladeReader, simply
invoke its constructor as follows
\verbatim
  obj = vtkWindBladeReader
\endverbatim
\section Methods
The class vtkWindBladeReader has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkWindBladeReader class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkWindBladeReader = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkWindBladeReader = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetFilename (string )</tt>
 </LI>
<LI>  <tt>string = obj.GetFilename ()</tt>
 </LI>
<LI>  <tt>obj.SetWholeExtent (int , int , int , int , int , int )</tt>
 </LI>
<LI>  <tt>obj.SetWholeExtent (int  a[6])</tt>
 </LI>
<LI>  <tt>int = obj. GetWholeExtent ()</tt>
 </LI>
<LI>  <tt>obj.SetSubExtent (int , int , int , int , int , int )</tt>
 </LI>
<LI>  <tt>obj.SetSubExtent (int  a[6])</tt>
 </LI>
<LI>  <tt>int = obj. GetSubExtent ()</tt>
 </LI>
<LI>  <tt>vtkStructuredGrid = obj.GetFieldOutput ()</tt> -  Get the reader's output
 </LI>
<LI>  <tt>vtkUnstructuredGrid = obj.GetBladeOutput ()</tt> -  Get the reader's output
 </LI>
<LI>  <tt>int = obj.GetNumberOfPointArrays ()</tt> -  The following methods allow selective reading of solutions fields.
 By default, ALL data fields on the nodes are read, but this can
 be modified.
 </LI>
<LI>  <tt>string = obj.GetPointArrayName (int index)</tt> -  The following methods allow selective reading of solutions fields.
 By default, ALL data fields on the nodes are read, but this can
 be modified.
 </LI>
<LI>  <tt>int = obj.GetPointArrayStatus (string name)</tt>
 </LI>
<LI>  <tt>obj.SetPointArrayStatus (string name, int status)</tt>
 </LI>
<LI>  <tt>obj.DisableAllPointArrays ()</tt>
 </LI>
<LI>  <tt>obj.EnableAllPointArrays ()</tt>
 </LI>
</UL>
*/
