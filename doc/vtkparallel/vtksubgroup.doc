/*!
\page vtkparallel_vtksubgroup vtkSubGroup

<p>
Section: \ref sec_vtkparallel "Visualization Toolkit Parallel Classes"
\section Usage
     This class provides scalable broadcast, reduce, etc. using
     only a vtkMultiProcessController. It does not require MPI.
     Users are vtkPKdTree and vtkDistributedDataFilter.

 .SECTION Note
 This class will be deprecated soon.  Instead of using this class, use the
 collective and subgrouping operations now built into
 vtkMultiProcessController.  The only reason this class is not deprecated
 already is because vtkPKdTree relies heavily on this class in ways that are
 not easy to work around.  Since vtkPKdTree is due for a major overhaul
 anyway, we are leaving things the way they are for now.


To create an instance of class vtkSubGroup, simply
invoke its constructor as follows
\verbatim
  obj = vtkSubGroup
\endverbatim
\section Methods
The class vtkSubGroup has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSubGroup class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkSubGroup = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkSubGroup = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.Initialize (int p0, int p1, int me, int tag, vtkCommunicator c)</tt>
 </LI>
<LI>  <tt>int = obj.Gather (int data, int to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.Gather (string data, string to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.Gather (float data, float to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.Broadcast (float data, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.Broadcast (double data, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.Broadcast (int data, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.Broadcast (string data, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceSum (int data, int to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceMax (float data, float to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceMax (double data, double to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceMax (int data, int to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceMin (float data, float to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceMin (double data, double to, int length, int root)</tt>
 </LI>
<LI>  <tt>int = obj.ReduceMin (int data, int to, int length, int root)</tt>
 </LI>
<LI>  <tt>obj.setGatherPattern (int root, int length)</tt>
 </LI>
<LI>  <tt>int = obj.getLocalRank (int processID)</tt>
 </LI>
<LI>  <tt>int = obj.Barrier ()</tt>
 </LI>
<LI>  <tt>obj.PrintSubGroup () const</tt>
 </LI>
</UL>
*/
