/*!
\page vtkparallel_vtksocketcontroller vtkSocketController

<p>
Section: \ref sec_vtkparallel "Visualization Toolkit Parallel Classes"
\section Usage
 This is a concrete implementation of vtkMultiProcessController.
 It supports one-to-one communication using sockets. Note that
 process 0 will always correspond to self and process 1 to the
 remote process. This class is best used with ports.

To create an instance of class vtkSocketController, simply
invoke its constructor as follows
\verbatim
  obj = vtkSocketController
\endverbatim
\section Methods
The class vtkSocketController has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSocketController class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkSocketController = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkSocketController = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.Initialize ()</tt> -  Does not apply to sockets. Does nothing.
 </LI>
<LI>  <tt>obj.Finalize ()</tt> -  Does not apply to sockets. Does nothing.
 </LI>
<LI>  <tt>obj.Finalize (int )</tt> -  Does not apply to sockets. Does nothing.
 </LI>
<LI>  <tt>obj.SingleMethodExecute ()</tt> -   Does not apply to sockets. Does nothing.
 </LI>
<LI>  <tt>obj.MultipleMethodExecute ()</tt> -   Does not apply to sockets.  Does nothing.
 </LI>
<LI>  <tt>obj.CreateOutputWindow ()</tt> -   Does not apply to sockets. Does nothing.
 </LI>
<LI>  <tt>int = obj.WaitForConnection (int port)</tt> -  Wait for connection on a given port, forwarded
 to the communicator
 </LI>
<LI>  <tt>obj.CloseConnection ()</tt> -  Close a connection, forwarded
 to the communicator
 </LI>
<LI>  <tt>int = obj.ConnectTo (string hostName, int port)</tt> -  Open a connection to a give machine, forwarded
 to the communicator
 </LI>
<LI>  <tt>int = obj.GetSwapBytesInReceivedData ()</tt>
 </LI>
<LI>  <tt>obj.SetCommunicator (vtkSocketCommunicator comm)</tt> -  Set the communicator used in normal and rmi communications.
 </LI>
<LI>  <tt>vtkMultiProcessController = obj.CreateCompliantController ()</tt> -  FOOLISH MORTALS!  Thou hast forsaken the sacred laws of ad-hoc polymorphism
 when thou broke a critical assumption of the superclass (namely, each
 process has thine own id).  The time frame to fix thy error has passed.
 Too much code has come to rely on this abhorrent behavior.  Instead, we
 offer this gift: a method for creating an equivalent communicator with
 correct process id semantics.  The calling code is responsible for
 deleting this controller.
 </LI>
</UL>
*/
