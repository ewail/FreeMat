/*!
\page vtkparallel_vtkcompositer vtkCompositer

<p>
Section: \ref sec_vtkparallel "Visualization Toolkit Parallel Classes"
\section Usage
 vtkCompositer operates in multiple processes.  Each compositer has 
 a render window.  They use vtkMultiProcessControllers to communicate 
 the color and depth buffer to process 0's render window.
 It will not handle transparency well.


To create an instance of class vtkCompositer, simply
invoke its constructor as follows
\verbatim
  obj = vtkCompositer
\endverbatim
\section Methods
The class vtkCompositer has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkCompositer class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkCompositer = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkCompositer = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.CompositeBuffer (vtkDataArray pBuf, vtkFloatArray zBuf, vtkDataArray pTmp, vtkFloatArray zTmp)</tt> -  This method gets called on every process.  The final image gets
 put into pBuf and zBuf.
 </LI>
<LI>  <tt>obj.SetController (vtkMultiProcessController )</tt> -  Access to the controller.
 </LI>
<LI>  <tt>vtkMultiProcessController = obj.GetController ()</tt> -  Access to the controller.
 </LI>
<LI>  <tt>obj.SetNumberOfProcesses (int )</tt> -  A hack to get a sub world until I can get communicators working.
 </LI>
<LI>  <tt>int = obj.GetNumberOfProcesses ()</tt> -  A hack to get a sub world until I can get communicators working.
 </LI>
</UL>
*/
