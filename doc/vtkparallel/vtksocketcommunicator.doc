/*!
\page vtkparallel_vtksocketcommunicator vtkSocketCommunicator

<p>
Section: \ref sec_vtkparallel "Visualization Toolkit Parallel Classes"
\section Usage
 This is a concrete implementation of vtkCommunicator which supports
 interprocess communication using BSD style sockets. 
 It supports byte swapping for the communication of  machines 
 with different endianness.

To create an instance of class vtkSocketCommunicator, simply
invoke its constructor as follows
\verbatim
  obj = vtkSocketCommunicator
\endverbatim
\section Methods
The class vtkSocketCommunicator has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSocketCommunicator class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkSocketCommunicator = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkSocketCommunicator = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.WaitForConnection (int port)</tt> -  Wait for connection on a given port.
 These methods return 1 on success, 0 on error.
 </LI>
<LI>  <tt>int = obj.WaitForConnection (vtkServerSocket socket, long msec)</tt> -  Wait for connection on a given port.
 These methods return 1 on success, 0 on error.
 </LI>
<LI>  <tt>obj.CloseConnection ()</tt> -  Close a connection.
 </LI>
<LI>  <tt>int = obj.ConnectTo (string hostName, int port)</tt> -  Open a connection to host.
 </LI>
<LI>  <tt>int = obj.GetSwapBytesInReceivedData ()</tt> -  Returns 1 if bytes must be swapped in received ints, floats, etc
 </LI>
<LI>  <tt>int = obj.GetIsConnected ()</tt> -  Is the communicator connected?.
 </LI>
<LI>  <tt>obj.SetNumberOfProcesses (int num)</tt> -  Set the number of processes you will be using.
 </LI>
<LI>  <tt>obj.Barrier ()</tt> -  This class foolishly breaks the conventions of the superclass, so this
 overload fixes the method.
 </LI>
<LI>  <tt>obj.SetPerformHandshake (int )</tt> -  Set or get the PerformHandshake ivar. If it is on, the communicator
 will try to perform a handshake when connected.
 It is on by default.
 </LI>
<LI>  <tt>int = obj.GetPerformHandshakeMinValue ()</tt> -  Set or get the PerformHandshake ivar. If it is on, the communicator
 will try to perform a handshake when connected.
 It is on by default.
 </LI>
<LI>  <tt>int = obj.GetPerformHandshakeMaxValue ()</tt> -  Set or get the PerformHandshake ivar. If it is on, the communicator
 will try to perform a handshake when connected.
 It is on by default.
 </LI>
<LI>  <tt>obj.PerformHandshakeOn ()</tt> -  Set or get the PerformHandshake ivar. If it is on, the communicator
 will try to perform a handshake when connected.
 It is on by default.
 </LI>
<LI>  <tt>obj.PerformHandshakeOff ()</tt> -  Set or get the PerformHandshake ivar. If it is on, the communicator
 will try to perform a handshake when connected.
 It is on by default.
 </LI>
<LI>  <tt>int = obj.GetPerformHandshake ()</tt> -  Set or get the PerformHandshake ivar. If it is on, the communicator
 will try to perform a handshake when connected.
 It is on by default.
 </LI>
<LI>  <tt>int = obj.LogToFile (string name)</tt> -  Log messages to the given file.  The file is truncated unless the
 second argument is non-zero (default is to truncate).  If the
 file name is empty or NULL, logging is disabled.  Returns 0 if
 the file failed to open, and 1 otherwise.
 </LI>
<LI>  <tt>int = obj.LogToFile (string name, int append)</tt> -  Log messages to the given file.  The file is truncated unless the
 second argument is non-zero (default is to truncate).  If the
 file name is empty or NULL, logging is disabled.  Returns 0 if
 the file failed to open, and 1 otherwise.
 </LI>
<LI>  <tt>obj.SetReportErrors (int )</tt> -  If ReportErrors if false, all vtkErrorMacros are suppressed.
 </LI>
<LI>  <tt>int = obj.GetReportErrors ()</tt> -  If ReportErrors if false, all vtkErrorMacros are suppressed.
 </LI>
<LI>  <tt>vtkClientSocket = obj.GetSocket ()</tt> -  Get/Set the actual socket used for communication.
 </LI>
<LI>  <tt>obj.SetSocket (vtkClientSocket )</tt> -  Get/Set the actual socket used for communication.
 </LI>
<LI>  <tt>int = obj.Handshake ()</tt> -  Performs handshake. This uses vtkClientSocket::ConnectingSide to decide
 whether to perform ServerSideHandshake or ClientSideHandshake. 
 </LI>
<LI>  <tt>int = obj.ServerSideHandshake ()</tt> -  Performs ServerSide handshake.
 One should preferably use Handshake() which calls ServerSideHandshake or
 ClientSideHandshake as required.
 </LI>
<LI>  <tt>int = obj.ClientSideHandshake ()</tt> -  Performs ClientSide handshake.
 One should preferably use Handshake() which calls ServerSideHandshake or
 ClientSideHandshake as required.
 </LI>
<LI>  <tt>int = obj.GetIsServer ()</tt> -  Returns true if this side of the socket is the server.  The result
 is invalid if the socket is not connected.
 </LI>
</UL>
*/
