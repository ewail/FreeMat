/*!
\page vtkgraphics_vtkprogrammablefilter vtkProgrammableFilter

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkProgrammableFilter is a filter that can be programmed by the user.  To
 use the filter you define a function that retrieves input of the correct
 type, creates data, and then manipulates the output of the filter.  Using
 this filter avoids the need for subclassing - and the function can be
 defined in an interpreter wrapper language such as Tcl or Java.

 The trickiest part of using this filter is that the input and output
 methods are unusual and cannot be compile-time type checked. Instead, as a
 user of this filter it is your responsibility to set and get the correct
 input and output types.

To create an instance of class vtkProgrammableFilter, simply
invoke its constructor as follows
\verbatim
  obj = vtkProgrammableFilter
\endverbatim
\section Methods
The class vtkProgrammableFilter has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkProgrammableFilter class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkProgrammableFilter = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkProgrammableFilter = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>vtkPolyData = obj.GetPolyDataInput ()</tt> -  Get the input as a concrete type. This method is typically used by the
 writer of the filter function to get the input as a particular type (i.e.,
 it essentially does type casting). It is the users responsibility to know
 the correct type of the input data.
 </LI>
<LI>  <tt>vtkStructuredPoints = obj.GetStructuredPointsInput ()</tt> -  Get the input as a concrete type.
 </LI>
<LI>  <tt>vtkStructuredGrid = obj.GetStructuredGridInput ()</tt> -  Get the input as a concrete type.
 </LI>
<LI>  <tt>vtkUnstructuredGrid = obj.GetUnstructuredGridInput ()</tt> -  Get the input as a concrete type.
 </LI>
<LI>  <tt>vtkRectilinearGrid = obj.GetRectilinearGridInput ()</tt> -  Get the input as a concrete type.
 </LI>
<LI>  <tt>vtkGraph = obj.GetGraphInput ()</tt> -  Get the input as a concrete type.
 </LI>
<LI>  <tt>vtkTable = obj.GetTableInput ()</tt> -  Get the input as a concrete type.
 </LI>
<LI>  <tt>obj.SetCopyArrays (bool )</tt> -  When CopyArrays is true, all arrays are copied to the output
 iff input and output are of the same type. False by default.
 </LI>
<LI>  <tt>bool = obj.GetCopyArrays ()</tt> -  When CopyArrays is true, all arrays are copied to the output
 iff input and output are of the same type. False by default.
 </LI>
<LI>  <tt>obj.CopyArraysOn ()</tt> -  When CopyArrays is true, all arrays are copied to the output
 iff input and output are of the same type. False by default.
 </LI>
<LI>  <tt>obj.CopyArraysOff ()</tt> -  When CopyArrays is true, all arrays are copied to the output
 iff input and output are of the same type. False by default.
 </LI>
</UL>
*/
