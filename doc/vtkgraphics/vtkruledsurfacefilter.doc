/*!
\page vtkgraphics_vtkruledsurfacefilter vtkRuledSurfaceFilter

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkRuledSurfaceFilter is a filter that generates a surface from a set of
 lines. The lines are assumed to be "parallel" in the sense that they do
 not intersect and remain somewhat close to one another. A surface is
 generated by connecting the points defining each pair of lines with
 straight lines. This creates a strip for each pair of lines (i.e., a
 triangulation is created from two generating lines). The filter can handle
 an arbitrary number of lines, with lines i and i+1 assumed connected.
 Note that there are several different approaches for creating the ruled
 surface, the method for creating the surface can either use the input
 points or resample from the polylines (using a user-specified resolution).

 This filter offers some other important features. A DistanceFactor ivar is
 used to decide when two lines are too far apart to connect. (The factor is
 a multiple of the distance between the first two points of the two lines
 defining the strip.) If the distance between the two generating lines
 becomes too great, then the surface is not generated in that
 region. (Note: if the lines separate and then merge, then a hole can be
 generated in the surface.) In addition, the Offset and OnRation ivars can
 be used to create nifty striped surfaces. Closed surfaces (e.g., tubes) can
 be created by setting the CloseSurface ivar. (The surface can be closed
 in the other direction by repeating the first and last point in the
 polylines defining the surface.)

 An important use of this filter is to combine it with vtkStreamLine to
 generate stream surfaces. It can also be used to create surfaces from
 contours.

To create an instance of class vtkRuledSurfaceFilter, simply
invoke its constructor as follows
\verbatim
  obj = vtkRuledSurfaceFilter
\endverbatim
\section Methods
The class vtkRuledSurfaceFilter has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkRuledSurfaceFilter class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkRuledSurfaceFilter = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkRuledSurfaceFilter = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetDistanceFactor (double )</tt> -  Set/Get the factor that controls tearing of the surface.
 </LI>
<LI>  <tt>double = obj.GetDistanceFactorMinValue ()</tt> -  Set/Get the factor that controls tearing of the surface.
 </LI>
<LI>  <tt>double = obj.GetDistanceFactorMaxValue ()</tt> -  Set/Get the factor that controls tearing of the surface.
 </LI>
<LI>  <tt>double = obj.GetDistanceFactor ()</tt> -  Set/Get the factor that controls tearing of the surface.
 </LI>
<LI>  <tt>obj.SetOnRatio (int )</tt> -  Control the striping of the ruled surface. If OnRatio is greater 
 than 1, then every nth strip is turned on, beginning with the Offset
 strip.
 </LI>
<LI>  <tt>int = obj.GetOnRatioMinValue ()</tt> -  Control the striping of the ruled surface. If OnRatio is greater 
 than 1, then every nth strip is turned on, beginning with the Offset
 strip.
 </LI>
<LI>  <tt>int = obj.GetOnRatioMaxValue ()</tt> -  Control the striping of the ruled surface. If OnRatio is greater 
 than 1, then every nth strip is turned on, beginning with the Offset
 strip.
 </LI>
<LI>  <tt>int = obj.GetOnRatio ()</tt> -  Control the striping of the ruled surface. If OnRatio is greater 
 than 1, then every nth strip is turned on, beginning with the Offset
 strip.
 </LI>
<LI>  <tt>obj.SetOffset (int )</tt> -  Control the striping of the ruled surface. The offset sets the
 first stripe that is visible. Offset is generally used with
 OnRatio to create nifty striping effects.
 </LI>
<LI>  <tt>int = obj.GetOffsetMinValue ()</tt> -  Control the striping of the ruled surface. The offset sets the
 first stripe that is visible. Offset is generally used with
 OnRatio to create nifty striping effects.
 </LI>
<LI>  <tt>int = obj.GetOffsetMaxValue ()</tt> -  Control the striping of the ruled surface. The offset sets the
 first stripe that is visible. Offset is generally used with
 OnRatio to create nifty striping effects.
 </LI>
<LI>  <tt>int = obj.GetOffset ()</tt> -  Control the striping of the ruled surface. The offset sets the
 first stripe that is visible. Offset is generally used with
 OnRatio to create nifty striping effects.
 </LI>
<LI>  <tt>obj.SetCloseSurface (int )</tt> -  Indicate whether the surface is to be closed. If this boolean is
 on, then the first and last polyline are used to generate a stripe
 that closes the surface. (Note: to close the surface in the other
 direction, repeat the first point in the polyline as the last
 point in the polyline.)
 </LI>
<LI>  <tt>int = obj.GetCloseSurface ()</tt> -  Indicate whether the surface is to be closed. If this boolean is
 on, then the first and last polyline are used to generate a stripe
 that closes the surface. (Note: to close the surface in the other
 direction, repeat the first point in the polyline as the last
 point in the polyline.)
 </LI>
<LI>  <tt>obj.CloseSurfaceOn ()</tt> -  Indicate whether the surface is to be closed. If this boolean is
 on, then the first and last polyline are used to generate a stripe
 that closes the surface. (Note: to close the surface in the other
 direction, repeat the first point in the polyline as the last
 point in the polyline.)
 </LI>
<LI>  <tt>obj.CloseSurfaceOff ()</tt> -  Indicate whether the surface is to be closed. If this boolean is
 on, then the first and last polyline are used to generate a stripe
 that closes the surface. (Note: to close the surface in the other
 direction, repeat the first point in the polyline as the last
 point in the polyline.)
 </LI>
<LI>  <tt>obj.SetRuledMode (int )</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>int = obj.GetRuledModeMinValue ()</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>int = obj.GetRuledModeMaxValue ()</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>int = obj.GetRuledMode ()</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>obj.SetRuledModeToResample ()</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>obj.SetRuledModeToPointWalk ()</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>string = obj.GetRuledModeAsString ()</tt> -  Set the mode by which to create the ruled surface. (Dramatically
 different results are possible depending on the chosen mode.) The
 resample mode evenly resamples the polylines (based on length) and 
 generates triangle strips. The point walk mode uses the existing
 points and walks around the polyline using existing points.
 </LI>
<LI>  <tt>obj.SetResolution (int , int )</tt> -  If the ruled surface generation mode is RESAMPLE, then these parameters
 are used to determine the resample rate. Resolution[0] defines the
 resolution in the direction of the polylines; Resolution[1] defines
 the resolution across the polylines (i.e., direction orthogonal to
 Resolution[0]).
 </LI>
<LI>  <tt>obj.SetResolution (int  a[2])</tt> -  If the ruled surface generation mode is RESAMPLE, then these parameters
 are used to determine the resample rate. Resolution[0] defines the
 resolution in the direction of the polylines; Resolution[1] defines
 the resolution across the polylines (i.e., direction orthogonal to
 Resolution[0]).
 </LI>
<LI>  <tt>int = obj. GetResolution ()</tt> -  If the ruled surface generation mode is RESAMPLE, then these parameters
 are used to determine the resample rate. Resolution[0] defines the
 resolution in the direction of the polylines; Resolution[1] defines
 the resolution across the polylines (i.e., direction orthogonal to
 Resolution[0]).
 </LI>
<LI>  <tt>obj.SetPassLines (int )</tt> -  Indicate whether the generating lines are to be passed to the output.
 By defualt lines are not passed to the output.
 </LI>
<LI>  <tt>int = obj.GetPassLines ()</tt> -  Indicate whether the generating lines are to be passed to the output.
 By defualt lines are not passed to the output.
 </LI>
<LI>  <tt>obj.PassLinesOn ()</tt> -  Indicate whether the generating lines are to be passed to the output.
 By defualt lines are not passed to the output.
 </LI>
<LI>  <tt>obj.PassLinesOff ()</tt> -  Indicate whether the generating lines are to be passed to the output.
 By defualt lines are not passed to the output.
 </LI>
<LI>  <tt>obj.SetOrientLoops (int )</tt> -  Indicate whether the starting points of the loops need to be determined.
 If set to 0, then its assumes that the 0th point of each loop should be 
 always connected
 By defualt the loops are not oriented.
 </LI>
<LI>  <tt>int = obj.GetOrientLoops ()</tt> -  Indicate whether the starting points of the loops need to be determined.
 If set to 0, then its assumes that the 0th point of each loop should be 
 always connected
 By defualt the loops are not oriented.
 </LI>
<LI>  <tt>obj.OrientLoopsOn ()</tt> -  Indicate whether the starting points of the loops need to be determined.
 If set to 0, then its assumes that the 0th point of each loop should be 
 always connected
 By defualt the loops are not oriented.
 </LI>
<LI>  <tt>obj.OrientLoopsOff ()</tt> -  Indicate whether the starting points of the loops need to be determined.
 If set to 0, then its assumes that the 0th point of each loop should be 
 always connected
 By defualt the loops are not oriented.
 </LI>
</UL>
*/
