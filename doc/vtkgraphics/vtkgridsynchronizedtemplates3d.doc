/*!
\page vtkgraphics_vtkgridsynchronizedtemplates3d vtkGridSynchronizedTemplates3D

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkGridSynchronizedTemplates3D is a 3D implementation of the synchronized 
 template algorithm.

To create an instance of class vtkGridSynchronizedTemplates3D, simply
invoke its constructor as follows
\verbatim
  obj = vtkGridSynchronizedTemplates3D
\endverbatim
\section Methods
The class vtkGridSynchronizedTemplates3D has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkGridSynchronizedTemplates3D class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkGridSynchronizedTemplates3D = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkGridSynchronizedTemplates3D = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Because we delegate to vtkContourValues
 </LI>
<LI>  <tt>obj.SetComputeNormals (int )</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>int = obj.GetComputeNormals ()</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeNormalsOn ()</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeNormalsOff ()</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.SetComputeGradients (int )</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>int = obj.GetComputeGradients ()</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeGradientsOn ()</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeGradientsOff ()</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.SetComputeScalars (int )</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>int = obj.GetComputeScalars ()</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>obj.ComputeScalarsOn ()</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>obj.ComputeScalarsOff ()</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>obj.SetValue (int i, double value)</tt> -  Get the ith contour value.
 </LI>
<LI>  <tt>double = obj.GetValue (int i)</tt> -  Get a pointer to an array of contour values. There will be
 GetNumberOfContours() values in the list.
 </LI>
<LI>  <tt>obj.GetValues (double contourValues)</tt> -  Set the number of contours to place into the list. You only really
 need to use this method to reduce list size. The method SetValue()
 will automatically increase list size as needed.
 </LI>
<LI>  <tt>obj.SetNumberOfContours (int number)</tt> -  Get the number of contours in the list of contour values.
 </LI>
<LI>  <tt>int = obj.GetNumberOfContours ()</tt> -  Generate numContours equally spaced contour values between specified
 range. Contour values will include min/max range values.
 </LI>
<LI>  <tt>obj.GenerateValues (int numContours, double range[2])</tt> -  Generate numContours equally spaced contour values between specified
 range. Contour values will include min/max range values.
 </LI>
<LI>  <tt>obj.GenerateValues (int numContours, double rangeStart, double rangeEnd)</tt> -  Needed by templated functions.
 </LI>
<LI>  <tt>int = obj.GetExecuteExtent ()</tt> -  Needed by templated functions.
 </LI>
<LI>  <tt>obj.SetInputMemoryLimit (long limit)</tt> -  This filter will initiate streaming so that no piece requested
 from the input will be larger than this value (KiloBytes).
 </LI>
</UL>
*/
