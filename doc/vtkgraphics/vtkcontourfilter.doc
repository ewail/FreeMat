/*!
\page vtkgraphics_vtkcontourfilter vtkContourFilter

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkContourFilter is a filter that takes as input any dataset and 
 generates on output isosurfaces and/or isolines. The exact form 
 of the output depends upon the dimensionality of the input data. 
 Data consisting of 3D cells will generate isosurfaces, data 
 consisting of 2D cells will generate isolines, and data with 1D 
 or 0D cells will generate isopoints. Combinations of output type 
 are possible if the input dimension is mixed.

 To use this filter you must specify one or more contour values.
 You can either use the method SetValue() to specify each contour
 value, or use GenerateValues() to generate a series of evenly
 spaced contours. It is also possible to accelerate the operation of
 this filter (at the cost of extra memory) by using a
 vtkScalarTree. A scalar tree is used to quickly locate cells that
 contain a contour surface. This is especially effective if multiple
 contours are being extracted. If you want to use a scalar tree,
 invoke the method UseScalarTreeOn().

To create an instance of class vtkContourFilter, simply
invoke its constructor as follows
\verbatim
  obj = vtkContourFilter
\endverbatim
\section Methods
The class vtkContourFilter has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkContourFilter class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkContourFilter = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkContourFilter = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetValue (int i, double value)</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>double = obj.GetValue (int i)</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>obj.GetValues (double contourValues)</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>obj.SetNumberOfContours (int number)</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>int = obj.GetNumberOfContours ()</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>obj.GenerateValues (int numContours, double range[2])</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>obj.GenerateValues (int numContours, double rangeStart, double rangeEnd)</tt> -  Methods to set / get contour values.
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Modified GetMTime Because we delegate to vtkContourValues
 </LI>
<LI>  <tt>obj.SetComputeNormals (int )</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>int = obj.GetComputeNormals ()</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeNormalsOn ()</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeNormalsOff ()</tt> -  Set/Get the computation of normals. Normal computation is fairly
 expensive in both time and storage. If the output data will be
 processed by filters that modify topology or geometry, it may be
 wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.SetComputeGradients (int )</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>int = obj.GetComputeGradients ()</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeGradientsOn ()</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.ComputeGradientsOff ()</tt> -  Set/Get the computation of gradients. Gradient computation is
 fairly expensive in both time and storage. Note that if
 ComputeNormals is on, gradients will have to be calculated, but
 will not be stored in the output dataset.  If the output data
 will be processed by filters that modify topology or geometry, it
 may be wise to turn Normals and Gradients off.
 </LI>
<LI>  <tt>obj.SetComputeScalars (int )</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>int = obj.GetComputeScalars ()</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>obj.ComputeScalarsOn ()</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>obj.ComputeScalarsOff ()</tt> -  Set/Get the computation of scalars.
 </LI>
<LI>  <tt>obj.SetUseScalarTree (int )</tt> -  Enable the use of a scalar tree to accelerate contour extraction.
 </LI>
<LI>  <tt>int = obj.GetUseScalarTree ()</tt> -  Enable the use of a scalar tree to accelerate contour extraction.
 </LI>
<LI>  <tt>obj.UseScalarTreeOn ()</tt> -  Enable the use of a scalar tree to accelerate contour extraction.
 </LI>
<LI>  <tt>obj.UseScalarTreeOff ()</tt> -  Enable the use of a scalar tree to accelerate contour extraction.
 </LI>
<LI>  <tt>obj.SetScalarTree (vtkScalarTree )</tt> -  Enable the use of a scalar tree to accelerate contour extraction.
 </LI>
<LI>  <tt>vtkScalarTree = obj.GetScalarTree ()</tt> -  Enable the use of a scalar tree to accelerate contour extraction.
 </LI>
<LI>  <tt>obj.SetLocator (vtkIncrementalPointLocator locator)</tt> -  Set / get a spatial locator for merging points. By default, 
 an instance of vtkMergePoints is used.
 </LI>
<LI>  <tt>vtkIncrementalPointLocator = obj.GetLocator ()</tt> -  Set / get a spatial locator for merging points. By default, 
 an instance of vtkMergePoints is used.
 </LI>
<LI>  <tt>obj.CreateDefaultLocator ()</tt> -  Create default locator. Used to create one when none is
 specified. The locator is used to merge coincident points.
 </LI>
<LI>  <tt>obj.SetArrayComponent (int )</tt> -  Set/get which component of the scalar array to contour on; defaults to 0.
 Currently this feature only works if the input is a vtkImageData.
 </LI>
<LI>  <tt>int = obj.GetArrayComponent ()</tt> -  Set/get which component of the scalar array to contour on; defaults to 0.
 Currently this feature only works if the input is a vtkImageData.
 </LI>
</UL>
*/
