/*!
\page vtkgraphics_vtksubpixelpositionedgels vtkSubPixelPositionEdgels

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkSubPixelPositionEdgels is a filter that takes a series of linked
 edgels (digital curves) and gradient maps as input. It then adjusts
 the edgel locations based on the gradient data. Specifically, the
 algorithm first determines the neighboring gradient magnitudes of
 an edgel using simple interpolation of its neighbors. It then fits
 the following three data points: negative gradient direction
 gradient magnitude, edgel gradient magnitude and positive gradient
 direction gradient magnitude to a quadratic function. It then
 solves this quadratic to find the maximum gradient location along
 the gradient orientation.  It then modifies the edgels location
 along the gradient orientation to the calculated maximum
 location. This algorithm does not adjust an edgel in the direction
 orthogonal to its gradient vector.

To create an instance of class vtkSubPixelPositionEdgels, simply
invoke its constructor as follows
\verbatim
  obj = vtkSubPixelPositionEdgels
\endverbatim
\section Methods
The class vtkSubPixelPositionEdgels has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSubPixelPositionEdgels class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkSubPixelPositionEdgels = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkSubPixelPositionEdgels = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetGradMaps (vtkStructuredPoints gm)</tt> -  Set/Get the gradient data for doing the position adjustments.
 </LI>
<LI>  <tt>vtkStructuredPoints = obj.GetGradMaps ()</tt> -  Set/Get the gradient data for doing the position adjustments.
 </LI>
<LI>  <tt>obj.SetTargetFlag (int )</tt> -  These methods can make the positioning look for a target scalar value
 instead of looking for a maximum.
 </LI>
<LI>  <tt>int = obj.GetTargetFlag ()</tt> -  These methods can make the positioning look for a target scalar value
 instead of looking for a maximum.
 </LI>
<LI>  <tt>obj.TargetFlagOn ()</tt> -  These methods can make the positioning look for a target scalar value
 instead of looking for a maximum.
 </LI>
<LI>  <tt>obj.TargetFlagOff ()</tt> -  These methods can make the positioning look for a target scalar value
 instead of looking for a maximum.
 </LI>
<LI>  <tt>obj.SetTargetValue (double )</tt> -  These methods can make the positioning look for a target scalar value
 instead of looking for a maximum.
 </LI>
<LI>  <tt>double = obj.GetTargetValue ()</tt> -  These methods can make the positioning look for a target scalar value
 instead of looking for a maximum.
 </LI>
</UL>
*/
