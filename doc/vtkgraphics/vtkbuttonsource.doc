/*!
\page vtkgraphics_vtkbuttonsource vtkButtonSource

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkButtonSource is an abstract class that defines an API for creating
 "button-like" objects in VTK. A button is a geometry with a rectangular
 region that can be textured. The button is divided into two regions: the
 texture region and the shoulder region. The points in both regions are
 assigned texture coordinates. The texture region has texture coordinates
 consistent with the image to be placed on it.  All points in the shoulder
 regions are assigned a texture coordinate specified by the user.  In this
 way the shoulder region can be colored by the texture.

 Creating a vtkButtonSource requires specifying its center point. 
 (Subclasses have other attributes that must be set to control 
 the shape of the button.) You must also specify how to control
 the shape of the texture region; i.e., wheter to size the
 texture region proportional to the texture dimensions or whether
 to size the texture region proportional to the button. Also, buttons
 can be created single sided are mirrored to create two-sided buttons.

To create an instance of class vtkButtonSource, simply
invoke its constructor as follows
\verbatim
  obj = vtkButtonSource
\endverbatim
\section Methods
The class vtkButtonSource has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkButtonSource class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkButtonSource = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkButtonSource = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetCenter (double , double , double )</tt> -  Specify a point defining the origin (center) of the button.
 </LI>
<LI>  <tt>obj.SetCenter (double  a[3])</tt> -  Specify a point defining the origin (center) of the button.
 </LI>
<LI>  <tt>double = obj. GetCenter ()</tt> -  Specify a point defining the origin (center) of the button.
 </LI>
<LI>  <tt>obj.SetTextureStyle (int )</tt> -  Set/Get the style of the texture region: whether to size it
 according to the x-y dimensions of the texture, or whether to make
 the texture region proportional to the width/height of the button.
 </LI>
<LI>  <tt>int = obj.GetTextureStyleMinValue ()</tt> -  Set/Get the style of the texture region: whether to size it
 according to the x-y dimensions of the texture, or whether to make
 the texture region proportional to the width/height of the button.
 </LI>
<LI>  <tt>int = obj.GetTextureStyleMaxValue ()</tt> -  Set/Get the style of the texture region: whether to size it
 according to the x-y dimensions of the texture, or whether to make
 the texture region proportional to the width/height of the button.
 </LI>
<LI>  <tt>int = obj.GetTextureStyle ()</tt> -  Set/Get the style of the texture region: whether to size it
 according to the x-y dimensions of the texture, or whether to make
 the texture region proportional to the width/height of the button.
 </LI>
<LI>  <tt>obj.SetTextureStyleToFitImage ()</tt> -  Set/Get the style of the texture region: whether to size it
 according to the x-y dimensions of the texture, or whether to make
 the texture region proportional to the width/height of the button.
 </LI>
<LI>  <tt>obj.SetTextureStyleToProportional ()</tt> -  Set/get the texture dimension. This needs to be set if the texture
 style is set to fit the image.
 </LI>
<LI>  <tt>obj.SetTextureDimensions (int , int )</tt> -  Set/get the texture dimension. This needs to be set if the texture
 style is set to fit the image.
 </LI>
<LI>  <tt>obj.SetTextureDimensions (int  a[2])</tt> -  Set/get the texture dimension. This needs to be set if the texture
 style is set to fit the image.
 </LI>
<LI>  <tt>int = obj. GetTextureDimensions ()</tt> -  Set/get the texture dimension. This needs to be set if the texture
 style is set to fit the image.
 </LI>
<LI>  <tt>obj.SetShoulderTextureCoordinate (double , double )</tt> -  Set/Get the default texture coordinate to set the shoulder region to.
 </LI>
<LI>  <tt>obj.SetShoulderTextureCoordinate (double  a[2])</tt> -  Set/Get the default texture coordinate to set the shoulder region to.
 </LI>
<LI>  <tt>double = obj. GetShoulderTextureCoordinate ()</tt> -  Set/Get the default texture coordinate to set the shoulder region to.
 </LI>
<LI>  <tt>obj.SetTwoSided (int )</tt> -  Indicate whether the button is single or double sided. A double sided
 button can be viewed from two sides...it looks sort of like a "pill."
 A single-sided button is meant to viewed from a single side; it looks 
 like a "clam-shell."
 </LI>
<LI>  <tt>int = obj.GetTwoSided ()</tt> -  Indicate whether the button is single or double sided. A double sided
 button can be viewed from two sides...it looks sort of like a "pill."
 A single-sided button is meant to viewed from a single side; it looks 
 like a "clam-shell."
 </LI>
<LI>  <tt>obj.TwoSidedOn ()</tt> -  Indicate whether the button is single or double sided. A double sided
 button can be viewed from two sides...it looks sort of like a "pill."
 A single-sided button is meant to viewed from a single side; it looks 
 like a "clam-shell."
 </LI>
<LI>  <tt>obj.TwoSidedOff ()</tt> -  Indicate whether the button is single or double sided. A double sided
 button can be viewed from two sides...it looks sort of like a "pill."
 A single-sided button is meant to viewed from a single side; it looks 
 like a "clam-shell."
 </LI>
</UL>
*/
