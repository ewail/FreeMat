/*!
\page vtkgraphics_vtkcursor2d vtkCursor2D

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkCursor2D is a class that generates a 2D cursor representation.
 The cursor consists of two intersection axes lines that meet at the
 cursor focus. Several optional features are available as well. An 
 optional 2D bounding box may be enabled. An inner radius, centered at
 the focal point, can be set that erases the intersecting lines (e.g.,
 it leaves a clear area under the focal point so you can see
 what you are selecting). And finally, an optional point can be
 enabled located at the focal point. All of these features can be turned
 on and off independently.


To create an instance of class vtkCursor2D, simply
invoke its constructor as follows
\verbatim
  obj = vtkCursor2D
\endverbatim
\section Methods
The class vtkCursor2D has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkCursor2D class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkCursor2D = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkCursor2D = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetModelBounds (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</tt> -  Set / get the bounding box of the 2D cursor. This defines the outline
 of the cursor, and where the focal point should lie.
 </LI>
<LI>  <tt>obj.SetModelBounds (double bounds[6])</tt> -  Set / get the bounding box of the 2D cursor. This defines the outline
 of the cursor, and where the focal point should lie.
 </LI>
<LI>  <tt>double = obj. GetModelBounds ()</tt> -  Set / get the bounding box of the 2D cursor. This defines the outline
 of the cursor, and where the focal point should lie.
 </LI>
<LI>  <tt>obj.SetFocalPoint (double x[3])</tt> -  Set/Get the position of cursor focus. If translation mode is on,
 then the entire cursor (including bounding box, cursor, and shadows)
 is translated. Otherwise, the focal point will either be clamped to the
 bounding box, or wrapped, if Wrap is on. (Note: this behavior requires
 that the bounding box is set prior to the focal point.) Note that the 
 method takes a 3D point but ignores the z-coordinate value.
 </LI>
<LI>  <tt>obj.SetFocalPoint (double x, double y, double z)</tt> -  Set/Get the position of cursor focus. If translation mode is on,
 then the entire cursor (including bounding box, cursor, and shadows)
 is translated. Otherwise, the focal point will either be clamped to the
 bounding box, or wrapped, if Wrap is on. (Note: this behavior requires
 that the bounding box is set prior to the focal point.) Note that the 
 method takes a 3D point but ignores the z-coordinate value.
 </LI>
<LI>  <tt>double = obj. GetFocalPoint ()</tt> -  Set/Get the position of cursor focus. If translation mode is on,
 then the entire cursor (including bounding box, cursor, and shadows)
 is translated. Otherwise, the focal point will either be clamped to the
 bounding box, or wrapped, if Wrap is on. (Note: this behavior requires
 that the bounding box is set prior to the focal point.) Note that the 
 method takes a 3D point but ignores the z-coordinate value.
 </LI>
<LI>  <tt>obj.SetOutline (int )</tt> -  Turn on/off the wireframe bounding box.
 </LI>
<LI>  <tt>int = obj.GetOutline ()</tt> -  Turn on/off the wireframe bounding box.
 </LI>
<LI>  <tt>obj.OutlineOn ()</tt> -  Turn on/off the wireframe bounding box.
 </LI>
<LI>  <tt>obj.OutlineOff ()</tt> -  Turn on/off the wireframe bounding box.
 </LI>
<LI>  <tt>obj.SetAxes (int )</tt> -  Turn on/off the wireframe axes.
 </LI>
<LI>  <tt>int = obj.GetAxes ()</tt> -  Turn on/off the wireframe axes.
 </LI>
<LI>  <tt>obj.AxesOn ()</tt> -  Turn on/off the wireframe axes.
 </LI>
<LI>  <tt>obj.AxesOff ()</tt> -  Turn on/off the wireframe axes.
 </LI>
<LI>  <tt>obj.SetRadius (double )</tt> -  Specify a radius for a circle. This erases the cursor
 lines around the focal point.
 </LI>
<LI>  <tt>double = obj.GetRadiusMinValue ()</tt> -  Specify a radius for a circle. This erases the cursor
 lines around the focal point.
 </LI>
<LI>  <tt>double = obj.GetRadiusMaxValue ()</tt> -  Specify a radius for a circle. This erases the cursor
 lines around the focal point.
 </LI>
<LI>  <tt>double = obj.GetRadius ()</tt> -  Specify a radius for a circle. This erases the cursor
 lines around the focal point.
 </LI>
<LI>  <tt>obj.SetPoint (int )</tt> -  Turn on/off the point located at the cursor focus.
 </LI>
<LI>  <tt>int = obj.GetPoint ()</tt> -  Turn on/off the point located at the cursor focus.
 </LI>
<LI>  <tt>obj.PointOn ()</tt> -  Turn on/off the point located at the cursor focus.
 </LI>
<LI>  <tt>obj.PointOff ()</tt> -  Turn on/off the point located at the cursor focus.
 </LI>
<LI>  <tt>obj.SetTranslationMode (int )</tt> -  Enable/disable the translation mode. If on, changes in cursor position
 cause the entire widget to translate along with the cursor.
 By default, translation mode is off.
 </LI>
<LI>  <tt>int = obj.GetTranslationMode ()</tt> -  Enable/disable the translation mode. If on, changes in cursor position
 cause the entire widget to translate along with the cursor.
 By default, translation mode is off.
 </LI>
<LI>  <tt>obj.TranslationModeOn ()</tt> -  Enable/disable the translation mode. If on, changes in cursor position
 cause the entire widget to translate along with the cursor.
 By default, translation mode is off.
 </LI>
<LI>  <tt>obj.TranslationModeOff ()</tt> -  Enable/disable the translation mode. If on, changes in cursor position
 cause the entire widget to translate along with the cursor.
 By default, translation mode is off.
 </LI>
<LI>  <tt>obj.SetWrap (int )</tt> -  Turn on/off cursor wrapping. If the cursor focus moves outside the
 specified bounds, the cursor will either be restrained against the
 nearest "wall" (Wrap=off), or it will wrap around (Wrap=on).
 </LI>
<LI>  <tt>int = obj.GetWrap ()</tt> -  Turn on/off cursor wrapping. If the cursor focus moves outside the
 specified bounds, the cursor will either be restrained against the
 nearest "wall" (Wrap=off), or it will wrap around (Wrap=on).
 </LI>
<LI>  <tt>obj.WrapOn ()</tt> -  Turn on/off cursor wrapping. If the cursor focus moves outside the
 specified bounds, the cursor will either be restrained against the
 nearest "wall" (Wrap=off), or it will wrap around (Wrap=on).
 </LI>
<LI>  <tt>obj.WrapOff ()</tt> -  Turn on/off cursor wrapping. If the cursor focus moves outside the
 specified bounds, the cursor will either be restrained against the
 nearest "wall" (Wrap=off), or it will wrap around (Wrap=on).
 </LI>
<LI>  <tt>obj.AllOn ()</tt> -  Turn every part of the cursor on or off.
 </LI>
<LI>  <tt>obj.AllOff ()</tt> -  Turn every part of the cursor on or off.
 </LI>
</UL>
*/
