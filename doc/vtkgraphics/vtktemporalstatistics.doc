/*!
\page vtkgraphics_vtktemporalstatistics vtkTemporalStatistics

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage

 Given an input that changes over time, vtkTemporalStatistics looks at the
 data for each time step and computes some statistical information of how a
 point or cell variable changes over time.  For example, vtkTemporalStatistics
 can compute the average value of "pressure" over time of each point.

 Note that this filter will require the upstream filter to be run on every
 time step that it reports that it can compute.  This may be a time consuming
 operation.

 vtkTemporalStatistics ignores the temporal spacing.  Each timestep will be
 weighted the same regardless of how long of an interval it is to the next
 timestep.  Thus, the average statistic may be quite different from an
 integration of the variable if the time spacing varies.

 .SECTION Thanks
 This class was originally written by Kenneth Moreland (kmorel@sandia.gov)
 from Sandia National Laboratories.


To create an instance of class vtkTemporalStatistics, simply
invoke its constructor as follows
\verbatim
  obj = vtkTemporalStatistics
\endverbatim
\section Methods
The class vtkTemporalStatistics has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkTemporalStatistics class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkTemporalStatistics = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkTemporalStatistics = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>int = obj.GetComputeAverage ()</tt> -  Turn on/off the computation of the average values over time.  On by
 default.  The resulting array names have "_average" appended to them.
 </LI>
<LI>  <tt>obj.SetComputeAverage (int )</tt> -  Turn on/off the computation of the average values over time.  On by
 default.  The resulting array names have "_average" appended to them.
 </LI>
<LI>  <tt>obj.ComputeAverageOn ()</tt> -  Turn on/off the computation of the average values over time.  On by
 default.  The resulting array names have "_average" appended to them.
 </LI>
<LI>  <tt>obj.ComputeAverageOff ()</tt> -  Turn on/off the computation of the average values over time.  On by
 default.  The resulting array names have "_average" appended to them.
 </LI>
<LI>  <tt>int = obj.GetComputeMinimum ()</tt> -  Turn on/off the computation of the minimum values over time.  On by
 default.  The resulting array names have "_minimum" appended to them.
 </LI>
<LI>  <tt>obj.SetComputeMinimum (int )</tt> -  Turn on/off the computation of the minimum values over time.  On by
 default.  The resulting array names have "_minimum" appended to them.
 </LI>
<LI>  <tt>obj.ComputeMinimumOn ()</tt> -  Turn on/off the computation of the minimum values over time.  On by
 default.  The resulting array names have "_minimum" appended to them.
 </LI>
<LI>  <tt>obj.ComputeMinimumOff ()</tt> -  Turn on/off the computation of the minimum values over time.  On by
 default.  The resulting array names have "_minimum" appended to them.
 </LI>
<LI>  <tt>int = obj.GetComputeMaximum ()</tt> -  Turn on/off the computation of the maximum values over time.  On by
 default.  The resulting array names have "_maximum" appended to them.
 </LI>
<LI>  <tt>obj.SetComputeMaximum (int )</tt> -  Turn on/off the computation of the maximum values over time.  On by
 default.  The resulting array names have "_maximum" appended to them.
 </LI>
<LI>  <tt>obj.ComputeMaximumOn ()</tt> -  Turn on/off the computation of the maximum values over time.  On by
 default.  The resulting array names have "_maximum" appended to them.
 </LI>
<LI>  <tt>obj.ComputeMaximumOff ()</tt> -  Turn on/off the computation of the maximum values over time.  On by
 default.  The resulting array names have "_maximum" appended to them.
 </LI>
<LI>  <tt>int = obj.GetComputeStandardDeviation ()</tt>
 </LI>
<LI>  <tt>obj.SetComputeStandardDeviation (int )</tt>
 </LI>
<LI>  <tt>obj.ComputeStandardDeviationOn ()</tt>
 </LI>
<LI>  <tt>obj.ComputeStandardDeviationOff ()</tt>
 </LI>
</UL>
*/
