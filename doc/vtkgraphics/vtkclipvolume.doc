/*!
\page vtkgraphics_vtkclipvolume vtkClipVolume

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkClipVolume is a filter that clips volume data (i.e., vtkImageData)
 using either: any subclass of vtkImplicitFunction or the input scalar
 data. The clipping operation cuts through the cells of the
 dataset--converting 3D image data into a 3D unstructured grid--returning
 everything inside of the specified implicit function (or greater than the
 scalar value). During the clipping the filter will produce pieces of a
 cell. (Compare this with vtkExtractGeometry or vtkGeometryFilter, which
 produces entire, uncut cells.) The output of this filter is a 3D
 unstructured grid (e.g., tetrahedra or other 3D cell types).

 To use this filter, you must decide if you will be clipping with an
 implicit function, or whether you will be using the input scalar data.  If
 you want to clip with an implicit function, you must first define and then
 set the implicit function with the SetClipFunction() method. Otherwise,
 you must make sure input scalar data is available. You can also specify a
 scalar value, which is used to decide what is inside and outside of the
 implicit function. You can also reverse the sense of what inside/outside
 is by setting the InsideOut instance variable. (The cutting algorithm
 proceeds by computing an implicit function value or using the input scalar
 data for each point in the dataset. This is compared to the scalar value
 to determine inside/outside.)

 This filter can be configured to compute a second output. The
 second output is the portion of the volume that is clipped away. Set the
 GenerateClippedData boolean on if you wish to access this output data.

 The filter will produce an unstructured grid of entirely tetrahedra or a
 mixed grid of tetrahedra and other 3D cell types (e.g., wedges). Control
 this behavior by setting the Mixed3DCellGeneration. By default the
 Mixed3DCellGeneration is on and a combination of cell types will be
 produced. Note that producing mixed cell types is a faster than producing
 only tetrahedra.

To create an instance of class vtkClipVolume, simply
invoke its constructor as follows
\verbatim
  obj = vtkClipVolume
\endverbatim
\section Methods
The class vtkClipVolume has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkClipVolume class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkClipVolume = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkClipVolume = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetValue (double )</tt> -  Set the clipping value of the implicit function (if clipping with
 implicit function) or scalar value (if clipping with scalars). The
 default value is 0.0.
 </LI>
<LI>  <tt>double = obj.GetValue ()</tt> -  Set the clipping value of the implicit function (if clipping with
 implicit function) or scalar value (if clipping with scalars). The
 default value is 0.0.
 </LI>
<LI>  <tt>obj.SetInsideOut (int )</tt> -  Set/Get the InsideOut flag. When off, a vertex is considered inside the
 implicit function if its value is greater than the Value ivar. When
 InsideOutside is turned on, a vertex is considered inside the implicit
 function if its implicit function value is less than or equal to the
 Value ivar.  InsideOut is off by default.
 </LI>
<LI>  <tt>int = obj.GetInsideOut ()</tt> -  Set/Get the InsideOut flag. When off, a vertex is considered inside the
 implicit function if its value is greater than the Value ivar. When
 InsideOutside is turned on, a vertex is considered inside the implicit
 function if its implicit function value is less than or equal to the
 Value ivar.  InsideOut is off by default.
 </LI>
<LI>  <tt>obj.InsideOutOn ()</tt> -  Set/Get the InsideOut flag. When off, a vertex is considered inside the
 implicit function if its value is greater than the Value ivar. When
 InsideOutside is turned on, a vertex is considered inside the implicit
 function if its implicit function value is less than or equal to the
 Value ivar.  InsideOut is off by default.
 </LI>
<LI>  <tt>obj.InsideOutOff ()</tt> -  Set/Get the InsideOut flag. When off, a vertex is considered inside the
 implicit function if its value is greater than the Value ivar. When
 InsideOutside is turned on, a vertex is considered inside the implicit
 function if its implicit function value is less than or equal to the
 Value ivar.  InsideOut is off by default.
 </LI>
<LI>  <tt>obj.SetClipFunction (vtkImplicitFunction )</tt>
 </LI>
<LI>  <tt>vtkImplicitFunction = obj.GetClipFunction ()</tt>
 </LI>
<LI>  <tt>obj.SetGenerateClipScalars (int )</tt> -  If this flag is enabled, then the output scalar values will be 
 interpolated from the implicit function values, and not the 
 input scalar data. If you enable this flag but do not provide an
 implicit function an error will be reported.
 </LI>
<LI>  <tt>int = obj.GetGenerateClipScalars ()</tt> -  If this flag is enabled, then the output scalar values will be 
 interpolated from the implicit function values, and not the 
 input scalar data. If you enable this flag but do not provide an
 implicit function an error will be reported.
 </LI>
<LI>  <tt>obj.GenerateClipScalarsOn ()</tt> -  If this flag is enabled, then the output scalar values will be 
 interpolated from the implicit function values, and not the 
 input scalar data. If you enable this flag but do not provide an
 implicit function an error will be reported.
 </LI>
<LI>  <tt>obj.GenerateClipScalarsOff ()</tt> -  If this flag is enabled, then the output scalar values will be 
 interpolated from the implicit function values, and not the 
 input scalar data. If you enable this flag but do not provide an
 implicit function an error will be reported.
 </LI>
<LI>  <tt>obj.SetGenerateClippedOutput (int )</tt> -  Control whether a second output is generated. The second output
 contains the unstructured grid that's been clipped away.
 </LI>
<LI>  <tt>int = obj.GetGenerateClippedOutput ()</tt> -  Control whether a second output is generated. The second output
 contains the unstructured grid that's been clipped away.
 </LI>
<LI>  <tt>obj.GenerateClippedOutputOn ()</tt> -  Control whether a second output is generated. The second output
 contains the unstructured grid that's been clipped away.
 </LI>
<LI>  <tt>obj.GenerateClippedOutputOff ()</tt> -  Control whether a second output is generated. The second output
 contains the unstructured grid that's been clipped away.
 </LI>
<LI>  <tt>vtkUnstructuredGrid = obj.GetClippedOutput ()</tt> -  Return the clipped output.
 </LI>
<LI>  <tt>obj.SetMixed3DCellGeneration (int )</tt> -  Control whether the filter produces a mix of 3D cell types on output, or
 whether the output cells are all tetrahedra. By default, a mixed set of
 cells (e.g., tetrahedra and wedges) is produced. (Note: mixed type
 generation is faster and less overall data is generated.)
 </LI>
<LI>  <tt>int = obj.GetMixed3DCellGeneration ()</tt> -  Control whether the filter produces a mix of 3D cell types on output, or
 whether the output cells are all tetrahedra. By default, a mixed set of
 cells (e.g., tetrahedra and wedges) is produced. (Note: mixed type
 generation is faster and less overall data is generated.)
 </LI>
<LI>  <tt>obj.Mixed3DCellGenerationOn ()</tt> -  Control whether the filter produces a mix of 3D cell types on output, or
 whether the output cells are all tetrahedra. By default, a mixed set of
 cells (e.g., tetrahedra and wedges) is produced. (Note: mixed type
 generation is faster and less overall data is generated.)
 </LI>
<LI>  <tt>obj.Mixed3DCellGenerationOff ()</tt> -  Control whether the filter produces a mix of 3D cell types on output, or
 whether the output cells are all tetrahedra. By default, a mixed set of
 cells (e.g., tetrahedra and wedges) is produced. (Note: mixed type
 generation is faster and less overall data is generated.)
 </LI>
<LI>  <tt>obj.SetMergeTolerance (double )</tt> -  Set the tolerance for merging clip intersection points that are near
 the corners of voxels. This tolerance is used to prevent the generation
 of degenerate tetrahedra.
 </LI>
<LI>  <tt>double = obj.GetMergeToleranceMinValue ()</tt> -  Set the tolerance for merging clip intersection points that are near
 the corners of voxels. This tolerance is used to prevent the generation
 of degenerate tetrahedra.
 </LI>
<LI>  <tt>double = obj.GetMergeToleranceMaxValue ()</tt> -  Set the tolerance for merging clip intersection points that are near
 the corners of voxels. This tolerance is used to prevent the generation
 of degenerate tetrahedra.
 </LI>
<LI>  <tt>double = obj.GetMergeTolerance ()</tt> -  Set the tolerance for merging clip intersection points that are near
 the corners of voxels. This tolerance is used to prevent the generation
 of degenerate tetrahedra.
 </LI>
<LI>  <tt>obj.SetLocator (vtkIncrementalPointLocator locator)</tt> -  Set / Get a spatial locator for merging points. By default, 
 an instance of vtkMergePoints is used.
 </LI>
<LI>  <tt>vtkIncrementalPointLocator = obj.GetLocator ()</tt> -  Set / Get a spatial locator for merging points. By default, 
 an instance of vtkMergePoints is used.
 </LI>
<LI>  <tt>obj.CreateDefaultLocator ()</tt> -  Create default locator. Used to create one when none is specified. The 
 locator is used to merge coincident points.
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Return the mtime also considering the locator and clip function.
 </LI>
</UL>
*/
