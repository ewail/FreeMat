/*!
\page vtkgraphics_vtkhyperoctreecontourfilter vtkHyperOctreeContourFilter

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkContourFilter is a filter that takes as input any dataset and 
 generates on output isosurfaces and/or isolines. The exact form 
 of the output depends upon the dimensionality of the input data. 
 Data consisting of 3D cells will generate isosurfaces, data 
 consisting of 2D cells will generate isolines, and data with 1D 
 or 0D cells will generate isopoints. Combinations of output type 
 are possible if the input dimension is mixed.

 To use this filter you must specify one or more contour values.
 You can either use the method SetValue() to specify each contour
 value, or use GenerateValues() to generate a series of evenly
 spaced contours. It is also possible to accelerate the operation of
 this filter (at the cost of extra memory) by using a
 vtkScalarTree. A scalar tree is used to quickly locate cells that
 contain a contour surface. This is especially effective if multiple
 contours are being extracted. If you want to use a scalar tree,
 invoke the method UseScalarTreeOn().

To create an instance of class vtkHyperOctreeContourFilter, simply
invoke its constructor as follows
\verbatim
  obj = vtkHyperOctreeContourFilter
\endverbatim
\section Methods
The class vtkHyperOctreeContourFilter has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkHyperOctreeContourFilter class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkHyperOctreeContourFilter = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkHyperOctreeContourFilter = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetValue (int i, double value)</tt> -  Get the ith contour value.
 </LI>
<LI>  <tt>double = obj.GetValue (int i)</tt> -  Get a pointer to an array of contour values. There will be
 GetNumberOfContours() values in the list.
 </LI>
<LI>  <tt>obj.GetValues (double contourValues)</tt> -  Set the number of contours to place into the list. You only really
 need to use this method to reduce list size. The method SetValue()
 will automatically increase list size as needed.
 </LI>
<LI>  <tt>obj.SetNumberOfContours (int number)</tt> -  Get the number of contours in the list of contour values.
 </LI>
<LI>  <tt>int = obj.GetNumberOfContours ()</tt> -  Generate numContours equally spaced contour values between specified
 range. Contour values will include min/max range values.
 </LI>
<LI>  <tt>obj.GenerateValues (int numContours, double range[2])</tt> -  Generate numContours equally spaced contour values between specified
 range. Contour values will include min/max range values.
 </LI>
<LI>  <tt>obj.GenerateValues (int numContours, double rangeStart, double rangeEnd)</tt> -  Modified GetMTime Because we delegate to vtkContourValues
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Modified GetMTime Because we delegate to vtkContourValues
 </LI>
<LI>  <tt>obj.SetLocator (vtkIncrementalPointLocator locator)</tt> -  Set / get a spatial locator for merging points. By default, 
 an instance of vtkMergePoints is used.
 </LI>
<LI>  <tt>vtkIncrementalPointLocator = obj.GetLocator ()</tt> -  Set / get a spatial locator for merging points. By default, 
 an instance of vtkMergePoints is used.
 </LI>
<LI>  <tt>obj.CreateDefaultLocator ()</tt> -  Create default locator. Used to create one when none is
 specified. The locator is used to merge coincident points.
 </LI>
</UL>
*/
