/*!
\page vtkgraphics_vtkarrowsource vtkArrowSource

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkArrowSource was intended to be used as the source for a glyph.
 The shaft base is always at (0,0,0). The arrow tip is always at (1,0,0). If
 "Invert" is true, then the ends are flipped i.e. tip is at (0,0,0) while
 base is at (1, 0, 0).
 The resolution of the cone and shaft can be set and default to 6.
 The radius of the cone and shaft can be set and default to 0.03 and 0.1.
 The length of the tip can also be set, and defaults to 0.35.

To create an instance of class vtkArrowSource, simply
invoke its constructor as follows
\verbatim
  obj = vtkArrowSource
\endverbatim
\section Methods
The class vtkArrowSource has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkArrowSource class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkArrowSource = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkArrowSource = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetTipLength (double )</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>double = obj.GetTipLengthMinValue ()</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>double = obj.GetTipLengthMaxValue ()</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>double = obj.GetTipLength ()</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>obj.SetTipRadius (double )</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>double = obj.GetTipRadiusMinValue ()</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>double = obj.GetTipRadiusMaxValue ()</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>double = obj.GetTipRadius ()</tt> -  Set the length, and radius of the tip.  They default to 0.35 and 0.1
 </LI>
<LI>  <tt>obj.SetTipResolution (int )</tt> -  Set the resolution of the tip.  The tip behaves the same as a cone.
 Resoultion 1 gives a single triangle, 2 gives two crossed triangles.
 </LI>
<LI>  <tt>int = obj.GetTipResolutionMinValue ()</tt> -  Set the resolution of the tip.  The tip behaves the same as a cone.
 Resoultion 1 gives a single triangle, 2 gives two crossed triangles.
 </LI>
<LI>  <tt>int = obj.GetTipResolutionMaxValue ()</tt> -  Set the resolution of the tip.  The tip behaves the same as a cone.
 Resoultion 1 gives a single triangle, 2 gives two crossed triangles.
 </LI>
<LI>  <tt>int = obj.GetTipResolution ()</tt> -  Set the resolution of the tip.  The tip behaves the same as a cone.
 Resoultion 1 gives a single triangle, 2 gives two crossed triangles.
 </LI>
<LI>  <tt>obj.SetShaftRadius (double )</tt> -  Set the radius of the shaft.  Defaults to 0.03.
 </LI>
<LI>  <tt>double = obj.GetShaftRadiusMinValue ()</tt> -  Set the radius of the shaft.  Defaults to 0.03.
 </LI>
<LI>  <tt>double = obj.GetShaftRadiusMaxValue ()</tt> -  Set the radius of the shaft.  Defaults to 0.03.
 </LI>
<LI>  <tt>double = obj.GetShaftRadius ()</tt> -  Set the radius of the shaft.  Defaults to 0.03.
 </LI>
<LI>  <tt>obj.SetShaftResolution (int )</tt> -  Set the resolution of the shaft.  2 gives a rectangle.
 I would like to extend the cone to produce a line,
 but this is not an option now.
 </LI>
<LI>  <tt>int = obj.GetShaftResolutionMinValue ()</tt> -  Set the resolution of the shaft.  2 gives a rectangle.
 I would like to extend the cone to produce a line,
 but this is not an option now.
 </LI>
<LI>  <tt>int = obj.GetShaftResolutionMaxValue ()</tt> -  Set the resolution of the shaft.  2 gives a rectangle.
 I would like to extend the cone to produce a line,
 but this is not an option now.
 </LI>
<LI>  <tt>int = obj.GetShaftResolution ()</tt> -  Set the resolution of the shaft.  2 gives a rectangle.
 I would like to extend the cone to produce a line,
 but this is not an option now.
 </LI>
<LI>  <tt>obj.InvertOn ()</tt> -  Inverts the arrow direction. When set to true, base is at (1, 0, 0) while the
 tip is at (0, 0, 0). The default is false, i.e. base at (0, 0, 0) and the tip
 at (1, 0, 0).
 </LI>
<LI>  <tt>obj.InvertOff ()</tt> -  Inverts the arrow direction. When set to true, base is at (1, 0, 0) while the
 tip is at (0, 0, 0). The default is false, i.e. base at (0, 0, 0) and the tip
 at (1, 0, 0).
 </LI>
<LI>  <tt>obj.SetInvert (bool )</tt> -  Inverts the arrow direction. When set to true, base is at (1, 0, 0) while the
 tip is at (0, 0, 0). The default is false, i.e. base at (0, 0, 0) and the tip
 at (1, 0, 0).
 </LI>
<LI>  <tt>bool = obj.GetInvert ()</tt> -  Inverts the arrow direction. When set to true, base is at (1, 0, 0) while the
 tip is at (0, 0, 0). The default is false, i.e. base at (0, 0, 0) and the tip
 at (1, 0, 0).
 </LI>
</UL>
*/
