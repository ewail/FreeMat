/*!
\page vtkgraphics_vtkdecimatepro vtkDecimatePro

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkDecimatePro is a filter to reduce the number of triangles in a triangle 
 mesh, forming a good approximation to the original geometry. The input to 
 vtkDecimatePro is a vtkPolyData object, and only triangles are treated. If 
 you desire to decimate polygonal meshes, first triangulate the polygons
 with vtkTriangleFilter object.
 
 The implementation of vtkDecimatePro is similar to the algorithm
 originally described in "Decimation of Triangle Meshes", Proc Siggraph
 `92, with three major differences. First, this algorithm does not
 necessarily preserve the topology of the mesh. Second, it is guaranteed to
 give the a mesh reduction factor specified by the user (as long as certain
 constraints are not set - see Caveats). Third, it is set up generate
 progressive meshes, that is a stream of operations that can be easily
 transmitted and incrementally updated (see Hugues Hoppe's Siggraph '96
 paper on progressive meshes).
 
 The algorithm proceeds as follows. Each vertex in the mesh is classified
 and inserted into a priority queue. The priority is based on the error to
 delete the vertex and retriangulate the hole. Vertices that cannot be
 deleted or triangulated (at this point in the algorithm) are
 skipped. Then, each vertex in the priority queue is processed (i.e.,
 deleted followed by hole triangulation using edge collapse). This
 continues until the priority queue is empty. Next, all remaining vertices
 are processed, and the mesh is split into separate pieces along sharp
 edges or at non-manifold attachment points and reinserted into the
 priority queue. Again, the priority queue is processed until empty. If
 the desired reduction is still not achieved, the remaining vertices are
 split as necessary (in a recursive fashion) so that it is possible to
 eliminate every triangle as necessary.
 
 To use this object, at a minimum you need to specify the ivar
 TargetReduction. The algorithm is guaranteed to generate a reduced mesh
 at this level as long as the following four conditions are met: 1)
 topology modification is allowed (i.e., the ivar PreserveTopology is off);
 2) mesh splitting is enabled (i.e., the ivar Splitting is on); 3) the
 algorithm is allowed to modify the boundary of the mesh (i.e., the ivar
 BoundaryVertexDeletion is on); and 4) the maximum allowable error (i.e.,
 the ivar MaximumError) is set to VTK_DOUBLE_MAX.  Other important
 parameters to adjust include the FeatureAngle and SplitAngle ivars, since
 these can impact the quality of the final mesh. Also, you can set the
 ivar AccumulateError to force incremental error update and distribution
 to surrounding vertices as each vertex is deleted. The accumulated error
 is a conservative global error bounds and decimation error, but requires
 additional memory and time to compute.

To create an instance of class vtkDecimatePro, simply
invoke its constructor as follows
\verbatim
  obj = vtkDecimatePro
\endverbatim
\section Methods
The class vtkDecimatePro has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkDecimatePro class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkDecimatePro = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkDecimatePro = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetTargetReduction (double )</tt> -  Specify the desired reduction in the total number of polygons (e.g., if
 TargetReduction is set to 0.9, this filter will try to reduce the data set
 to 10% of its original size). Because of various constraints, this level of
 reduction may not be realized. If you want to guarantee a particular
 reduction, you must turn off PreserveTopology, turn on SplitEdges and
 BoundaryVertexDeletion, and set the MaximumError to VTK_DOUBLE_MAX (these
 ivars are initialized this way when the object is instantiated).
 </LI>
<LI>  <tt>double = obj.GetTargetReductionMinValue ()</tt> -  Specify the desired reduction in the total number of polygons (e.g., if
 TargetReduction is set to 0.9, this filter will try to reduce the data set
 to 10% of its original size). Because of various constraints, this level of
 reduction may not be realized. If you want to guarantee a particular
 reduction, you must turn off PreserveTopology, turn on SplitEdges and
 BoundaryVertexDeletion, and set the MaximumError to VTK_DOUBLE_MAX (these
 ivars are initialized this way when the object is instantiated).
 </LI>
<LI>  <tt>double = obj.GetTargetReductionMaxValue ()</tt> -  Specify the desired reduction in the total number of polygons (e.g., if
 TargetReduction is set to 0.9, this filter will try to reduce the data set
 to 10% of its original size). Because of various constraints, this level of
 reduction may not be realized. If you want to guarantee a particular
 reduction, you must turn off PreserveTopology, turn on SplitEdges and
 BoundaryVertexDeletion, and set the MaximumError to VTK_DOUBLE_MAX (these
 ivars are initialized this way when the object is instantiated).
 </LI>
<LI>  <tt>double = obj.GetTargetReduction ()</tt> -  Specify the desired reduction in the total number of polygons (e.g., if
 TargetReduction is set to 0.9, this filter will try to reduce the data set
 to 10% of its original size). Because of various constraints, this level of
 reduction may not be realized. If you want to guarantee a particular
 reduction, you must turn off PreserveTopology, turn on SplitEdges and
 BoundaryVertexDeletion, and set the MaximumError to VTK_DOUBLE_MAX (these
 ivars are initialized this way when the object is instantiated).
 </LI>
<LI>  <tt>obj.SetPreserveTopology (int )</tt> -  Turn on/off whether to preserve the topology of the original mesh. If
 on, mesh splitting and hole elimination will not occur. This may limit
 the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>int = obj.GetPreserveTopology ()</tt> -  Turn on/off whether to preserve the topology of the original mesh. If
 on, mesh splitting and hole elimination will not occur. This may limit
 the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>obj.PreserveTopologyOn ()</tt> -  Turn on/off whether to preserve the topology of the original mesh. If
 on, mesh splitting and hole elimination will not occur. This may limit
 the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>obj.PreserveTopologyOff ()</tt> -  Turn on/off whether to preserve the topology of the original mesh. If
 on, mesh splitting and hole elimination will not occur. This may limit
 the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>obj.SetFeatureAngle (double )</tt> -  Specify the mesh feature angle. This angle is used to define what
 an edge is (i.e., if the surface normal between two adjacent triangles
 is >= FeatureAngle, an edge exists).
 </LI>
<LI>  <tt>double = obj.GetFeatureAngleMinValue ()</tt> -  Specify the mesh feature angle. This angle is used to define what
 an edge is (i.e., if the surface normal between two adjacent triangles
 is >= FeatureAngle, an edge exists).
 </LI>
<LI>  <tt>double = obj.GetFeatureAngleMaxValue ()</tt> -  Specify the mesh feature angle. This angle is used to define what
 an edge is (i.e., if the surface normal between two adjacent triangles
 is >= FeatureAngle, an edge exists).
 </LI>
<LI>  <tt>double = obj.GetFeatureAngle ()</tt> -  Specify the mesh feature angle. This angle is used to define what
 an edge is (i.e., if the surface normal between two adjacent triangles
 is >= FeatureAngle, an edge exists).
 </LI>
<LI>  <tt>obj.SetSplitting (int )</tt> -  Turn on/off the splitting of the mesh at corners, along edges, at
 non-manifold points, or anywhere else a split is required. Turning 
 splitting off will better preserve the original topology of the
 mesh, but you may not obtain the requested reduction.
 </LI>
<LI>  <tt>int = obj.GetSplitting ()</tt> -  Turn on/off the splitting of the mesh at corners, along edges, at
 non-manifold points, or anywhere else a split is required. Turning 
 splitting off will better preserve the original topology of the
 mesh, but you may not obtain the requested reduction.
 </LI>
<LI>  <tt>obj.SplittingOn ()</tt> -  Turn on/off the splitting of the mesh at corners, along edges, at
 non-manifold points, or anywhere else a split is required. Turning 
 splitting off will better preserve the original topology of the
 mesh, but you may not obtain the requested reduction.
 </LI>
<LI>  <tt>obj.SplittingOff ()</tt> -  Turn on/off the splitting of the mesh at corners, along edges, at
 non-manifold points, or anywhere else a split is required. Turning 
 splitting off will better preserve the original topology of the
 mesh, but you may not obtain the requested reduction.
 </LI>
<LI>  <tt>obj.SetSplitAngle (double )</tt> -  Specify the mesh split angle. This angle is used to control the splitting
 of the mesh. A split line exists when the surface normals between
 two edge connected triangles are >= SplitAngle.
 </LI>
<LI>  <tt>double = obj.GetSplitAngleMinValue ()</tt> -  Specify the mesh split angle. This angle is used to control the splitting
 of the mesh. A split line exists when the surface normals between
 two edge connected triangles are >= SplitAngle.
 </LI>
<LI>  <tt>double = obj.GetSplitAngleMaxValue ()</tt> -  Specify the mesh split angle. This angle is used to control the splitting
 of the mesh. A split line exists when the surface normals between
 two edge connected triangles are >= SplitAngle.
 </LI>
<LI>  <tt>double = obj.GetSplitAngle ()</tt> -  Specify the mesh split angle. This angle is used to control the splitting
 of the mesh. A split line exists when the surface normals between
 two edge connected triangles are >= SplitAngle.
 </LI>
<LI>  <tt>obj.SetPreSplitMesh (int )</tt> -  In some cases you may wish to split the mesh prior to algorithm
 execution. This separates the mesh into semi-planar patches, which are
 disconnected from each other. This can give superior results in some
 cases. If the ivar PreSplitMesh ivar is enabled, the mesh is split with
 the specified SplitAngle. Otherwise mesh splitting is deferred as long
 as possible.
 </LI>
<LI>  <tt>int = obj.GetPreSplitMesh ()</tt> -  In some cases you may wish to split the mesh prior to algorithm
 execution. This separates the mesh into semi-planar patches, which are
 disconnected from each other. This can give superior results in some
 cases. If the ivar PreSplitMesh ivar is enabled, the mesh is split with
 the specified SplitAngle. Otherwise mesh splitting is deferred as long
 as possible.
 </LI>
<LI>  <tt>obj.PreSplitMeshOn ()</tt> -  In some cases you may wish to split the mesh prior to algorithm
 execution. This separates the mesh into semi-planar patches, which are
 disconnected from each other. This can give superior results in some
 cases. If the ivar PreSplitMesh ivar is enabled, the mesh is split with
 the specified SplitAngle. Otherwise mesh splitting is deferred as long
 as possible.
 </LI>
<LI>  <tt>obj.PreSplitMeshOff ()</tt> -  In some cases you may wish to split the mesh prior to algorithm
 execution. This separates the mesh into semi-planar patches, which are
 disconnected from each other. This can give superior results in some
 cases. If the ivar PreSplitMesh ivar is enabled, the mesh is split with
 the specified SplitAngle. Otherwise mesh splitting is deferred as long
 as possible.
 </LI>
<LI>  <tt>obj.SetMaximumError (double )</tt> -  Set the largest decimation error that is allowed during the decimation
 process. This may limit the maximum reduction that may be achieved. The
 maximum error is specified as a fraction of the maximum length of
 the input data bounding box.
 </LI>
<LI>  <tt>double = obj.GetMaximumErrorMinValue ()</tt> -  Set the largest decimation error that is allowed during the decimation
 process. This may limit the maximum reduction that may be achieved. The
 maximum error is specified as a fraction of the maximum length of
 the input data bounding box.
 </LI>
<LI>  <tt>double = obj.GetMaximumErrorMaxValue ()</tt> -  Set the largest decimation error that is allowed during the decimation
 process. This may limit the maximum reduction that may be achieved. The
 maximum error is specified as a fraction of the maximum length of
 the input data bounding box.
 </LI>
<LI>  <tt>double = obj.GetMaximumError ()</tt> -  Set the largest decimation error that is allowed during the decimation
 process. This may limit the maximum reduction that may be achieved. The
 maximum error is specified as a fraction of the maximum length of
 the input data bounding box.
 </LI>
<LI>  <tt>obj.SetAccumulateError (int )</tt> -  The computed error can either be computed directly from the mesh
 or the error may be accumulated as the mesh is modified. If the error
 is accumulated, then it represents a global error bounds, and the ivar
 MaximumError becomes a global bounds on mesh error. Accumulating the
 error requires extra memory proportional to the number of vertices in
 the mesh. If AccumulateError is off, then the error is not accumulated.
 </LI>
<LI>  <tt>int = obj.GetAccumulateError ()</tt> -  The computed error can either be computed directly from the mesh
 or the error may be accumulated as the mesh is modified. If the error
 is accumulated, then it represents a global error bounds, and the ivar
 MaximumError becomes a global bounds on mesh error. Accumulating the
 error requires extra memory proportional to the number of vertices in
 the mesh. If AccumulateError is off, then the error is not accumulated.
 </LI>
<LI>  <tt>obj.AccumulateErrorOn ()</tt> -  The computed error can either be computed directly from the mesh
 or the error may be accumulated as the mesh is modified. If the error
 is accumulated, then it represents a global error bounds, and the ivar
 MaximumError becomes a global bounds on mesh error. Accumulating the
 error requires extra memory proportional to the number of vertices in
 the mesh. If AccumulateError is off, then the error is not accumulated.
 </LI>
<LI>  <tt>obj.AccumulateErrorOff ()</tt> -  The computed error can either be computed directly from the mesh
 or the error may be accumulated as the mesh is modified. If the error
 is accumulated, then it represents a global error bounds, and the ivar
 MaximumError becomes a global bounds on mesh error. Accumulating the
 error requires extra memory proportional to the number of vertices in
 the mesh. If AccumulateError is off, then the error is not accumulated.
 </LI>
<LI>  <tt>obj.SetErrorIsAbsolute (int )</tt> -  The MaximumError is normally defined as a fraction of the dataset bounding
 diagonal. By setting ErrorIsAbsolute to 1, the error is instead defined
 as that specified by AbsoluteError. By default ErrorIsAbsolute=0.
 </LI>
<LI>  <tt>int = obj.GetErrorIsAbsolute ()</tt> -  The MaximumError is normally defined as a fraction of the dataset bounding
 diagonal. By setting ErrorIsAbsolute to 1, the error is instead defined
 as that specified by AbsoluteError. By default ErrorIsAbsolute=0.
 </LI>
<LI>  <tt>obj.SetAbsoluteError (double )</tt> -  Same as MaximumError, but to be used when ErrorIsAbsolute is 1
 </LI>
<LI>  <tt>double = obj.GetAbsoluteErrorMinValue ()</tt> -  Same as MaximumError, but to be used when ErrorIsAbsolute is 1
 </LI>
<LI>  <tt>double = obj.GetAbsoluteErrorMaxValue ()</tt> -  Same as MaximumError, but to be used when ErrorIsAbsolute is 1
 </LI>
<LI>  <tt>double = obj.GetAbsoluteError ()</tt> -  Same as MaximumError, but to be used when ErrorIsAbsolute is 1
 </LI>
<LI>  <tt>obj.SetBoundaryVertexDeletion (int )</tt> -  Turn on/off the deletion of vertices on the boundary of a mesh. This
 may limit the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>int = obj.GetBoundaryVertexDeletion ()</tt> -  Turn on/off the deletion of vertices on the boundary of a mesh. This
 may limit the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>obj.BoundaryVertexDeletionOn ()</tt> -  Turn on/off the deletion of vertices on the boundary of a mesh. This
 may limit the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>obj.BoundaryVertexDeletionOff ()</tt> -  Turn on/off the deletion of vertices on the boundary of a mesh. This
 may limit the maximum reduction that may be achieved.
 </LI>
<LI>  <tt>obj.SetDegree (int )</tt> -  If the number of triangles connected to a vertex exceeds "Degree", then
 the vertex will be split. (NOTE: the complexity of the triangulation
 algorithm is proportional to Degree^2. Setting degree small can improve
 the performance of the algorithm.)
 </LI>
<LI>  <tt>int = obj.GetDegreeMinValue ()</tt> -  If the number of triangles connected to a vertex exceeds "Degree", then
 the vertex will be split. (NOTE: the complexity of the triangulation
 algorithm is proportional to Degree^2. Setting degree small can improve
 the performance of the algorithm.)
 </LI>
<LI>  <tt>int = obj.GetDegreeMaxValue ()</tt> -  If the number of triangles connected to a vertex exceeds "Degree", then
 the vertex will be split. (NOTE: the complexity of the triangulation
 algorithm is proportional to Degree^2. Setting degree small can improve
 the performance of the algorithm.)
 </LI>
<LI>  <tt>int = obj.GetDegree ()</tt> -  If the number of triangles connected to a vertex exceeds "Degree", then
 the vertex will be split. (NOTE: the complexity of the triangulation
 algorithm is proportional to Degree^2. Setting degree small can improve
 the performance of the algorithm.)
 </LI>
<LI>  <tt>obj.SetInflectionPointRatio (double )</tt> -  Specify the inflection point ratio. An inflection point occurs
 when the ratio of reduction error between two iterations is greater
 than or equal to the InflectionPointRatio.
 </LI>
<LI>  <tt>double = obj.GetInflectionPointRatioMinValue ()</tt> -  Specify the inflection point ratio. An inflection point occurs
 when the ratio of reduction error between two iterations is greater
 than or equal to the InflectionPointRatio.
 </LI>
<LI>  <tt>double = obj.GetInflectionPointRatioMaxValue ()</tt> -  Specify the inflection point ratio. An inflection point occurs
 when the ratio of reduction error between two iterations is greater
 than or equal to the InflectionPointRatio.
 </LI>
<LI>  <tt>double = obj.GetInflectionPointRatio ()</tt> -  Specify the inflection point ratio. An inflection point occurs
 when the ratio of reduction error between two iterations is greater
 than or equal to the InflectionPointRatio.
 </LI>
<LI>  <tt>vtkIdType = obj.GetNumberOfInflectionPoints ()</tt> -  Get the number of inflection points. Only returns a valid value after
 the filter has executed.  The values in the list are mesh reduction
 values at each inflection point. Note: the first inflection point always
 occurs right before non-planar triangles are decimated (i.e., as the
 error becomes non-zero).
 </LI>
<LI>  <tt>obj.GetInflectionPoints (double inflectionPoints)</tt> -  Get a list of inflection points. These are double values 0 < r <= 1.0 
 corresponding to reduction level, and there are a total of
 NumberOfInflectionPoints() values. You must provide an array (of
 the correct size) into which the inflection points are written.
 </LI>
</UL>
*/
