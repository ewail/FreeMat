/*!
\page vtkgraphics_vtkmodelmetadata vtkModelMetadata

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
   This class is inspired by the Exodus II file format, but
   because this class does not depend on the Exodus library, it 
   should be possible to use it to represent metadata for other 
   dataset file formats.  Sandia Labs uses it in their Exodus II
   reader, their Exodus II writer and their EnSight writer.
   vtkDistributedDataFilter looks for metadata attached to
   it's input and redistributes the metadata with the grid.
  
   The fields in this class are those described in the document
   "EXODUS II: A Finite Element Data Model", SAND92-2137, November 1995.

   Element and node IDs stored in this object must be global IDs,
   in the event that the original dataset was partitioned across
   many files.  

   One way to initialize this object is by using vtkExodusModel
   (a Sandia class used by the Sandia Exodus reader).
   That class will take an open Exodus II file and a
   vtkUnstructuredGrid drawn from it and will set the required fields.

   Alternatively, you can use all the Set*
   methods to set the individual fields. This class does not 
   copy the data, it simply uses your pointer. This 
   class will free the storage associated with your pointer 
   when the class is deleted.  Most fields have sensible defaults.
   The only requirement is that if you are using this ModelMetadata
   to write out an Exodus or EnSight file in parallel, you must 
   SetBlockIds and SetBlockIdArrayName.  Your vtkUnstructuredGrid must 
   have a cell array giving the block ID for each cell.


To create an instance of class vtkModelMetadata, simply
invoke its constructor as follows
\verbatim
  obj = vtkModelMetadata
\endverbatim
\section Methods
The class vtkModelMetadata has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkModelMetadata class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkModelMetadata = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkModelMetadata = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.PrintGlobalInformation ()</tt>
 </LI>
<LI>  <tt>obj.PrintLocalInformation ()</tt>
 </LI>
<LI>  <tt>obj.SetTitle (string )</tt> -    The title of the dataset.
 </LI>
<LI>  <tt>obj.AddInformationLine (string info)</tt> -    Add an information line. 
 </LI>
<LI>  <tt>obj.AddQARecord (string name, string version, string date, string time)</tt> -    Add a QA record.  They fields are:
    The code name
    The code version number
    The date (MM/DD/YY or NULL for today)
    The time (HH:MM:SS or NULL for right now)
 </LI>
<LI>  <tt>obj.SetTimeStepIndex (int )</tt> -     Set the index of the time step represented by the results
    data in the file attached to this ModelMetadata object.  Time
    step indices start at 0 in this file, they start at 1 in
    an Exodus file.
 </LI>
<LI>  <tt>obj.SetTimeSteps (int numberOfTimeSteps, float timeStepValues)</tt> -     Set the total number of time steps in the file,
    and the value at each time step.  We use your time
    step value array and delete it when we're done.
 </LI>
<LI>  <tt>obj.SetNumberOfBlocks (int )</tt> -    The number of blocks in the file.  Set this before setting
   any of the block arrays.
 </LI>
<LI>  <tt>obj.SetBlockIds (int )</tt> -    An arbitrary integer ID for each block.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>int = obj.SetBlockNumberOfElements (int nelts)</tt> -    Set or get a pointer to a list of the number of elements in
   each block.
   We use your pointers, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetBlockNodesPerElement (int )</tt> -    Set or get a pointer to a list of the number of nodes in the
   elements of  each block.
   We use your pointers, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetBlockElementIdList (int )</tt> -    Set or get a pointer to a list global element IDs for the
   elements in each block. 
   We use your pointers, and free the memory when the object is freed.
 </LI>
<LI>  <tt>int = obj.SetBlockNumberOfAttributesPerElement (int natts)</tt> -    Set or get a pointer to a list of the number of attributes
   stored for the elements in each block.
   We use your pointers, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetBlockAttributes (float )</tt> -     Set or get a pointer to a list of the attributes for all
    blocks.  The order of the list should be by block, by element
    within the block, by attribute.  Omit blocks that don't
    have element attributes.
 </LI>
<LI>  <tt>obj.SetNumberOfNodeSets (int )</tt> -    The number of node sets in the file.  Set this value before
   setting the various node set arrays.
 </LI>
<LI>  <tt>obj.SetNodeSetIds (int )</tt> -    Set or get the list the IDs for each node set.
   Length of list is the number of node sets.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>int = obj.SetNodeSetSize (int )</tt> -    Set or get a pointer to a list of the number of nodes in each node set.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetNodeSetNodeIdList (int )</tt> -    Set or get a pointer to a concatenated list of the
   IDs of all nodes in each node set.  First list all IDs in
   node set 0, then all IDs in node set 1, and so on.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>int = obj.SetNodeSetNumberOfDistributionFactors (int )</tt> -    Set or get a list of the number of distribution factors stored
   by each node set.  This is either 0 or equal to the number of
   nodes in the node set. 
   Length of list is number of node sets.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetNodeSetDistributionFactors (float )</tt> -    Set or get a list of the distribution factors for the node sets.
   The list is organized by node set, and within node set by node.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetNumberOfSideSets (int )</tt> -    Set or get the number of side sets.  Set this value before
   setting any of the other side set arrays.
 </LI>
<LI>  <tt>obj.SetSideSetIds (int )</tt> -    Set or get a pointer to a list giving the ID of each side set. 
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>int = obj.SetSideSetSize (int sizes)</tt> -    Set or get a pointer to a list of the number of sides  in each side set.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>int = obj.SetSideSetNumberOfDistributionFactors (int df)</tt> -    Set or get a pointer to a list of the number of distribution
   factors stored by each side set.   Each side set has either
   no distribution factors, or 1 per node in the side set.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetSideSetElementList (int )</tt> -    Set or get a pointer to a list of the elements containing each
   side in each side set.  The list is organized by side set, and
   within side set by element.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetSideSetSideList (int )</tt> -    Set or get a pointer to the element side for each side in the side set.
   (See the manual for the convention for numbering sides in different
   types of cells.)  Side Ids are arranged by side set and within
   side set by side, and correspond to the SideSetElementList.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetSideSetNumDFPerSide (int numNodes)</tt> -    Set or get a pointer to a list of the number of nodes in each
   side of each side set.  This list is organized by side set, and
   within side set by side.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetSideSetDistributionFactors (float )</tt> -    Set or get a pointer to a list of all the distribution factors.
   For every side set that has distribution factors, the number of
   factors per node was given in the SideSetNumberOfDistributionFactors
   array.  If this number for a given side set is N, then for that
   side set we have N floating point values for each node for each
   side in the side set.  If nodes are repeated in more than one
   side, we repeat the distribution factors.  So this list is in order
   by side set, by node.
   We use your pointer, and free the memory when the object is freed.
 </LI>
<LI>  <tt>obj.SetBlockPropertyValue (int )</tt> -    Set or get value for each variable for each block.  List
   the integer values in order by variable and within variable
   by block.
 </LI>
<LI>  <tt>obj.SetNodeSetPropertyValue (int )</tt> -    Set or get value for each variable for each node set.  List
   the integer values in order by variable and within variable
   by node set.
 </LI>
<LI>  <tt>obj.SetSideSetPropertyValue (int )</tt> -    Set or get value for each variable for each side set.  List
   the integer values in order by variable and within variable
   by side set.
 </LI>
<LI>  <tt>obj.SetGlobalVariableValue (float f)</tt> -    Set or get the values of the global variables at the current
   time step.
 </LI>
<LI>  <tt>obj.SetElementVariableTruthTable (int )</tt> -    A truth table indicating which element variables are
   defined for which blocks. The variables are all the original
   element variables that were in the file.
   The table is by block ID and within block ID by variable.
 </LI>
<LI>  <tt>obj.SetAllVariablesDefinedInAllBlocks (int )</tt> -    Instead of a truth table of all "1"s, you can set this
   instance variable to indicate that all variables are
   defined in all blocks.
 </LI>
<LI>  <tt>obj.AllVariablesDefinedInAllBlocksOn ()</tt> -    Instead of a truth table of all "1"s, you can set this
   instance variable to indicate that all variables are
   defined in all blocks.
 </LI>
<LI>  <tt>obj.AllVariablesDefinedInAllBlocksOff ()</tt> -    Instead of a truth table of all "1"s, you can set this
   instance variable to indicate that all variables are
   defined in all blocks.
 </LI>
<LI>  <tt>int = obj.ElementVariableIsDefinedInBlock (string varname, int blockId)</tt> -    If the element variable named is defined for the block Id
   provided (in the element variable truth table) return a
   1, otherwise return a 0.  If the variable name or block Id
   are unrecognized, the default value of 1 is returned.
   (This is an "original" variable name, from the file,
   not a name created for the vtkUnstructuredGrid.  Use
   FindOriginal*VariableName to map between the two.)
 </LI>
<LI>  <tt>string = obj.FindOriginalElementVariableName (string name, int component)</tt> -    Given the name of an element variable the vtkUnstructuredGrid
   described by this ModelMetadata, and a component number, give 
   the name of the scalar array in the original
   file that turned into that component when the file was
   read into VTK.
 </LI>
<LI>  <tt>string = obj.FindOriginalNodeVariableName (string name, int component)</tt> -    Given the name of an node variable the vtkUnstructuredGrid
   described by this ModelMetadata, and a component number, give 
   the name of the scalar array in the original
   file that turned into that component when the file was
   read into VTK.
 </LI>
<LI>  <tt>obj.Pack (vtkDataSet ugrid)</tt> -    Pack this object's metadata into a field array of a dataset.
 </LI>
<LI>  <tt>int = obj.Unpack (vtkDataSet ugrid, int deleteIt)</tt> -    Unpack the metadata stored in a dataset,
   and initialize this object with it.  Return 1 if there's
   no metadata packed into the grid, 0 if OK.
   If deleteIt is ON, then delete the grid's packed data after
   unpacking it into the object.
 </LI>
<LI>  <tt>int = obj.AddUGridElementVariable (string ugridVarName, string origName, int numComponents)</tt> -    In order to write Exodus files from vtkUnstructuredGrid
   objects that were read from Exodus files, we need to know
   the mapping from variable names in the UGrid to variable
   names in the Exodus file.  (The Exodus reader combines
   scalar variables with similar names into vectors in the
   UGrid.)  When building the UGrid to which this
   ModelMetadata refers, add each element and node variable
   name with this call, including the name of original variable
   that yielded it's first component, and the number of components.
   If a variable is removed from the UGrid, remove it from
   the ModelMetadata.  (If this information is missing or
   incomplete, the ExodusIIWriter can still do something
   sensible in creating names for variables.)
 </LI>
<LI>  <tt>int = obj.RemoveUGridElementVariable (string ugridVarName)</tt> -    In order to write Exodus files from vtkUnstructuredGrid
   objects that were read from Exodus files, we need to know
   the mapping from variable names in the UGrid to variable
   names in the Exodus file.  (The Exodus reader combines
   scalar variables with similar names into vectors in the
   UGrid.)  When building the UGrid to which this
   ModelMetadata refers, add each element and node variable
   name with this call, including the name of original variable
   that yielded it's first component, and the number of components.
   If a variable is removed from the UGrid, remove it from
   the ModelMetadata.  (If this information is missing or
   incomplete, the ExodusIIWriter can still do something
   sensible in creating names for variables.)
 </LI>
<LI>  <tt>int = obj.AddUGridNodeVariable (string ugridVarName, string origName, int numComponents)</tt>
 </LI>
<LI>  <tt>int = obj.RemoveUGridNodeVariable (string ugridVarName)</tt>
 </LI>
<LI>  <tt>int = obj.MergeModelMetadata (vtkModelMetadata em)</tt> -    In VTK we take vtkUnstructuredGrids and perform
   operations on them, including subsetting and merging
   grids.  We need to modify the metadata object 
   when this happens.  MergeModelMetadata merges the supplied
   model (both global and local metadata) into this model.  
   The models must be from the same file set.

   MergeModelMetadata assumes that no element in one metadata
   object appears in the other.  (It doesn't test for duplicate
   elements when merging the two metadata objects.) 
 </LI>
<LI>  <tt>int = obj.MergeGlobalInformation (vtkModelMetadata em)</tt> -    The metadata is divided into global metadata and local
   metadata.  MergeGlobalInformation merges just the
   global metadata of the supplied object into the
   global metadata of this object.
 </LI>
<LI>  <tt>vtkModelMetadata = obj.ExtractModelMetadata (vtkIdTypeArray globalCellIdList, vtkDataSet grid)</tt> -    Create and return a new metadata object which contains
   the information for the subset of global cell IDs provided.
   We need the grid containing the cells so we can find point
   Ids as well, and also the name of the global cell ID array
   and the name of the global point ID array.
 </LI>
<LI>  <tt>vtkModelMetadata = obj.ExtractGlobalMetadata ()</tt> -    Create and return a new metadata object containing only the
   global metadata of this metadata object.  
 </LI>
<LI>  <tt>obj.FreeAllGlobalData ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeAllLocalData ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeBlockDependentData ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeOriginalElementVariableNames ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeOriginalNodeVariableNames ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeUsedElementVariableNames ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeUsedNodeVariableNames ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeUsedElementVariables ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.FreeUsedNodeVariables ()</tt> -    Free selected portions of the metadata when updating values
   in the vtkModelMetadata object.  Resetting a particular field,
   (i.e. SetNodeSetIds) frees the previous setting, but if you
   are not setting every field, you may want to do a wholesale
   "Free" first.

   FreeAllGlobalData frees all the fields which don't depend on
     which time step, which blocks, or which variables are in the input.
   FreeAllLocalData frees all the fields which do depend on which
     time step, blocks or variables are in the input.
   FreeBlockDependentData frees all metadata fields which depend on
     which blocks were read in.
 </LI>
<LI>  <tt>obj.Reset ()</tt> -    Set the object back to it's initial state
 </LI>
<LI>  <tt>int = obj.GetBlockLocalIndex (int id)</tt> -    Block information is stored in arrays.  This method returns
   the array index for a given block ID.
 </LI>
</UL>
*/
