/*!
\page vtkgraphics_vtkspheresource vtkSphereSource

<p>
Section: \ref sec_vtkgraphics "Visualization Toolkit Graphics Classes"
\section Usage
 vtkSphereSource creates a sphere (represented by polygons) of specified
 radius centered at the origin. The resolution (polygonal discretization)
 in both the latitude (phi) and longitude (theta) directions can be
 specified. It also is possible to create partial spheres by specifying
 maximum phi and theta angles. By default, the surface tessellation of
 the sphere uses triangles; however you can set LatLongTessellation to
 produce a tessellation using quadrilaterals.

To create an instance of class vtkSphereSource, simply
invoke its constructor as follows
\verbatim
  obj = vtkSphereSource
\endverbatim
\section Methods
The class vtkSphereSource has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSphereSource class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkSphereSource = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkSphereSource = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetRadius (double )</tt> -  Set radius of sphere. Default is .5.
 </LI>
<LI>  <tt>double = obj.GetRadiusMinValue ()</tt> -  Set radius of sphere. Default is .5.
 </LI>
<LI>  <tt>double = obj.GetRadiusMaxValue ()</tt> -  Set radius of sphere. Default is .5.
 </LI>
<LI>  <tt>double = obj.GetRadius ()</tt> -  Set radius of sphere. Default is .5.
 </LI>
<LI>  <tt>obj.SetCenter (double , double , double )</tt> -  Set the center of the sphere. Default is 0,0,0.
 </LI>
<LI>  <tt>obj.SetCenter (double  a[3])</tt> -  Set the center of the sphere. Default is 0,0,0.
 </LI>
<LI>  <tt>double = obj. GetCenter ()</tt> -  Set the center of the sphere. Default is 0,0,0.
 </LI>
<LI>  <tt>obj.SetThetaResolution (int )</tt> -  Set the number of points in the longitude direction (ranging from
 StartTheta to EndTheta).
 </LI>
<LI>  <tt>int = obj.GetThetaResolutionMinValue ()</tt> -  Set the number of points in the longitude direction (ranging from
 StartTheta to EndTheta).
 </LI>
<LI>  <tt>int = obj.GetThetaResolutionMaxValue ()</tt> -  Set the number of points in the longitude direction (ranging from
 StartTheta to EndTheta).
 </LI>
<LI>  <tt>int = obj.GetThetaResolution ()</tt> -  Set the number of points in the longitude direction (ranging from
 StartTheta to EndTheta).
 </LI>
<LI>  <tt>obj.SetPhiResolution (int )</tt> -  Set the number of points in the latitude direction (ranging
 from StartPhi to EndPhi).
 </LI>
<LI>  <tt>int = obj.GetPhiResolutionMinValue ()</tt> -  Set the number of points in the latitude direction (ranging
 from StartPhi to EndPhi).
 </LI>
<LI>  <tt>int = obj.GetPhiResolutionMaxValue ()</tt> -  Set the number of points in the latitude direction (ranging
 from StartPhi to EndPhi).
 </LI>
<LI>  <tt>int = obj.GetPhiResolution ()</tt> -  Set the number of points in the latitude direction (ranging
 from StartPhi to EndPhi).
 </LI>
<LI>  <tt>obj.SetStartTheta (double )</tt> -  Set the starting longitude angle. By default StartTheta=0 degrees.
 </LI>
<LI>  <tt>double = obj.GetStartThetaMinValue ()</tt> -  Set the starting longitude angle. By default StartTheta=0 degrees.
 </LI>
<LI>  <tt>double = obj.GetStartThetaMaxValue ()</tt> -  Set the starting longitude angle. By default StartTheta=0 degrees.
 </LI>
<LI>  <tt>double = obj.GetStartTheta ()</tt> -  Set the starting longitude angle. By default StartTheta=0 degrees.
 </LI>
<LI>  <tt>obj.SetEndTheta (double )</tt> -  Set the ending longitude angle. By default EndTheta=360 degrees.
 </LI>
<LI>  <tt>double = obj.GetEndThetaMinValue ()</tt> -  Set the ending longitude angle. By default EndTheta=360 degrees.
 </LI>
<LI>  <tt>double = obj.GetEndThetaMaxValue ()</tt> -  Set the ending longitude angle. By default EndTheta=360 degrees.
 </LI>
<LI>  <tt>double = obj.GetEndTheta ()</tt> -  Set the ending longitude angle. By default EndTheta=360 degrees.
 </LI>
<LI>  <tt>obj.SetStartPhi (double )</tt> -  Set the starting latitude angle (0 is at north pole). By default
 StartPhi=0 degrees.
 </LI>
<LI>  <tt>double = obj.GetStartPhiMinValue ()</tt> -  Set the starting latitude angle (0 is at north pole). By default
 StartPhi=0 degrees.
 </LI>
<LI>  <tt>double = obj.GetStartPhiMaxValue ()</tt> -  Set the starting latitude angle (0 is at north pole). By default
 StartPhi=0 degrees.
 </LI>
<LI>  <tt>double = obj.GetStartPhi ()</tt> -  Set the starting latitude angle (0 is at north pole). By default
 StartPhi=0 degrees.
 </LI>
<LI>  <tt>obj.SetEndPhi (double )</tt> -  Set the ending latitude angle. By default EndPhi=180 degrees.
 </LI>
<LI>  <tt>double = obj.GetEndPhiMinValue ()</tt> -  Set the ending latitude angle. By default EndPhi=180 degrees.
 </LI>
<LI>  <tt>double = obj.GetEndPhiMaxValue ()</tt> -  Set the ending latitude angle. By default EndPhi=180 degrees.
 </LI>
<LI>  <tt>double = obj.GetEndPhi ()</tt> -  Set the ending latitude angle. By default EndPhi=180 degrees.
 </LI>
<LI>  <tt>obj.SetLatLongTessellation (int )</tt> -  Cause the sphere to be tessellated with edges along the latitude
 and longitude lines. If off, triangles are generated at non-polar
 regions, which results in edges that are not parallel to latitude and
 longitude lines. If on, quadrilaterals are generated everywhere
 except at the poles. This can be useful for generating a wireframe
 sphere with natural latitude and longitude lines.
 </LI>
<LI>  <tt>int = obj.GetLatLongTessellation ()</tt> -  Cause the sphere to be tessellated with edges along the latitude
 and longitude lines. If off, triangles are generated at non-polar
 regions, which results in edges that are not parallel to latitude and
 longitude lines. If on, quadrilaterals are generated everywhere
 except at the poles. This can be useful for generating a wireframe
 sphere with natural latitude and longitude lines.
 </LI>
<LI>  <tt>obj.LatLongTessellationOn ()</tt> -  Cause the sphere to be tessellated with edges along the latitude
 and longitude lines. If off, triangles are generated at non-polar
 regions, which results in edges that are not parallel to latitude and
 longitude lines. If on, quadrilaterals are generated everywhere
 except at the poles. This can be useful for generating a wireframe
 sphere with natural latitude and longitude lines.
 </LI>
<LI>  <tt>obj.LatLongTessellationOff ()</tt> -  Cause the sphere to be tessellated with edges along the latitude
 and longitude lines. If off, triangles are generated at non-polar
 regions, which results in edges that are not parallel to latitude and
 longitude lines. If on, quadrilaterals are generated everywhere
 except at the poles. This can be useful for generating a wireframe
 sphere with natural latitude and longitude lines.
 </LI>
</UL>
*/
