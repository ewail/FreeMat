/*!
\page functions_keywords KEYWORDS Function Keywords

<p>
Section: \ref sec_functions "Functions and Scripts"
\section Usage
A feature of IDL that FreeMat has adopted is a modified
form of <tt>keywords</tt>.  The purpose of <tt>keywords</tt> is to
allow you to call a function with the arguments to the
function specified in an arbitrary order.  To specify
the syntax of <tt>keywords</tt>, suppose there is a function
with prototype
\verbatim
  function [out_1,...,out_M] = foo(in_1,...,in_N)
\endverbatim
Then the general syntax for calling function <tt>foo</tt> using keywords
is
\verbatim
  foo(val_1, val_2, /in_k=3)
\endverbatim
which is exactly equivalent to
\verbatim
  foo(val_1, val_2, [], [], ..., [], 3),
\endverbatim
where the 3 is passed as the k-th argument, or alternately,
\verbatim
  foo(val_1, val_2, /in_k)
\endverbatim
which is exactly equivalent to
\verbatim
  foo(val_1, val_2, [], [], ..., [], logical(1)),
\endverbatim
Note that you can even pass reference arguments using keywords.
\section Example
The most common use of keywords is in controlling options for
functions.  For example, the following function takes a number
of binary options that control its behavior.  For example,
consider the following function with two arguments and two
options.  The function has been written to properly use and
handle keywords.  The result is much cleaner than the MATLAB
approach involving testing all possible values of <tt>nargin</tt>,
and forcing explicit empty brackets for don't care parameters.

\if FILE
keyfunc.m
function c = keyfunc(a,b,operation,printit)
  if (~isset('a') | ~isset('b'))
    error('keyfunc requires at least the first two 2 arguments');
  end;
  if (~isset('operation'))
    % user did not define the operation, default to '+'
    operation = '+';
  end
  if (~isset('printit'))
    % user did not specify the printit flag, default is false
    printit = 0;
  end
  % simple operation...
  eval(['c = a ' operation ' b;']);
  if (printit)
    printf('%f %s %f = %f\n',a,operation,b,c);
  end
\endif
\verbatim
     keyfunc.m
\endverbatim

\verbinclude keyfunc.m

Now some examples of how this function can be called using
<tt>keywords</tt>.

\if FRAGMENT
frag_functions_keywords_000.m
1
keyfunc(1,3)                % specify a and b, defaults for the others
keyfunc(1,3,/printit)       % specify printit is true
keyfunc(/operation='-',2,3) % assigns a=2, b=3
keyfunc(4,/operation='*',/printit) % error as b is unspecified
\endif


\verbinclude frag_functions_keywords_000.m.out 

*/
