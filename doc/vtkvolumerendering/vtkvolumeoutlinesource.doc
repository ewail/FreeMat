/*!
\page vtkvolumerendering_vtkvolumeoutlinesource vtkVolumeOutlineSource

<p>
Section: \ref sec_vtkvolumerendering "Visualization Toolkit Volume Rendering Classes"
\section Usage
 vtkVolumeOutlineSource generates a wireframe outline that corresponds
 to the cropping region of a vtkVolumeMapper.  It requires a 
 vtkVolumeMapper as input.  The GenerateFaces option turns on the
 solid faces of the outline, and the GenerateScalars option generates
 color scalars.  When GenerateScalars is on, it is possible to set
 an "ActivePlaneId" value in the range [0..6] to highlight one of the
 six cropping planes.
 .SECTION Thanks
 Thanks to David Gobbi for contributing this class to VTK.

To create an instance of class vtkVolumeOutlineSource, simply
invoke its constructor as follows
\verbatim
  obj = vtkVolumeOutlineSource
\endverbatim
\section Methods
The class vtkVolumeOutlineSource has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkVolumeOutlineSource class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkVolumeOutlineSource = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkVolumeOutlineSource = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetVolumeMapper (vtkVolumeMapper mapper)</tt> -  Set the mapper that has the cropping region that the outline will
 be generated for.  The mapper must have an input, because the
 bounds of the data must be computed in order to generate the
 outline.
 </LI>
<LI>  <tt>vtkVolumeMapper = obj.GetVolumeMapper ()</tt> -  Set the mapper that has the cropping region that the outline will
 be generated for.  The mapper must have an input, because the
 bounds of the data must be computed in order to generate the
 outline.
 </LI>
<LI>  <tt>obj.SetGenerateScalars (int )</tt> -  Set whether to generate color scalars for the output.  By default,
 the output has no scalars and the color must be set in the
 property of the actor.
 </LI>
<LI>  <tt>obj.GenerateScalarsOn ()</tt> -  Set whether to generate color scalars for the output.  By default,
 the output has no scalars and the color must be set in the
 property of the actor.
 </LI>
<LI>  <tt>obj.GenerateScalarsOff ()</tt> -  Set whether to generate color scalars for the output.  By default,
 the output has no scalars and the color must be set in the
 property of the actor.
 </LI>
<LI>  <tt>int = obj.GetGenerateScalars ()</tt> -  Set whether to generate color scalars for the output.  By default,
 the output has no scalars and the color must be set in the
 property of the actor.
 </LI>
<LI>  <tt>obj.SetGenerateFaces (int )</tt> -  Set whether to generate polygonal faces for the output.  By default,
 only lines are generated.  The faces will form a closed, watertight
 surface.
 </LI>
<LI>  <tt>obj.GenerateFacesOn ()</tt> -  Set whether to generate polygonal faces for the output.  By default,
 only lines are generated.  The faces will form a closed, watertight
 surface.
 </LI>
<LI>  <tt>obj.GenerateFacesOff ()</tt> -  Set whether to generate polygonal faces for the output.  By default,
 only lines are generated.  The faces will form a closed, watertight
 surface.
 </LI>
<LI>  <tt>int = obj.GetGenerateFaces ()</tt> -  Set whether to generate polygonal faces for the output.  By default,
 only lines are generated.  The faces will form a closed, watertight
 surface.
 </LI>
<LI>  <tt>obj.SetColor (double , double , double )</tt> -  Set the color of the outline.  This has no effect unless GenerateScalars
 is On.  The default color is red.
 </LI>
<LI>  <tt>obj.SetColor (double  a[3])</tt> -  Set the color of the outline.  This has no effect unless GenerateScalars
 is On.  The default color is red.
 </LI>
<LI>  <tt>double = obj. GetColor ()</tt> -  Set the color of the outline.  This has no effect unless GenerateScalars
 is On.  The default color is red.
 </LI>
<LI>  <tt>obj.SetActivePlaneId (int )</tt> -  Set the active plane, e.g. to display which plane is currently being
 modified by an interaction.  Set this to -1 if there is no active plane.
 The default value is -1.
 </LI>
<LI>  <tt>int = obj.GetActivePlaneId ()</tt> -  Set the active plane, e.g. to display which plane is currently being
 modified by an interaction.  Set this to -1 if there is no active plane.
 The default value is -1.
 </LI>
<LI>  <tt>obj.SetActivePlaneColor (double , double , double )</tt> -  Set the color of the active cropping plane.  This has no effect unless
 GenerateScalars is On and ActivePlaneId is non-negative.  The default
 color is yellow. 
 </LI>
<LI>  <tt>obj.SetActivePlaneColor (double  a[3])</tt> -  Set the color of the active cropping plane.  This has no effect unless
 GenerateScalars is On and ActivePlaneId is non-negative.  The default
 color is yellow. 
 </LI>
<LI>  <tt>double = obj. GetActivePlaneColor ()</tt> -  Set the color of the active cropping plane.  This has no effect unless
 GenerateScalars is On and ActivePlaneId is non-negative.  The default
 color is yellow. 
 </LI>
</UL>
*/
