/*!
\page vtkvolumerendering_vtkvolumetexturemapper2d vtkVolumeTextureMapper2D

<p>
Section: \ref sec_vtkvolumerendering "Visualization Toolkit Volume Rendering Classes"
\section Usage
 vtkVolumeTextureMapper2D renders a volume using 2D texture mapping.

To create an instance of class vtkVolumeTextureMapper2D, simply
invoke its constructor as follows
\verbatim
  obj = vtkVolumeTextureMapper2D
\endverbatim
\section Methods
The class vtkVolumeTextureMapper2D has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkVolumeTextureMapper2D class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkVolumeTextureMapper2D = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkVolumeTextureMapper2D = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetTargetTextureSize (int , int )</tt> -  Target size in pixels of each size of the texture for downloading. Default is
 512x512 - so a 512x512 texture will be tiled with as many slices of the volume
 as possible, then all the quads will be rendered. This can be set to optimize
 for a particular architecture. This must be set with numbers that are a power
 of two.
 </LI>
<LI>  <tt>obj.SetTargetTextureSize (int  a[2])</tt> -  Target size in pixels of each size of the texture for downloading. Default is
 512x512 - so a 512x512 texture will be tiled with as many slices of the volume
 as possible, then all the quads will be rendered. This can be set to optimize
 for a particular architecture. This must be set with numbers that are a power
 of two.
 </LI>
<LI>  <tt>int = obj. GetTargetTextureSize ()</tt> -  Target size in pixels of each size of the texture for downloading. Default is
 512x512 - so a 512x512 texture will be tiled with as many slices of the volume
 as possible, then all the quads will be rendered. This can be set to optimize
 for a particular architecture. This must be set with numbers that are a power
 of two.
 </LI>
<LI>  <tt>obj.SetMaximumNumberOfPlanes (int )</tt> -  This is the maximum number of planes that will be created for texture mapping
 the volume. If the volume has more voxels than this along the viewing direction,
 then planes of the volume will be skipped to ensure that this maximum is not
 violated. A skip factor is used, and is incremented until the maximum condition
 is satisfied.
 </LI>
<LI>  <tt>int = obj.GetMaximumNumberOfPlanes ()</tt> -  This is the maximum number of planes that will be created for texture mapping
 the volume. If the volume has more voxels than this along the viewing direction,
 then planes of the volume will be skipped to ensure that this maximum is not
 violated. A skip factor is used, and is incremented until the maximum condition
 is satisfied.
 </LI>
<LI>  <tt>obj.SetMaximumStorageSize (int )</tt> -  This is the maximum size of saved textures in bytes. If this size is large
 enough to hold the RGBA textures for all three directions (XxYxZx3x4 is
 the approximate value - it is actually a bit larger due to wasted space in
 the textures) then the textures will be saved.
 </LI>
<LI>  <tt>int = obj.GetMaximumStorageSize ()</tt> -  This is the maximum size of saved textures in bytes. If this size is large
 enough to hold the RGBA textures for all three directions (XxYxZx3x4 is
 the approximate value - it is actually a bit larger due to wasted space in
 the textures) then the textures will be saved.
 </LI>
</UL>
*/
