/*!
\page vtkvolumerendering_vtkunstructuredgridvolumeraycastmapper vtkUnstructuredGridVolumeRayCastMapper

<p>
Section: \ref sec_vtkvolumerendering "Visualization Toolkit Volume Rendering Classes"
\section Usage
 This is a software ray caster for rendering volumes in vtkUnstructuredGrid. 

To create an instance of class vtkUnstructuredGridVolumeRayCastMapper, simply
invoke its constructor as follows
\verbatim
  obj = vtkUnstructuredGridVolumeRayCastMapper
\endverbatim
\section Methods
The class vtkUnstructuredGridVolumeRayCastMapper has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkUnstructuredGridVolumeRayCastMapper class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkUnstructuredGridVolumeRayCastMapper = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkUnstructuredGridVolumeRayCastMapper = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetImageSampleDistance (float )</tt> -  Sampling distance in the XY image dimensions. Default value of 1 meaning
 1 ray cast per pixel. If set to 0.5, 4 rays will be cast per pixel. If
 set to 2.0, 1 ray will be cast for every 4 (2 by 2) pixels.
 </LI>
<LI>  <tt>float = obj.GetImageSampleDistanceMinValue ()</tt> -  Sampling distance in the XY image dimensions. Default value of 1 meaning
 1 ray cast per pixel. If set to 0.5, 4 rays will be cast per pixel. If
 set to 2.0, 1 ray will be cast for every 4 (2 by 2) pixels.
 </LI>
<LI>  <tt>float = obj.GetImageSampleDistanceMaxValue ()</tt> -  Sampling distance in the XY image dimensions. Default value of 1 meaning
 1 ray cast per pixel. If set to 0.5, 4 rays will be cast per pixel. If
 set to 2.0, 1 ray will be cast for every 4 (2 by 2) pixels.
 </LI>
<LI>  <tt>float = obj.GetImageSampleDistance ()</tt> -  Sampling distance in the XY image dimensions. Default value of 1 meaning
 1 ray cast per pixel. If set to 0.5, 4 rays will be cast per pixel. If
 set to 2.0, 1 ray will be cast for every 4 (2 by 2) pixels.
 </LI>
<LI>  <tt>obj.SetMinimumImageSampleDistance (float )</tt> -  This is the minimum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>float = obj.GetMinimumImageSampleDistanceMinValue ()</tt> -  This is the minimum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>float = obj.GetMinimumImageSampleDistanceMaxValue ()</tt> -  This is the minimum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>float = obj.GetMinimumImageSampleDistance ()</tt> -  This is the minimum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>obj.SetMaximumImageSampleDistance (float )</tt> -  This is the maximum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>float = obj.GetMaximumImageSampleDistanceMinValue ()</tt> -  This is the maximum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>float = obj.GetMaximumImageSampleDistanceMaxValue ()</tt> -  This is the maximum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>float = obj.GetMaximumImageSampleDistance ()</tt> -  This is the maximum image sample distance allow when the image
 sample distance is being automatically adjusted
 </LI>
<LI>  <tt>obj.SetAutoAdjustSampleDistances (int )</tt> -  If AutoAdjustSampleDistances is on, the the ImageSampleDistance
 will be varied to achieve the allocated render time of this 
 prop (controlled by the desired update rate and any culling in
 use). 
 </LI>
<LI>  <tt>int = obj.GetAutoAdjustSampleDistancesMinValue ()</tt> -  If AutoAdjustSampleDistances is on, the the ImageSampleDistance
 will be varied to achieve the allocated render time of this 
 prop (controlled by the desired update rate and any culling in
 use). 
 </LI>
<LI>  <tt>int = obj.GetAutoAdjustSampleDistancesMaxValue ()</tt> -  If AutoAdjustSampleDistances is on, the the ImageSampleDistance
 will be varied to achieve the allocated render time of this 
 prop (controlled by the desired update rate and any culling in
 use). 
 </LI>
<LI>  <tt>int = obj.GetAutoAdjustSampleDistances ()</tt> -  If AutoAdjustSampleDistances is on, the the ImageSampleDistance
 will be varied to achieve the allocated render time of this 
 prop (controlled by the desired update rate and any culling in
 use). 
 </LI>
<LI>  <tt>obj.AutoAdjustSampleDistancesOn ()</tt> -  If AutoAdjustSampleDistances is on, the the ImageSampleDistance
 will be varied to achieve the allocated render time of this 
 prop (controlled by the desired update rate and any culling in
 use). 
 </LI>
<LI>  <tt>obj.AutoAdjustSampleDistancesOff ()</tt> -  If AutoAdjustSampleDistances is on, the the ImageSampleDistance
 will be varied to achieve the allocated render time of this 
 prop (controlled by the desired update rate and any culling in
 use). 
 </LI>
<LI>  <tt>obj.SetNumberOfThreads (int )</tt> -  Set/Get the number of threads to use. This by default is equal to
 the number of available processors detected.
 </LI>
<LI>  <tt>int = obj.GetNumberOfThreads ()</tt> -  Set/Get the number of threads to use. This by default is equal to
 the number of available processors detected.
 </LI>
<LI>  <tt>obj.SetIntermixIntersectingGeometry (int )</tt> -  If IntermixIntersectingGeometry is turned on, the zbuffer will be
 captured and used to limit the traversal of the rays.
 </LI>
<LI>  <tt>int = obj.GetIntermixIntersectingGeometryMinValue ()</tt> -  If IntermixIntersectingGeometry is turned on, the zbuffer will be
 captured and used to limit the traversal of the rays.
 </LI>
<LI>  <tt>int = obj.GetIntermixIntersectingGeometryMaxValue ()</tt> -  If IntermixIntersectingGeometry is turned on, the zbuffer will be
 captured and used to limit the traversal of the rays.
 </LI>
<LI>  <tt>int = obj.GetIntermixIntersectingGeometry ()</tt> -  If IntermixIntersectingGeometry is turned on, the zbuffer will be
 captured and used to limit the traversal of the rays.
 </LI>
<LI>  <tt>obj.IntermixIntersectingGeometryOn ()</tt> -  If IntermixIntersectingGeometry is turned on, the zbuffer will be
 captured and used to limit the traversal of the rays.
 </LI>
<LI>  <tt>obj.IntermixIntersectingGeometryOff ()</tt> -  If IntermixIntersectingGeometry is turned on, the zbuffer will be
 captured and used to limit the traversal of the rays.
 </LI>
<LI>  <tt>obj.SetRayCastFunction (vtkUnstructuredGridVolumeRayCastFunction f)</tt> -  Set/Get the helper class for casting rays.
 </LI>
<LI>  <tt>vtkUnstructuredGridVolumeRayCastFunction = obj.GetRayCastFunction ()</tt> -  Set/Get the helper class for casting rays.
 </LI>
<LI>  <tt>obj.SetRayIntegrator (vtkUnstructuredGridVolumeRayIntegrator ri)</tt> -  Set/Get the helper class for integrating rays.  If set to NULL, a
 default integrator will be assigned.
 </LI>
<LI>  <tt>vtkUnstructuredGridVolumeRayIntegrator = obj.GetRayIntegrator ()</tt> -  Set/Get the helper class for integrating rays.  If set to NULL, a
 default integrator will be assigned.
 </LI>
<LI>  <tt>obj.CastRays (int threadID, int threadCount)</tt>
 </LI>
</UL>
*/
