/*!
\page vtkvolumerendering_vtkfixedpointraycastimage vtkFixedPointRayCastImage

<p>
Section: \ref sec_vtkvolumerendering "Visualization Toolkit Volume Rendering Classes"
\section Usage
 This is a helper class for storing the ray cast image including the
 underlying data and the size of the image. This class is not intended
 to be used directly - just as an internal class in the 
 vtkFixedPointVolumeRayCastMapper so that multiple mappers can share
 the same image. This class also stored the ZBuffer (if necessary due
 to intermixed geometry). Perhaps this class could be generalized
 in the future to be used for other ray cast methods other than the
 fixed point method.

To create an instance of class vtkFixedPointRayCastImage, simply
invoke its constructor as follows
\verbatim
  obj = vtkFixedPointRayCastImage
\endverbatim
\section Methods
The class vtkFixedPointRayCastImage has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkFixedPointRayCastImage class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkFixedPointRayCastImage = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkFixedPointRayCastImage = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetImageViewportSize (int , int )</tt> -  Set / Get the ImageViewportSize. This is the size of the
 whole viewport in pixels.
 </LI>
<LI>  <tt>obj.SetImageViewportSize (int  a[2])</tt> -  Set / Get the ImageViewportSize. This is the size of the
 whole viewport in pixels.
 </LI>
<LI>  <tt>int = obj. GetImageViewportSize ()</tt> -  Set / Get the ImageViewportSize. This is the size of the
 whole viewport in pixels.
 </LI>
<LI>  <tt>obj.SetImageMemorySize (int , int )</tt> -  Set / Get the ImageMemorySize. This is the size in pixels
 of the Image ivar. This will be a power of two in order
 to ensure that the texture can be rendered by graphics
 hardware that requires power of two textures.
 </LI>
<LI>  <tt>obj.SetImageMemorySize (int  a[2])</tt> -  Set / Get the ImageMemorySize. This is the size in pixels
 of the Image ivar. This will be a power of two in order
 to ensure that the texture can be rendered by graphics
 hardware that requires power of two textures.
 </LI>
<LI>  <tt>int = obj. GetImageMemorySize ()</tt> -  Set / Get the ImageMemorySize. This is the size in pixels
 of the Image ivar. This will be a power of two in order
 to ensure that the texture can be rendered by graphics
 hardware that requires power of two textures.
 </LI>
<LI>  <tt>obj.SetImageInUseSize (int , int )</tt> -  Set / Get the size of the image we are actually using. As
 long as the memory size is big enough, but not too big,
 we won't bother deleting and re-allocated, we'll just 
 continue to use the memory size we have. This size will
 always be equal to or less than the ImageMemorySize.
 </LI>
<LI>  <tt>obj.SetImageInUseSize (int  a[2])</tt> -  Set / Get the size of the image we are actually using. As
 long as the memory size is big enough, but not too big,
 we won't bother deleting and re-allocated, we'll just 
 continue to use the memory size we have. This size will
 always be equal to or less than the ImageMemorySize.
 </LI>
<LI>  <tt>int = obj. GetImageInUseSize ()</tt> -  Set / Get the size of the image we are actually using. As
 long as the memory size is big enough, but not too big,
 we won't bother deleting and re-allocated, we'll just 
 continue to use the memory size we have. This size will
 always be equal to or less than the ImageMemorySize.
 </LI>
<LI>  <tt>obj.SetImageOrigin (int , int )</tt> -  Set / Get the origin of the image. This is the starting 
 pixel within the whole viewport that our Image starts on.
 That is, we could be generating just a subregion of the
 whole viewport due to the fact that our volume occupies 
 only a portion of the viewport. The Image pixels will
 start from this location.
 </LI>
<LI>  <tt>obj.SetImageOrigin (int  a[2])</tt> -  Set / Get the origin of the image. This is the starting 
 pixel within the whole viewport that our Image starts on.
 That is, we could be generating just a subregion of the
 whole viewport due to the fact that our volume occupies 
 only a portion of the viewport. The Image pixels will
 start from this location.
 </LI>
<LI>  <tt>int = obj. GetImageOrigin ()</tt> -  Set / Get the origin of the image. This is the starting 
 pixel within the whole viewport that our Image starts on.
 That is, we could be generating just a subregion of the
 whole viewport due to the fact that our volume occupies 
 only a portion of the viewport. The Image pixels will
 start from this location.
 </LI>
<LI>  <tt>obj.SetImageSampleDistance (float )</tt> -  Set / Get the ImageSampleDistance that will be used for 
 rendering. This is a copy of the value stored in the
 mapper. It is stored here for sharing between all mappers
 that are participating in the creation of this image.
 </LI>
<LI>  <tt>float = obj.GetImageSampleDistance ()</tt> -  Set / Get the ImageSampleDistance that will be used for 
 rendering. This is a copy of the value stored in the
 mapper. It is stored here for sharing between all mappers
 that are participating in the creation of this image.
 </LI>
<LI>  <tt>obj.AllocateImage ()</tt> -  Call this method once the ImageMemorySize has been set
 the allocate the image. If an image already exists,
 it will be deleted first.
 </LI>
<LI>  <tt>obj.ClearImage ()</tt> -  Clear the image to (0,0,0,0) for each pixel.
 </LI>
<LI>  <tt>obj.SetZBufferSize (int , int )</tt> -  Set / Get the size of the ZBuffer in pixels. The zbuffer will
 be captured for the region of the screen covered by the
 ImageInUseSize image. However, due to subsampling, the size
 of the ImageInUseSize image may be smaller than this ZBuffer
 image which will be captured at screen resolution.
 </LI>
<LI>  <tt>obj.SetZBufferSize (int  a[2])</tt> -  Set / Get the size of the ZBuffer in pixels. The zbuffer will
 be captured for the region of the screen covered by the
 ImageInUseSize image. However, due to subsampling, the size
 of the ImageInUseSize image may be smaller than this ZBuffer
 image which will be captured at screen resolution.
 </LI>
<LI>  <tt>int = obj. GetZBufferSize ()</tt> -  Set / Get the size of the ZBuffer in pixels. The zbuffer will
 be captured for the region of the screen covered by the
 ImageInUseSize image. However, due to subsampling, the size
 of the ImageInUseSize image may be smaller than this ZBuffer
 image which will be captured at screen resolution.
 </LI>
<LI>  <tt>obj.SetZBufferOrigin (int , int )</tt> -  Set / Get the origin of the ZBuffer. This is the distance
 from the lower left corner of the viewport where the ZBuffer
 started (multiply the ImageOrigin by the ImageSampleDistance)
 This is the pixel location on the full resolution viewport
 where the ZBuffer capture will start. These values are used 
 to convert the (x,y) pixel location within the ImageInUseSize 
 image into a ZBuffer location.
 </LI>
<LI>  <tt>obj.SetZBufferOrigin (int  a[2])</tt> -  Set / Get the origin of the ZBuffer. This is the distance
 from the lower left corner of the viewport where the ZBuffer
 started (multiply the ImageOrigin by the ImageSampleDistance)
 This is the pixel location on the full resolution viewport
 where the ZBuffer capture will start. These values are used 
 to convert the (x,y) pixel location within the ImageInUseSize 
 image into a ZBuffer location.
 </LI>
<LI>  <tt>int = obj. GetZBufferOrigin ()</tt> -  Set / Get the origin of the ZBuffer. This is the distance
 from the lower left corner of the viewport where the ZBuffer
 started (multiply the ImageOrigin by the ImageSampleDistance)
 This is the pixel location on the full resolution viewport
 where the ZBuffer capture will start. These values are used 
 to convert the (x,y) pixel location within the ImageInUseSize 
 image into a ZBuffer location.
 </LI>
<LI>  <tt>obj.SetUseZBuffer (int )</tt> -  The UseZBuffer flag indicates whether the ZBuffer is in use.
 The ZBuffer is captured and used when IntermixIntersectingGeometry
 is on in the mapper, and when there are props that have been
 rendered before the current volume. 
 </LI>
<LI>  <tt>int = obj.GetUseZBufferMinValue ()</tt> -  The UseZBuffer flag indicates whether the ZBuffer is in use.
 The ZBuffer is captured and used when IntermixIntersectingGeometry
 is on in the mapper, and when there are props that have been
 rendered before the current volume. 
 </LI>
<LI>  <tt>int = obj.GetUseZBufferMaxValue ()</tt> -  The UseZBuffer flag indicates whether the ZBuffer is in use.
 The ZBuffer is captured and used when IntermixIntersectingGeometry
 is on in the mapper, and when there are props that have been
 rendered before the current volume. 
 </LI>
<LI>  <tt>int = obj.GetUseZBuffer ()</tt> -  The UseZBuffer flag indicates whether the ZBuffer is in use.
 The ZBuffer is captured and used when IntermixIntersectingGeometry
 is on in the mapper, and when there are props that have been
 rendered before the current volume. 
 </LI>
<LI>  <tt>obj.UseZBufferOn ()</tt> -  The UseZBuffer flag indicates whether the ZBuffer is in use.
 The ZBuffer is captured and used when IntermixIntersectingGeometry
 is on in the mapper, and when there are props that have been
 rendered before the current volume. 
 </LI>
<LI>  <tt>obj.UseZBufferOff ()</tt> -  The UseZBuffer flag indicates whether the ZBuffer is in use.
 The ZBuffer is captured and used when IntermixIntersectingGeometry
 is on in the mapper, and when there are props that have been
 rendered before the current volume. 
 </LI>
<LI>  <tt>float = obj.GetZBufferValue (int x, int y)</tt> -  Get the ZBuffer value corresponding to location (x,y) where (x,y)
 are indexing into the ImageInUse image. This must be converted to
 the zbuffer image coordinates. Nearest neighbor value is returned.
 If UseZBuffer is off, then 1.0 is always returned.
 </LI>
<LI>  <tt>obj.AllocateZBuffer ()</tt>
 </LI>
</UL>
*/
