/*!
\page vtkinfovis_vtkarealayout vtkAreaLayout

<p>
Section: \ref sec_vtkinfovis "Visualization Toolkit Infovis Classes"
\section Usage
 vtkAreaLayout assigns sector regions to each vertex in the tree,
 creating a tree ring.  The data is added as a data array with four
 components per tuple representing the location and size of the
 sector using the format (StartAngle, EndAngle, innerRadius, outerRadius).

 This algorithm relies on a helper class to perform the actual layout.
 This helper class is a subclass of vtkAreaLayoutStrategy.

 .SECTION Thanks
 Thanks to Jason Shepherd from Sandia National Laboratories
 for help developing this class.

To create an instance of class vtkAreaLayout, simply
invoke its constructor as follows
\verbatim
  obj = vtkAreaLayout
\endverbatim
\section Methods
The class vtkAreaLayout has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkAreaLayout class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkAreaLayout = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkAreaLayout = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetSizeArrayName (string name)</tt> -  The name for the array created for the area for each vertex.
 The rectangles are stored in a quadruple float array
 (startAngle, endAngle, innerRadius, outerRadius).
 For rectangular layouts, this is (minx, maxx, miny, maxy).
 </LI>
<LI>  <tt>string = obj.GetAreaArrayName ()</tt> -  The name for the array created for the area for each vertex.
 The rectangles are stored in a quadruple float array
 (startAngle, endAngle, innerRadius, outerRadius).
 For rectangular layouts, this is (minx, maxx, miny, maxy).
 </LI>
<LI>  <tt>obj.SetAreaArrayName (string )</tt> -  The name for the array created for the area for each vertex.
 The rectangles are stored in a quadruple float array
 (startAngle, endAngle, innerRadius, outerRadius).
 For rectangular layouts, this is (minx, maxx, miny, maxy).
 </LI>
<LI>  <tt>bool = obj.GetEdgeRoutingPoints ()</tt> -  Whether to output a second output tree with vertex locations
 appropriate for routing bundled edges. Default is on.
 </LI>
<LI>  <tt>obj.SetEdgeRoutingPoints (bool )</tt> -  Whether to output a second output tree with vertex locations
 appropriate for routing bundled edges. Default is on.
 </LI>
<LI>  <tt>obj.EdgeRoutingPointsOn ()</tt> -  Whether to output a second output tree with vertex locations
 appropriate for routing bundled edges. Default is on.
 </LI>
<LI>  <tt>obj.EdgeRoutingPointsOff ()</tt> -  Whether to output a second output tree with vertex locations
 appropriate for routing bundled edges. Default is on.
 </LI>
<LI>  <tt>vtkAreaLayoutStrategy = obj.GetLayoutStrategy ()</tt> -  The strategy to use when laying out the tree map.
 </LI>
<LI>  <tt>obj.SetLayoutStrategy (vtkAreaLayoutStrategy strategy)</tt> -  The strategy to use when laying out the tree map.
 </LI>
<LI>  <tt>long = obj.GetMTime ()</tt> -  Get the modification time of the layout algorithm.
 </LI>
<LI>  <tt>vtkIdType = obj.FindVertex (float pnt[2])</tt> -  Get the vertex whose area contains the point, or return -1
 if no vertex area covers the point.
 </LI>
<LI>  <tt>obj.GetBoundingArea (vtkIdType id, float sinfo)</tt> -  The bounding area information for a certain vertex id.
 </LI>
</UL>
*/
