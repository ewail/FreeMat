/*!
\page vtkinfovis_vtkconstrained2dlayoutstrategy vtkConstrained2DLayoutStrategy

<p>
Section: \ref sec_vtkinfovis "Visualization Toolkit Infovis Classes"
\section Usage
 This class is a density grid based force directed layout strategy.
 Also please note that 'fast' is relative to quite slow. :)
 The layout running time is O(V+E) with an extremely high constant.
 .SECTION Thanks
 We would like to thank Mothra for distracting Godzilla while we
 wrote this class. 

To create an instance of class vtkConstrained2DLayoutStrategy, simply
invoke its constructor as follows
\verbatim
  obj = vtkConstrained2DLayoutStrategy
\endverbatim
\section Methods
The class vtkConstrained2DLayoutStrategy has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkConstrained2DLayoutStrategy class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkConstrained2DLayoutStrategy = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkConstrained2DLayoutStrategy = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetRandomSeed (int )</tt> -  Seed the random number generator used to jitter point positions.
 This has a significant effect on their final positions when
 the layout is complete.
 </LI>
<LI>  <tt>int = obj.GetRandomSeedMinValue ()</tt> -  Seed the random number generator used to jitter point positions.
 This has a significant effect on their final positions when
 the layout is complete.
 </LI>
<LI>  <tt>int = obj.GetRandomSeedMaxValue ()</tt> -  Seed the random number generator used to jitter point positions.
 This has a significant effect on their final positions when
 the layout is complete.
 </LI>
<LI>  <tt>int = obj.GetRandomSeed ()</tt> -  Seed the random number generator used to jitter point positions.
 This has a significant effect on their final positions when
 the layout is complete.
 </LI>
<LI>  <tt>obj.SetMaxNumberOfIterations (int )</tt> -  Set/Get the maximum number of iterations to be used.
 The higher this number, the more iterations through the algorithm
 is possible, and thus, the more the graph gets modified.
 The default is '100' for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>int = obj.GetMaxNumberOfIterationsMinValue ()</tt> -  Set/Get the maximum number of iterations to be used.
 The higher this number, the more iterations through the algorithm
 is possible, and thus, the more the graph gets modified.
 The default is '100' for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>int = obj.GetMaxNumberOfIterationsMaxValue ()</tt> -  Set/Get the maximum number of iterations to be used.
 The higher this number, the more iterations through the algorithm
 is possible, and thus, the more the graph gets modified.
 The default is '100' for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>int = obj.GetMaxNumberOfIterations ()</tt> -  Set/Get the maximum number of iterations to be used.
 The higher this number, the more iterations through the algorithm
 is possible, and thus, the more the graph gets modified.
 The default is '100' for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>obj.SetIterationsPerLayout (int )</tt> -  Set/Get the number of iterations per layout.
 The only use for this ivar is for the application
 to do visualizations of the layout before it's complete.
 The default is '100' to match the default 'MaxNumberOfIterations'
 Note: Changing this parameter is just fine :)
 </LI>
<LI>  <tt>int = obj.GetIterationsPerLayoutMinValue ()</tt> -  Set/Get the number of iterations per layout.
 The only use for this ivar is for the application
 to do visualizations of the layout before it's complete.
 The default is '100' to match the default 'MaxNumberOfIterations'
 Note: Changing this parameter is just fine :)
 </LI>
<LI>  <tt>int = obj.GetIterationsPerLayoutMaxValue ()</tt> -  Set/Get the number of iterations per layout.
 The only use for this ivar is for the application
 to do visualizations of the layout before it's complete.
 The default is '100' to match the default 'MaxNumberOfIterations'
 Note: Changing this parameter is just fine :)
 </LI>
<LI>  <tt>int = obj.GetIterationsPerLayout ()</tt> -  Set/Get the number of iterations per layout.
 The only use for this ivar is for the application
 to do visualizations of the layout before it's complete.
 The default is '100' to match the default 'MaxNumberOfIterations'
 Note: Changing this parameter is just fine :)
 </LI>
<LI>  <tt>obj.SetInitialTemperature (float )</tt> -  Set the initial temperature.  The temperature default is '5'
 for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>float = obj.GetInitialTemperatureMinValue ()</tt> -  Set the initial temperature.  The temperature default is '5'
 for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>float = obj.GetInitialTemperatureMaxValue ()</tt> -  Set the initial temperature.  The temperature default is '5'
 for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>float = obj.GetInitialTemperature ()</tt> -  Set the initial temperature.  The temperature default is '5'
 for no particular reason
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>obj.SetCoolDownRate (double )</tt> -  Set/Get the Cool-down rate.
 The higher this number is, the longer it will take to "cool-down",
 and thus, the more the graph will be modified. The default is '10'
 for no particular reason. 
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>double = obj.GetCoolDownRateMinValue ()</tt> -  Set/Get the Cool-down rate.
 The higher this number is, the longer it will take to "cool-down",
 and thus, the more the graph will be modified. The default is '10'
 for no particular reason. 
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>double = obj.GetCoolDownRateMaxValue ()</tt> -  Set/Get the Cool-down rate.
 The higher this number is, the longer it will take to "cool-down",
 and thus, the more the graph will be modified. The default is '10'
 for no particular reason. 
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>double = obj.GetCoolDownRate ()</tt> -  Set/Get the Cool-down rate.
 The higher this number is, the longer it will take to "cool-down",
 and thus, the more the graph will be modified. The default is '10'
 for no particular reason. 
 Note: The strong recommendation is that you do not change
 this parameter. :)
 </LI>
<LI>  <tt>obj.SetRestDistance (float )</tt> -  Manually set the resting distance. Otherwise the
 distance is computed automatically.
 </LI>
<LI>  <tt>float = obj.GetRestDistance ()</tt> -  Manually set the resting distance. Otherwise the
 distance is computed automatically.
 </LI>
<LI>  <tt>obj.Initialize ()</tt> -  This strategy sets up some data structures
 for faster processing of each Layout() call
 </LI>
<LI>  <tt>obj.Layout ()</tt> -  This is the layout method where the graph that was
 set in SetGraph() is laid out. The method can either
 entirely layout the graph or iteratively lay out the
 graph. If you have an iterative layout please implement
 the IsLayoutComplete() method.
 </LI>
<LI>  <tt>int = obj.IsLayoutComplete ()</tt> -  Set/Get the input constraint array name. If no input array 
 name is set then the name 'constraint' is used.
 </LI>
<LI>  <tt>obj.SetInputArrayName (string )</tt> -  Set/Get the input constraint array name. If no input array 
 name is set then the name 'constraint' is used.
 </LI>
<LI>  <tt>string = obj.GetInputArrayName ()</tt> -  Set/Get the input constraint array name. If no input array 
 name is set then the name 'constraint' is used.
 </LI>
</UL>
*/
