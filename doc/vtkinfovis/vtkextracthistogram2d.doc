/*!
\page vtkinfovis_vtkextracthistogram2d vtkExtractHistogram2D

<p>
Section: \ref sec_vtkinfovis "Visualization Toolkit Infovis Classes"
\section Usage
  This class computes a 2D histogram between two columns of an input
  vtkTable. Just as with a 1D histogram, a 2D histogram breaks 
  up the input domain into bins, and each pair of values (row in
  the table) fits into a single bin and increments a row counter
  for that bin.
  
  To use this class, set the input with a table and call AddColumnPair(nameX,nameY),
  where nameX and nameY are the names of the two columns to be used.

  In addition to the number of bins (in X and Y), the domain of
  the histogram can be customized by toggling the UseCustomHistogramExtents
  flag and setting the CustomHistogramExtents variable to the 
  desired value.


To create an instance of class vtkExtractHistogram2D, simply
invoke its constructor as follows
\verbatim
  obj = vtkExtractHistogram2D
\endverbatim
\section Methods
The class vtkExtractHistogram2D has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkExtractHistogram2D class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkExtractHistogram2D = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkExtractHistogram2D = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetNumberOfBins (int , int )</tt> -  Set/get the number of bins to be used per dimension (x,y)
 </LI>
<LI>  <tt>obj.SetNumberOfBins (int  a[2])</tt> -  Set/get the number of bins to be used per dimension (x,y)
 </LI>
<LI>  <tt>int = obj. GetNumberOfBins ()</tt> -  Set/get the number of bins to be used per dimension (x,y)
 </LI>
<LI>  <tt>obj.SetComponentsToProcess (int , int )</tt> -  Set/get the components of the arrays in the two input columns
 to be used during histogram computation.  Defaults to component 0.
 </LI>
<LI>  <tt>obj.SetComponentsToProcess (int  a[2])</tt> -  Set/get the components of the arrays in the two input columns
 to be used during histogram computation.  Defaults to component 0.
 </LI>
<LI>  <tt>int = obj. GetComponentsToProcess ()</tt> -  Set/get the components of the arrays in the two input columns
 to be used during histogram computation.  Defaults to component 0.
 </LI>
<LI>  <tt>obj.SetCustomHistogramExtents (double , double , double , double )</tt> -  Set/get a custom domain for histogram computation.  UseCustomHistogramExtents
 must be called for these to actually be used.
 </LI>
<LI>  <tt>obj.SetCustomHistogramExtents (double  a[4])</tt> -  Set/get a custom domain for histogram computation.  UseCustomHistogramExtents
 must be called for these to actually be used.
 </LI>
<LI>  <tt>double = obj. GetCustomHistogramExtents ()</tt> -  Set/get a custom domain for histogram computation.  UseCustomHistogramExtents
 must be called for these to actually be used.
 </LI>
<LI>  <tt>obj.SetUseCustomHistogramExtents (int )</tt> -  Use the extents in CustomHistogramExtents when computing the
 histogram, rather than the simple range of the input columns.
 </LI>
<LI>  <tt>int = obj.GetUseCustomHistogramExtents ()</tt> -  Use the extents in CustomHistogramExtents when computing the
 histogram, rather than the simple range of the input columns.
 </LI>
<LI>  <tt>obj.UseCustomHistogramExtentsOn ()</tt> -  Use the extents in CustomHistogramExtents when computing the
 histogram, rather than the simple range of the input columns.
 </LI>
<LI>  <tt>obj.UseCustomHistogramExtentsOff ()</tt> -  Use the extents in CustomHistogramExtents when computing the
 histogram, rather than the simple range of the input columns.
 </LI>
<LI>  <tt>obj.SetScalarType (int )</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>obj.SetScalarTypeToUnsignedInt ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>obj.SetScalarTypeToUnsignedLong ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>obj.SetScalarTypeToUnsignedShort ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>obj.SetScalarTypeToUnsignedChar ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>obj.SetScalarTypeToFloat ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>obj.SetScalarTypeToDouble ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>int = obj.GetScalarType ()</tt> -  Control the scalar type of the output histogram.  If the input
 is relatively small, you can save space by using a smaller
 data type.  Defaults to unsigned integer.
 </LI>
<LI>  <tt>double = obj.GetMaximumBinCount ()</tt> -  Access the count of the histogram bin containing the largest number
 of input rows.
 </LI>
<LI>  <tt>int = obj.GetBinRange (vtkIdType binX, vtkIdType binY, double range[4])</tt> -  Compute the range of the bin located at position (binX,binY) in
 the 2D histogram.
 </LI>
<LI>  <tt>int = obj.GetBinRange (vtkIdType bin, double range[4])</tt> -  Get the range of the of the bin located at 1D position index bin
 in the 2D histogram array.
 </LI>
<LI>  <tt>obj.GetBinWidth (double bw[2])</tt> -  Get the width of all of the bins. Also stored in the spacing
 ivar of the histogram image output.
 </LI>
<LI>  <tt>vtkImageData = obj.GetOutputHistogramImage ()</tt> -  Gets the data object at the histogram image output port and
 casts it to a vtkImageData.
 </LI>
<LI>  <tt>obj.SetSwapColumns (int )</tt>
 </LI>
<LI>  <tt>int = obj.GetSwapColumns ()</tt>
 </LI>
<LI>  <tt>obj.SwapColumnsOn ()</tt>
 </LI>
<LI>  <tt>obj.SwapColumnsOff ()</tt>
 </LI>
<LI>  <tt>obj.SetRowMask (vtkDataArray )</tt> -  Get/Set an optional mask that can ignore rows of the table
 </LI>
<LI>  <tt>vtkDataArray = obj.GetRowMask ()</tt> -  Get/Set an optional mask that can ignore rows of the table
 </LI>
<LI>  <tt>obj.Aggregate (vtkDataObjectCollection , vtkDataObject )</tt> -  Given a collection of models, calculate aggregate model. Not used.
 </LI>
</UL>
*/
