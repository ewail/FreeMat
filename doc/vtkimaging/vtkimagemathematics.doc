/*!
\page vtkimaging_vtkimagemathematics vtkImageMathematics

<p>
Section: \ref sec_vtkimaging "Visualization Toolkit Imaging Classes"
\section Usage
 vtkImageMathematics implements basic mathematic operations SetOperation is
 used to select the filters behavior.  The filter can take two or one
 input.

To create an instance of class vtkImageMathematics, simply
invoke its constructor as follows
\verbatim
  obj = vtkImageMathematics
\endverbatim
\section Methods
The class vtkImageMathematics has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkImageMathematics class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkImageMathematics = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkImageMathematics = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetOperation (int )</tt> -  Set/Get the Operation to perform.
 </LI>
<LI>  <tt>int = obj.GetOperation ()</tt> -  Set/Get the Operation to perform.
 </LI>
<LI>  <tt>obj.SetOperationToAdd ()</tt> -  Set each pixel in the output image to the sum of the corresponding pixels
 in Input1 and Input2.
 </LI>
<LI>  <tt>obj.SetOperationToSubtract ()</tt> -  Set each pixel in the output image to the difference of the corresponding pixels
 in Input1 and Input2 (output = Input1 - Input2).
 </LI>
<LI>  <tt>obj.SetOperationToMultiply ()</tt> -  Set each pixel in the output image to the product of the corresponding pixels
 in Input1 and Input2.
 </LI>
<LI>  <tt>obj.SetOperationToDivide ()</tt> -  Set each pixel in the output image to the quotient of the corresponding pixels
 in Input1 and Input2 (Output = Input1 / Input2).
 </LI>
<LI>  <tt>obj.SetOperationToConjugate ()</tt>
 </LI>
<LI>  <tt>obj.SetOperationToComplexMultiply ()</tt>
 </LI>
<LI>  <tt>obj.SetOperationToInvert ()</tt> -  Set each pixel in the output image to 1 over the corresponding pixel
 in Input1 and Input2 (output = 1 / Input1). Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToSin ()</tt> -  Set each pixel in the output image to the sine of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToCos ()</tt> -  Set each pixel in the output image to the cosine of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToExp ()</tt> -  Set each pixel in the output image to the exponential of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToLog ()</tt> -  Set each pixel in the output image to the log of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToAbsoluteValue ()</tt> -  Set each pixel in the output image to the absolute value of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToSquare ()</tt> -  Set each pixel in the output image to the square of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToSquareRoot ()</tt> -  Set each pixel in the output image to the square root of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToMin ()</tt> -  Set each pixel in the output image to the minimum of the corresponding pixels
 in Input1 and Input2. (Output = min(Input1, Input2))
 </LI>
<LI>  <tt>obj.SetOperationToMax ()</tt> -  Set each pixel in the output image to the maximum of the corresponding pixels
 in Input1 and Input2. (Output = max(Input1, Input2))
 </LI>
<LI>  <tt>obj.SetOperationToATAN ()</tt> -  Set each pixel in the output image to the arctangent of the corresponding pixel
 in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToATAN2 ()</tt>
 </LI>
<LI>  <tt>obj.SetOperationToMultiplyByK ()</tt> -  Set each pixel in the output image to the product of ConstantK with the
 corresponding pixel in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToAddConstant ()</tt> -  Set each pixel in the output image to the product of ConstantC with the
 corresponding pixel in Input1. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetOperationToReplaceCByK ()</tt> -  Find every pixel in Input1 that equals ConstantC and set the corresponding pixels
 in the Output to ConstantK. Input2 is not used.
 </LI>
<LI>  <tt>obj.SetConstantK (double )</tt> -  A constant used by some operations (typically multiplicative). Default is 1.
 </LI>
<LI>  <tt>double = obj.GetConstantK ()</tt> -  A constant used by some operations (typically multiplicative). Default is 1.
 </LI>
<LI>  <tt>obj.SetConstantC (double )</tt> -  A constant used by some operations (typically additive). Default is 0.
 </LI>
<LI>  <tt>double = obj.GetConstantC ()</tt> -  A constant used by some operations (typically additive). Default is 0.
 </LI>
<LI>  <tt>obj.SetDivideByZeroToC (int )</tt> -  How to handle divide by zero. Default is 0.
 </LI>
<LI>  <tt>int = obj.GetDivideByZeroToC ()</tt> -  How to handle divide by zero. Default is 0.
 </LI>
<LI>  <tt>obj.DivideByZeroToCOn ()</tt> -  How to handle divide by zero. Default is 0.
 </LI>
<LI>  <tt>obj.DivideByZeroToCOff ()</tt> -  How to handle divide by zero. Default is 0.
 </LI>
<LI>  <tt>obj.SetInput1 (vtkDataObject in)</tt> -  Set the two inputs to this filter. For some operations, the second input
 is not used.
 </LI>
<LI>  <tt>obj.SetInput2 (vtkDataObject in)</tt>
 </LI>
</UL>
*/
