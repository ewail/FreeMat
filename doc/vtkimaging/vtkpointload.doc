/*!
\page vtkimaging_vtkpointload vtkPointLoad

<p>
Section: \ref sec_vtkimaging "Visualization Toolkit Imaging Classes"
\section Usage
 vtkPointLoad is a source object that computes stress tensors on a volume. 
 The tensors are computed from the application of a point load on a 
 semi-infinite domain. (The analytical results are adapted from Saada - see 
 text.) It also is possible to compute effective stress scalars if desired.
 This object serves as a specialized data generator for some of the examples
 in the text.

To create an instance of class vtkPointLoad, simply
invoke its constructor as follows
\verbatim
  obj = vtkPointLoad
\endverbatim
\section Methods
The class vtkPointLoad has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkPointLoad class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkPointLoad = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkPointLoad = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetLoadValue (double )</tt> -  Set/Get value of applied load.
 </LI>
<LI>  <tt>double = obj.GetLoadValue ()</tt> -  Set/Get value of applied load.
 </LI>
<LI>  <tt>obj.SetSampleDimensions (int i, int j, int k)</tt> -  Specify the dimensions of the volume. A stress tensor will be computed for
 each point in the volume.
 </LI>
<LI>  <tt>obj.SetSampleDimensions (int dim[3])</tt> -  Specify the dimensions of the volume. A stress tensor will be computed for
 each point in the volume.
 </LI>
<LI>  <tt>int = obj. GetSampleDimensions ()</tt> -  Specify the dimensions of the volume. A stress tensor will be computed for
 each point in the volume.
 </LI>
<LI>  <tt>obj.SetModelBounds (double , double , double , double , double , double )</tt> -  Specify the region in space over which the tensors are computed. The point
 load is assumed to be applied at top center of the volume.
 </LI>
<LI>  <tt>obj.SetModelBounds (double  a[6])</tt> -  Specify the region in space over which the tensors are computed. The point
 load is assumed to be applied at top center of the volume.
 </LI>
<LI>  <tt>double = obj. GetModelBounds ()</tt> -  Specify the region in space over which the tensors are computed. The point
 load is assumed to be applied at top center of the volume.
 </LI>
<LI>  <tt>obj.SetPoissonsRatio (double )</tt> -  Set/Get Poisson's ratio.
 </LI>
<LI>  <tt>double = obj.GetPoissonsRatio ()</tt> -  Set/Get Poisson's ratio.
 </LI>
<LI>  <tt>obj.SetComputeEffectiveStress (int )</tt> -  Turn on/off computation of effective stress scalar. These methods do 
 nothing. The effective stress is always computed.
 </LI>
<LI>  <tt>int = obj.GetComputeEffectiveStress ()</tt> -  Turn on/off computation of effective stress scalar. These methods do 
 nothing. The effective stress is always computed.
 </LI>
<LI>  <tt>obj.ComputeEffectiveStressOn ()</tt> -  Turn on/off computation of effective stress scalar. These methods do 
 nothing. The effective stress is always computed.
 </LI>
<LI>  <tt>obj.ComputeEffectiveStressOff ()</tt> -  Turn on/off computation of effective stress scalar. These methods do 
 nothing. The effective stress is always computed.
 </LI>
</UL>
*/
