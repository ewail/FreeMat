/*!
\page vtkimaging_vtkimagegaussiansmooth vtkImageGaussianSmooth

<p>
Section: \ref sec_vtkimaging "Visualization Toolkit Imaging Classes"
\section Usage
 vtkImageGaussianSmooth implements a convolution of the input image
 with a gaussian. Supports from one to three dimensional convolutions.

To create an instance of class vtkImageGaussianSmooth, simply
invoke its constructor as follows
\verbatim
  obj = vtkImageGaussianSmooth
\endverbatim
\section Methods
The class vtkImageGaussianSmooth has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkImageGaussianSmooth class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkImageGaussianSmooth = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkImageGaussianSmooth = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetStandardDeviations (double , double , double )</tt> -  Sets/Gets the Standard deviation of the gaussian in pixel units.
 </LI>
<LI>  <tt>obj.SetStandardDeviations (double  a[3])</tt> -  Sets/Gets the Standard deviation of the gaussian in pixel units.
 </LI>
<LI>  <tt>obj.SetStandardDeviation (double std)</tt> -  Sets/Gets the Standard deviation of the gaussian in pixel units.
 </LI>
<LI>  <tt>obj.SetStandardDeviations (double a, double b)</tt> -  Sets/Gets the Standard deviation of the gaussian in pixel units.
 </LI>
<LI>  <tt>double = obj. GetStandardDeviations ()</tt> -  Sets/Gets the Standard deviation of the gaussian in pixel units.
 </LI>
<LI>  <tt>obj.SetStandardDeviation (double a, double b)</tt> -  Sets/Gets the Standard deviation of the gaussian in pixel units.
 These methods are provided for compatibility with old scripts
 </LI>
<LI>  <tt>obj.SetStandardDeviation (double a, double b, double c)</tt> -  Sets/Gets the Radius Factors of the gaussian (no unit).
 The radius factors determine how far out the gaussian kernel will 
 go before being clamped to zero.
 </LI>
<LI>  <tt>obj.SetRadiusFactors (double , double , double )</tt> -  Sets/Gets the Radius Factors of the gaussian (no unit).
 The radius factors determine how far out the gaussian kernel will 
 go before being clamped to zero.
 </LI>
<LI>  <tt>obj.SetRadiusFactors (double  a[3])</tt> -  Sets/Gets the Radius Factors of the gaussian (no unit).
 The radius factors determine how far out the gaussian kernel will 
 go before being clamped to zero.
 </LI>
<LI>  <tt>obj.SetRadiusFactors (double f, double f2)</tt> -  Sets/Gets the Radius Factors of the gaussian (no unit).
 The radius factors determine how far out the gaussian kernel will 
 go before being clamped to zero.
 </LI>
<LI>  <tt>obj.SetRadiusFactor (double f)</tt> -  Sets/Gets the Radius Factors of the gaussian (no unit).
 The radius factors determine how far out the gaussian kernel will 
 go before being clamped to zero.
 </LI>
<LI>  <tt>double = obj. GetRadiusFactors ()</tt> -  Sets/Gets the Radius Factors of the gaussian (no unit).
 The radius factors determine how far out the gaussian kernel will 
 go before being clamped to zero.
 </LI>
<LI>  <tt>obj.SetDimensionality (int )</tt> -  Set/Get the dimensionality of this filter. This determines whether
 a one, two, or three dimensional gaussian is performed.
 </LI>
<LI>  <tt>int = obj.GetDimensionality ()</tt> -  Set/Get the dimensionality of this filter. This determines whether
 a one, two, or three dimensional gaussian is performed.
 </LI>
</UL>
*/
