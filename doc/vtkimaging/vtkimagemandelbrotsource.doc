/*!
\page vtkimaging_vtkimagemandelbrotsource vtkImageMandelbrotSource

<p>
Section: \ref sec_vtkimaging "Visualization Toolkit Imaging Classes"
\section Usage
 vtkImageMandelbrotSource creates an unsigned char image of the Mandelbrot
 set.  The values in the image are the number of iterations it takes for
 the magnitude of the value to get over 2.  The equation repeated is
 z = z^2 + C (z and C are complex).  Initial value of z is zero, and the 
 real value of C is mapped onto the x axis, and the imaginary value of C
 is mapped onto the Y Axis.  I was thinking of extending this source
 to generate Julia Sets (initial value of Z varies).  This would be 4
 possible parameters to vary, but there are no more 4d images :(
 The third dimension (z axis) is the imaginary value of the initial value.

To create an instance of class vtkImageMandelbrotSource, simply
invoke its constructor as follows
\verbatim
  obj = vtkImageMandelbrotSource
\endverbatim
\section Methods
The class vtkImageMandelbrotSource has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkImageMandelbrotSource class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkImageMandelbrotSource = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkImageMandelbrotSource = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetWholeExtent (int extent[6])</tt> -  Set/Get the extent of the whole output Volume.
 </LI>
<LI>  <tt>obj.SetWholeExtent (int minX, int maxX, int minY, int maxY, int minZ, int maxZ)</tt> -  Set/Get the extent of the whole output Volume.
 </LI>
<LI>  <tt>int = obj. GetWholeExtent ()</tt> -  Set/Get the extent of the whole output Volume.
 </LI>
<LI>  <tt>obj.SetConstantSize (int )</tt> -  This flag determines whether the Size or spacing of 
 a data set remain constant (when extent is changed).  
 By default, size remains constant.
 </LI>
<LI>  <tt>int = obj.GetConstantSize ()</tt> -  This flag determines whether the Size or spacing of 
 a data set remain constant (when extent is changed).  
 By default, size remains constant.
 </LI>
<LI>  <tt>obj.ConstantSizeOn ()</tt> -  This flag determines whether the Size or spacing of 
 a data set remain constant (when extent is changed).  
 By default, size remains constant.
 </LI>
<LI>  <tt>obj.ConstantSizeOff ()</tt> -  This flag determines whether the Size or spacing of 
 a data set remain constant (when extent is changed).  
 By default, size remains constant.
 </LI>
<LI>  <tt>obj.SetProjectionAxes (int x, int y, int z)</tt> -  Set the projection from  the 4D space (4 parameters / 2 imaginary numbers)
 to the axes of the 3D Volume. 
 0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary
 </LI>
<LI>  <tt>obj.SetProjectionAxes (int a[3])</tt> -  Set the projection from  the 4D space (4 parameters / 2 imaginary numbers)
 to the axes of the 3D Volume. 
 0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary
 </LI>
<LI>  <tt>int = obj. GetProjectionAxes ()</tt> -  Set the projection from  the 4D space (4 parameters / 2 imaginary numbers)
 to the axes of the 3D Volume. 
 0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary
 </LI>
<LI>  <tt>obj.SetOriginCX (double , double , double , double )</tt> -  Imaginary and real value for C (constant in equation) 
 and X (initial value).
 </LI>
<LI>  <tt>obj.SetOriginCX (double  a[4])</tt> -  Imaginary and real value for C (constant in equation) 
 and X (initial value).
 </LI>
<LI>  <tt>double = obj. GetOriginCX ()</tt> -  Imaginary and real value for C (constant in equation) 
 and X (initial value).
void SetOriginCX(double cReal, double cImag, double xReal, double xImag);
 </LI>
<LI>  <tt>obj.SetSampleCX (double , double , double , double )</tt> -  Imaginary and real value for C (constant in equation) 
 and X (initial value).
 </LI>
<LI>  <tt>obj.SetSampleCX (double  a[4])</tt> -  Imaginary and real value for C (constant in equation) 
 and X (initial value).
 </LI>
<LI>  <tt>double = obj. GetSampleCX ()</tt> -  Imaginary and real value for C (constant in equation) 
 and X (initial value).
void SetOriginCX(double cReal, double cImag, double xReal, double xImag);
 </LI>
<LI>  <tt>obj.SetSizeCX (double cReal, double cImag, double xReal, double xImag)</tt> -  Just a different way of setting the sample.  
 This sets the size of the 4D volume. 
 SampleCX is computed from size and extent.
 Size is ignored when a dimension i 0 (collapsed).
 </LI>
<LI>  <tt>double = obj.GetSizeCX ()</tt> -  Just a different way of setting the sample.  
 This sets the size of the 4D volume. 
 SampleCX is computed from size and extent.
 Size is ignored when a dimension i 0 (collapsed).
 </LI>
<LI>  <tt>obj.GetSizeCX (double s[4])</tt> -  Just a different way of setting the sample.  
 This sets the size of the 4D volume. 
 SampleCX is computed from size and extent.
 Size is ignored when a dimension i 0 (collapsed).
 </LI>
<LI>  <tt>obj.SetMaximumNumberOfIterations (short )</tt> -  The maximum number of cycles run to see if the value goes over 2
 </LI>
<LI>  <tt>GetMaximumNumberOfIterationsMinValue = obj.()</tt> -  The maximum number of cycles run to see if the value goes over 2
 </LI>
<LI>  <tt>GetMaximumNumberOfIterationsMaxValue = obj.()</tt> -  The maximum number of cycles run to see if the value goes over 2
 </LI>
<LI>  <tt>short = obj.GetMaximumNumberOfIterations ()</tt> -  The maximum number of cycles run to see if the value goes over 2
 </LI>
<LI>  <tt>obj.Zoom (double factor)</tt> -  Convienence for Viewer.  Pan 3D volume relative to spacing. 
 Zoom constant factor.
 </LI>
<LI>  <tt>obj.Pan (double x, double y, double z)</tt> -  Convienence for Viewer.  Pan 3D volume relative to spacing. 
 Zoom constant factor.
 </LI>
<LI>  <tt>obj.CopyOriginAndSample (vtkImageMandelbrotSource source)</tt> -  Convienence for Viewer.  Copy the OriginCX and the SpacingCX.
 What about other parameters ???
 </LI>
<LI>  <tt>obj.SetSubsampleRate (int )</tt> -  Set/Get a subsample rate.
 </LI>
<LI>  <tt>int = obj.GetSubsampleRateMinValue ()</tt> -  Set/Get a subsample rate.
 </LI>
<LI>  <tt>int = obj.GetSubsampleRateMaxValue ()</tt> -  Set/Get a subsample rate.
 </LI>
<LI>  <tt>int = obj.GetSubsampleRate ()</tt> -  Set/Get a subsample rate.
 </LI>
</UL>
*/
