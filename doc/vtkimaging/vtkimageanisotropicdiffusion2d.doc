/*!
\page vtkimaging_vtkimageanisotropicdiffusion2d vtkImageAnisotropicDiffusion2D

<p>
Section: \ref sec_vtkimaging "Visualization Toolkit Imaging Classes"
\section Usage
 vtkImageAnisotropicDiffusion2D  diffuses a 2d image iteratively.
 The neighborhood of the diffusion is determined by the instance
 flags. If "Edges" is on the 4 edge connected voxels
 are included, and if "Corners" is on, the 4 corner connected voxels
 are included.  "DiffusionFactor" determines how far a pixel value
 moves toward its neighbors, and is insensitive to the number of 
 neighbors chosen.  The diffusion is anisotropic because it only occurs
 when a gradient measure is below "GradientThreshold".  Two gradient measures
 exist and are toggled by the "GradientMagnitudeThreshold" flag.
 When "GradientMagnitudeThreshold" is on, the magnitude of the gradient,
 computed by central differences, above "DiffusionThreshold"
 a voxel is not modified.  The alternative measure examines each
 neighbor independently.  The gradient between the voxel and the neighbor
 must be below the "DiffusionThreshold" for diffusion to occur with
 THAT neighbor.

To create an instance of class vtkImageAnisotropicDiffusion2D, simply
invoke its constructor as follows
\verbatim
  obj = vtkImageAnisotropicDiffusion2D
\endverbatim
\section Methods
The class vtkImageAnisotropicDiffusion2D has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkImageAnisotropicDiffusion2D class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkImageAnisotropicDiffusion2D = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkImageAnisotropicDiffusion2D = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetNumberOfIterations (int num)</tt> -  This method sets the number of interations which also affects the
 input neighborhood needed to compute one output pixel.  Each iterations
 requires an extra pixel layer on the neighborhood.  This is only relavent
 when you are trying to stream or are requesting a sub extent of the "wholeExtent".
 </LI>
<LI>  <tt>int = obj.GetNumberOfIterations ()</tt> -  Get the number of iterations.
 </LI>
<LI>  <tt>obj.SetDiffusionThreshold (double )</tt> -  Set/Get the difference threshold that stops diffusion. 
 when the difference between two pixel is greater than this threshold,
 the pixels are not diffused.  This causes diffusion to avoid sharp edges.
 If the GradientMagnitudeThreshold is set, then gradient magnitude is used 
 for comparison instead of pixel differences.
 </LI>
<LI>  <tt>double = obj.GetDiffusionThreshold ()</tt> -  Set/Get the difference threshold that stops diffusion. 
 when the difference between two pixel is greater than this threshold,
 the pixels are not diffused.  This causes diffusion to avoid sharp edges.
 If the GradientMagnitudeThreshold is set, then gradient magnitude is used 
 for comparison instead of pixel differences.
 </LI>
<LI>  <tt>obj.SetDiffusionFactor (double )</tt> -  The diffusion factor specifies  how much neighboring pixels effect each other.
 No diffusion occurs with a factor of 0, and a diffusion factor of 1 causes
 the pixel to become the average of all its neighbors.
 </LI>
<LI>  <tt>double = obj.GetDiffusionFactor ()</tt> -  The diffusion factor specifies  how much neighboring pixels effect each other.
 No diffusion occurs with a factor of 0, and a diffusion factor of 1 causes
 the pixel to become the average of all its neighbors.
 </LI>
<LI>  <tt>obj.SetFaces (int )</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>int = obj.GetFaces ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.FacesOn ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.FacesOff ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.SetEdges (int )</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>int = obj.GetEdges ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.EdgesOn ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.EdgesOff ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.SetCorners (int )</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>int = obj.GetCorners ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.CornersOn ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.CornersOff ()</tt> -  Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
 </LI>
<LI>  <tt>obj.SetGradientMagnitudeThreshold (int )</tt> -  Switch between gradient magnitude threshold and pixel gradient threshold.
 </LI>
<LI>  <tt>int = obj.GetGradientMagnitudeThreshold ()</tt> -  Switch between gradient magnitude threshold and pixel gradient threshold.
 </LI>
<LI>  <tt>obj.GradientMagnitudeThresholdOn ()</tt> -  Switch between gradient magnitude threshold and pixel gradient threshold.
 </LI>
<LI>  <tt>obj.GradientMagnitudeThresholdOff ()</tt> -  Switch between gradient magnitude threshold and pixel gradient threshold.
 </LI>
</UL>
*/
