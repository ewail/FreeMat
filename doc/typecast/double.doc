/*!
\page typecast_double DOUBLE Convert to 64-bit Floating Point

<p>
Section: \ref sec_typecast "Type Conversion Functions"
\section Usage
Converts the argument to a 64-bit floating point number.  The syntax
for its use is
\verbatim
   y = double(x)
\endverbatim
where <tt>x</tt> is an <tt>n</tt>-dimensional numerical array.  Conversion follows the 
saturation rules.  Note that both <tt>NaN</tt> and <tt>Inf</tt> are both preserved under type conversion.
\section Example
The following piece of code demonstrates several uses of <tt>double</tt>.  First, 
we convert from an integer (the argument is an integer because no decimal is present):

\if FRAGMENT
frag_typecast_double_000.m
0
double(200)
\endif


\verbinclude frag_typecast_double_000.m.out 

In the next example, a single precision argument is passed in (the presence of 
the <tt>f</tt> suffix implies single precision).

\if FRAGMENT
frag_typecast_double_001.m
0
double(400.0f)
\endif


\verbinclude frag_typecast_double_001.m.out 

In the next example, a complex argument is passed in.

\if FRAGMENT
frag_typecast_double_002.m
0
double(3.0+4.0*i)
\endif


\verbinclude frag_typecast_double_002.m.out 

In the next example, a string argument is passed in.  The string argument 
is converted into an integer array corresponding to the ASCII values of each character.

\if FRAGMENT
frag_typecast_double_003.m
0
double('helo')
\endif


\verbinclude frag_typecast_double_003.m.out 

In the last example, a cell-array is passed in.  For cell-arrays 
and structure arrays, the result is an error.

\if FRAGMENT
frag_typecast_double_004.m
1
double({4})
\endif


\verbinclude frag_typecast_double_004.m.out 

*/
