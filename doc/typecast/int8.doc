/*!
\page typecast_int8 INT8 Convert to Signed 8-bit Integer

<p>
Section: \ref sec_typecast "Type Conversion Functions"
\section Usage
Converts the argument to an signed 8-bit Integer.  The syntax
for its use is
\verbatim
   y = int8(x)
\endverbatim
where <tt>x</tt> is an <tt>n</tt>-dimensional numerical array.  Conversion
follows the saturation rules (e.g., if <tt>x</tt> is outside the normal
range for a signed 8-bit integer of <tt>[-127,127]</tt>, it is truncated to that
range.  Note that
both <tt>NaN</tt> and <tt>Inf</tt> both map to 0.
\section Example
The following piece of code demonstrates several uses of <tt>int8</tt>.  First, the routine uses

\if FRAGMENT
frag_typecast_int8_000.m
0
int8(100)
int8(-100)
\endif


\verbinclude frag_typecast_int8_000.m.out 

In the next example, an integer outside the range  of the type is passed in.  
The result is truncated to the range of the type.

\if FRAGMENT
frag_typecast_int8_001.m
0
int8(400)
\endif


\verbinclude frag_typecast_int8_001.m.out 

In the next example, a positive double precision argument is passed in.  
The result is the signed integer that is closest to the argument.

\if FRAGMENT
frag_typecast_int8_002.m
0
int8(pi)
\endif


\verbinclude frag_typecast_int8_002.m.out 

In the next example, a complex argument is passed in.  The result is the 
signed complex integer that is closest to the argument.

\if FRAGMENT
frag_typecast_int8_003.m
0
int8(5+2*i)
\endif


\verbinclude frag_typecast_int8_003.m.out 

In the next example, a string argument is passed in.  The string argument 
is converted into an integer array corresponding to the ASCII values of each character.

\if FRAGMENT
frag_typecast_int8_004.m
0
int8('helo')
\endif


\verbinclude frag_typecast_int8_004.m.out 

In the last example, a cell-array is passed in.  For cell-arrays and 
structure arrays, the result is an error.

\if FRAGMENT
frag_typecast_int8_005.m
1
int8({4})
\endif


\verbinclude frag_typecast_int8_005.m.out 

*/
