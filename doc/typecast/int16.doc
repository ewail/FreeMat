/*!
\page typecast_int16 INT16 Convert to Signed 16-bit Integer

<p>
Section: \ref sec_typecast "Type Conversion Functions"
\section Usage
Converts the argument to an signed 16-bit Integer.  The syntax
for its use is
\verbatim
   y = int16(x)
\endverbatim
where <tt>x</tt> is an <tt>n</tt>-dimensional numerical array.  Conversion
follows the saturation rules (e.g., if <tt>x</tt> is outside the normal
range for a signed 16-bit integer of <tt>[-32767,32767]</tt>, it is truncated
to that range).  Note that both <tt>NaN</tt> and <tt>Inf</tt> both map to 0.
\section Example
The following piece of code demonstrates several uses of <tt>int16</tt>.  First, the routine uses

\if FRAGMENT
frag_typecast_int16_000.m
0
int16(100)
int16(-100)
\endif


\verbinclude frag_typecast_int16_000.m.out 

In the next example, an integer outside the range  of the type is passed in.  
The result is truncated to the range of the data type.

\if FRAGMENT
frag_typecast_int16_001.m
0
int16(40000)
\endif


\verbinclude frag_typecast_int16_001.m.out 

In the next example, a positive double precision argument is passed in.  
The result is the signed integer that is closest to the argument.

\if FRAGMENT
frag_typecast_int16_002.m
0
int16(pi)
\endif


\verbinclude frag_typecast_int16_002.m.out 

In the next example, a complex argument is passed in.  The result is the 
signed complex integer that is closest to the argument.

\if FRAGMENT
frag_typecast_int16_003.m
0
int16(5+2*i)
\endif


\verbinclude frag_typecast_int16_003.m.out 

In the next example, a string argument is passed in.  The string argument is 
converted into an integer array corresponding to the ASCII values of each character.

\if FRAGMENT
frag_typecast_int16_004.m
0
int16('helo')
\endif


\verbinclude frag_typecast_int16_004.m.out 

In the last example, a cell-array is passed in.  For cell-arrays and 
structure arrays, the result is an error.

\if FRAGMENT
frag_typecast_int16_005.m
1
int16({4})
\endif


\verbinclude frag_typecast_int16_005.m.out 

*/
