/*!
\page vtkviews_vtkparallelcoordinatesview vtkParallelCoordinatesView

<p>
Section: \ref sec_vtkviews "Visualization Toolkit View Classes"
\section Usage

 This class manages interaction with the vtkParallelCoordinatesRepresentation.  There are 
 two inspection modes: axis manipulation and line selection.  In axis manipulation mode,
 PC axes can be dragged and reordered with the LMB, axis ranges can be increased/decreased
 by dragging up/down with the LMB, and RMB controls zoom and pan.  
 
 In line selection mode, there are three subclasses of selections: lasso, angle, and 
 function selection.  Lasso selection lets the user brush a line and select all PC lines 
 that pass nearby.  Angle selection lets the user draw a representative line between axes 
 and select all lines that have similar orientation.  Function selection lets the user 
 draw two  representative lines between a pair of axes and select all lines that match
 the linear interpolation of those lines.  

 There are several self-explanatory operators for combining selections: ADD, SUBTRACT
 REPLACE, and INTERSECT.  

To create an instance of class vtkParallelCoordinatesView, simply
invoke its constructor as follows
\verbatim
  obj = vtkParallelCoordinatesView
\endverbatim
\section Methods
The class vtkParallelCoordinatesView has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkParallelCoordinatesView class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkParallelCoordinatesView = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkParallelCoordinatesView = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetBrushMode (int )</tt>
 </LI>
<LI>  <tt>obj.SetBrushModeToLasso ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushModeToAngle ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushModeToFunction ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushModeToAxisThreshold ()</tt>
 </LI>
<LI>  <tt>int = obj.GetBrushMode ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushOperator (int )</tt>
 </LI>
<LI>  <tt>obj.SetBrushOperatorToAdd ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushOperatorToSubtract ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushOperatorToIntersect ()</tt>
 </LI>
<LI>  <tt>obj.SetBrushOperatorToReplace ()</tt>
 </LI>
<LI>  <tt>int = obj.GetBrushOperator ()</tt>
 </LI>
<LI>  <tt>obj.SetInspectMode (int )</tt>
 </LI>
<LI>  <tt>obj.SetInspectModeToManipulateAxes ()</tt>
 </LI>
<LI>  <tt>obj.SetInpsectModeToSelectData ()</tt>
 </LI>
<LI>  <tt>int = obj.GetInspectMode ()</tt>
 </LI>
<LI>  <tt>obj.SetMaximumNumberOfBrushPoints (int )</tt>
 </LI>
<LI>  <tt>int = obj.GetMaximumNumberOfBrushPoints ()</tt>
 </LI>
<LI>  <tt>obj.SetCurrentBrushClass (int )</tt>
 </LI>
<LI>  <tt>int = obj.GetCurrentBrushClass ()</tt>
 </LI>
<LI>  <tt>obj.ApplyViewTheme (vtkViewTheme theme)</tt>
 </LI>
</UL>
*/
