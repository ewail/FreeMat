/*!
\page vtkgeovis_vtkgeosamplearcs vtkGeoSampleArcs

<p>
Section: \ref sec_vtkgeovis "Visualization Toolkit Geo Vis Classes"
\section Usage
 vtkGeoSampleArcs refines lines in the input polygonal data
 so that the distance between adjacent points is no more than a threshold
 distance. Points are interpolated along the surface of the globe.
 This is useful in order to keep lines such as political boundaries from
 intersecting the globe and becoming invisible.

To create an instance of class vtkGeoSampleArcs, simply
invoke its constructor as follows
\verbatim
  obj = vtkGeoSampleArcs
\endverbatim
\section Methods
The class vtkGeoSampleArcs has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkGeoSampleArcs class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkGeoSampleArcs = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkGeoSampleArcs = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.SetGlobeRadius (double )</tt> -  The base radius used to determine the earth's surface.
 Default is the earth's radius in meters.
 TODO: Change this to take in a vtkGeoTerrain to get altitude.
 </LI>
<LI>  <tt>double = obj.GetGlobeRadius ()</tt> -  The base radius used to determine the earth's surface.
 Default is the earth's radius in meters.
 TODO: Change this to take in a vtkGeoTerrain to get altitude.
 </LI>
<LI>  <tt>obj.SetMaximumDistanceMeters (double )</tt> -  The maximum distance, in meters, between adjacent points.
 </LI>
<LI>  <tt>double = obj.GetMaximumDistanceMeters ()</tt> -  The maximum distance, in meters, between adjacent points.
 </LI>
<LI>  <tt>obj.SetInputCoordinateSystem (int )</tt> -  The input coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>int = obj.GetInputCoordinateSystem ()</tt> -  The input coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>obj.SetInputCoordinateSystemToRectangular ()</tt> -  The input coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>obj.SetInputCoordinateSystemToSpherical ()</tt> -  The desired output coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>obj.SetOutputCoordinateSystem (int )</tt> -  The desired output coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>int = obj.GetOutputCoordinateSystem ()</tt> -  The desired output coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>obj.SetOutputCoordinateSystemToRectangular ()</tt> -  The desired output coordinate system.
 RECTANGULAR is x,y,z meters relative the the earth center.
 SPHERICAL is longitude,latitude,altitude.
 </LI>
<LI>  <tt>obj.SetOutputCoordinateSystemToSpherical ()</tt>
 </LI>
</UL>
*/
