/*!
\page vtkgeovis_vtkgeospheretransform vtkGeoSphereTransform

<p>
Section: \ref sec_vtkgeovis "Visualization Toolkit Geo Vis Classes"
\section Usage
 the cartesian coordinate system is the following (if BaseAltitude is 0),
 - the origin is at the center of the earth
 - the x axis goes from the origin to (longtitude=-90,latitude=0), intersection of equator and the meridian passing just east of Galapagos Islands
 - the y axis goes from the origin to the intersection of Greenwitch meridian and equator (longitude=0,latitude=0)
 - the z axis goes from the origin to the Geographic North Pole (latitude=90)
 - therefore the frame is right-handed.

To create an instance of class vtkGeoSphereTransform, simply
invoke its constructor as follows
\verbatim
  obj = vtkGeoSphereTransform
\endverbatim
\section Methods
The class vtkGeoSphereTransform has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkGeoSphereTransform class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt>
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt>
 </LI>
<LI>  <tt>vtkGeoSphereTransform = obj.NewInstance ()</tt>
 </LI>
<LI>  <tt>vtkGeoSphereTransform = obj.SafeDownCast (vtkObject o)</tt>
 </LI>
<LI>  <tt>obj.Inverse ()</tt> -  Invert the transformation.
 </LI>
<LI>  <tt>obj.InternalTransformPoint (float in[3], float out[3])</tt> -  This will calculate the transformation without calling Update.
 Meant for use only within other VTK classes.
 </LI>
<LI>  <tt>obj.InternalTransformPoint (double in[3], double out[3])</tt> -  This will calculate the transformation without calling Update.
 Meant for use only within other VTK classes.
 </LI>
<LI>  <tt>vtkAbstractTransform = obj.MakeTransform ()</tt> -  Make another transform of the same type.
 </LI>
<LI>  <tt>obj.SetToRectangular (bool )</tt> -  If on, this transform converts (long,lat,alt) triples to (x,y,z) as an offset
 from the center of the earth. Alt, x, y, and z are all be in meters.
 If off, the tranform works in the reverse direction.
 Initial value is on.
 </LI>
<LI>  <tt>bool = obj.GetToRectangular ()</tt> -  If on, this transform converts (long,lat,alt) triples to (x,y,z) as an offset
 from the center of the earth. Alt, x, y, and z are all be in meters.
 If off, the tranform works in the reverse direction.
 Initial value is on.
 </LI>
<LI>  <tt>obj.ToRectangularOn ()</tt> -  If on, this transform converts (long,lat,alt) triples to (x,y,z) as an offset
 from the center of the earth. Alt, x, y, and z are all be in meters.
 If off, the tranform works in the reverse direction.
 Initial value is on.
 </LI>
<LI>  <tt>obj.ToRectangularOff ()</tt> -  If on, this transform converts (long,lat,alt) triples to (x,y,z) as an offset
 from the center of the earth. Alt, x, y, and z are all be in meters.
 If off, the tranform works in the reverse direction.
 Initial value is on.
 </LI>
<LI>  <tt>obj.SetBaseAltitude (double )</tt> -  The base altitude to transform coordinates to. This can be useful for transforming
 lines just above the earth's surface. Default is 0.
 </LI>
<LI>  <tt>double = obj.GetBaseAltitude ()</tt> -  The base altitude to transform coordinates to. This can be useful for transforming
 lines just above the earth's surface. Default is 0.
 </LI>
</UL>
*/
