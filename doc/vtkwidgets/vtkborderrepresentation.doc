/*!
\page vtkwidgets_vtkborderrepresentation vtkBorderRepresentation

<p>
Section: \ref sec_vtkwidgets "Visualization Toolkit Widget Classes"
\section Usage
 This class is used to represent and render a vtBorderWidget. To
 use this class, you need to specify the two corners of a rectangular
 region.

 The class is typically subclassed so that specialized representations can
 be created.  The class defines an API and a default implementation that
 the vtkBorderRepresentation interacts with to render itself in the scene.

To create an instance of class vtkBorderRepresentation, simply
invoke its constructor as follows
\verbatim
  obj = vtkBorderRepresentation
\endverbatim
\section Methods
The class vtkBorderRepresentation has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkBorderRepresentation class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Define standard methods.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Define standard methods.
 </LI>
<LI>  <tt>vtkBorderRepresentation = obj.NewInstance ()</tt> -  Define standard methods.
 </LI>
<LI>  <tt>vtkBorderRepresentation = obj.SafeDownCast (vtkObject o)</tt> -  Define standard methods.
 </LI>
<LI>  <tt>vtkCoordinate = obj.GetPositionCoordinate ()</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>obj.SetPosition (double, double)</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>obj.SetPosition (double a[2])</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>double = obj.GetPosition ()</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>vtkCoordinate = obj.GetPosition2Coordinate ()</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>obj.SetPosition2 (double, double)</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>obj.SetPosition2 (double a[2])</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>double = obj.GetPosition2 ()</tt> -  Specify opposite corners of the box defining the boundary of the
 widget. By default, these coordinates are in the normalized viewport
 coordinate system, with Position the lower left of the outline, and
 Position2 relative to Position. Note that using these methods are
 affected by the ProportionalResize flag. That is, if the aspect ratio of
 the representation is to be preserved (e.g., ProportionalResize is on),
 then the rectangle (Position,Position2) is a bounding rectangle. Also,
 </LI>
<LI>  <tt>obj.SetShowBorder (int )</tt> -  Specify when and if the border should appear. If ShowBorder is "on",
 then the border will always appear. If ShowBorder is "off" then the
 border will never appear.  If ShowBorder is "active" then the border
 will appear when the mouse pointer enters the region bounded by the
 border widget.
 </LI>
<LI>  <tt>int = obj.GetShowBorderMinValue ()</tt> -  Specify when and if the border should appear. If ShowBorder is "on",
 then the border will always appear. If ShowBorder is "off" then the
 border will never appear.  If ShowBorder is "active" then the border
 will appear when the mouse pointer enters the region bounded by the
 border widget.
 </LI>
<LI>  <tt>int = obj.GetShowBorderMaxValue ()</tt> -  Specify when and if the border should appear. If ShowBorder is "on",
 then the border will always appear. If ShowBorder is "off" then the
 border will never appear.  If ShowBorder is "active" then the border
 will appear when the mouse pointer enters the region bounded by the
 border widget.
 </LI>
<LI>  <tt>int = obj.GetShowBorder ()</tt> -  Specify when and if the border should appear. If ShowBorder is "on",
 then the border will always appear. If ShowBorder is "off" then the
 border will never appear.  If ShowBorder is "active" then the border
 will appear when the mouse pointer enters the region bounded by the
 border widget.
 </LI>
<LI>  <tt>obj.SetShowBorderToOff ()</tt> -  Specify when and if the border should appear. If ShowBorder is "on",
 then the border will always appear. If ShowBorder is "off" then the
 border will never appear.  If ShowBorder is "active" then the border
 will appear when the mouse pointer enters the region bounded by the
 border widget.
 </LI>
<LI>  <tt>obj.SetShowBorderToOn ()</tt> -  Specify when and if the border should appear. If ShowBorder is "on",
 then the border will always appear. If ShowBorder is "off" then the
 border will never appear.  If ShowBorder is "active" then the border
 will appear when the mouse pointer enters the region bounded by the
 border widget.
 </LI>
<LI>  <tt>obj.SetShowBorderToActive ()</tt> -  Specify the properties of the border.
 </LI>
<LI>  <tt>vtkProperty2D = obj.GetBorderProperty ()</tt> -  Specify the properties of the border.
 </LI>
<LI>  <tt>obj.SetProportionalResize (int )</tt> -  Indicate whether resizing operations should keep the x-y directions
 proportional to one another. Also, if ProportionalResize is on, then
 the rectangle (Position,Position2) is a bounding rectangle, and the
 representation will be placed in the rectangle in such a way as to 
 preserve the aspect ratio of the representation.
 </LI>
<LI>  <tt>int = obj.GetProportionalResize ()</tt> -  Indicate whether resizing operations should keep the x-y directions
 proportional to one another. Also, if ProportionalResize is on, then
 the rectangle (Position,Position2) is a bounding rectangle, and the
 representation will be placed in the rectangle in such a way as to 
 preserve the aspect ratio of the representation.
 </LI>
<LI>  <tt>obj.ProportionalResizeOn ()</tt> -  Indicate whether resizing operations should keep the x-y directions
 proportional to one another. Also, if ProportionalResize is on, then
 the rectangle (Position,Position2) is a bounding rectangle, and the
 representation will be placed in the rectangle in such a way as to 
 preserve the aspect ratio of the representation.
 </LI>
<LI>  <tt>obj.ProportionalResizeOff ()</tt> -  Indicate whether resizing operations should keep the x-y directions
 proportional to one another. Also, if ProportionalResize is on, then
 the rectangle (Position,Position2) is a bounding rectangle, and the
 representation will be placed in the rectangle in such a way as to 
 preserve the aspect ratio of the representation.
 </LI>
<LI>  <tt>obj.SetMinimumSize (int , int )</tt> -  Specify a minimum and/or maximum size (in pixels) that this representation
 can take. These methods require two values: size values in the x and y
 directions, respectively.
 </LI>
<LI>  <tt>obj.SetMinimumSize (int  a[2])</tt> -  Specify a minimum and/or maximum size (in pixels) that this representation
 can take. These methods require two values: size values in the x and y
 directions, respectively.
 </LI>
<LI>  <tt>int = obj. GetMinimumSize ()</tt> -  Specify a minimum and/or maximum size (in pixels) that this representation
 can take. These methods require two values: size values in the x and y
 directions, respectively.
 </LI>
<LI>  <tt>obj.SetMaximumSize (int , int )</tt> -  Specify a minimum and/or maximum size (in pixels) that this representation
 can take. These methods require two values: size values in the x and y
 directions, respectively.
 </LI>
<LI>  <tt>obj.SetMaximumSize (int  a[2])</tt> -  Specify a minimum and/or maximum size (in pixels) that this representation
 can take. These methods require two values: size values in the x and y
 directions, respectively.
 </LI>
<LI>  <tt>int = obj. GetMaximumSize ()</tt> -  Specify a minimum and/or maximum size (in pixels) that this representation
 can take. These methods require two values: size values in the x and y
 directions, respectively.
 </LI>
<LI>  <tt>obj.SetTolerance (int )</tt> -  The tolerance representing the distance to the widget (in pixels)
 in which the cursor is considered to be on the widget, or on a
 widget feature (e.g., a corner point or edge).
 </LI>
<LI>  <tt>int = obj.GetToleranceMinValue ()</tt> -  The tolerance representing the distance to the widget (in pixels)
 in which the cursor is considered to be on the widget, or on a
 widget feature (e.g., a corner point or edge).
 </LI>
<LI>  <tt>int = obj.GetToleranceMaxValue ()</tt> -  The tolerance representing the distance to the widget (in pixels)
 in which the cursor is considered to be on the widget, or on a
 widget feature (e.g., a corner point or edge).
 </LI>
<LI>  <tt>int = obj.GetTolerance ()</tt> -  The tolerance representing the distance to the widget (in pixels)
 in which the cursor is considered to be on the widget, or on a
 widget feature (e.g., a corner point or edge).
 </LI>
<LI>  <tt>double = obj. GetSelectionPoint ()</tt> -  After a selection event within the region interior to the border; the
 normalized selection coordinates may be obtained.
 </LI>
<LI>  <tt>obj.SetMoving (int )</tt> -  This is a modifier of the interaction state. When set, widget interaction
 allows the border (and stuff inside of it) to be translated with mouse
 motion.
 </LI>
<LI>  <tt>int = obj.GetMoving ()</tt> -  This is a modifier of the interaction state. When set, widget interaction
 allows the border (and stuff inside of it) to be translated with mouse
 motion.
 </LI>
<LI>  <tt>obj.MovingOn ()</tt> -  This is a modifier of the interaction state. When set, widget interaction
 allows the border (and stuff inside of it) to be translated with mouse
 motion.
 </LI>
<LI>  <tt>obj.MovingOff ()</tt> -  This is a modifier of the interaction state. When set, widget interaction
 allows the border (and stuff inside of it) to be translated with mouse
 motion.
 </LI>
<LI>  <tt>obj.BuildRepresentation ()</tt> -  Subclasses should implement these methods. See the superclasses'
 documentation for more information.
 </LI>
<LI>  <tt>obj.StartWidgetInteraction (double eventPos[2])</tt> -  Subclasses should implement these methods. See the superclasses'
 documentation for more information.
 </LI>
<LI>  <tt>obj.WidgetInteraction (double eventPos[2])</tt> -  Subclasses should implement these methods. See the superclasses'
 documentation for more information.
 </LI>
<LI>  <tt>obj.GetSize (double size[2])</tt> -  Subclasses should implement these methods. See the superclasses'
 documentation for more information.
 </LI>
<LI>  <tt>int = obj.ComputeInteractionState (int X, int Y, int modify)</tt> -  Subclasses should implement these methods. See the superclasses'
 documentation for more information.
 </LI>
<LI>  <tt>obj.GetActors2D (vtkPropCollection )</tt> -  These methods are necessary to make this representation behave as
 a vtkProp.
 </LI>
<LI>  <tt>obj.ReleaseGraphicsResources (vtkWindow )</tt> -  These methods are necessary to make this representation behave as
 a vtkProp.
 </LI>
<LI>  <tt>int = obj.RenderOverlay (vtkViewport )</tt> -  These methods are necessary to make this representation behave as
 a vtkProp.
 </LI>
<LI>  <tt>int = obj.RenderOpaqueGeometry (vtkViewport )</tt> -  These methods are necessary to make this representation behave as
 a vtkProp.
 </LI>
<LI>  <tt>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport )</tt> -  These methods are necessary to make this representation behave as
 a vtkProp.
 </LI>
<LI>  <tt>int = obj.HasTranslucentPolygonalGeometry ()</tt> -  These methods are necessary to make this representation behave as
 a vtkProp.
 </LI>
</UL>
*/
