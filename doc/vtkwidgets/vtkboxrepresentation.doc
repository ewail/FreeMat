/*!
\page vtkwidgets_vtkboxrepresentation vtkBoxRepresentation

<p>
Section: \ref sec_vtkwidgets "Visualization Toolkit Widget Classes"
\section Usage
 This class is a concrete representation for the vtkBoxWidget2. It
 represents a box with seven handles: one on each of the six faces, plus a
 center handle. Through interaction with the widget, the box
 representation can be arbitrarily positioned in the 3D space.

 To use this representation, you normally use the PlaceWidget() method
 to position the widget at a specified region in space.


To create an instance of class vtkBoxRepresentation, simply
invoke its constructor as follows
\verbatim
  obj = vtkBoxRepresentation
\endverbatim
\section Methods
The class vtkBoxRepresentation has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkBoxRepresentation class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Standard methods for the class.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Standard methods for the class.
 </LI>
<LI>  <tt>vtkBoxRepresentation = obj.NewInstance ()</tt> -  Standard methods for the class.
 </LI>
<LI>  <tt>vtkBoxRepresentation = obj.SafeDownCast (vtkObject o)</tt> -  Standard methods for the class.
 </LI>
<LI>  <tt>obj.GetPlanes (vtkPlanes planes)</tt> -  Get the planes describing the implicit function defined by the box
 widget. The user must provide the instance of the class vtkPlanes. Note
 that vtkPlanes is a subclass of vtkImplicitFunction, meaning that it can
 be used by a variety of filters to perform clipping, cutting, and
 selection of data.  (The direction of the normals of the planes can be
 reversed enabling the InsideOut flag.)
 </LI>
<LI>  <tt>obj.SetInsideOut (int )</tt> -  Set/Get the InsideOut flag. This data memeber is used in conjunction
 with the GetPlanes() method. When off, the normals point out of the
 box. When on, the normals point into the hexahedron.  InsideOut is off
 by default.
 </LI>
<LI>  <tt>int = obj.GetInsideOut ()</tt> -  Set/Get the InsideOut flag. This data memeber is used in conjunction
 with the GetPlanes() method. When off, the normals point out of the
 box. When on, the normals point into the hexahedron.  InsideOut is off
 by default.
 </LI>
<LI>  <tt>obj.InsideOutOn ()</tt> -  Set/Get the InsideOut flag. This data memeber is used in conjunction
 with the GetPlanes() method. When off, the normals point out of the
 box. When on, the normals point into the hexahedron.  InsideOut is off
 by default.
 </LI>
<LI>  <tt>obj.InsideOutOff ()</tt> -  Set/Get the InsideOut flag. This data memeber is used in conjunction
 with the GetPlanes() method. When off, the normals point out of the
 box. When on, the normals point into the hexahedron.  InsideOut is off
 by default.
 </LI>
<LI>  <tt>obj.GetTransform (vtkTransform t)</tt> -  Retrieve a linear transform characterizing the transformation of the
 box. Note that the transformation is relative to where PlaceWidget()
 was initially called. This method modifies the transform provided. The
 transform can be used to control the position of vtkProp3D's, as well as
 other transformation operations (e.g., vtkTranformPolyData).
 </LI>
<LI>  <tt>obj.SetTransform (vtkTransform t)</tt> -  Set the position, scale and orientation of the box widget using the
 transform specified. Note that the transformation is relative to 
 where PlaceWidget() was initially called (i.e., the original bounding
 box). 
 </LI>
<LI>  <tt>obj.GetPolyData (vtkPolyData pd)</tt> -  Grab the polydata (including points) that define the box widget. The
 polydata consists of 6 quadrilateral faces and 15 points. The first
 eight points define the eight corner vertices; the next six define the
 -x,+x, -y,+y, -z,+z face points; and the final point (the 15th out of 15
 points) defines the center of the box. These point values are guaranteed
 to be up-to-date when either the widget's corresponding InteractionEvent
 or EndInteractionEvent events are invoked. The user provides the
 vtkPolyData and the points and cells are added to it.
 </LI>
<LI>  <tt>vtkProperty = obj.GetHandleProperty ()</tt> -  Get the handle properties (the little balls are the handles). The 
 properties of the handles, when selected or normal, can be 
 specified.
 </LI>
<LI>  <tt>vtkProperty = obj.GetSelectedHandleProperty ()</tt> -  Get the handle properties (the little balls are the handles). The 
 properties of the handles, when selected or normal, can be 
 specified.
 </LI>
<LI>  <tt>vtkProperty = obj.GetFaceProperty ()</tt> -  Get the face properties (the faces of the box). The 
 properties of the face when selected and normal can be 
 set.
 </LI>
<LI>  <tt>vtkProperty = obj.GetSelectedFaceProperty ()</tt> -  Get the face properties (the faces of the box). The 
 properties of the face when selected and normal can be 
 set.
 </LI>
<LI>  <tt>vtkProperty = obj.GetOutlineProperty ()</tt> -  Get the outline properties (the outline of the box). The 
 properties of the outline when selected and normal can be 
 set.
 </LI>
<LI>  <tt>vtkProperty = obj.GetSelectedOutlineProperty ()</tt> -  Get the outline properties (the outline of the box). The 
 properties of the outline when selected and normal can be 
 set.
 </LI>
<LI>  <tt>obj.SetOutlineFaceWires (int )</tt> -  Control the representation of the outline. This flag enables
 face wires. By default face wires are off.
 </LI>
<LI>  <tt>int = obj.GetOutlineFaceWires ()</tt> -  Control the representation of the outline. This flag enables
 face wires. By default face wires are off.
 </LI>
<LI>  <tt>obj.OutlineFaceWiresOn ()</tt> -  Control the representation of the outline. This flag enables
 face wires. By default face wires are off.
 </LI>
<LI>  <tt>obj.OutlineFaceWiresOff ()</tt> -  Control the representation of the outline. This flag enables
 the cursor lines running between the handles. By default cursor
 wires are on.
 </LI>
<LI>  <tt>obj.SetOutlineCursorWires (int )</tt> -  Control the representation of the outline. This flag enables
 the cursor lines running between the handles. By default cursor
 wires are on.
 </LI>
<LI>  <tt>int = obj.GetOutlineCursorWires ()</tt> -  Control the representation of the outline. This flag enables
 the cursor lines running between the handles. By default cursor
 wires are on.
 </LI>
<LI>  <tt>obj.OutlineCursorWiresOn ()</tt> -  Control the representation of the outline. This flag enables
 the cursor lines running between the handles. By default cursor
 wires are on.
 </LI>
<LI>  <tt>obj.OutlineCursorWiresOff ()</tt> -  Switches handles (the spheres) on or off by manipulating the underlying
 actor visibility.
 </LI>
<LI>  <tt>obj.HandlesOn ()</tt> -  Switches handles (the spheres) on or off by manipulating the underlying
 actor visibility.
 </LI>
<LI>  <tt>obj.HandlesOff ()</tt> -  Switches handles (the spheres) on or off by manipulating the underlying
 actor visibility.
 </LI>
<LI>  <tt>obj.PlaceWidget (double bounds[6])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API.
 </LI>
<LI>  <tt>obj.BuildRepresentation ()</tt> -  These are methods that satisfy vtkWidgetRepresentation's API.
 </LI>
<LI>  <tt>int = obj.ComputeInteractionState (int X, int Y, int modify)</tt> -  These are methods that satisfy vtkWidgetRepresentation's API.
 </LI>
<LI>  <tt>obj.StartWidgetInteraction (double e[2])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API.
 </LI>
<LI>  <tt>obj.WidgetInteraction (double e[2])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API.
 </LI>
<LI>  <tt>double = obj.GetBounds ()</tt> -  These are methods that satisfy vtkWidgetRepresentation's API.
 </LI>
<LI>  <tt>obj.ReleaseGraphicsResources (vtkWindow )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.RenderOpaqueGeometry (vtkViewport )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.HasTranslucentPolygonalGeometry ()</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>obj.SetInteractionState (int state)</tt> -  The interaction state may be set from a widget (e.g., vtkBoxWidget2) or
 other object. This controls how the interaction with the widget
 proceeds. Normally this method is used as part of a handshaking
 process with the widget: First ComputeInteractionState() is invoked that
 returns a state based on geometric considerations (i.e., cursor near a
 widget feature), then based on events, the widget may modify this
 further.
 </LI>
</UL>
*/
