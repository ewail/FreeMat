/*!
\page vtkwidgets_vtkorientedglyphfocalplanecontourrepresentation vtkOrientedGlyphFocalPlaneContourRepresentation

<p>
Section: \ref sec_vtkwidgets "Visualization Toolkit Widget Classes"
\section Usage
 This class is used to represent a contour drawn on the focal plane (usually 
 overlayed on top of an image or volume widget).
 The class was written in order to be able to draw contours on a volume widget 
 and have the contours overlayed on the focal plane in order to do contour 
 segmentation.
 

To create an instance of class vtkOrientedGlyphFocalPlaneContourRepresentation, simply
invoke its constructor as follows
\verbatim
  obj = vtkOrientedGlyphFocalPlaneContourRepresentation
\endverbatim
\section Methods
The class vtkOrientedGlyphFocalPlaneContourRepresentation has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkOrientedGlyphFocalPlaneContourRepresentation class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>vtkOrientedGlyphFocalPlaneContourRepresentation = obj.NewInstance ()</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>vtkOrientedGlyphFocalPlaneContourRepresentation = obj.SafeDownCast (vtkObject o)</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>obj.SetCursorShape (vtkPolyData cursorShape)</tt> -  Specify the cursor shape. Keep in mind that the shape will be
 aligned with the  constraining plane by orienting it such that
 the x axis of the geometry lies along the normal of the plane.
 </LI>
<LI>  <tt>vtkPolyData = obj.GetCursorShape ()</tt> -  Specify the cursor shape. Keep in mind that the shape will be
 aligned with the  constraining plane by orienting it such that
 the x axis of the geometry lies along the normal of the plane.
 </LI>
<LI>  <tt>obj.SetActiveCursorShape (vtkPolyData activeShape)</tt> -  Specify the shape of the cursor (handle) when it is active.
 This is the geometry that will be used when the mouse is
 close to the handle or if the user is manipulating the handle.
 </LI>
<LI>  <tt>vtkPolyData = obj.GetActiveCursorShape ()</tt> -  Specify the shape of the cursor (handle) when it is active.
 This is the geometry that will be used when the mouse is
 close to the handle or if the user is manipulating the handle.
 </LI>
<LI>  <tt>vtkProperty2D = obj.GetProperty ()</tt> -  This is the property used when the handle is not active 
 (the mouse is not near the handle)
 </LI>
<LI>  <tt>vtkProperty2D = obj.GetActiveProperty ()</tt> -  This is the property used when the user is interacting
 with the handle.
 </LI>
<LI>  <tt>vtkProperty2D = obj.GetLinesProperty ()</tt> -  This is the property used by the lines.
 </LI>
<LI>  <tt>obj.SetRenderer (vtkRenderer ren)</tt> -  Subclasses of vtkOrientedGlyphFocalPlaneContourRepresentation must implement these methods. These
 are the methods that the widget and its representation use to
 communicate with each other.
 </LI>
<LI>  <tt>obj.BuildRepresentation ()</tt> -  Subclasses of vtkOrientedGlyphFocalPlaneContourRepresentation must implement these methods. These
 are the methods that the widget and its representation use to
 communicate with each other.
 </LI>
<LI>  <tt>obj.StartWidgetInteraction (double eventPos[2])</tt> -  Subclasses of vtkOrientedGlyphFocalPlaneContourRepresentation must implement these methods. These
 are the methods that the widget and its representation use to
 communicate with each other.
 </LI>
<LI>  <tt>obj.WidgetInteraction (double eventPos[2])</tt> -  Subclasses of vtkOrientedGlyphFocalPlaneContourRepresentation must implement these methods. These
 are the methods that the widget and its representation use to
 communicate with each other.
 </LI>
<LI>  <tt>int = obj.ComputeInteractionState (int X, int Y, int modified)</tt> -  Subclasses of vtkOrientedGlyphFocalPlaneContourRepresentation must implement these methods. These
 are the methods that the widget and its representation use to
 communicate with each other.
 </LI>
<LI>  <tt>obj.GetActors2D (vtkPropCollection )</tt> -  Methods to make this class behave as a vtkProp.
 </LI>
<LI>  <tt>obj.ReleaseGraphicsResources (vtkWindow )</tt> -  Methods to make this class behave as a vtkProp.
 </LI>
<LI>  <tt>int = obj.RenderOverlay (vtkViewport viewport)</tt> -  Methods to make this class behave as a vtkProp.
 </LI>
<LI>  <tt>int = obj.RenderOpaqueGeometry (vtkViewport viewport)</tt> -  Methods to make this class behave as a vtkProp.
 </LI>
<LI>  <tt>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport viewport)</tt> -  Methods to make this class behave as a vtkProp.
 </LI>
<LI>  <tt>int = obj.HasTranslucentPolygonalGeometry ()</tt> -  Methods to make this class behave as a vtkProp.
 </LI>
<LI>  <tt>vtkPolyData = obj.GetContourRepresentationAsPolyData ()</tt> -  Get the points in this contour as a vtkPolyData. 
 </LI>
<LI>  <tt>vtkMatrix4x4 = obj.GetContourPlaneDirectionCosines (double origin[3])</tt> -  Direction cosines of the plane on which the contour lies
 on in world co-ordinates. This would be the same matrix that would be
 set in vtkImageReslice or vtkImagePlaneWidget if there were a plane
 passing through the contour points. The origin must be the origin of the 
 data under the contour.
 </LI>
</UL>
*/
