/*!
\page vtkwidgets_vtkboundedplanepointplacer vtkBoundedPlanePointPlacer

<p>
Section: \ref sec_vtkwidgets "Visualization Toolkit Widget Classes"
\section Usage
 vtkBoundedPlanePointPlacer is a type of point placer that constrains its
 points to a finite (i.e., bounded) plance.


To create an instance of class vtkBoundedPlanePointPlacer, simply
invoke its constructor as follows
\verbatim
  obj = vtkBoundedPlanePointPlacer
\endverbatim
\section Methods
The class vtkBoundedPlanePointPlacer has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkBoundedPlanePointPlacer class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>vtkBoundedPlanePointPlacer = obj.NewInstance ()</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>vtkBoundedPlanePointPlacer = obj.SafeDownCast (vtkObject o)</tt> -  Standard methods for instances of this class.
 </LI>
<LI>  <tt>obj.SetProjectionNormal (int )</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>int = obj.GetProjectionNormalMinValue ()</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>int = obj.GetProjectionNormalMaxValue ()</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>int = obj.GetProjectionNormal ()</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>obj.SetProjectionNormalToXAxis ()</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>obj.SetProjectionNormalToYAxis ()</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>obj.SetProjectionNormalToZAxis ()</tt> -  Set the projection normal to lie along the x, y, or z axis,
 or to be oblique. If it is oblique, then the plane is 
 defined in the ObliquePlane ivar.
 </LI>
<LI>  <tt>obj.SetProjectionNormalToOblique ()</tt> -  If the ProjectionNormal is set to Oblique, then this is the 
 oblique plane used to constrain the handle position.
 </LI>
<LI>  <tt>obj.SetObliquePlane (vtkPlane )</tt> -  If the ProjectionNormal is set to Oblique, then this is the 
 oblique plane used to constrain the handle position.
 </LI>
<LI>  <tt>obj.SetProjectionPosition (double position)</tt> -  The position of the bounding plane from the origin along the
 normal. The origin and normal are defined in the oblique plane
 when the ProjectionNormal is oblique. For the X, Y, and Z
 axes projection normals, the normal is the axis direction, and
 the origin is (0,0,0).
 </LI>
<LI>  <tt>double = obj.GetProjectionPosition ()</tt> -  The position of the bounding plane from the origin along the
 normal. The origin and normal are defined in the oblique plane
 when the ProjectionNormal is oblique. For the X, Y, and Z
 axes projection normals, the normal is the axis direction, and
 the origin is (0,0,0).
 </LI>
<LI>  <tt>obj.AddBoundingPlane (vtkPlane plane)</tt> -  A collection of plane equations used to bound the position of the point.
 This is in addition to confining the point to a plane - these contraints
 are meant to, for example, keep a point within the extent of an image.
 Using a set of plane equations allows for more complex bounds (such as
 bounding a point to an oblique reliced image that has hexagonal shape)
 than a simple extent.
 </LI>
<LI>  <tt>obj.RemoveBoundingPlane (vtkPlane plane)</tt> -  A collection of plane equations used to bound the position of the point.
 This is in addition to confining the point to a plane - these contraints
 are meant to, for example, keep a point within the extent of an image.
 Using a set of plane equations allows for more complex bounds (such as
 bounding a point to an oblique reliced image that has hexagonal shape)
 than a simple extent.
 </LI>
<LI>  <tt>obj.RemoveAllBoundingPlanes ()</tt> -  A collection of plane equations used to bound the position of the point.
 This is in addition to confining the point to a plane - these contraints
 are meant to, for example, keep a point within the extent of an image.
 Using a set of plane equations allows for more complex bounds (such as
 bounding a point to an oblique reliced image that has hexagonal shape)
 than a simple extent.
 </LI>
<LI>  <tt>obj.SetBoundingPlanes (vtkPlaneCollection )</tt> -  A collection of plane equations used to bound the position of the point.
 This is in addition to confining the point to a plane - these contraints
 are meant to, for example, keep a point within the extent of an image.
 Using a set of plane equations allows for more complex bounds (such as
 bounding a point to an oblique reliced image that has hexagonal shape)
 than a simple extent.
 </LI>
<LI>  <tt>vtkPlaneCollection = obj.GetBoundingPlanes ()</tt> -  A collection of plane equations used to bound the position of the point.
 This is in addition to confining the point to a plane - these contraints
 are meant to, for example, keep a point within the extent of an image.
 Using a set of plane equations allows for more complex bounds (such as
 bounding a point to an oblique reliced image that has hexagonal shape)
 than a simple extent.
 </LI>
<LI>  <tt>obj.SetBoundingPlanes (vtkPlanes planes)</tt> -  A collection of plane equations used to bound the position of the point.
 This is in addition to confining the point to a plane - these contraints
 are meant to, for example, keep a point within the extent of an image.
 Using a set of plane equations allows for more complex bounds (such as
 bounding a point to an oblique reliced image that has hexagonal shape)
 than a simple extent.
 </LI>
<LI>  <tt>int = obj.ComputeWorldPosition (vtkRenderer ren, double displayPos[2], double worldPos[3], double worldOrient[9])</tt> -  Given a renderer and a display position, compute the 
 world position and world orientation for this point. 
 A plane is defined by a combination of the
 ProjectionNormal, ProjectionOrigin, and ObliquePlane
 ivars. The display position is projected onto this
 plane to determine a world position, and the 
 orientation is set to the normal of the plane. If
 the point cannot project onto the plane or if it
 falls outside the bounds imposed by the
 BoundingPlanes, then 0 is returned, otherwise 1 is
 returned to indicate a valid return position and
 orientation.
 </LI>
<LI>  <tt>int = obj.ComputeWorldPosition (vtkRenderer ren, double displayPos[2], double refWorldPos[3], double worldPos[3], double worldOrient[9])</tt> -  Given a renderer, a display position, and a reference world
 position, compute the new world position and orientation 
 of this point. This method is typically used by the 
 representation to move the point.
 </LI>
<LI>  <tt>int = obj.ValidateWorldPosition (double worldPos[3])</tt> -  Give a world position check if it is valid - does
 it lie on the plane and within the bounds? Returns
 1 if it is valid, 0 otherwise.
 </LI>
<LI>  <tt>int = obj.ValidateWorldPosition (double worldPos[3], double worldOrient[9])</tt>
 </LI>
<LI>  <tt>int = obj.UpdateWorldPosition (vtkRenderer ren, double worldPos[3], double worldOrient[9])</tt> -  If the constraints on this placer are changed, then
 this method will be called by the representation on
 each of its points. For this placer, the world
 position will be converted to a display position, then
 ComputeWorldPosition will be used to update the 
 point.
 </LI>
</UL>
*/
