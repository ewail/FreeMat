/*!
\page vtkwidgets_vtksphererepresentation vtkSphereRepresentation

<p>
Section: \ref sec_vtkwidgets "Visualization Toolkit Widget Classes"
\section Usage
 This class is a concrete representation for the vtkSphereWidget2. It
 represents a sphere with an optional handle.  Through interaction with the
 widget, the sphere can be arbitrarily positioned and scaled in 3D space;
 and the handle can be moved on the surface of the sphere. Typically the
 vtkSphereWidget2/vtkSphereRepresentation are used to position a sphere for
 the purpose of extracting, cutting or clipping data; or the handle is
 moved on the sphere to position a light or camera.

 To use this representation, you normally use the PlaceWidget() method
 to position the widget at a specified region in space. It is also possible
 to set the center of the sphere, a radius, and/or a handle position.


To create an instance of class vtkSphereRepresentation, simply
invoke its constructor as follows
\verbatim
  obj = vtkSphereRepresentation
\endverbatim
\section Methods
The class vtkSphereRepresentation has several methods that can be used.
  They are listed below.
Note that the documentation is translated automatically from the VTK sources,
and may not be completely intelligible.  When in doubt, consult the VTK website.
In the methods listed below, <tt>obj</tt> is an instance of the vtkSphereRepresentation class.
<UL>
<LI>  <tt>string = obj.GetClassName ()</tt> -  Standard methods for type information and to print out the contents of the class.
 </LI>
<LI>  <tt>int = obj.IsA (string name)</tt> -  Standard methods for type information and to print out the contents of the class.
 </LI>
<LI>  <tt>vtkSphereRepresentation = obj.NewInstance ()</tt> -  Standard methods for type information and to print out the contents of the class.
 </LI>
<LI>  <tt>vtkSphereRepresentation = obj.SafeDownCast (vtkObject o)</tt> -  Standard methods for type information and to print out the contents of the class.
 </LI>
<LI>  <tt>obj.SetRepresentation (int )</tt> -  Set the representation (i.e., appearance) of the sphere. Different
 representations are useful depending on the application. 
 </LI>
<LI>  <tt>int = obj.GetRepresentationMinValue ()</tt> -  Set the representation (i.e., appearance) of the sphere. Different
 representations are useful depending on the application. 
 </LI>
<LI>  <tt>int = obj.GetRepresentationMaxValue ()</tt> -  Set the representation (i.e., appearance) of the sphere. Different
 representations are useful depending on the application. 
 </LI>
<LI>  <tt>int = obj.GetRepresentation ()</tt> -  Set the representation (i.e., appearance) of the sphere. Different
 representations are useful depending on the application. 
 </LI>
<LI>  <tt>obj.SetRepresentationToOff ()</tt> -  Set the representation (i.e., appearance) of the sphere. Different
 representations are useful depending on the application. 
 </LI>
<LI>  <tt>obj.SetRepresentationToWireframe ()</tt> -  Set the representation (i.e., appearance) of the sphere. Different
 representations are useful depending on the application. 
 </LI>
<LI>  <tt>obj.SetRepresentationToSurface ()</tt> -  Set/Get the resolution of the sphere in the theta direction.
 </LI>
<LI>  <tt>obj.SetThetaResolution (int r)</tt> -  Set/Get the resolution of the sphere in the theta direction.
 </LI>
<LI>  <tt>int = obj.GetThetaResolution ()</tt> -  Set/Get the resolution of the sphere in the phi direction.
 </LI>
<LI>  <tt>obj.SetPhiResolution (int r)</tt> -  Set/Get the resolution of the sphere in the phi direction.
 </LI>
<LI>  <tt>int = obj.GetPhiResolution ()</tt> -  Set/Get the center position of the sphere. Note that this may
 adjust the direction from the handle to the center, as well as
 the radius of the sphere.
 </LI>
<LI>  <tt>obj.SetCenter (double c[3])</tt> -  Set/Get the center position of the sphere. Note that this may
 adjust the direction from the handle to the center, as well as
 the radius of the sphere.
 </LI>
<LI>  <tt>obj.SetCenter (double x, double y, double z)</tt> -  Set/Get the center position of the sphere. Note that this may
 adjust the direction from the handle to the center, as well as
 the radius of the sphere.
 </LI>
<LI>  <tt>double = obj.GetCenter ()</tt> -  Set/Get the center position of the sphere. Note that this may
 adjust the direction from the handle to the center, as well as
 the radius of the sphere.
 </LI>
<LI>  <tt>obj.GetCenter (double xyz[3])</tt> -  Set/Get the radius of sphere. Default is 0.5. Note that this may
 modify the position of the handle based on the handle direction.
 </LI>
<LI>  <tt>obj.SetRadius (double r)</tt> -  Set/Get the radius of sphere. Default is 0.5. Note that this may
 modify the position of the handle based on the handle direction.
 </LI>
<LI>  <tt>double = obj.GetRadius ()</tt> -  The handle sits on the surface of the sphere and may be moved around
 the surface by picking (left mouse) and then moving. The position
 of the handle can be retrieved, this is useful for positioning cameras
 and lights. By default, the handle is turned off.
 </LI>
<LI>  <tt>obj.SetHandleVisibility (int )</tt> -  The handle sits on the surface of the sphere and may be moved around
 the surface by picking (left mouse) and then moving. The position
 of the handle can be retrieved, this is useful for positioning cameras
 and lights. By default, the handle is turned off.
 </LI>
<LI>  <tt>int = obj.GetHandleVisibility ()</tt> -  The handle sits on the surface of the sphere and may be moved around
 the surface by picking (left mouse) and then moving. The position
 of the handle can be retrieved, this is useful for positioning cameras
 and lights. By default, the handle is turned off.
 </LI>
<LI>  <tt>obj.HandleVisibilityOn ()</tt> -  The handle sits on the surface of the sphere and may be moved around
 the surface by picking (left mouse) and then moving. The position
 of the handle can be retrieved, this is useful for positioning cameras
 and lights. By default, the handle is turned off.
 </LI>
<LI>  <tt>obj.HandleVisibilityOff ()</tt> -  The handle sits on the surface of the sphere and may be moved around
 the surface by picking (left mouse) and then moving. The position
 of the handle can be retrieved, this is useful for positioning cameras
 and lights. By default, the handle is turned off.
 </LI>
<LI>  <tt>obj.SetHandlePosition (double handle[3])</tt> -  Set/Get the position of the handle. Note that this may adjust the radius
 of the sphere and the handle direction.
 </LI>
<LI>  <tt>obj.SetHandlePosition (double x, double y, double z)</tt> -  Set/Get the position of the handle. Note that this may adjust the radius
 of the sphere and the handle direction.
 </LI>
<LI>  <tt>double = obj. GetHandlePosition ()</tt> -  Set/Get the position of the handle. Note that this may adjust the radius
 of the sphere and the handle direction.
 </LI>
<LI>  <tt>obj.SetHandleDirection (double dir[3])</tt> -  Set/Get the direction vector of the handle relative to the center of
 the sphere. This may affect the position of the handle and the radius
 of the sphere.
 </LI>
<LI>  <tt>obj.SetHandleDirection (double dx, double dy, double dz)</tt> -  Set/Get the direction vector of the handle relative to the center of
 the sphere. This may affect the position of the handle and the radius
 of the sphere.
 </LI>
<LI>  <tt>double = obj. GetHandleDirection ()</tt> -  Set/Get the direction vector of the handle relative to the center of
 the sphere. This may affect the position of the handle and the radius
 of the sphere.
 </LI>
<LI>  <tt>obj.SetHandleText (int )</tt> -  Enable/disable a label that displays the location of the handle in
 spherical coordinates (radius,theta,phi). The two angles, theta and
 phi, are displayed in degrees. Note that phi is measured from the
 north pole down towards the equator; and theta is the angle around 
 the north/south axis.
 </LI>
<LI>  <tt>int = obj.GetHandleText ()</tt> -  Enable/disable a label that displays the location of the handle in
 spherical coordinates (radius,theta,phi). The two angles, theta and
 phi, are displayed in degrees. Note that phi is measured from the
 north pole down towards the equator; and theta is the angle around 
 the north/south axis.
 </LI>
<LI>  <tt>obj.HandleTextOn ()</tt> -  Enable/disable a label that displays the location of the handle in
 spherical coordinates (radius,theta,phi). The two angles, theta and
 phi, are displayed in degrees. Note that phi is measured from the
 north pole down towards the equator; and theta is the angle around 
 the north/south axis.
 </LI>
<LI>  <tt>obj.HandleTextOff ()</tt> -  Enable/disable a label that displays the location of the handle in
 spherical coordinates (radius,theta,phi). The two angles, theta and
 phi, are displayed in degrees. Note that phi is measured from the
 north pole down towards the equator; and theta is the angle around 
 the north/south axis.
 </LI>
<LI>  <tt>obj.SetRadialLine (int )</tt> -  Enable/disable a radial line segment that joins the center of the
 outer sphere and the handle.
 </LI>
<LI>  <tt>int = obj.GetRadialLine ()</tt> -  Enable/disable a radial line segment that joins the center of the
 outer sphere and the handle.
 </LI>
<LI>  <tt>obj.RadialLineOn ()</tt> -  Enable/disable a radial line segment that joins the center of the
 outer sphere and the handle.
 </LI>
<LI>  <tt>obj.RadialLineOff ()</tt> -  Enable/disable a radial line segment that joins the center of the
 outer sphere and the handle.
 </LI>
<LI>  <tt>obj.GetPolyData (vtkPolyData pd)</tt> -  Grab the polydata (including points) that defines the sphere.  The
 polydata consists of n+1 points, where n is the resolution of the
 sphere. These point values are guaranteed to be up-to-date when either the
 InteractionEvent or EndInteraction events are invoked. The user provides
 the vtkPolyData and the points and polysphere are added to it.
 </LI>
<LI>  <tt>obj.GetSphere (vtkSphere sphere)</tt> -  Get the spherical implicit function defined by this widget.  Note that
 vtkSphere is a subclass of vtkImplicitFunction, meaning that it can be
 used by a variety of filters to perform clipping, cutting, and selection
 of data.
 </LI>
<LI>  <tt>vtkProperty = obj.GetSphereProperty ()</tt> -  Get the sphere properties. The properties of the sphere when selected 
 and unselected can be manipulated.
 </LI>
<LI>  <tt>vtkProperty = obj.GetSelectedSphereProperty ()</tt> -  Get the sphere properties. The properties of the sphere when selected 
 and unselected can be manipulated.
 </LI>
<LI>  <tt>vtkProperty = obj.GetHandleProperty ()</tt> -  Get the handle properties (the little ball on the sphere is the
 handle). The properties of the handle when selected and unselected
 can be  manipulated.
 </LI>
<LI>  <tt>vtkProperty = obj.GetSelectedHandleProperty ()</tt> -  Get the handle properties (the little ball on the sphere is the
 handle). The properties of the handle when selected and unselected
 can be  manipulated.
 </LI>
<LI>  <tt>vtkTextProperty = obj.GetHandleTextProperty ()</tt> -  Get the handle text property. This can be used to control the appearance 
 of the handle text.
 </LI>
<LI>  <tt>vtkProperty = obj.GetRadialLineProperty ()</tt> -  Get the property of the radial line. This can be used to control the 
 appearance of the optional line connecting the center to the handle.
 </LI>
<LI>  <tt>obj.SetInteractionState (int state)</tt> -  The interaction state may be set from a widget (e.g., vtkSphereWidget2) or
 other object. This controls how the interaction with the widget
 proceeds. Normally this method is used as part of a handshaking
 process with the widget: First ComputeInteractionState() is invoked that
 returns a state based on geometric considerations (i.e., cursor near a
 widget feature), then based on events, the widget may modify this
 further.
 </LI>
<LI>  <tt>obj.PlaceWidget (double bounds[6])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API. Note that a 
 version of place widget is available where the center and handle position
 are specified.
 </LI>
<LI>  <tt>obj.PlaceWidget (double center[3], double handlePosition[3])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API. Note that a 
 version of place widget is available where the center and handle position
 are specified.
 </LI>
<LI>  <tt>obj.BuildRepresentation ()</tt> -  These are methods that satisfy vtkWidgetRepresentation's API. Note that a 
 version of place widget is available where the center and handle position
 are specified.
 </LI>
<LI>  <tt>int = obj.ComputeInteractionState (int X, int Y, int modify)</tt> -  These are methods that satisfy vtkWidgetRepresentation's API. Note that a 
 version of place widget is available where the center and handle position
 are specified.
 </LI>
<LI>  <tt>obj.StartWidgetInteraction (double e[2])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API. Note that a 
 version of place widget is available where the center and handle position
 are specified.
 </LI>
<LI>  <tt>obj.WidgetInteraction (double e[2])</tt> -  These are methods that satisfy vtkWidgetRepresentation's API. Note that a 
 version of place widget is available where the center and handle position
 are specified.
 </LI>
<LI>  <tt>obj.ReleaseGraphicsResources (vtkWindow )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.RenderOpaqueGeometry (vtkViewport )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.RenderOverlay (vtkViewport )</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
<LI>  <tt>int = obj.HasTranslucentPolygonalGeometry ()</tt> -  Methods supporting, and required by, the rendering process.
 </LI>
</UL>
*/
