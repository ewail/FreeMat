#ifndef __CScalarFuncs_hpp__
#define __CScalarFuncs_hpp__
// WARNING - this file is automatically generated by
// the jitgen.py script in tools.  Do not
// edit it by hand, or changes will be lost!  If you
// need to add a JIT scalar function to FreeMat, add a
// JitScalarFunc documentation tag to the code.
// 

// Here, each function gets prototyped.
  double _jit_cos(double a0);
  double _jit_cosd(double a0);
  double _jit_sin(double a0);
  double _jit_sind(double a0);
  double _jit_tan(double a0);
  double _jit_tand(double a0);
  double _jit_csc(double a0);
  double _jit_cscd(double a0);
  double _jit_sec(double a0);
  double _jit_secd(double a0);
  double _jit_cot(double a0);
  double _jit_cotd(double a0);
  double _jit_atan(double a0);
  double _jit_atan2(double a0,double a1);
  double _jit_max(double a0,double a1);
  double _jit_pi();
  double _jit_e();
  double _jit_infp();
  double _jit_nan();
  double _jit_NaN();
  double _jit_abs(double a0);
  double _jit_tanh(double a0);
  double _jit_cosh(double a0);
  double _jit_sinh(double a0);
  double _jit_exp(double a0);
  double _jit_expm1(double a0);
  double _jit_round(double a0);
  double _jit_min(double a0,double a1);
  double _jit_bitand(double a0,double a1);
  double _jit_bitor(double a0,double a1);
  double _jit_bitxor(double a0,double a1);
  double _jit_floor(double a0);
  double _jit_fix(double a0);
  double _jit_ceil(double a0);
  double _jit_isnan(double a0);
  double _jit_isinf(double a0);
  double _jit_erfc(double a0);
  double _jit_erf(double a0);
  double _jit_erfinv(double a0);
  double _jit_gamma(double a0);
  double _jit_gammaln(double a0);
static const char* jit_scalar_list[] = {"cos","cosd","sin","sind","tan","tand","csc","cscd","sec","secd","cot","cotd","atan","atan2","max","pi","e","infp","nan","NaN","abs","tanh","cosh","sinh","exp","expm1","round","min","bitand","bitor","bitxor","floor","fix","ceil","isnan","isinf","erfc","erf","erfinv","gamma","gammaln",""};
static const int jit_scalar_list_len = sizeof(jit_scalar_list)/sizeof(jit_scalar_list[0]);
#endif
