
 Usage

vtkGenericRenderWindowInteractor provides a way to translate
native mouse and keyboard events into vtk Events. By calling
the methods on this class, vtk events will be invoked. This
will allow scripting languages to use vtkInteractorStyles
and 3D widgets.
To create an instance of class
vtkGenericRenderWindowInteractor, simply invoke its
constructor as follows

    obj = vtkGenericRenderWindowInteractor



 Methods

The class vtkGenericRenderWindowInteractor has several
methods that can be used. They are listed below. Note that
the documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkGenericRenderWindowInteractor
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkGenericRenderWindowInteractor = obj.NewInstance ()
* vtkGenericRenderWindowInteractor = obj.SafeDownCast
  (vtkObject o)
* obj.MouseMoveEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.RightButtonPressEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.RightButtonReleaseEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.LeftButtonPressEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.LeftButtonReleaseEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.MiddleButtonPressEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.MiddleButtonReleaseEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.MouseWheelForwardEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.MouseWheelBackwardEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.ExposeEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.ConfigureEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.EnterEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.LeaveEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.TimerEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.KeyPressEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.KeyReleaseEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.CharEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.ExitEvent () - Fire various events.
  SetEventInformation should be called just prior to calling
  any of these methods. These methods will Invoke the
  corresponding vtk event.
* obj.SetTimerEventResetsTimer (int ) - Flag that indicates
  whether the TimerEvent method should call ResetTimer to
  simulate repeating timers with an endless stream of one
  shot timers. By default this flag is on and all repeating
  timers are implemented as a stream of sequential one shot
  timers. If the observer of CreateTimerEvent actually
  creates a "natively repeating" timer, setting this flag to
  off will prevent (perhaps many many) unnecessary calls to
  ResetTimer. Having the flag on by default means that
  "natively one shot" timers can be either one shot or
  repeating timers with no additional work. Also, "natively
  repeating" timers still work with the default setting, but
  with potentially many create and destroy calls.
* int = obj.GetTimerEventResetsTimer () - Flag that
  indicates whether the TimerEvent method should call
  ResetTimer to simulate repeating timers with an endless
  stream of one shot timers. By default this flag is on and
  all repeating timers are implemented as a stream of
  sequential one shot timers. If the observer of
  CreateTimerEvent actually creates a "natively repeating"
  timer, setting this flag to off will prevent (perhaps many
  many) unnecessary calls to ResetTimer. Having the flag on
  by default means that "natively one shot" timers can be
  either one shot or repeating timers with no additional
  work. Also, "natively repeating" timers still work with
  the default setting, but with potentially many create and
  destroy calls.
* obj.TimerEventResetsTimerOn () - Flag that indicates
  whether the TimerEvent method should call ResetTimer to
  simulate repeating timers with an endless stream of one
  shot timers. By default this flag is on and all repeating
  timers are implemented as a stream of sequential one shot
  timers. If the observer of CreateTimerEvent actually
  creates a "natively repeating" timer, setting this flag to
  off will prevent (perhaps many many) unnecessary calls to
  ResetTimer. Having the flag on by default means that
  "natively one shot" timers can be either one shot or
  repeating timers with no additional work. Also, "natively
  repeating" timers still work with the default setting, but
  with potentially many create and destroy calls.
* obj.TimerEventResetsTimerOff () - Flag that indicates
  whether the TimerEvent method should call ResetTimer to
  simulate repeating timers with an endless stream of one
  shot timers. By default this flag is on and all repeating
  timers are implemented as a stream of sequential one shot
  timers. If the observer of CreateTimerEvent actually
  creates a "natively repeating" timer, setting this flag to
  off will prevent (perhaps many many) unnecessary calls to
  ResetTimer. Having the flag on by default means that
  "natively one shot" timers can be either one shot or
  repeating timers with no additional work. Also, "natively
  repeating" timers still work with the default setting, but
  with potentially many create and destroy calls.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

