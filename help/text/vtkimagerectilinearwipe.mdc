
 Usage

vtkImageRectilinearWipe makes a rectilinear combination of
two images. The two input images must correspond in size,
scalar type and number of components. The resulting image
has four possible configurations called: Quad - alternate
input 0 and input 1 horizontally and vertically. Select this
with SetWipeModeToQuad. The Position specifies the location
of the quad intersection. Corner - 3 of one input and 1 of
the other. Select the location of input 0 with with
SetWipeModeToLowerLeft, SetWipeModeToLowerRight,
SetWipeModeToUpperLeft and SetWipeModeToUpperRight. The
Position selects the location of the corner. Horizontal -
alternate input 0 and input 1 with a vertical split. Select
this with SetWipeModeToHorizontal. Position[0] specifies the
location of the vertical transition between input 0 and
input 1. Vertical - alternate input 0 and input 1 with a
horizontal split. Only the y The intersection point of the
rectilinear points is controlled with the Point ivar.
To create an instance of class vtkImageRectilinearWipe,
simply invoke its constructor as follows

    obj = vtkImageRectilinearWipe



 Methods

The class vtkImageRectilinearWipe has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkImageRectilinearWipe class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageRectilinearWipe = obj.NewInstance ()
* vtkImageRectilinearWipe = obj.SafeDownCast (vtkObject o)
* obj.SetPosition (int , int ) - Set/Get the location of the
  image transition. Note that position is specified in
  pixels.
* obj.SetPosition (int a[2]) - Set/Get the location of the
  image transition. Note that position is specified in
  pixels.
* int = obj. GetPosition () - Set/Get the location of the
  image transition. Note that position is specified in
  pixels.
* obj.SetInput1 (vtkDataObject in) - Set the two inputs to
  this filter.
* obj.SetInput2 (vtkDataObject in) - Specify the wipe mode.
  This mode determnis how input 0 and input 1 are combined
  to produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipe (int ) - Specify the wipe mode. This mode
  determnis how input 0 and input 1 are combined to produce
  the output. Each mode uses one or both of the values
  stored in Position. SetWipeToQuad - alternate input 0 and
  input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* int = obj.GetWipeMinValue () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* int = obj.GetWipeMaxValue () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* int = obj.GetWipe () - Specify the wipe mode. This mode
  determnis how input 0 and input 1 are combined to produce
  the output. Each mode uses one or both of the values
  stored in Position. SetWipeToQuad - alternate input 0 and
  input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToQuad () - Specify the wipe mode. This mode
  determnis how input 0 and input 1 are combined to produce
  the output. Each mode uses one or both of the values
  stored in Position. SetWipeToQuad - alternate input 0 and
  input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToHorizontal () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToVertical () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToLowerLeft () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToLowerRight () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToUpperLeft () - Specify the wipe mode. This
  mode determnis how input 0 and input 1 are combined to
  produce the output. Each mode uses one or both of the
  values stored in Position. SetWipeToQuad - alternate input
  0 and input 1 horizontally and vertically. The Position
  specifies the location of the quad intersection.
  SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of
  one input and 1 of the other. Select the location of input
  0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}.
  Position selects the location of the corner.
  SetWipeToHorizontal - alternate input 0 and input 1 with a
  vertical split. Position[0] specifies the location of the
  vertical transition between input 0 and input 1.
  SetWipeToVertical - alternate input 0 and input 1 with a
  horizontal split. Position[1] specifies the location of
  the horizonal transition between input 0 and input 1.
* obj.SetWipeToUpperRight ()


* FreeMat_Documentation
* Visualization_Toolkit_Imaging_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

