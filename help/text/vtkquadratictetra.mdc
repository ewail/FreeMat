
 Usage

vtkQuadraticTetra is a concrete implementation of
vtkNonLinearCell to represent a three-dimensional, 10-node,
isoparametric parabolic tetrahedron. The interpolation is
the standard finite element, quadratic isoparametric shape
function. The cell includes a mid-edge node on each of the
size edges of the tetrahedron. The ordering of the ten
points defining the cell is point ids (0-3,4-9) where ids 0-
3 are the four tetra vertices; and point ids 4-9 are the
midedge nodes between (0,1), (1,2), (2,0), (0,3), (1,3), and
(2,3).
To create an instance of class vtkQuadraticTetra, simply
invoke its constructor as follows

    obj = vtkQuadraticTetra



 Methods

The class vtkQuadraticTetra has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkQuadraticTetra class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkQuadraticTetra = obj.NewInstance ()
* vtkQuadraticTetra = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetFace (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray tetras,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this edge using scalar value provided. Like contouring,
  except that it cuts the tetra to produce new tetras.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the quadratic tetra in parametric
  coordinates.
* double = obj.GetParametricDistance (double pcoords[3]) -
  Return the distance of the parametric coordinate provided
  to the cell. If inside the cell, a distance of zero is
  returned.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[10]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [30]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

