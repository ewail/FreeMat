
 Usage

vtkPolyDataSilhouette extracts a subset of a polygonal mesh
edges to generate an outline (silhouette) of the
corresponding 3D object. In addition, this filter can also
extracts sharp edges (aka feature angles). In order to use
this filter you must specify the a point of view (origin) or
a direction (vector). given this direction or origin, a
silhouette is generated wherever the surface's normal is
orthogonal to the view direction.
To create an instance of class vtkPolyDataSilhouette, simply
invoke its constructor as follows

    obj = vtkPolyDataSilhouette



 Methods

The class vtkPolyDataSilhouette has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkPolyDataSilhouette class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkPolyDataSilhouette = obj.NewInstance ()
* vtkPolyDataSilhouette = obj.SafeDownCast (vtkObject o)
* obj.SetEnableFeatureAngle (int ) - Enables or Disables
  generation of silhouette edges along sharp edges
* int = obj.GetEnableFeatureAngle () - Enables or Disables
  generation of silhouette edges along sharp edges
* obj.SetFeatureAngle (double ) - Sets/Gets minimal angle
  for sharp edges detection. Default is 60
* double = obj.GetFeatureAngle () - Sets/Gets minimal angle
  for sharp edges detection. Default is 60
* obj.SetBorderEdges (int ) - Enables or Disables generation
  of border edges. Note: borders exist only in case of non
  closed surface
* int = obj.GetBorderEdges () - Enables or Disables
  generation of border edges. Note: borders exist only in
  case of non closed surface
* obj.BorderEdgesOn () - Enables or Disables generation of
  border edges. Note: borders exist only in case of non
  closed surface
* obj.BorderEdgesOff () - Enables or Disables generation of
  border edges. Note: borders exist only in case of non
  closed surface
* obj.SetPieceInvariant (int ) - Enables or Disables piece
  invariance. This is usefull when dealing with multi-block
  data sets. Note: requires one level of ghost cells
* int = obj.GetPieceInvariant () - Enables or Disables piece
  invariance. This is usefull when dealing with multi-block
  data sets. Note: requires one level of ghost cells
* obj.PieceInvariantOn () - Enables or Disables piece
  invariance. This is usefull when dealing with multi-block
  data sets. Note: requires one level of ghost cells
* obj.PieceInvariantOff () - Enables or Disables piece
  invariance. This is usefull when dealing with multi-block
  data sets. Note: requires one level of ghost cells
* obj.SetDirection (int ) - Specify how view direction is
  computed. By default, the camera origin (eye) is used.
* int = obj.GetDirection () - Specify how view direction is
  computed. By default, the camera origin (eye) is used.
* obj.SetDirectionToSpecifiedVector () - Specify how view
  direction is computed. By default, the camera origin (eye)
  is used.
* obj.SetDirectionToSpecifiedOrigin () - Specify how view
  direction is computed. By default, the camera origin (eye)
  is used.
* obj.SetDirectionToCameraVector () - Specify how view
  direction is computed. By default, the camera origin (eye)
  is used.
* obj.SetDirectionToCameraOrigin () - Specify a camera that
  is used to define the view direction. This ivar only has
  effect if the direction is set to
  VTK_DIRECTION_CAMERA_ORIGIN or
  VTK_DIRECTION_CAMERA_VECTOR, and a camera is specified.
* obj.SetCamera (vtkCamera ) - Specify a camera that is used
  to define the view direction. This ivar only has effect if
  the direction is set to VTK_DIRECTION_CAMERA_ORIGIN or
  VTK_DIRECTION_CAMERA_VECTOR, and a camera is specified.
* vtkCamera = obj.GetCamera () - Specify a camera that is
  used to define the view direction. This ivar only has
  effect if the direction is set to
  VTK_DIRECTION_CAMERA_ORIGIN or
  VTK_DIRECTION_CAMERA_VECTOR, and a camera is specified.
* obj.SetProp3D (vtkProp3D ) - Specify a transformation
  matrix (via the vtkProp3D::GetMatrix() method) that is
  used to include the effects of transformation. This ivar
  only has effect if the direction is set to
  VTK_DIRECTION_CAMERA_ORIGIN or
  VTK_DIRECTION_CAMERA_VECTOR, and a camera is specified.
  Specifying the vtkProp3D is optional.
* vtkProp3D = obj.GetProp3D () - Specify a transformation
  matrix (via the vtkProp3D::GetMatrix() method) that is
  used to include the effects of transformation. This ivar
  only has effect if the direction is set to
  VTK_DIRECTION_CAMERA_ORIGIN or
  VTK_DIRECTION_CAMERA_VECTOR, and a camera is specified.
  Specifying the vtkProp3D is optional.
* obj.SetVector (double , double , double ) - Set/Get the
  sort direction. This ivar only has effect if the sort
  direction is set to SetDirectionToSpecifiedVector(). The
  edge detection occurs in the direction of the vector.
* obj.SetVector (double a[3]) - Set/Get the sort direction.
  This ivar only has effect if the sort direction is set to
  SetDirectionToSpecifiedVector(). The edge detection occurs
  in the direction of the vector.
* double = obj. GetVector () - Set/Get the sort direction.
  This ivar only has effect if the sort direction is set to
  SetDirectionToSpecifiedVector(). The edge detection occurs
  in the direction of the vector.
* obj.SetOrigin (double , double , double ) - Set/Get the
  sort origin. This ivar only has effect if the sort
  direction is set to SetDirectionToSpecifiedOrigin(). The
  edge detection occurs in the direction of the origin to
  each edge's center.
* obj.SetOrigin (double a[3]) - Set/Get the sort origin.
  This ivar only has effect if the sort direction is set to
  SetDirectionToSpecifiedOrigin(). The edge detection occurs
  in the direction of the origin to each edge's center.
* double = obj. GetOrigin () - Set/Get the sort origin. This
  ivar only has effect if the sort direction is set to
  SetDirectionToSpecifiedOrigin(). The edge detection occurs
  in the direction of the origin to each edge's center.
* long = obj.GetMTime () - Return MTime also considering the
  dependent objects: the camera and/or the prop3D.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

