
 Usage

Left mouse button press produces forward motion. Right mouse
button press produces reverse motion. Moving mouse during
motion steers user in desired direction. Keyboard controls
are: Left/Right/Up/Down Arrows for steering direction 'A'
forward, 'Z' reverse motion Ctrl Key causes sidestep instead
of steering in mouse and key modes Shift key is accelerator
in mouse and key modes Ctrl and Shift together causes Roll
in mouse and key modes
By default, one "step" of motion corresponds to 1/250th of
the diagonal of bounding box of visible actors, '+' and '-
' keys allow user to increase or decrease step size.
To create an instance of class vtkInteractorStyleFlight,
simply invoke its constructor as follows

    obj = vtkInteractorStyleFlight



 Methods

The class vtkInteractorStyleFlight has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkInteractorStyleFlight class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkInteractorStyleFlight = obj.NewInstance ()
* vtkInteractorStyleFlight = obj.SafeDownCast (vtkObject o)
* obj.JumpTo (double campos[3], double focpos[3]) - Move the
  Eye/Camera to a specific location (no intermediate steps
  are taken
* obj.SetMotionStepSize (double ) - Set the basic unit step
  size : by default 1/250 of bounding diagonal
* double = obj.GetMotionStepSize () - Set the basic unit
  step size : by default 1/250 of bounding diagonal
* obj.SetMotionAccelerationFactor (double ) - Set
  acceleration factor when shift key is applied : default 10
* double = obj.GetMotionAccelerationFactor () - Set
  acceleration factor when shift key is applied : default 10
* obj.SetAngleStepSize (double ) - Set the basic angular
  unit for turning : default 1 degree
* double = obj.GetAngleStepSize () - Set the basic angular
  unit for turning : default 1 degree
* obj.SetAngleAccelerationFactor (double ) - Set angular
  acceleration when shift key is applied : default 5
* double = obj.GetAngleAccelerationFactor () - Set angular
  acceleration when shift key is applied : default 5
* obj.SetDisableMotion (int ) - Disable motion (temporarily
  - for viewing etc)
* int = obj.GetDisableMotion () - Disable motion
  (temporarily - for viewing etc)
* obj.DisableMotionOn () - Disable motion (temporarily - for
  viewing etc)
* obj.DisableMotionOff () - Disable motion (temporarily -
  for viewing etc)
* obj.SetRestoreUpVector (int ) - When flying, apply a
  restorative force to the "Up" vector. This is activated
  when the current 'up' is close to the actual 'up' (as
  defined in DefaultUpVector). This prevents excessive
  twisting forces when viewing from arbitrary angles, but
  keep the horizon level when the user is flying over
  terrain.
* int = obj.GetRestoreUpVector () - When flying, apply a
  restorative force to the "Up" vector. This is activated
  when the current 'up' is close to the actual 'up' (as
  defined in DefaultUpVector). This prevents excessive
  twisting forces when viewing from arbitrary angles, but
  keep the horizon level when the user is flying over
  terrain.
* obj.RestoreUpVectorOn () - When flying, apply a
  restorative force to the "Up" vector. This is activated
  when the current 'up' is close to the actual 'up' (as
  defined in DefaultUpVector). This prevents excessive
  twisting forces when viewing from arbitrary angles, but
  keep the horizon level when the user is flying over
  terrain.
* obj.RestoreUpVectorOff () - When flying, apply a
  restorative force to the "Up" vector. This is activated
  when the current 'up' is close to the actual 'up' (as
  defined in DefaultUpVector). This prevents excessive
  twisting forces when viewing from arbitrary angles, but
  keep the horizon level when the user is flying over
  terrain.
* double = obj. GetDefaultUpVector ()
* obj.SetDefaultUpVector (double [3])
* obj.OnMouseMove () - Concrete implementation of Mouse
  event bindings for flight
* obj.OnLeftButtonDown () - Concrete implementation of Mouse
  event bindings for flight
* obj.OnLeftButtonUp () - Concrete implementation of Mouse
  event bindings for flight
* obj.OnMiddleButtonDown () - Concrete implementation of
  Mouse event bindings for flight
* obj.OnMiddleButtonUp () - Concrete implementation of Mouse
  event bindings for flight
* obj.OnRightButtonDown () - Concrete implementation of
  Mouse event bindings for flight
* obj.OnRightButtonUp () - Concrete implementation of Mouse
  event bindings for flight
* obj.OnChar () - Concrete implementation of Keyboard event
  bindings for flight
* obj.OnKeyDown () - Concrete implementation of Keyboard
  event bindings for flight
* obj.OnKeyUp () - Concrete implementation of Keyboard event
  bindings for flight
* obj.OnTimer () - Concrete implementation of Keyboard event
  bindings for flight
* obj.ForwardFly () - Concrete implementation of Keyboard
  event bindings for flight
* obj.ReverseFly () - Concrete implementation of Keyboard
  event bindings for flight
* obj.StartForwardFly () - Concrete implementation of
  Keyboard event bindings for flight
* obj.EndForwardFly () - Concrete implementation of Keyboard
  event bindings for flight
* obj.StartReverseFly () - Concrete implementation of
  Keyboard event bindings for flight
* obj.EndReverseFly () - Concrete implementation of Keyboard
  event bindings for flight


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

