
 Usage

vtkCompositeDataSet is an abstract class that represents a
collection of datasets (including other composite datasets).
It provides an interface to access the datasets through
iterators. vtkCompositeDataSet provides methods that are
used by subclasses to store the datasets.
vtkCompositeDataSet provides the datastructure for a full
tree representation. Subclasses provide the semantics for it
and control how this tree is built.
To create an instance of class vtkCompositeDataSet, simply
invoke its constructor as follows

    obj = vtkCompositeDataSet



 Methods

The class vtkCompositeDataSet has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkCompositeDataSet class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCompositeDataSet = obj.NewInstance ()
* vtkCompositeDataSet = obj.SafeDownCast (vtkObject o)
* vtkCompositeDataIterator = obj.NewIterator () - Return a
  new iterator (the iterator has to be deleted by user).
* int = obj.GetDataObjectType () - Get the port currently
  producing this object.
* vtkAlgorithmOutput = obj.GetProducerPort () - Get the port
  currently producing this object.
* obj.CopyStructure (vtkCompositeDataSet input) - Copies the
  tree structure from the input. All pointers to non-
  composite data objects are intialized to NULL. This also
  shallow copies the meta data associated with all the
  nodes.
* obj.SetDataSet (vtkCompositeDataIterator iter,
  vtkDataObject dataObj) - Sets the data set at the location
  pointed by the iterator. The iterator does not need to be
  iterating over this dataset itself. It can be any
  composite datasite with similar structure (achieved by
  using CopyStructure).
* vtkDataObject = obj.GetDataSet (vtkCompositeDataIterator
  iter) - Returns the dataset located at the positiong
  pointed by the iterator. The iterator does not need to be
  iterating over this dataset itself. It can be an iterator
  for composite dataset with similar structure (achieved by
  using CopyStructure).
* vtkInformation = obj.GetMetaData (vtkCompositeDataIterator
  iter) - Returns the meta-data associated with the position
  pointed by the iterator. This will create a new
  vtkInformation object if none already exists. Use
  HasMetaData to avoid creating the vtkInformation object
  unnecessarily. The iterator does not need to be iterating
  over this dataset itself. It can be an iterator for
  composite dataset with similar structure (achieved by
  using CopyStructure).
* int = obj.HasMetaData (vtkCompositeDataIterator iter) -
  Returns if any meta-data associated with the position
  pointed by the iterator. The iterator does not need to be
  iterating over this dataset itself. It can be an iterator
  for composite dataset with similar structure (achieved by
  using CopyStructure).
* obj.Initialize () - Restore data object to initial state,
* obj.ShallowCopy (vtkDataObject src) - Shallow and Deep
  copy.
* obj.DeepCopy (vtkDataObject src) - Shallow and Deep copy.
* vtkIdType = obj.GetNumberOfPoints () - Returns the total
  number of points of all blocks. This will iterate over all
  blocks and call GetNumberOfPoints() so it might be
  expansive.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

