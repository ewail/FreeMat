
 Usage

vtkImageMapper provides 2D image display support for vtk. It
is a Mapper2D subclass that can be associated with an
Actor2D and placed within a RenderWindow or ImageWindow.
To create an instance of class vtkImageMapper, simply invoke
its constructor as follows

    obj = vtkImageMapper



 Methods

The class vtkImageMapper has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkImageMapper class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageMapper = obj.NewInstance ()
* vtkImageMapper = obj.SafeDownCast (vtkObject o)
* long = obj.GetMTime () - Override Modifiedtime as we have
  added a lookuptable
* obj.SetColorWindow (double ) - Set/Get the window value
  for window/level
* double = obj.GetColorWindow () - Set/Get the window value
  for window/level
* obj.SetColorLevel (double ) - Set/Get the level value for
  window/level
* double = obj.GetColorLevel () - Set/Get the level value
  for window/level
* obj.SetZSlice (int ) - Set/Get the current slice number.
  The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* int = obj.GetZSlice () - Set/Get the current slice number.
  The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* int = obj.GetWholeZMin () - Set/Get the current slice
  number. The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* int = obj.GetWholeZMax () - Set/Get the current slice
  number. The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* obj.RenderStart (vtkViewport viewport, vtkActor2D actor) -
  Draw the image to the screen.
* obj.RenderData (vtkViewport , vtkImageData , vtkActor2D )
  - Function called by Render to actually draw the image to
  to the screen
* double = obj.GetColorShift () - Methods used internally
  for performing the Window/Level mapping.
* double = obj.GetColorScale () - Methods used internally
  for performing the Window/Level mapping.
* obj.SetInput (vtkImageData input) - Set the Input of a
  filter.
* vtkImageData = obj.GetInput () - Set the Input of a
  filter.
* obj.SetRenderToRectangle (int ) - If RenderToRectangle is
  set (by default not), then the imagemapper will render the
  image into the rectangle supplied by the Actor2D's
  PositionCoordinate and Position2Coordinate
* int = obj.GetRenderToRectangle () - If RenderToRectangle
  is set (by default not), then the imagemapper will render
  the image into the rectangle supplied by the Actor2D's
  PositionCoordinate and Position2Coordinate
* obj.RenderToRectangleOn () - If RenderToRectangle is set
  (by default not), then the imagemapper will render the
  image into the rectangle supplied by the Actor2D's
  PositionCoordinate and Position2Coordinate
* obj.RenderToRectangleOff () - If RenderToRectangle is set
  (by default not), then the imagemapper will render the
  image into the rectangle supplied by the Actor2D's
  PositionCoordinate and Position2Coordinate
* obj.SetUseCustomExtents (int ) - Usually, the entire image
  is displayed, if UseCustomExtents is set (by default not),
  then the region supplied in the CustomDisplayExtents is
  used in preference. Note that the Custom extents are x,y
  only and the zslice is still applied
* int = obj.GetUseCustomExtents () - Usually, the entire
  image is displayed, if UseCustomExtents is set (by default
  not), then the region supplied in the CustomDisplayExtents
  is used in preference. Note that the Custom extents are
  x,y only and the zslice is still applied
* obj.UseCustomExtentsOn () - Usually, the entire image is
  displayed, if UseCustomExtents is set (by default not),
  then the region supplied in the CustomDisplayExtents is
  used in preference. Note that the Custom extents are x,y
  only and the zslice is still applied
* obj.UseCustomExtentsOff () - Usually, the entire image is
  displayed, if UseCustomExtents is set (by default not),
  then the region supplied in the CustomDisplayExtents is
  used in preference. Note that the Custom extents are x,y
  only and the zslice is still applied
* obj.SetCustomDisplayExtents (int [4]) - The image extents
  which should be displayed with UseCustomExtents Note that
  the Custom extents are x,y only and the zslice is still
  applied
* int = obj. GetCustomDisplayExtents () - The image extents
  which should be displayed with UseCustomExtents Note that
  the Custom extents are x,y only and the zslice is still
  applied


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

