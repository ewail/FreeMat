
 Usage

vtkPDataSetWriter will write a piece of a file, and will
also create a metadata file that lists all of the files in a
data set.
To create an instance of class vtkPDataSetWriter, simply
invoke its constructor as follows

    obj = vtkPDataSetWriter



 Methods

The class vtkPDataSetWriter has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkPDataSetWriter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkPDataSetWriter = obj.NewInstance ()
* vtkPDataSetWriter = obj.SafeDownCast (vtkObject o)
* int = obj.Write () - Write the pvtk file and cooresponding
  vtk files.
* obj.SetNumberOfPieces (int num) - This is how many pieces
  the whole data set will be divided into.
* int = obj.GetNumberOfPieces () - This is how many pieces
  the whole data set will be divided into.
* obj.SetGhostLevel (int ) - Extra ghost cells will be
  written out to each piece file if this value is larger
  than 0.
* int = obj.GetGhostLevel () - Extra ghost cells will be
  written out to each piece file if this value is larger
  than 0.
* obj.SetStartPiece (int ) - This is the range of pieces
  that that this writer is responsible for writing. All
  pieces must be written by some process. The process that
  writes piece 0 also writes the pvtk file that lists all
  the piece file names.
* int = obj.GetStartPiece () - This is the range of pieces
  that that this writer is responsible for writing. All
  pieces must be written by some process. The process that
  writes piece 0 also writes the pvtk file that lists all
  the piece file names.
* obj.SetEndPiece (int ) - This is the range of pieces that
  that this writer is responsible for writing. All pieces
  must be written by some process. The process that writes
  piece 0 also writes the pvtk file that lists all the piece
  file names.
* int = obj.GetEndPiece () - This is the range of pieces
  that that this writer is responsible for writing. All
  pieces must be written by some process. The process that
  writes piece 0 also writes the pvtk file that lists all
  the piece file names.
* obj.SetFilePattern (string ) - This file pattern uses the
  file name and piece number to contruct a file name for the
  piece file.
* string = obj.GetFilePattern () - This file pattern uses
  the file name and piece number to contruct a file name for
  the piece file.
* obj.SetUseRelativeFileNames (int ) - This flag determines
  whether to use absolute paths for the piece files. By
  default the pieces are put in the main directory, and the
  piece file names in the meta data pvtk file are relative
  to this directory. This should make moving the whole lot
  to another directory, an easier task.
* int = obj.GetUseRelativeFileNames () - This flag
  determines whether to use absolute paths for the piece
  files. By default the pieces are put in the main
  directory, and the piece file names in the meta data pvtk
  file are relative to this directory. This should make
  moving the whole lot to another directory, an easier task.
* obj.UseRelativeFileNamesOn () - This flag determines
  whether to use absolute paths for the piece files. By
  default the pieces are put in the main directory, and the
  piece file names in the meta data pvtk file are relative
  to this directory. This should make moving the whole lot
  to another directory, an easier task.
* obj.UseRelativeFileNamesOff () - This flag determines
  whether to use absolute paths for the piece files. By
  default the pieces are put in the main directory, and the
  piece file names in the meta data pvtk file are relative
  to this directory. This should make moving the whole lot
  to another directory, an easier task.


* FreeMat_Documentation
* Visualization_Toolkit_Parallel_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

