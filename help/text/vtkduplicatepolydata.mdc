
 Usage

This filter collects poly data and duplicates it on every
node. Converts data parallel so every node has a complete
copy of the data. The filter is used at the end of a
pipeline for driving a tiled display.
To create an instance of class vtkDuplicatePolyData, simply
invoke its constructor as follows

    obj = vtkDuplicatePolyData



 Methods

The class vtkDuplicatePolyData has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkDuplicatePolyData class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkDuplicatePolyData = obj.NewInstance ()
* vtkDuplicatePolyData = obj.SafeDownCast (vtkObject o)
* obj.SetController (vtkMultiProcessController ) - By
  defualt this filter uses the global controller, but this
  method can be used to set another instead.
* vtkMultiProcessController = obj.GetController () - By
  defualt this filter uses the global controller, but this
  method can be used to set another instead.
* obj.InitializeSchedule (int numProcs)
* obj.SetSynchronous (int ) - This flag causes sends and
  receives to be matched. When this flag is off, two sends
  occur then two receives. I want to see if it makes a
  difference in performance. The flag is on by default.
* int = obj.GetSynchronous () - This flag causes sends and
  receives to be matched. When this flag is off, two sends
  occur then two receives. I want to see if it makes a
  difference in performance. The flag is on by default.
* obj.SynchronousOn () - This flag causes sends and receives
  to be matched. When this flag is off, two sends occur then
  two receives. I want to see if it makes a difference in
  performance. The flag is on by default.
* obj.SynchronousOff () - This flag causes sends and
  receives to be matched. When this flag is off, two sends
  occur then two receives. I want to see if it makes a
  difference in performance. The flag is on by default.
* vtkSocketController = obj.GetSocketController () - This
  duplicate filter works in client server mode when this
  controller is set. We have a client flag to diferentiate
  the client and server because the socket controller is
  odd: Proth processes think their id is 0.
* obj.SetSocketController (vtkSocketController controller) -
  This duplicate filter works in client server mode when
  this controller is set. We have a client flag to
  diferentiate the client and server because the socket
  controller is odd: Proth processes think their id is 0.
* obj.SetClientFlag (int ) - This duplicate filter works in
  client server mode when this controller is set. We have a
  client flag to diferentiate the client and server because
  the socket controller is odd: Proth processes think their
  id is 0.
* int = obj.GetClientFlag () - This duplicate filter works
  in client server mode when this controller is set. We have
  a client flag to diferentiate the client and server
  because the socket controller is odd: Proth processes
  think their id is 0.
* long = obj.GetMemorySize () - This returns to size of the
  output (on this process). This method is not really used.
  It is needed to have the same API as vtkCollectPolyData.


* FreeMat_Documentation
* Visualization_Toolkit_Parallel_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

