
 Usage

vtkMarchingCubes is a filter that takes as input a volume
(e.g., 3D structured point set) and generates on output one
or more isosurfaces. One or more contour values must be
specified to generate the isosurfaces. Alternatively, you
can specify a min/max scalar range and the number of
contours to generate a series of evenly spaced contour
values.
To create an instance of class vtkMarchingCubes, simply
invoke its constructor as follows

    obj = vtkMarchingCubes



 Methods

The class vtkMarchingCubes has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkMarchingCubes class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkMarchingCubes = obj.NewInstance ()
* vtkMarchingCubes = obj.SafeDownCast (vtkObject o)
* obj.SetValue (int i, double value)
* double = obj.GetValue (int i)
* obj.GetValues (double contourValues)
* obj.SetNumberOfContours (int number)
* int = obj.GetNumberOfContours ()
* obj.GenerateValues (int numContours, double range[2])
* obj.GenerateValues (int numContours, double rangeStart,
  double rangeEnd)
* long = obj.GetMTime ()
* obj.SetComputeNormals (int ) - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* int = obj.GetComputeNormals () - Set/Get the computation
  of normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.ComputeNormalsOn () - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.ComputeNormalsOff () - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.SetComputeGradients (int ) - Set/Get the computation
  of gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* int = obj.GetComputeGradients () - Set/Get the computation
  of gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.ComputeGradientsOn () - Set/Get the computation of
  gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.ComputeGradientsOff () - Set/Get the computation of
  gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.SetComputeScalars (int ) - Set/Get the computation of
  scalars.
* int = obj.GetComputeScalars () - Set/Get the computation
  of scalars.
* obj.ComputeScalarsOn () - Set/Get the computation of
  scalars.
* obj.ComputeScalarsOff () - Set/Get the computation of
  scalars.
* obj.SetLocator (vtkIncrementalPointLocator locator) -
  Overide the default locator. Useful for changing the
  number of bins for performance or specifying a more
  aggressive locator.
* vtkIncrementalPointLocator = obj.GetLocator () - Overide
  the default locator. Useful for changing the number of
  bins for performance or specifying a more aggressive
  locator.
* obj.CreateDefaultLocator () - Create default locator. Used
  to create one when none is specified. The locator is used
  to merge coincident points.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

