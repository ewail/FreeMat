
 Usage

vtkHyperOctreeSampleFunction is a source object that
evaluates an implicit function to drive the subdivision
process. The user can specify the threshold over which a
subdivision occurs, the maximum and minimum level of
subdivisions and the dimension of the hyperoctree.
To create an instance of class vtkHyperOctreeSampleFunction,
simply invoke its constructor as follows

    obj = vtkHyperOctreeSampleFunction



 Methods

The class vtkHyperOctreeSampleFunction has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkHyperOctreeSampleFunction
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkHyperOctreeSampleFunction = obj.NewInstance ()
* vtkHyperOctreeSampleFunction = obj.SafeDownCast (vtkObject
  o)
* int = obj.GetLevels () - Return the maximum number of
  levels of the hyperoctree.


    Postcondition:
        positive_result: result>=1

* obj.SetLevels (int levels) - Set the maximum number of
  levels of the hyperoctree. If GetMinLevels()>=levels,
  GetMinLevels() is changed to levels-1.


    Precondition:
        positive_levels: levels>=1



    Postcondition:
        is_set: this->GetLevels()==levels
        min_is_valid: this->GetMinLevels()<this->GetLevels()

* int = obj.GetMinLevels () - Return the minimal number of
  levels of systematic subdivision.


    Postcondition:
        positive_result: result>=0

* obj.SetMinLevels (int minLevels) - Set the minimal number
  of levels of systematic subdivision.


    Precondition:
        positive_minLevels: minLevels>=0



    Postcondition:
        is_set: this->GetMinLevels()==minLevels

* double = obj.GetThreshold () - Return the threshold over
  which a subdivision is required.


    Postcondition:
        positive_result: result>0

* obj.SetThreshold (double threshold) - Set the threshold
  over which a subdivision is required.


    Precondition:
        positive_threshold: threshold>=0



    Postcondition:
        is_set: this->GetThreshold()==threshold

* int = obj.GetDimension () - Return the dimension of the
  tree (1D:binary tree(2 children), 2D:quadtree(4 children),
  3D:octree (8 children))


    Postcondition:
        valid_result: result>=1 &amp;&amp; result<=3

* obj.SetDimension (int dim)
* obj.SetSize (double , double , double ) - Set the size on
  each axis.
* obj.SetSize (double a[3]) - Set the size on each axis.
* double = obj. GetSize () - Return the size on each axis.
* obj.SetOrigin (double , double , double ) - Set the origin
  (position of corner (0,0,0) of the root.
* obj.SetOrigin (double a[3]) - Set the origin (position of
  corner (0,0,0) of the root.
* double = obj. GetOrigin () - Set the origin (position of
  corner (0,0,0) of the root. Return the origin (position of
  corner (0,0,0) ) of the root.
* double = obj.GetWidth () - Return the length along the x-
  axis.


    Postcondition:
        positive_result: result>0

* obj.SetWidth (double width) - Set the length along the x-
  axis.


    Precondition:
        positive_width: width>0



    Postcondition:
        width_is_set: GetWidth()==width

* double = obj.GetHeight () - Return the length along the y-
  axis. Relevant only if GetDimension()>=2


    Postcondition:
        positive_result: result>0

* obj.SetHeight (double height) - Set the length along the
  y-axis. Relevant only if GetDimension()>=2


    Precondition:
        positive_height: height>0



    Postcondition:
        height_is_set: GetHeight()==height

* double = obj.GetDepth () - Return the length along the z-
  axis. Relevant only if GetDimension()>=3


    Postcondition:
        positive_result: result>0

* obj.SetDepth (double depth) - Return the length along the
  z-axis. Relevant only if GetDimension()>=3


    Precondition:
        positive_depth: depth>0



    Postcondition:
        depth_is_set: GetDepth()==depth

* obj.SetImplicitFunction (vtkImplicitFunction ) - Specify
  the implicit function to use to generate data.
* vtkImplicitFunction = obj.GetImplicitFunction () - Specify
  the implicit function to use to generate data.
* obj.SetOutputScalarType (int ) - Set what type of scalar
  data this source should generate.
* int = obj.GetOutputScalarType () - Set what type of scalar
  data this source should generate.
* obj.SetOutputScalarTypeToDouble () - Set what type of
  scalar data this source should generate.
* obj.SetOutputScalarTypeToFloat () - Set what type of
  scalar data this source should generate.
* obj.SetOutputScalarTypeToLong () - Set what type of scalar
  data this source should generate.
* obj.SetOutputScalarTypeToUnsignedLong () - Set what type
  of scalar data this source should generate.
* obj.SetOutputScalarTypeToInt () - Set what type of scalar
  data this source should generate.
* obj.SetOutputScalarTypeToUnsignedInt () - Set what type of
  scalar data this source should generate.
* obj.SetOutputScalarTypeToShort () - Set what type of
  scalar data this source should generate.
* obj.SetOutputScalarTypeToUnsignedShort () - Set what type
  of scalar data this source should generate.
* obj.SetOutputScalarTypeToChar () - Set what type of scalar
  data this source should generate.
* obj.SetOutputScalarTypeToUnsignedChar () - Return the
  MTime also considering the implicit function.
* long = obj.GetMTime () - Return the MTime also considering
  the implicit function.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

