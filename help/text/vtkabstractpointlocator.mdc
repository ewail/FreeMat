
 Usage

vtkAbstractPointLocator is an abstract spatial search object
to quickly locate points in 3D. vtkAbstractPointLocator
works by dividing a specified region of space into
"rectangular" buckets, and then keeping a list of points
that lie in each bucket. Typical operation involves giving a
position in 3D and finding the closest point. The points are
provided from the specified dataset input.
To create an instance of class vtkAbstractPointLocator,
simply invoke its constructor as follows

    obj = vtkAbstractPointLocator



 Methods

The class vtkAbstractPointLocator has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkAbstractPointLocator class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkAbstractPointLocator = obj.NewInstance ()
* vtkAbstractPointLocator = obj.SafeDownCast (vtkObject o)
* vtkIdType = obj.FindClosestPoint (double x[3]) - Given a
  position x, return the id of the point closest to it.
  Alternative method requires separate x-y-z values. These
  methods are thread safe if BuildLocator() is directly or
  indirectly called from a single thread first.
* vtkIdType = obj.FindClosestPoint (double x, double y,
  double z) - Given a position x, return the id of the point
  closest to it. Alternative method requires separate x-y-
  z values. These methods are thread safe if BuildLocator()
  is directly or indirectly called from a single thread
  first.
* obj.FindClosestNPoints (int N, double x[3], vtkIdList
  result) - Find the closest N points to a position. This
  returns the closest N points to a position. A faster
  method could be created that returned N close points to a
  position, but necessarily the exact N closest. The
  returned points are sorted from closest to farthest. These
  methods are thread safe if BuildLocator() is directly or
  indirectly called from a single thread first.
* obj.FindClosestNPoints (int N, double x, double y, double
  z, vtkIdList result) - Find the closest N points to a
  position. This returns the closest N points to a position.
  A faster method could be created that returned N close
  points to a position, but necessarily the exact N closest.
  The returned points are sorted from closest to farthest.
  These methods are thread safe if BuildLocator() is
  directly or indirectly called from a single thread first.
* obj.FindPointsWithinRadius (double R, double x[3],
  vtkIdList result) - Find all points within a specified
  radius R of position x. The result is not sorted in any
  specific manner. These methods are thread safe if
  BuildLocator() is directly or indirectly called from a
  single thread first.
* obj.FindPointsWithinRadius (double R, double x, double y,
  double z, vtkIdList result) - Find all points within a
  specified radius R of position x. The result is not sorted
  in any specific manner. These methods are thread safe if
  BuildLocator() is directly or indirectly called from a
  single thread first.
* obj.GetBounds (double ) - Provide an accessor to the
  bounds.
* obj.FreeSearchStructure () - See vtkLocator interface
  documentation. These methods are not thread safe.
* obj.BuildLocator () - See vtkLocator interface
  documentation. These methods are not thread safe.
* obj.GenerateRepresentation (int level, vtkPolyData pd) -
  See vtkLocator interface documentation. These methods are
  not thread safe.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

