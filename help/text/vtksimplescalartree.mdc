
 Usage

vtkSimpleScalarTree creates a pointerless binary tree that
helps search for cells that lie within a particular scalar
range. This object is used to accelerate some contouring
(and other scalar-based techniques).
The tree consists of an array of (min,max) scalar range
pairs per node in the tree. The (min,max) range is
determined from looking at the range of the children of the
tree node. If the node is a leaf, then the range is
determined by scanning the range of scalar data in n cells
in the dataset. The n cells are determined by arbitrary
selecting cell ids from id(i) to id(i+n), and where n is
specified using the BranchingFactor ivar. Note that leaf
node i=0 contains the scalar range computed from cell ids
(0,n-1); leaf node i=1 contains the range from cell ids
(n,2n-1); and so on. The implication is that there are no
direct lists of cell ids per leaf node, instead the cell ids
are implicitly known.
To create an instance of class vtkSimpleScalarTree, simply
invoke its constructor as follows

    obj = vtkSimpleScalarTree



 Methods

The class vtkSimpleScalarTree has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkSimpleScalarTree class.

* string = obj.GetClassName () - Standard type related
  macros and PrintSelf() method.
* int = obj.IsA (string name) - Standard type related macros
  and PrintSelf() method.
* vtkSimpleScalarTree = obj.NewInstance () - Standard type
  related macros and PrintSelf() method.
* vtkSimpleScalarTree = obj.SafeDownCast (vtkObject o) -
  Standard type related macros and PrintSelf() method.
* obj.SetBranchingFactor (int ) - Set the branching factor
  for the tree. This is the number of children per tree
  node. Smaller values (minimum is 2) mean deeper trees and
  more memory overhead. Larger values mean shallower trees,
  less memory usage, but worse performance.
* int = obj.GetBranchingFactorMinValue () - Set the
  branching factor for the tree. This is the number of
  children per tree node. Smaller values (minimum is 2) mean
  deeper trees and more memory overhead. Larger values mean
  shallower trees, less memory usage, but worse performance.
* int = obj.GetBranchingFactorMaxValue () - Set the
  branching factor for the tree. This is the number of
  children per tree node. Smaller values (minimum is 2) mean
  deeper trees and more memory overhead. Larger values mean
  shallower trees, less memory usage, but worse performance.
* int = obj.GetBranchingFactor () - Set the branching factor
  for the tree. This is the number of children per tree
  node. Smaller values (minimum is 2) mean deeper trees and
  more memory overhead. Larger values mean shallower trees,
  less memory usage, but worse performance.
* int = obj.GetLevel () - Get the level of the scalar tree.
  This value may change each time the scalar tree is built
  and the branching factor changes.
* obj.SetMaxLevel (int ) - Set the maximum allowable level
  for the tree.
* int = obj.GetMaxLevelMinValue () - Set the maximum
  allowable level for the tree.
* int = obj.GetMaxLevelMaxValue () - Set the maximum
  allowable level for the tree.
* int = obj.GetMaxLevel () - Set the maximum allowable level
  for the tree.
* obj.BuildTree () - Construct the scalar tree from the
  dataset provided. Checks build times and modified time
  from input and reconstructs the tree if necessary.
* obj.Initialize () - Initialize locator. Frees memory and
  resets object as appropriate.
* obj.InitTraversal (double scalarValue) - Begin to traverse
  the cells based on a scalar value. Returned cells will
  have scalar values that span the scalar value specified.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

