
 Usage

vtkWedge is a concrete implementation of vtkCell to
represent a linear 3D wedge. A wedge consists of two
triangular and three quadrilateral faces and is defined by
the six points (0-5). vtkWedge uses the standard
isoparametric shape functions for a linear wedge. The wedge
is defined by the six points (0-5) where (0,1,2) is the base
of the wedge which, using the right hand rule, forms a
triangle whose normal points outward (away from the
triangular face (3,4,5)).
To create an instance of class vtkWedge, simply invoke its
constructor as follows

    obj = vtkWedge



 Methods

The class vtkWedge has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkWedge class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkWedge = obj.NewInstance ()
* vtkWedge = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - See the vtkCell API
  for descriptions of these methods.
* vtkCell = obj.GetFace (int faceId) - See the vtkCell API
  for descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the wedge in parametric coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[6]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [18]) - Compute the interpolation functions/derivatives
  (aka shape functions/derivatives)


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

