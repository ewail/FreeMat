
 Usage

A vtkLandmarkTransform is defined by two sets of landmarks,
the transform computed gives the best fit mapping one onto
the other, in a least squares sense. The indices are taken
to correspond, so point 1 in the first set will get mapped
close to point 1 in the second set, etc. Call
SetSourceLandmarks and SetTargetLandmarks to specify the two
sets of landmarks, ensure they have the same number of
points.
To create an instance of class vtkLandmarkTransform, simply
invoke its constructor as follows

    obj = vtkLandmarkTransform



 Methods

The class vtkLandmarkTransform has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkLandmarkTransform class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkLandmarkTransform = obj.NewInstance ()
* vtkLandmarkTransform = obj.SafeDownCast (vtkObject o)
* obj.SetSourceLandmarks (vtkPoints points) - Specify the
  source and target landmark sets. The two sets must have
  the same number of points. If you add or change points in
  these objects, you must call Modified() on them or the
  transformation might not update.
* obj.SetTargetLandmarks (vtkPoints points) - Specify the
  source and target landmark sets. The two sets must have
  the same number of points. If you add or change points in
  these objects, you must call Modified() on them or the
  transformation might not update.
* vtkPoints = obj.GetSourceLandmarks () - Specify the source
  and target landmark sets. The two sets must have the same
  number of points. If you add or change points in these
  objects, you must call Modified() on them or the
  transformation might not update.
* vtkPoints = obj.GetTargetLandmarks () - Specify the source
  and target landmark sets. The two sets must have the same
  number of points. If you add or change points in these
  objects, you must call Modified() on them or the
  transformation might not update.
* obj.SetMode (int ) - Set the number of degrees of freedom
  to constrain the solution to. Rigidbody
  (VTK_LANDMARK_RIGIDBODY): rotation and translation only.
  Similarity (VTK_LANDMARK_SIMILARITY): rotation,
  translation and isotropic scaling. Affine
  (VTK_LANDMARK_AFFINE): collinearity is preserved. Ratios
  of distances along a line are preserved. The default is
  similarity.
* obj.SetModeToRigidBody () - Set the number of degrees of
  freedom to constrain the solution to. Rigidbody
  (VTK_LANDMARK_RIGIDBODY): rotation and translation only.
  Similarity (VTK_LANDMARK_SIMILARITY): rotation,
  translation and isotropic scaling. Affine
  (VTK_LANDMARK_AFFINE): collinearity is preserved. Ratios
  of distances along a line are preserved. The default is
  similarity.
* obj.SetModeToSimilarity () - Set the number of degrees of
  freedom to constrain the solution to. Rigidbody
  (VTK_LANDMARK_RIGIDBODY): rotation and translation only.
  Similarity (VTK_LANDMARK_SIMILARITY): rotation,
  translation and isotropic scaling. Affine
  (VTK_LANDMARK_AFFINE): collinearity is preserved. Ratios
  of distances along a line are preserved. The default is
  similarity.
* obj.SetModeToAffine () - Set the number of degrees of
  freedom to constrain the solution to. Rigidbody
  (VTK_LANDMARK_RIGIDBODY): rotation and translation only.
  Similarity (VTK_LANDMARK_SIMILARITY): rotation,
  translation and isotropic scaling. Affine
  (VTK_LANDMARK_AFFINE): collinearity is preserved. Ratios
  of distances along a line are preserved. The default is
  similarity.
* int = obj.GetMode () - Get the current transformation
  mode.
* string = obj.GetModeAsString () - Get the current
  transformation mode.
* obj.Inverse () - Invert the transformation. This is done
  by switching the source and target landmarks.
* long = obj.GetMTime () - Get the MTime.
* vtkAbstractTransform = obj.MakeTransform () - Make another
  transform of the same type.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

