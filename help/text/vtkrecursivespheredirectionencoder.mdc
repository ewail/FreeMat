
 Usage

vtkRecursiveSphereDirectionEncoder is a direction encoder
which uses the vertices of a recursive subdivision of an
octahedron (with the vertices pushed out onto the surface of
an enclosing sphere) to encode directions into a two byte
value.
To create an instance of class
vtkRecursiveSphereDirectionEncoder, simply invoke its
constructor as follows

    obj = vtkRecursiveSphereDirectionEncoder



 Methods

The class vtkRecursiveSphereDirectionEncoder has several
methods that can be used. They are listed below. Note that
the documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkRecursiveSphereDirectionEncoder
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRecursiveSphereDirectionEncoder = obj.NewInstance ()
* vtkRecursiveSphereDirectionEncoder = obj.SafeDownCast
  (vtkObject o)
* int = obj.GetEncodedDirection (float n[3]) - Given a
  normal vector n, return the encoded direction
* float = obj.GetDecodedGradient (int value) - / Given an
  encoded value, return a pointer to the normal vector
* int = obj.GetNumberOfEncodedDirections (void ) - Return
  the number of encoded directions
* obj.SetRecursionDepth (int ) - Set / Get the recursion
  depth for the subdivision. This indicates how many time
  one triangle on the initial 8-sided sphere model is
  replaced by four triangles formed by connecting triangle
  edge midpoints. A recursion level of 0 yields 8 triangles
  with 6 unique vertices. The normals are the vectors from
  the sphere center through the vertices. The number of
  directions will be 11 since the four normals with 0 z
  values will be duplicated in the table - once with +0
  values and the other time with -0 values, and an addition
  index will be used to represent the (0,0,0) normal. If we
  instead choose a recursion level of 6 (the maximum that
  can fit within 2 bytes) the number of directions is 16643,
  with 16386 unique directions and a zero normal.
* int = obj.GetRecursionDepthMinValue () - Set / Get the
  recursion depth for the subdivision. This indicates how
  many time one triangle on the initial 8-sided sphere model
  is replaced by four triangles formed by connecting
  triangle edge midpoints. A recursion level of 0 yields 8
  triangles with 6 unique vertices. The normals are the
  vectors from the sphere center through the vertices. The
  number of directions will be 11 since the four normals
  with 0 z values will be duplicated in the table - once
  with +0 values and the other time with -0 values, and an
  addition index will be used to represent the (0,0,0)
  normal. If we instead choose a recursion level of 6 (the
  maximum that can fit within 2 bytes) the number of
  directions is 16643, with 16386 unique directions and a
  zero normal.
* int = obj.GetRecursionDepthMaxValue () - Set / Get the
  recursion depth for the subdivision. This indicates how
  many time one triangle on the initial 8-sided sphere model
  is replaced by four triangles formed by connecting
  triangle edge midpoints. A recursion level of 0 yields 8
  triangles with 6 unique vertices. The normals are the
  vectors from the sphere center through the vertices. The
  number of directions will be 11 since the four normals
  with 0 z values will be duplicated in the table - once
  with +0 values and the other time with -0 values, and an
  addition index will be used to represent the (0,0,0)
  normal. If we instead choose a recursion level of 6 (the
  maximum that can fit within 2 bytes) the number of
  directions is 16643, with 16386 unique directions and a
  zero normal.
* int = obj.GetRecursionDepth () - Set / Get the recursion
  depth for the subdivision. This indicates how many time
  one triangle on the initial 8-sided sphere model is
  replaced by four triangles formed by connecting triangle
  edge midpoints. A recursion level of 0 yields 8 triangles
  with 6 unique vertices. The normals are the vectors from
  the sphere center through the vertices. The number of
  directions will be 11 since the four normals with 0 z
  values will be duplicated in the table - once with +0
  values and the other time with -0 values, and an addition
  index will be used to represent the (0,0,0) normal. If we
  instead choose a recursion level of 6 (the maximum that
  can fit within 2 bytes) the number of directions is 16643,
  with 16386 unique directions and a zero normal.


* FreeMat_Documentation
* Visualization_Toolkit_Volume_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

