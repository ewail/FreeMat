
 Usage

vtkMultiBlockDataSet is a vtkCompositeDataSet that stores a
hierarchy of datasets. The dataset collection consists of
multiple blocks. Each block can itself be a
vtkMultiBlockDataSet, thus providing for a full tree
structure. Sub-blocks are usually used to distribute blocks
across processors. For example, a 1 block dataset can be
distributed as following:

   proc 0:
   Block 0:
     * ds 0
     * (null)

   proc 1:
   Block 0:
     * (null)
     * ds 1

To create an instance of class vtkMultiBlockDataSet, simply
invoke its constructor as follows

    obj = vtkMultiBlockDataSet



 Methods

The class vtkMultiBlockDataSet has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkMultiBlockDataSet class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkMultiBlockDataSet = obj.NewInstance ()
* vtkMultiBlockDataSet = obj.SafeDownCast (vtkObject o)
* int = obj.GetDataObjectType () - Set the number of blocks.
  This will cause allocation if the new number of blocks is
  greater than the current size. All new blocks are
  initialized to null.
* obj.SetNumberOfBlocks (int numBlocks) - Set the number of
  blocks. This will cause allocation if the new number of
  blocks is greater than the current size. All new blocks
  are initialized to null.
* int = obj.GetNumberOfBlocks () - Returns the number of
  blocks.
* vtkDataObject = obj.GetBlock (int blockno) - Returns the
  block at the given index. It is recommended that one uses
  the iterators to iterate over composite datasets rather
  than using this API.
* obj.SetBlock (int blockno, vtkDataObject block) - Sets the
  data object as the given block. The total number of blocks
  will be resized to fit the requested block no.
* obj.RemoveBlock (int blockno) - Remove the given block
  from the dataset.
* int = obj.HasMetaData (int blockno) - Returns the meta-
  data for the block. If none is already present, a new
  vtkInformation object will be allocated. Use HasMetaData
  to avoid allocating vtkInformation objects.
* vtkInformation = obj.GetMetaData (int blockno) - Unhiding
  superclass method.
* vtkInformation = obj.GetMetaData (vtkCompositeDataIterator
  iter) - Unhiding superclass method.
* int = obj.HasMetaData (vtkCompositeDataIterator iter)


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

