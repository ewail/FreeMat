
 Usage

vtkPointSet is an abstract class that specifies the
interface for datasets that explicitly use "point" arrays to
represent geometry. For example, vtkPolyData and
vtkUnstructuredGrid require point arrays to specify point
position, while vtkStructuredPoints generates point
positions implicitly.
To create an instance of class vtkPointSet, simply invoke
its constructor as follows

    obj = vtkPointSet



 Methods

The class vtkPointSet has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkPointSet class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkPointSet = obj.NewInstance ()
* vtkPointSet = obj.SafeDownCast (vtkObject o)
* obj.Initialize () - Reset to an empty state and free any
  memory.
* obj.CopyStructure (vtkDataSet pd) - Copy the geometric
  structure of an input point set object.
* vtkIdType = obj.GetNumberOfPoints () - See vtkDataSet for
  additional information.
* double = obj.GetPoint (vtkIdType ptId) - See vtkDataSet
  for additional information.
* obj.GetPoint (vtkIdType ptId, double x[3]) - See
  vtkDataSet for additional information.
* vtkIdType = obj.FindPoint (double x[3]) - See vtkDataSet
  for additional information.
* vtkIdType = obj.FindPoint (double x, double y, double z) -
  See vtkDataSet for additional information.
* long = obj.GetMTime () - Get MTime which also considers
  its vtkPoints MTime.
* obj.ComputeBounds () - Compute the (X, Y, Z) bounds of the
  data.
* obj.Squeeze () - Reclaim any unused memory.
* obj.SetPoints (vtkPoints ) - Specify point array to define
  point coordinates.
* vtkPoints = obj.GetPoints () - Specify point array to
  define point coordinates.
* long = obj.GetActualMemorySize () - Return the actual size
  of the data in kilobytes. This number is valid only after
  the pipeline has updated. The memory size returned is
  guaranteed to be greater than or equal to the memory
  required to represent the data (e.g., extra space in
  arrays, etc. are not included in the return value). THIS
  METHOD IS THREAD SAFE.
* obj.ShallowCopy (vtkDataObject src) - Shallow and Deep
  copy.
* obj.DeepCopy (vtkDataObject src) - Shallow and Deep copy.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

