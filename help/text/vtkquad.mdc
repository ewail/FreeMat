
 Usage

vtkQuad is a concrete implementation of vtkCell to represent
a 2D quadrilateral. vtkQuad is defined by the four points
(0,1,2,3) in counterclockwise order. vtkQuad uses the
standard isoparametric interpolation functions for a linear
quadrilateral.
To create an instance of class vtkQuad, simply invoke its
constructor as follows

    obj = vtkQuad



 Methods

The class vtkQuad has several methods that can be used. They
are listed below. Note that the documentation is translated
automatically from the VTK sources, and may not be
completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkQuad class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkQuad = obj.NewInstance ()
* vtkQuad = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - See the vtkCell API
  for descriptions of these methods.
* vtkCell = obj.GetFace (int ) - See the vtkCell API for
  descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the triangle in parametric coordinates.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray polys,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this quad using scalar value provided. Like contouring,
  except that it cuts the quad to produce other quads and/or
  triangles.
* obj.InterpolateFunctions (double pcoords[3], double sf[4])
  - Compute the interpolation functions/derivatives (aka
  shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [8]) - Return the ids of the vertices defining edge
  (edgeId). Ids are related to the cell, not to the dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

