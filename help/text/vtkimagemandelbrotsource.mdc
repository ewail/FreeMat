
 Usage

vtkImageMandelbrotSource creates an unsigned char image of
the Mandelbrot set. The values in the image are the number
of iterations it takes for the magnitude of the value to get
over 2. The equation repeated is z = z^2 + C (z and C are
complex). Initial value of z is zero, and the real value of
C is mapped onto the x axis, and the imaginary value of C is
mapped onto the Y Axis. I was thinking of extending this
source to generate Julia Sets (initial value of Z varies).
This would be 4 possible parameters to vary, but there are
no more 4d images :( The third dimension (z axis) is the
imaginary value of the initial value.
To create an instance of class vtkImageMandelbrotSource,
simply invoke its constructor as follows

    obj = vtkImageMandelbrotSource



 Methods

The class vtkImageMandelbrotSource has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkImageMandelbrotSource class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageMandelbrotSource = obj.NewInstance ()
* vtkImageMandelbrotSource = obj.SafeDownCast (vtkObject o)
* obj.SetWholeExtent (int extent[6]) - Set/Get the extent of
  the whole output Volume.
* obj.SetWholeExtent (int minX, int maxX, int minY, int
  maxY, int minZ, int maxZ) - Set/Get the extent of the
  whole output Volume.
* int = obj. GetWholeExtent () - Set/Get the extent of the
  whole output Volume.
* obj.SetConstantSize (int ) - This flag determines whether
  the Size or spacing of a data set remain constant (when
  extent is changed). By default, size remains constant.
* int = obj.GetConstantSize () - This flag determines
  whether the Size or spacing of a data set remain constant
  (when extent is changed). By default, size remains
  constant.
* obj.ConstantSizeOn () - This flag determines whether the
  Size or spacing of a data set remain constant (when extent
  is changed). By default, size remains constant.
* obj.ConstantSizeOff () - This flag determines whether the
  Size or spacing of a data set remain constant (when extent
  is changed). By default, size remains constant.
* obj.SetProjectionAxes (int x, int y, int z) - Set the
  projection from the 4D space (4 parameters / 2 imaginary
  numbers) to the axes of the 3D Volume. 0=C_Real,
  1=C_Imaginary, 2=X_Real, 4=X_Imaginary
* obj.SetProjectionAxes (int a[3]) - Set the projection from
  the 4D space (4 parameters / 2 imaginary numbers) to the
  axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real,
  4=X_Imaginary
* int = obj. GetProjectionAxes () - Set the projection from
  the 4D space (4 parameters / 2 imaginary numbers) to the
  axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real,
  4=X_Imaginary
* obj.SetOriginCX (double , double , double , double ) -
  Imaginary and real value for C (constant in equation) and
  X (initial value).
* obj.SetOriginCX (double a[4]) - Imaginary and real value
  for C (constant in equation) and X (initial value).
* double = obj. GetOriginCX () - Imaginary and real value
  for C (constant in equation) and X (initial value). void
  SetOriginCX(double cReal, double cImag, double xReal,
  double xImag);
* obj.SetSampleCX (double , double , double , double ) -
  Imaginary and real value for C (constant in equation) and
  X (initial value).
* obj.SetSampleCX (double a[4]) - Imaginary and real value
  for C (constant in equation) and X (initial value).
* double = obj. GetSampleCX () - Imaginary and real value
  for C (constant in equation) and X (initial value). void
  SetOriginCX(double cReal, double cImag, double xReal,
  double xImag);
* obj.SetSizeCX (double cReal, double cImag, double xReal,
  double xImag) - Just a different way of setting the
  sample. This sets the size of the 4D volume. SampleCX is
  computed from size and extent. Size is ignored when a
  dimension i 0 (collapsed).
* double = obj.GetSizeCX () - Just a different way of
  setting the sample. This sets the size of the 4D volume.
  SampleCX is computed from size and extent. Size is ignored
  when a dimension i 0 (collapsed).
* obj.GetSizeCX (double s[4]) - Just a different way of
  setting the sample. This sets the size of the 4D volume.
  SampleCX is computed from size and extent. Size is ignored
  when a dimension i 0 (collapsed).
* obj.SetMaximumNumberOfIterations (short ) - The maximum
  number of cycles run to see if the value goes over 2
* GetMaximumNumberOfIterationsMinValue = obj.() - The
  maximum number of cycles run to see if the value goes over
  2
* GetMaximumNumberOfIterationsMaxValue = obj.() - The
  maximum number of cycles run to see if the value goes over
  2
* short = obj.GetMaximumNumberOfIterations () - The maximum
  number of cycles run to see if the value goes over 2
* obj.Zoom (double factor) - Convienence for Viewer. Pan 3D
  volume relative to spacing. Zoom constant factor.
* obj.Pan (double x, double y, double z) - Convienence for
  Viewer. Pan 3D volume relative to spacing. Zoom constant
  factor.
* obj.CopyOriginAndSample (vtkImageMandelbrotSource source)
  - Convienence for Viewer. Copy the OriginCX and the
  SpacingCX. What about other parameters ???
* obj.SetSubsampleRate (int ) - Set/Get a subsample rate.
* int = obj.GetSubsampleRateMinValue () - Set/Get a
  subsample rate.
* int = obj.GetSubsampleRateMaxValue () - Set/Get a
  subsample rate.
* int = obj.GetSubsampleRate () - Set/Get a subsample rate.


* FreeMat_Documentation
* Visualization_Toolkit_Imaging_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

