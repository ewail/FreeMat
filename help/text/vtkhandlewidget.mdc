
 Usage

The vtkHandleWidget is used to position a handle. A handle
is a widget with a position (in display and world space).
Various appearances are available depending on its
associated representation. The widget provides methods for
translation, including constrained translation along
coordinate axes. To use this widget, create and associate a
representation with the widget.
.SECTION Event Bindings By default, the widget responds to
the following VTK events (i.e., it watches the
vtkRenderWindowInteractor for these events):

     LeftButtonPressEvent - select focal point of widget
     LeftButtonReleaseEvent - end selection
     MiddleButtonPressEvent - translate widget
     MiddleButtonReleaseEvent - end translation
     RightButtonPressEvent - scale widget
     RightButtonReleaseEvent - end scaling
     MouseMoveEvent - interactive movement across widget

Note that the event bindings described above can be changed
using this class's vtkWidgetEventTranslator. This class
translates VTK events into the vtkHandleWidget's widget
events:

     vtkWidgetEvent::Select &ndash; focal point is being
  selected
     vtkWidgetEvent::EndSelect &ndash; the selection process
  has completed
     vtkWidgetEvent::Translate &ndash; translate the widget
     vtkWidgetEvent::EndTranslate &ndash; end widget
  translation
     vtkWidgetEvent::Scale &ndash; scale the widget
     vtkWidgetEvent::EndScale &ndash; end scaling the widget
     vtkWidgetEvent::Move &ndash; a request for widget
  motion

In turn, when these widget events are processed, the
vtkHandleWidget invokes the following VTK events on itself
(which observers can listen for):

     vtkCommand::StartInteractionEvent (on vtkWidgetEvent::
  Select)
     vtkCommand::EndInteractionEvent (on vtkWidgetEvent::
  EndSelect)
     vtkCommand::InteractionEvent (on vtkWidgetEvent::Move)

To create an instance of class vtkHandleWidget, simply
invoke its constructor as follows

    obj = vtkHandleWidget



 Methods

The class vtkHandleWidget has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkHandleWidget class.

* string = obj.GetClassName () - Standard VTK class macros.
* int = obj.IsA (string name) - Standard VTK class macros.
* vtkHandleWidget = obj.NewInstance () - Standard VTK class
  macros.
* vtkHandleWidget = obj.SafeDownCast (vtkObject o) -
  Standard VTK class macros.
* obj.SetRepresentation (vtkHandleRepresentation r) - Create
  the default widget representation if one is not set. By
  default an instance of vtkPointHandleRepresenation3D is
  created.
* obj.CreateDefaultRepresentation () - Create the default
  widget representation if one is not set. By default an
  instance of vtkPointHandleRepresenation3D is created.
* obj.SetEnableAxisConstraint (int ) - Enable / disable axis
  constrained motion of the handles. By default the widget
  responds to the shift modifier to constrain the handle
  along the axis closest aligned with the motion vector.
* int = obj.GetEnableAxisConstraint () - Enable / disable
  axis constrained motion of the handles. By default the
  widget responds to the shift modifier to constrain the
  handle along the axis closest aligned with the motion
  vector.
* obj.EnableAxisConstraintOn () - Enable / disable axis
  constrained motion of the handles. By default the widget
  responds to the shift modifier to constrain the handle
  along the axis closest aligned with the motion vector.
* obj.EnableAxisConstraintOff () - Enable / disable axis
  constrained motion of the handles. By default the widget
  responds to the shift modifier to constrain the handle
  along the axis closest aligned with the motion vector.
* obj.SetAllowHandleResize (int ) - Allow resizing of
  handles ? By default the right mouse button scales the
  handle size.
* int = obj.GetAllowHandleResize () - Allow resizing of
  handles ? By default the right mouse button scales the
  handle size.
* obj.AllowHandleResizeOn () - Allow resizing of handles ?
  By default the right mouse button scales the handle size.
* obj.AllowHandleResizeOff () - Allow resizing of handles ?
  By default the right mouse button scales the handle size.
* int = obj.GetWidgetState () - Get the widget state.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

