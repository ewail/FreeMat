
 Usage

vtkPLYWriter writes polygonal data in Stanford University
PLY format (see http://graphics.stanford.edu/data/3Dscanrep/
). The data can be written in either binary (little or big
endian) or ASCII representation. As for PointData and
CellData, vtkPLYWriter cannot handle normals or vectors. It
only handles RGB PointData and CellData. You need to set the
name of the array (using SetName for the array and
SetArrayName for the writer). If the array is not a
vtkUnsignedCharArray with 3 components, you need to specify
a vtkLookupTable to map the scalars to RGB.
To create an instance of class vtkPLYWriter, simply invoke
its constructor as follows

    obj = vtkPLYWriter



 Methods

The class vtkPLYWriter has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkPLYWriter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkPLYWriter = obj.NewInstance ()
* vtkPLYWriter = obj.SafeDownCast (vtkObject o)
* obj.SetDataByteOrder (int ) - If the file type is binary,
  then the user can specify which byte order to use (little
  versus big endian).
* int = obj.GetDataByteOrderMinValue () - If the file type
  is binary, then the user can specify which byte order to
  use (little versus big endian).
* int = obj.GetDataByteOrderMaxValue () - If the file type
  is binary, then the user can specify which byte order to
  use (little versus big endian).
* int = obj.GetDataByteOrder () - If the file type is
  binary, then the user can specify which byte order to use
  (little versus big endian).
* obj.SetDataByteOrderToBigEndian () - If the file type is
  binary, then the user can specify which byte order to use
  (little versus big endian).
* obj.SetDataByteOrderToLittleEndian () - These methods
  enable the user to control how to add color into the PLY
  output file. The default behavior is as follows. The user
  provides the name of an array and a component number. If
  the type of the array is three components, unsigned char,
  then the data is written as three separate "red", "green"
  and "blue" properties. If the type is not unsigned char,
  and a lookup table is provided, then the array/component
  are mapped through the table to generate three separate
  "red", "green" and "blue" properties in the PLY file. The
  user can also set the ColorMode to specify a uniform color
  for the whole part (on a vertex colors, face colors, or
  both. (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* obj.SetColorMode (int ) - These methods enable the user to
  control how to add color into the PLY output file. The
  default behavior is as follows. The user provides the name
  of an array and a component number. If the type of the
  array is three components, unsigned char, then the data is
  written as three separate "red", "green" and "blue"
  properties. If the type is not unsigned char, and a lookup
  table is provided, then the array/component are mapped
  through the table to generate three separate "red",
  "green" and "blue" properties in the PLY file. The user
  can also set the ColorMode to specify a uniform color for
  the whole part (on a vertex colors, face colors, or both.
  (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* int = obj.GetColorMode () - These methods enable the user
  to control how to add color into the PLY output file. The
  default behavior is as follows. The user provides the name
  of an array and a component number. If the type of the
  array is three components, unsigned char, then the data is
  written as three separate "red", "green" and "blue"
  properties. If the type is not unsigned char, and a lookup
  table is provided, then the array/component are mapped
  through the table to generate three separate "red",
  "green" and "blue" properties in the PLY file. The user
  can also set the ColorMode to specify a uniform color for
  the whole part (on a vertex colors, face colors, or both.
  (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* obj.SetColorModeToDefault () - These methods enable the
  user to control how to add color into the PLY output file.
  The default behavior is as follows. The user provides the
  name of an array and a component number. If the type of
  the array is three components, unsigned char, then the
  data is written as three separate "red", "green" and
  "blue" properties. If the type is not unsigned char, and a
  lookup table is provided, then the array/component are
  mapped through the table to generate three separate "red",
  "green" and "blue" properties in the PLY file. The user
  can also set the ColorMode to specify a uniform color for
  the whole part (on a vertex colors, face colors, or both.
  (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* obj.SetColorModeToUniformCellColor () - These methods
  enable the user to control how to add color into the PLY
  output file. The default behavior is as follows. The user
  provides the name of an array and a component number. If
  the type of the array is three components, unsigned char,
  then the data is written as three separate "red", "green"
  and "blue" properties. If the type is not unsigned char,
  and a lookup table is provided, then the array/component
  are mapped through the table to generate three separate
  "red", "green" and "blue" properties in the PLY file. The
  user can also set the ColorMode to specify a uniform color
  for the whole part (on a vertex colors, face colors, or
  both. (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* obj.SetColorModeToUniformPointColor () - These methods
  enable the user to control how to add color into the PLY
  output file. The default behavior is as follows. The user
  provides the name of an array and a component number. If
  the type of the array is three components, unsigned char,
  then the data is written as three separate "red", "green"
  and "blue" properties. If the type is not unsigned char,
  and a lookup table is provided, then the array/component
  are mapped through the table to generate three separate
  "red", "green" and "blue" properties in the PLY file. The
  user can also set the ColorMode to specify a uniform color
  for the whole part (on a vertex colors, face colors, or
  both. (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* obj.SetColorModeToUniformColor () - These methods enable
  the user to control how to add color into the PLY output
  file. The default behavior is as follows. The user
  provides the name of an array and a component number. If
  the type of the array is three components, unsigned char,
  then the data is written as three separate "red", "green"
  and "blue" properties. If the type is not unsigned char,
  and a lookup table is provided, then the array/component
  are mapped through the table to generate three separate
  "red", "green" and "blue" properties in the PLY file. The
  user can also set the ColorMode to specify a uniform color
  for the whole part (on a vertex colors, face colors, or
  both. (Note: vertex colors or cell colors may be written,
  depending on where the named array is found. If points and
  cells have the arrays with the same name, then both colors
  will be written.)
* obj.SetColorModeToOff () - Specify the array name to use
  to color the data.
* obj.SetArrayName (string ) - Specify the array name to use
  to color the data.
* string = obj.GetArrayName () - Specify the array name to
  use to color the data.
* obj.SetComponent (int ) - Specify the array component to
  use to color the data.
* int = obj.GetComponentMinValue () - Specify the array
  component to use to color the data.
* int = obj.GetComponentMaxValue () - Specify the array
  component to use to color the data.
* int = obj.GetComponent () - Specify the array component to
  use to color the data.
* obj.SetLookupTable (vtkScalarsToColors ) - A lookup table
  can be specified in order to convert data arrays to RGBA
  colors.
* vtkScalarsToColors = obj.GetLookupTable () - A lookup
  table can be specified in order to convert data arrays to
  RGBA colors.
* obj.SetColor (char , char , char ) - Set the color to use
  when using a uniform color (either point or cells, or
  both). The color is specified as a triplet of three
  unsigned chars between (0,255). This only takes effect
  when the ColorMode is set to uniform point, uniform cell,
  or uniform color.
* obj.SetColor (char a[3]) - Set the color to use when using
  a uniform color (either point or cells, or both). The
  color is specified as a triplet of three unsigned chars
  between (0,255). This only takes effect when the ColorMode
  is set to uniform point, uniform cell, or uniform color.
* char = obj. GetColor () - Set the color to use when using
  a uniform color (either point or cells, or both). The
  color is specified as a triplet of three unsigned chars
  between (0,255). This only takes effect when the ColorMode
  is set to uniform point, uniform cell, or uniform color.


* FreeMat_Documentation
* Visualization_Toolkit_IO_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

