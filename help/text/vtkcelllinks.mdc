
 Usage

vtkCellLinks is a supplemental object to vtkCellArray and
vtkCellTypes, enabling access from points to the cells using
the points. vtkCellLinks is a list of Links, each link
represents a dynamic list of cell id's using the point. The
information provided by this object can be used to determine
neighbors and construct other local topological information.
To create an instance of class vtkCellLinks, simply invoke
its constructor as follows

    obj = vtkCellLinks



 Methods

The class vtkCellLinks has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkCellLinks class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCellLinks = obj.NewInstance ()
* vtkCellLinks = obj.SafeDownCast (vtkObject o)
* obj.Allocate (vtkIdType numLinks, vtkIdType ext) -
  Allocate the specified number of links (i.e., number of
  points) that will be built.
* short = obj.GetNcells (vtkIdType ptId) - Get the number of
  cells using the point specified by ptId.
* obj.BuildLinks (vtkDataSet data) - Build the link list
  array.
* obj.BuildLinks (vtkDataSet data, vtkCellArray
  Connectivity) - Build the link list array.
* vtkIdType = obj.GetCells (vtkIdType ptId) - Return a list
  of cell ids using the point.
* vtkIdType = obj.InsertNextPoint (int numLinks) - Insert a
  new point into the cell-links data structure. The size
  parameter is the initial size of the list.
* obj.InsertNextCellReference (vtkIdType ptId, vtkIdType
  cellId) - Insert a cell id into the list of cells (at the
  end) using the cell id provided. (Make sure to extend the
  link list (if necessary) using the method ResizeCellList
  ().)
* obj.DeletePoint (vtkIdType ptId) - Delete point (and
  storage) by destroying links to using cells.
* obj.RemoveCellReference (vtkIdType cellId, vtkIdType ptId)
  - Delete the reference to the cell (cellId) from the point
  (ptId). This removes the reference to the cellId from the
  cell list, but does not resize the list (recover memory
  with ResizeCellList(), if necessary).
* obj.AddCellReference (vtkIdType cellId, vtkIdType ptId) -
  Add the reference to the cell (cellId) from the point
  (ptId). This adds a reference to the cellId from the cell
  list, but does not resize the list (extend memory with
  ResizeCellList(), if necessary).
* obj.ResizeCellList (vtkIdType ptId, int size) - Change the
  length of a point's link list (i.e., list of cells using a
  point) by the size specified.
* obj.Squeeze () - Reclaim any unused memory.
* obj.Reset () - Reset to a state of no entries without
  freeing the memory.
* long = obj.GetActualMemorySize () - Return the memory in
  kilobytes consumed by this cell links array. Used to
  support streaming and reading/writing data. The value
  returned is guaranteed to be greater than or equal to the
  memory required to actually represent the data represented
  by this object. The information returned is valid only
  after the pipeline has been updated.
* obj.DeepCopy (vtkCellLinks src) - Standard DeepCopy
  method. Since this object contains no reference to other
  objects, there is no ShallowCopy.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

