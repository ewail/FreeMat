
 Usage

vtkVertex is a concrete implementation of vtkCell to
represent a 3D point.
To create an instance of class vtkVertex, simply invoke its
constructor as follows

    obj = vtkVertex



 Methods

The class vtkVertex has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkVertex class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkVertex = obj.NewInstance ()
* vtkVertex = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetFace (int ) - See the vtkCell API for
  descriptions of these methods.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray pts,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - See
  the vtkCell API for descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - Given parametric coordinates of a point,
  return the closest cell boundary, and whether the point is
  inside or outside of the cell. The cell boundary is
  defined by a list of points (pts) that specify a vertex
  (1D cell). If the return value of the method is != 0, then
  the point is inside the cell.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts1,
  vtkCellArray lines, vtkCellArray verts2, vtkPointData
  inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType
  cellId, vtkCellData outCd) - Generate contouring
  primitives. The scalar list cellScalars are scalar values
  at each cell point. The point locator is essentially a
  points list that merges points as they are inserted (i.e.,
  prevents duplicates).
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the triangle in parametric coordinates.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - Triangulate the vertex. This method fills
  pts and ptIds with information from the only point in the
  vertex.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - Get the derivative of
  the vertex. Returns (0.0, 0.0, 0.0) for all dimensions.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[1]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [3])


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

