
 Usage

vtkSplineFilter is a filter that generates an output
polylines from an input set of polylines. The polylines are
uniformly subdivided and produced with the help of a
vtkSpline class that the user can specify (by default a
vtkCardinalSpline is used). The number of subdivisions of
the line can be controlled in several ways. The user can
either specify the number of subdivisions or a length of
each subdivision can be provided (and the class will figure
out how many subdivisions is required over the whole
polyline). The maximum number of subdivisions can also be
set.
The output of this filter is a polyline per input polyline
(or line). New points and texture coordinates are created.
Point data is interpolated and cell data passed on. Any
polylines with less than two points, or who have coincident
points, are ignored.
To create an instance of class vtkSplineFilter, simply
invoke its constructor as follows

    obj = vtkSplineFilter



 Methods

The class vtkSplineFilter has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkSplineFilter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkSplineFilter = obj.NewInstance ()
* vtkSplineFilter = obj.SafeDownCast (vtkObject o)
* obj.SetMaximumNumberOfSubdivisions (int ) - Set the
  maximum number of subdivisions that are created for each
  polyline.
* int = obj.GetMaximumNumberOfSubdivisionsMinValue () - Set
  the maximum number of subdivisions that are created for
  each polyline.
* int = obj.GetMaximumNumberOfSubdivisionsMaxValue () - Set
  the maximum number of subdivisions that are created for
  each polyline.
* int = obj.GetMaximumNumberOfSubdivisions () - Set the
  maximum number of subdivisions that are created for each
  polyline.
* obj.SetSubdivide (int ) - Specify how the number of
  subdivisions is determined.
* int = obj.GetSubdivideMinValue () - Specify how the number
  of subdivisions is determined.
* int = obj.GetSubdivideMaxValue () - Specify how the number
  of subdivisions is determined.
* int = obj.GetSubdivide () - Specify how the number of
  subdivisions is determined.
* obj.SetSubdivideToSpecified () - Specify how the number of
  subdivisions is determined.
* obj.SetSubdivideToLength () - Specify how the number of
  subdivisions is determined.
* string = obj.GetSubdivideAsString () - Specify how the
  number of subdivisions is determined.
* obj.SetNumberOfSubdivisions (int ) - Set the number of
  subdivisions that are created for the polyline. This
  method only has effect if Subdivisions is set to
  SetSubdivisionsToSpecify().
* int = obj.GetNumberOfSubdivisionsMinValue () - Set the
  number of subdivisions that are created for the polyline.
  This method only has effect if Subdivisions is set to
  SetSubdivisionsToSpecify().
* int = obj.GetNumberOfSubdivisionsMaxValue () - Set the
  number of subdivisions that are created for the polyline.
  This method only has effect if Subdivisions is set to
  SetSubdivisionsToSpecify().
* int = obj.GetNumberOfSubdivisions () - Set the number of
  subdivisions that are created for the polyline. This
  method only has effect if Subdivisions is set to
  SetSubdivisionsToSpecify().
* obj.SetLength (double ) - Control the number of
  subdivisions that are created for the polyline based on an
  absolute length. The length of the spline is divided by
  this length to determine the number of subdivisions.
* double = obj.GetLengthMinValue () - Control the number of
  subdivisions that are created for the polyline based on an
  absolute length. The length of the spline is divided by
  this length to determine the number of subdivisions.
* double = obj.GetLengthMaxValue () - Control the number of
  subdivisions that are created for the polyline based on an
  absolute length. The length of the spline is divided by
  this length to determine the number of subdivisions.
* double = obj.GetLength () - Control the number of
  subdivisions that are created for the polyline based on an
  absolute length. The length of the spline is divided by
  this length to determine the number of subdivisions.
* obj.SetSpline (vtkSpline ) - Specify an instance of
  vtkSpline to use to perform the interpolation.
* vtkSpline = obj.GetSpline () - Specify an instance of
  vtkSpline to use to perform the interpolation.
* obj.SetGenerateTCoords (int ) - Control whether and how
  texture coordinates are produced. This is useful for
  striping the output polyline. The texture coordinates can
  be generated in three ways: a normalized (0,1) generation;
  based on the length (divided by the texture length); and
  by using the input scalar values.
* int = obj.GetGenerateTCoordsMinValue () - Control whether
  and how texture coordinates are produced. This is useful
  for striping the output polyline. The texture coordinates
  can be generated in three ways: a normalized (0,1)
  generation; based on the length (divided by the texture
  length); and by using the input scalar values.
* int = obj.GetGenerateTCoordsMaxValue () - Control whether
  and how texture coordinates are produced. This is useful
  for striping the output polyline. The texture coordinates
  can be generated in three ways: a normalized (0,1)
  generation; based on the length (divided by the texture
  length); and by using the input scalar values.
* int = obj.GetGenerateTCoords () - Control whether and how
  texture coordinates are produced. This is useful for
  striping the output polyline. The texture coordinates can
  be generated in three ways: a normalized (0,1) generation;
  based on the length (divided by the texture length); and
  by using the input scalar values.
* obj.SetGenerateTCoordsToOff () - Control whether and how
  texture coordinates are produced. This is useful for
  striping the output polyline. The texture coordinates can
  be generated in three ways: a normalized (0,1) generation;
  based on the length (divided by the texture length); and
  by using the input scalar values.
* obj.SetGenerateTCoordsToNormalizedLength () - Control
  whether and how texture coordinates are produced. This is
  useful for striping the output polyline. The texture
  coordinates can be generated in three ways: a normalized
  (0,1) generation; based on the length (divided by the
  texture length); and by using the input scalar values.
* obj.SetGenerateTCoordsToUseLength () - Control whether and
  how texture coordinates are produced. This is useful for
  striping the output polyline. The texture coordinates can
  be generated in three ways: a normalized (0,1) generation;
  based on the length (divided by the texture length); and
  by using the input scalar values.
* obj.SetGenerateTCoordsToUseScalars () - Control whether
  and how texture coordinates are produced. This is useful
  for striping the output polyline. The texture coordinates
  can be generated in three ways: a normalized (0,1)
  generation; based on the length (divided by the texture
  length); and by using the input scalar values.
* string = obj.GetGenerateTCoordsAsString () - Control
  whether and how texture coordinates are produced. This is
  useful for striping the output polyline. The texture
  coordinates can be generated in three ways: a normalized
  (0,1) generation; based on the length (divided by the
  texture length); and by using the input scalar values.
* obj.SetTextureLength (double ) - Control the conversion of
  units during the texture coordinates calculation. The
  TextureLength indicates what length (whether calculated
  from scalars or length) is mapped to the [0,1) texture
  space.
* double = obj.GetTextureLengthMinValue () - Control the
  conversion of units during the texture coordinates
  calculation. The TextureLength indicates what length
  (whether calculated from scalars or length) is mapped to
  the [0,1) texture space.
* double = obj.GetTextureLengthMaxValue () - Control the
  conversion of units during the texture coordinates
  calculation. The TextureLength indicates what length
  (whether calculated from scalars or length) is mapped to
  the [0,1) texture space.
* double = obj.GetTextureLength () - Control the conversion
  of units during the texture coordinates calculation. The
  TextureLength indicates what length (whether calculated
  from scalars or length) is mapped to the [0,1) texture
  space.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

