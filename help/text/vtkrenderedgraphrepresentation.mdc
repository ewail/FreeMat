
 Usage

To create an instance of class
vtkRenderedGraphRepresentation, simply invoke its
constructor as follows

    obj = vtkRenderedGraphRepresentation



 Methods

The class vtkRenderedGraphRepresentation has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkRenderedGraphRepresentation
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRenderedGraphRepresentation = obj.NewInstance ()
* vtkRenderedGraphRepresentation = obj.SafeDownCast
  (vtkObject o)
* obj.SetVertexLabelArrayName (string name)
* string = obj.GetVertexLabelArrayName ()
* obj.SetVertexLabelPriorityArrayName (string name)
* string = obj.GetVertexLabelPriorityArrayName ()
* obj.SetVertexLabelVisibility (bool b)
* bool = obj.GetVertexLabelVisibility ()
* obj.VertexLabelVisibilityOn ()
* obj.VertexLabelVisibilityOff ()
* obj.SetVertexLabelTextProperty (vtkTextProperty p)
* vtkTextProperty = obj.GetVertexLabelTextProperty ()
* obj.SetVertexHoverArrayName (string )
* string = obj.GetVertexHoverArrayName ()
* obj.SetHideVertexLabelsOnInteraction (bool ) - Whether to
  hide the display of vertex labels during mouse
  interaction. Default is off.
* bool = obj.GetHideVertexLabelsOnInteraction () - Whether
  to hide the display of vertex labels during mouse
  interaction. Default is off.
* obj.HideVertexLabelsOnInteractionOn () - Whether to hide
  the display of vertex labels during mouse interaction.
  Default is off.
* obj.HideVertexLabelsOnInteractionOff () - Whether to hide
  the display of vertex labels during mouse interaction.
  Default is off.
* obj.SetEdgeLabelArrayName (string name)
* string = obj.GetEdgeLabelArrayName ()
* obj.SetEdgeLabelPriorityArrayName (string name)
* string = obj.GetEdgeLabelPriorityArrayName ()
* obj.SetEdgeLabelVisibility (bool b)
* bool = obj.GetEdgeLabelVisibility ()
* obj.EdgeLabelVisibilityOn ()
* obj.EdgeLabelVisibilityOff ()
* obj.SetEdgeLabelTextProperty (vtkTextProperty p)
* vtkTextProperty = obj.GetEdgeLabelTextProperty ()
* obj.SetEdgeHoverArrayName (string )
* string = obj.GetEdgeHoverArrayName ()
* obj.SetHideEdgeLabelsOnInteraction (bool ) - Whether to
  hide the display of edge labels during mouse interaction.
  Default is off.
* bool = obj.GetHideEdgeLabelsOnInteraction () - Whether to
  hide the display of edge labels during mouse interaction.
  Default is off.
* obj.HideEdgeLabelsOnInteractionOn () - Whether to hide the
  display of edge labels during mouse interaction. Default
  is off.
* obj.HideEdgeLabelsOnInteractionOff () - Whether to hide
  the display of edge labels during mouse interaction.
  Default is off.
* obj.SetVertexIconArrayName (string name)
* string = obj.GetVertexIconArrayName ()
* obj.SetVertexIconPriorityArrayName (string name)
* string = obj.GetVertexIconPriorityArrayName ()
* obj.SetVertexIconVisibility (bool b)
* bool = obj.GetVertexIconVisibility ()
* obj.VertexIconVisibilityOn ()
* obj.VertexIconVisibilityOff ()
* obj.AddVertexIconType (string name, int type)
* obj.ClearVertexIconTypes ()
* obj.SetUseVertexIconTypeMap (bool b)
* bool = obj.GetUseVertexIconTypeMap ()
* obj.UseVertexIconTypeMapOn ()
* obj.UseVertexIconTypeMapOff ()
* obj.SetVertexIconAlignment (int align)
* int = obj.GetVertexIconAlignment ()
* obj.SetVertexSelectedIcon (int icon)
* int = obj.GetVertexSelectedIcon ()
* obj.SetVertexIconSelectionMode (int mode) - Set the mode
  to one of

  o vtkApplyIcons::SELECTED_ICON - use VertexSelectedIcon
  o vtkApplyIcons::SELECTED_OFFSET - use VertexSelectedIcon
    as offset
  o vtkApplyIcons::ANNOTATION_ICON - use current annotation
    icon
  o vtkApplyIcons::IGNORE_SELECTION - ignore selected
    elements

  The default is IGNORE_SELECTION.
* int = obj.GetVertexIconSelectionMode () - Set the mode to
  one of

  o vtkApplyIcons::SELECTED_ICON - use VertexSelectedIcon
  o vtkApplyIcons::SELECTED_OFFSET - use VertexSelectedIcon
    as offset
  o vtkApplyIcons::ANNOTATION_ICON - use current annotation
    icon
  o vtkApplyIcons::IGNORE_SELECTION - ignore selected
    elements

  The default is IGNORE_SELECTION.
* obj.SetVertexIconSelectionModeToSelectedIcon () - Set the
  mode to one of

  o vtkApplyIcons::SELECTED_ICON - use VertexSelectedIcon
  o vtkApplyIcons::SELECTED_OFFSET - use VertexSelectedIcon
    as offset
  o vtkApplyIcons::ANNOTATION_ICON - use current annotation
    icon
  o vtkApplyIcons::IGNORE_SELECTION - ignore selected
    elements

  The default is IGNORE_SELECTION.
* obj.SetVertexIconSelectionModeToSelectedOffset () - Set
  the mode to one of

  o vtkApplyIcons::SELECTED_ICON - use VertexSelectedIcon
  o vtkApplyIcons::SELECTED_OFFSET - use VertexSelectedIcon
    as offset
  o vtkApplyIcons::ANNOTATION_ICON - use current annotation
    icon
  o vtkApplyIcons::IGNORE_SELECTION - ignore selected
    elements

  The default is IGNORE_SELECTION.
* obj.SetVertexIconSelectionModeToAnnotationIcon () - Set
  the mode to one of

  o vtkApplyIcons::SELECTED_ICON - use VertexSelectedIcon
  o vtkApplyIcons::SELECTED_OFFSET - use VertexSelectedIcon
    as offset
  o vtkApplyIcons::ANNOTATION_ICON - use current annotation
    icon
  o vtkApplyIcons::IGNORE_SELECTION - ignore selected
    elements

  The default is IGNORE_SELECTION.
* obj.SetVertexIconSelectionModeToIgnoreSelection ()
* obj.SetEdgeIconArrayName (string name)
* string = obj.GetEdgeIconArrayName ()
* obj.SetEdgeIconPriorityArrayName (string name)
* string = obj.GetEdgeIconPriorityArrayName ()
* obj.SetEdgeIconVisibility (bool b)
* bool = obj.GetEdgeIconVisibility ()
* obj.EdgeIconVisibilityOn ()
* obj.EdgeIconVisibilityOff ()
* obj.AddEdgeIconType (string name, int type)
* obj.ClearEdgeIconTypes ()
* obj.SetUseEdgeIconTypeMap (bool b)
* bool = obj.GetUseEdgeIconTypeMap ()
* obj.UseEdgeIconTypeMapOn ()
* obj.UseEdgeIconTypeMapOff ()
* obj.SetEdgeIconAlignment (int align)
* int = obj.GetEdgeIconAlignment ()
* obj.SetColorVerticesByArray (bool b)
* bool = obj.GetColorVerticesByArray ()
* obj.ColorVerticesByArrayOn ()
* obj.ColorVerticesByArrayOff ()
* obj.SetVertexColorArrayName (string name)
* string = obj.GetVertexColorArrayName ()
* obj.SetColorEdgesByArray (bool b)
* bool = obj.GetColorEdgesByArray ()
* obj.ColorEdgesByArrayOn ()
* obj.ColorEdgesByArrayOff ()
* obj.SetEdgeColorArrayName (string name)
* string = obj.GetEdgeColorArrayName ()
* obj.SetEnableVerticesByArray (bool b)
* bool = obj.GetEnableVerticesByArray ()
* obj.EnableVerticesByArrayOn ()
* obj.EnableVerticesByArrayOff ()
* obj.SetEnabledVerticesArrayName (string name)
* string = obj.GetEnabledVerticesArrayName ()
* obj.SetEnableEdgesByArray (bool b)
* bool = obj.GetEnableEdgesByArray ()
* obj.EnableEdgesByArrayOn ()
* obj.EnableEdgesByArrayOff ()
* obj.SetEnabledEdgesArrayName (string name)
* string = obj.GetEnabledEdgesArrayName ()
* obj.SetEdgeVisibility (bool b)
* bool = obj.GetEdgeVisibility ()
* obj.EdgeVisibilityOn ()
* obj.EdgeVisibilityOff ()
* obj.SetLayoutStrategy (vtkGraphLayoutStrategy strategy) -
  Set/get the graph layout strategy.
* vtkGraphLayoutStrategy = obj.GetLayoutStrategy () - Set/
  get the graph layout strategy.
* obj.SetLayoutStrategy (string name) - Get/set the layout
  strategy by name.
* string = obj.GetLayoutStrategyName () - Get/set the layout
  strategy by name.
* obj.SetLayoutStrategyToRandom () - Set predefined layout
  strategies.
* obj.SetLayoutStrategyToForceDirected () - Set predefined
  layout strategies.
* obj.SetLayoutStrategyToSimple2D () - Set predefined layout
  strategies.
* obj.SetLayoutStrategyToClustering2D () - Set predefined
  layout strategies.
* obj.SetLayoutStrategyToCommunity2D () - Set predefined
  layout strategies.
* obj.SetLayoutStrategyToFast2D () - Set predefined layout
  strategies.
* obj.SetLayoutStrategyToPassThrough () - Set predefined
  layout strategies.
* obj.SetLayoutStrategyToCircular () - Set predefined layout
  strategies.
* obj.SetLayoutStrategyToTree () - Set predefined layout
  strategies.
* obj.SetLayoutStrategyToCosmicTree () - Set predefined
  layout strategies.
* obj.SetLayoutStrategyToCone () - Set predefined layout
  strategies.
* obj.SetLayoutStrategyToSpanTree () - Set the layout
  strategy to use coordinates from arrays. The x array must
  be specified. The y and z arrays are optional.
* obj.SetLayoutStrategyToAssignCoordinates (string xarr,
  string yarr, string zarr) - Set the layout strategy to use
  coordinates from arrays. The x array must be specified.
  The y and z arrays are optional.
* obj.SetLayoutStrategyToTree (bool radial, double angle,
  double leafSpacing, double logSpacing) - Set the layout
  strategy to a tree layout. Radial indicates whether to do
  a radial or standard top-down tree layout. The angle
  parameter is the angular distance spanned by the tree.
  Leaf spacing is a value from 0 to 1 indicating how much of
  the radial layout should be allocated to leaf nodes (as
  opposed to between tree branches). The log spacing value
  is a non-negative value where > 1 will create expanding
  levels, < 1 will create contracting levels, and = 1 makes
  all levels the same size. See vtkTreeLayoutStrategy for
  more information.
* obj.SetLayoutStrategyToCosmicTree (string
  nodeSizeArrayName, bool sizeLeafNodesOnlytrue, int
  layoutDepth, vtkIdType layoutRoot) - Set the layout
  strategy to a cosmic tree layout. nodeSizeArrayName is the
  array used to size the circles (default is NULL, which
  makes leaf nodes the same size). sizeLeafNodesOnly only
  uses the leaf node sizes, and computes the parent size as
  the sum of the child sizes (default true). layoutDepth
  stops layout at a certain depth (default is 0, which does
  the entire tree). layoutRoot is the vertex that will be
  considered the root node of the layout (default is -1,
  which will use the tree's root). See
  vtkCosmicTreeLayoutStrategy for more information.
* obj.SetEdgeLayoutStrategy (vtkEdgeLayoutStrategy strategy)
  - Set/get the graph layout strategy.
* vtkEdgeLayoutStrategy = obj.GetEdgeLayoutStrategy () -
  Set/get the graph layout strategy.
* obj.SetEdgeLayoutStrategyToArcParallel () - Set/get the
  graph layout strategy.
* obj.SetEdgeLayoutStrategyToPassThrough () - Set the edge
  layout strategy to a geospatial arced strategy appropriate
  for vtkGeoView.
* obj.SetEdgeLayoutStrategyToGeo (double explodeFactor) -
  Set the edge layout strategy to a geospatial arced
  strategy appropriate for vtkGeoView.
* obj.SetEdgeLayoutStrategy (string name) - Set the edge
  layout strategy by name.
* string = obj.GetEdgeLayoutStrategyName () - Set the edge
  layout strategy by name.
* obj.ApplyViewTheme (vtkViewTheme theme) - Apply a theme to
  this representation.
* obj.SetGlyphType (int type) - Set the graph vertex glyph
  type.
* int = obj.GetGlyphType () - Set the graph vertex glyph
  type.
* obj.SetScaling (bool b) - Set whether to scale vertex
  glyphs.
* bool = obj.GetScaling () - Set whether to scale vertex
  glyphs.
* obj.ScalingOn () - Set whether to scale vertex glyphs.
* obj.ScalingOff () - Set whether to scale vertex glyphs.
* obj.SetScalingArrayName (string name) - Set the glyph
  scaling array name.
* string = obj.GetScalingArrayName () - Set the glyph
  scaling array name.
* obj.SetVertexScalarBarVisibility (bool b) - Vertex/edge
  scalar bar visibility.
* bool = obj.GetVertexScalarBarVisibility () - Vertex/edge
  scalar bar visibility.
* obj.SetEdgeScalarBarVisibility (bool b) - Vertex/edge
  scalar bar visibility.
* bool = obj.GetEdgeScalarBarVisibility () - Vertex/edge
  scalar bar visibility.
* bool = obj.IsLayoutComplete () - Whether the current graph
  layout is complete.
* obj.UpdateLayout () - Performs another iteration on the
  graph layout.
* obj.ComputeSelectedGraphBounds (double bounds[6]) -
  Compute the bounding box of the selected subgraph.


* FreeMat_Documentation
* Visualization_Toolkit_View_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

