
 Usage

vtkRectilinearGridToTetrahedra forms a mesh of Tetrahedra
from a vtkRectilinearGrid. The tetrahedra can be 5 per cell,
6 per cell, or a mixture of 5 or 12 per cell. The resulting
mesh is consistent, meaning that there are no edge crossings
and that each tetrahedron face is shared by two tetrahedra,
except those tetrahedra on the boundary. All tetrahedra are
right handed.
Note that 12 tetrahedra per cell means adding a point in the
center of the cell.
In order to subdivide some cells into 5 and some cells into
12 tetrahedra: SetTetraPerCellTo5And12(); Set the Scalars of
the Input RectilinearGrid to be 5 or 12 depending on what
you want per cell of the RectilinearGrid.
If you set RememberVoxelId, the scalars of the tetrahedron
will be set to the Id of the Cell in the RectilinearGrid
from which the tetrahedron came.
.SECTION Thanks This class was developed by Samson J.
Timoner of the MIT Artificial Intelligence Laboratory
To create an instance of class
vtkRectilinearGridToTetrahedra, simply invoke its
constructor as follows

    obj = vtkRectilinearGridToTetrahedra



 Methods

The class vtkRectilinearGridToTetrahedra has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkRectilinearGridToTetrahedra
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRectilinearGridToTetrahedra = obj.NewInstance ()
* vtkRectilinearGridToTetrahedra = obj.SafeDownCast
  (vtkObject o)
* obj.SetTetraPerCellTo5 () - Set the method to divide each
  cell (voxel) in the RectilinearGrid into tetrahedra.
* obj.SetTetraPerCellTo6 () - Set the method to divide each
  cell (voxel) in the RectilinearGrid into tetrahedra.
* obj.SetTetraPerCellTo12 () - Set the method to divide each
  cell (voxel) in the RectilinearGrid into tetrahedra.
* obj.SetTetraPerCellTo5And12 () - Set the method to divide
  each cell (voxel) in the RectilinearGrid into tetrahedra.
* obj.SetTetraPerCell (int ) - Set the method to divide each
  cell (voxel) in the RectilinearGrid into tetrahedra.
* int = obj.GetTetraPerCell () - Set the method to divide
  each cell (voxel) in the RectilinearGrid into tetrahedra.
* obj.SetRememberVoxelId (int ) - Should the tetrahedra have
  scalar data indicating which Voxel they came from in the
  vtkRectilinearGrid?
* int = obj.GetRememberVoxelId () - Should the tetrahedra
  have scalar data indicating which Voxel they came from in
  the vtkRectilinearGrid?
* obj.RememberVoxelIdOn () - Should the tetrahedra have
  scalar data indicating which Voxel they came from in the
  vtkRectilinearGrid?
* obj.RememberVoxelIdOff () - Should the tetrahedra have
  scalar data indicating which Voxel they came from in the
  vtkRectilinearGrid?
* obj.SetInput (double Extent[3], double Spacing[3], double
  tol) - This function for convenience for creating a
  Rectilinear Grid If Spacing does not fit evenly into
  extent, the last cell will have a different width (or
  height or depth). If Extent[i]/Spacing[i] is within tol of
  an integer, then assume the programmer meant an integer
  for direction i.
* obj.SetInput (double ExtentX, double ExtentY, double
  ExtentZ, double SpacingX, double SpacingY, double
  SpacingZ, double tol) - This version of the function for
  the wrappers


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

