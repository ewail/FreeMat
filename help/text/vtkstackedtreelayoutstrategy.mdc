
 Usage

Performs a tree ring layout or "icicle" layout on a tree.
This involves assigning a sector region to each vertex in
the tree, and placing that information in a data array with
four components per tuple representing (innerRadius,
outerRadius, startAngle, endAngle).
This class may be assigned as the layout strategy to
vtkAreaLayout.
.SECTION Thanks Thanks to Jason Shepherd from Sandia
National Laboratories for help developing this class.
To create an instance of class vtkStackedTreeLayoutStrategy,
simply invoke its constructor as follows

    obj = vtkStackedTreeLayoutStrategy



 Methods

The class vtkStackedTreeLayoutStrategy has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkStackedTreeLayoutStrategy
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkStackedTreeLayoutStrategy = obj.NewInstance ()
* vtkStackedTreeLayoutStrategy = obj.SafeDownCast (vtkObject
  o)
* obj.Layout (vtkTree inputTree, vtkDataArray sectorArray,
  vtkDataArray sizeArray) - Perform the layout of the input
  tree, and store the sector bounds of each vertex as a
  tuple (innerRadius, outerRadius, startAngle, endAngle) in
  a data array.
* obj.LayoutEdgePoints (vtkTree inputTree, vtkDataArray
  sectorArray, vtkDataArray sizeArray, vtkTree
  edgeRoutingTree) - Fill edgeRoutingTree with points
  suitable for routing edges of an overlaid graph.
* obj.SetInteriorRadius (double ) - Define the tree ring's
  interior radius.
* double = obj.GetInteriorRadius () - Define the tree ring's
  interior radius.
* obj.SetRingThickness (double ) - Define the thickness of
  each of the tree rings.
* double = obj.GetRingThickness () - Define the thickness of
  each of the tree rings.
* obj.SetRootStartAngle (double ) - Define the start angle
  for the root node. NOTE: It is assumed that the root end
  angle is greater than the root start angle and subtends no
  more than 360 degrees.
* double = obj.GetRootStartAngle () - Define the start angle
  for the root node. NOTE: It is assumed that the root end
  angle is greater than the root start angle and subtends no
  more than 360 degrees.
* obj.SetRootEndAngle (double ) - Define the end angle for
  the root node. NOTE: It is assumed that the root end angle
  is greater than the root start angle and subtends no more
  than 360 degrees.
* double = obj.GetRootEndAngle () - Define the end angle for
  the root node. NOTE: It is assumed that the root end angle
  is greater than the root start angle and subtends no more
  than 360 degrees.
* obj.SetUseRectangularCoordinates (bool ) - Define whether
  or not rectangular coordinates are being used (as opposed
  to polar coordinates).
* bool = obj.GetUseRectangularCoordinates () - Define
  whether or not rectangular coordinates are being used (as
  opposed to polar coordinates).
* obj.UseRectangularCoordinatesOn () - Define whether or not
  rectangular coordinates are being used (as opposed to
  polar coordinates).
* obj.UseRectangularCoordinatesOff () - Define whether or
  not rectangular coordinates are being used (as opposed to
  polar coordinates).
* obj.SetReverse (bool ) - Define whether to reverse the
  order of the tree stacks from low to high.
* bool = obj.GetReverse () - Define whether to reverse the
  order of the tree stacks from low to high.
* obj.ReverseOn () - Define whether to reverse the order of
  the tree stacks from low to high.
* obj.ReverseOff () - Define whether to reverse the order of
  the tree stacks from low to high.
* obj.SetInteriorLogSpacingValue (double ) - The spacing of
  tree levels in the edge routing tree. Levels near zero
  give more space to levels near the root, while levels near
  one (the default) create evenly-spaced levels. Levels
  above one give more space to levels near the leaves.
* double = obj.GetInteriorLogSpacingValue () - The spacing
  of tree levels in the edge routing tree. Levels near zero
  give more space to levels near the root, while levels near
  one (the default) create evenly-spaced levels. Levels
  above one give more space to levels near the leaves.
* vtkIdType = obj.FindVertex (vtkTree tree, vtkDataArray
  array, float pnt[2]) - Returns the vertex id that contains
  pnt (or -1 if no one contains it).


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

