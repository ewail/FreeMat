
 Usage

It is a concrete error metric, based on an attribute
criterium: the variation of the active attribute/component
value from a linear ramp
To create an instance of class vtkAttributesErrorMetric,
simply invoke its constructor as follows

    obj = vtkAttributesErrorMetric



 Methods

The class vtkAttributesErrorMetric has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkAttributesErrorMetric class.

* string = obj.GetClassName () - Standard VTK type and error
  macros.
* int = obj.IsA (string name) - Standard VTK type and error
  macros.
* vtkAttributesErrorMetric = obj.NewInstance () - Standard
  VTK type and error macros.
* vtkAttributesErrorMetric = obj.SafeDownCast (vtkObject o)
  - Standard VTK type and error macros.
* double = obj.GetAbsoluteAttributeTolerance () - Absolute
  tolerance of the active scalar (attribute+component).
  Subdivision is required if the square distance between the
  real attribute at the mid point on the edge and the
  interpolated attribute is greater than
  AbsoluteAttributeTolerance. This is the attribute
  accuracy. 0.01 will give better result than 0.1.
* obj.SetAbsoluteAttributeTolerance (double value) - Set the
  absolute attribute accuracy to `value'. See
  GetAbsoluteAttributeTolerance() for details. It is
  particularly useful when some concrete implementation of
  vtkGenericAttribute does not support GetRange() request,
  called internally in SetAttributeTolerance(). It may
  happen when the implementation support higher order
  attributes but cannot compute the range.


    Precondition:
        valid_range_value: value>0

* double = obj.GetAttributeTolerance () - Relative tolerance
  of the active scalar (attribute+component). Subdivision is
  required if the square distance between the real attribute
  at the mid point on the edge and the interpolated
  attribute is greater than AttributeTolerance. This is the
  attribute accuracy. 0.01 will give better result than 0.1.
* obj.SetAttributeTolerance (double value) - Set the
  relative attribute accuracy to `value'. See
  GetAttributeTolerance() for details.


    Precondition:
        valid_range_value: value>0 &amp;&amp; value<1

* int = obj.RequiresEdgeSubdivision (double leftPoint,
  double midPoint, double rightPoint, double alpha) - Does
  the edge need to be subdivided according to the distance
  between the value of the active attribute/component at the
  midpoint and the mean value between the endpoints? The
  edge is defined by its `leftPoint' and its `rightPoint'.
  `leftPoint', `midPoint' and `rightPoint' have to be
  initialized before calling RequiresEdgeSubdivision().
  Their format is global coordinates, parametric coordinates
  and point centered attributes: xyx rst abc de... `alpha'
  is the normalized abscissa of the midpoint along the edge.
  (close to 0 means close to the left point, close to 1
  means close to the right point)


    Precondition:
        leftPoint_exists: leftPoint!=0
        midPoint_exists: midPoint!=0
        rightPoint_exists: rightPoint!=0
        clamped_alpha: alpha>0 &amp;&amp; alpha<1
        valid_size: sizeof(leftPoint)=sizeof
        (midPoint)=sizeof(rightPoint)
        =GetAttributeCollection()-
        >GetNumberOfPointCenteredComponents()+6

* double = obj.GetError (double leftPoint, double midPoint,
  double rightPoint, double alpha) - Return the error at the
  mid-point. The type of error depends on the state of the
  concrete error metric. For instance, it can return an
  absolute or relative error metric. See
  RequiresEdgeSubdivision() for a description of the
  arguments.


    Precondition:
        leftPoint_exists: leftPoint!=0
        midPoint_exists: midPoint!=0
        rightPoint_exists: rightPoint!=0
        clamped_alpha: alpha>0 &amp;&amp; alpha<1
        valid_size: sizeof(leftPoint)=sizeof
        (midPoint)=sizeof(rightPoint)
        =GetAttributeCollection()-
        >GetNumberOfPointCenteredComponents()+6



    Postcondition:
        positive_result: result>=0



* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

