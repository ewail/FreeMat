
 Usage

vtkCachingInterpolatedVelocityField acts as a continuous
velocity field by performing cell interpolation on the
underlying vtkDataSet. This is a concrete sub-class of
vtkFunctionSet with NumberOfIndependentVariables = 4
(x,y,z,t) and NumberOfFunctions = 3 (u,v,w). Normally, every
time an evaluation is performed, the cell which contains the
point (x,y,z) has to be found by calling FindCell. This is a
computationally expensive operation. In certain cases, the
cell search can be avoided or shortened by providing a guess
for the cell id. For example, in streamline integration, the
next evaluation is usually in the same or a neighbour cell.
For this reason, vtkCachingInterpolatedVelocityField stores
the last cell id. If caching is turned on, it uses this id
as the starting point.
To create an instance of class
vtkCachingInterpolatedVelocityField, simply invoke its
constructor as follows

    obj = vtkCachingInterpolatedVelocityField



 Methods

The class vtkCachingInterpolatedVelocityField has several
methods that can be used. They are listed below. Note that
the documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the
vtkCachingInterpolatedVelocityField class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCachingInterpolatedVelocityField = obj.NewInstance ()
* vtkCachingInterpolatedVelocityField = obj.SafeDownCast
  (vtkObject o)
* int = obj.FunctionValues (double x, double f) - Evaluate
  the velocity field, f={u,v,w}, at {x, y, z}. returns 1 if
  valid, 0 if test failed
* int = obj.InsideTest (double x) - Evaluate the velocity
  field, f={u,v,w}, at {x, y, z}. returns 1 if valid, 0 if
  test failed
* obj.SetDataSet (int I, vtkDataSet dataset, bool
  staticdataset, vtkAbstractCellLocator locator) - Add a
  dataset used by the interpolation function evaluation.
* string = obj.GetVectorsSelection () - If you want to work
  with an arbitrary vector array, then set its name here. By
  default this in NULL and the filter will use the active
  vector array.
* obj.SelectVectors (string fieldName) - Return the cell id
  cached from last evaluation.
* obj.SetLastCellInfo (vtkIdType c, int datasetindex) -
  Return the cell id cached from last evaluation.
* obj.ClearLastCellInfo () - Set the last cell id to -1 so
  that the next search does not start from the previous cell
* int = obj.GetLastWeights (double w) - Returns the
  interpolation weights/pcoords cached from last evaluation
  if the cached cell is valid (returns 1). Otherwise, it
  does not change w and returns 0.
* int = obj.GetLastLocalCoordinates (double pcoords[3]) -
  Returns the interpolation weights/pcoords cached from last
  evaluation if the cached cell is valid (returns 1).
  Otherwise, it does not change w and returns 0.
* int = obj.GetCellCacheHit () - Caching statistics.
* int = obj.GetDataSetCacheHit () - Caching statistics.
* int = obj.GetCacheMiss () - Caching statistics.


* FreeMat_Documentation
* Visualization_Toolkit_Parallel_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

