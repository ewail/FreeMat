
 Usage

vtkQuadraticEdge is a concrete implementation of
vtkNonLinearCell to represent a one-dimensional, 3-nodes,
isoparametric parabolic line. The interpolation is the
standard finite element, quadratic isoparametric shape
function. The cell includes a mid-edge node. The ordering of
the three points defining the cell is point ids (0,1,2)
where id #2 is the midedge node.
To create an instance of class vtkQuadraticEdge, simply
invoke its constructor as follows

    obj = vtkQuadraticEdge



 Methods

The class vtkQuadraticEdge has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkQuadraticEdge class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkQuadraticEdge = obj.NewInstance ()
* vtkQuadraticEdge = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetFace (int )
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray lines,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this edge using scalar value provided. Like contouring,
  except that it cuts the edge to produce linear line
  segments.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the quadratic tetra in parametric
  coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[3]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [3])


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

