
 Usage

vtkCutter is a filter to cut through data using any subclass
of vtkImplicitFunction. That is, a polygonal surface is
created corresponding to the implicit function F(x,y,z) =
value(s), where you can specify one or more values used to
cut with.
In VTK, cutting means reducing a cell of dimension N to a
cut surface of dimension N-1. For example, a tetrahedron
when cut by a plane (i.e., vtkPlane implicit function) will
generate triangles. (In comparison, clipping takes a N
dimensional cell and creates N dimension primitives.)
vtkCutter is generally used to "slice-through" a dataset,
generating a surface that can be visualized. It is also
possible to use vtkCutter to do a form of volume rendering.
vtkCutter does this by generating multiple cut surfaces
(usually planes) which are ordered (and rendered) from back-
to-front. The surfaces are set translucent to give a
volumetric rendering effect.
Note that data can be cut using either 1) the scalar values
associated with the dataset or 2) an implicit function
associated with this class. By default, if an implicit
function is set it is used to clip the data set, otherwise
the dataset scalars are used to perform the clipping.
To create an instance of class vtkCutter, simply invoke its
constructor as follows

    obj = vtkCutter



 Methods

The class vtkCutter has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkCutter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCutter = obj.NewInstance ()
* vtkCutter = obj.SafeDownCast (vtkObject o)
* obj.SetValue (int i, double value) - Get the ith contour
  value.
* double = obj.GetValue (int i) - Get a pointer to an array
  of contour values. There will be GetNumberOfContours()
  values in the list.
* obj.GetValues (double contourValues) - Set the number of
  contours to place into the list. You only really need to
  use this method to reduce list size. The method SetValue()
  will automatically increase list size as needed.
* obj.SetNumberOfContours (int number) - Get the number of
  contours in the list of contour values.
* int = obj.GetNumberOfContours () - Generate numContours
  equally spaced contour values between specified range.
  Contour values will include min/max range values.
* obj.GenerateValues (int numContours, double range[2]) -
  Generate numContours equally spaced contour values between
  specified range. Contour values will include min/max range
  values.
* obj.GenerateValues (int numContours, double rangeStart,
  double rangeEnd) - Override GetMTime because we delegate
  to vtkContourValues and refer to vtkImplicitFunction.
* long = obj.GetMTime () - Override GetMTime because we
  delegate to vtkContourValues and refer to
  vtkImplicitFunction.
* obj.SetCutFunction (vtkImplicitFunction )
* vtkImplicitFunction = obj.GetCutFunction ()
* obj.SetGenerateCutScalars (int ) - If this flag is
  enabled, then the output scalar values will be
  interpolated from the implicit function values, and not
  the input scalar data.
* int = obj.GetGenerateCutScalars () - If this flag is
  enabled, then the output scalar values will be
  interpolated from the implicit function values, and not
  the input scalar data.
* obj.GenerateCutScalarsOn () - If this flag is enabled,
  then the output scalar values will be interpolated from
  the implicit function values, and not the input scalar
  data.
* obj.GenerateCutScalarsOff () - If this flag is enabled,
  then the output scalar values will be interpolated from
  the implicit function values, and not the input scalar
  data.
* obj.SetLocator (vtkIncrementalPointLocator locator) -
  Specify a spatial locator for merging points. By default,
  an instance of vtkMergePoints is used.
* vtkIncrementalPointLocator = obj.GetLocator () - Specify a
  spatial locator for merging points. By default, an
  instance of vtkMergePoints is used.
* obj.SetSortBy (int ) - Set the sorting order for the
  generated polydata. There are two possibilities: Sort by
  value = 0 - This is the most efficient sort. For each
  cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* int = obj.GetSortByMinValue () - Set the sorting order for
  the generated polydata. There are two possibilities: Sort
  by value = 0 - This is the most efficient sort. For each
  cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* int = obj.GetSortByMaxValue () - Set the sorting order for
  the generated polydata. There are two possibilities: Sort
  by value = 0 - This is the most efficient sort. For each
  cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* int = obj.GetSortBy () - Set the sorting order for the
  generated polydata. There are two possibilities: Sort by
  value = 0 - This is the most efficient sort. For each
  cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* obj.SetSortByToSortByValue () - Set the sorting order for
  the generated polydata. There are two possibilities: Sort
  by value = 0 - This is the most efficient sort. For each
  cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* obj.SetSortByToSortByCell () - Set the sorting order for
  the generated polydata. There are two possibilities: Sort
  by value = 0 - This is the most efficient sort. For each
  cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* string = obj.GetSortByAsString () - Set the sorting order
  for the generated polydata. There are two possibilities:
  Sort by value = 0 - This is the most efficient sort. For
  each cell, all contour values are processed. This is the
  default. Sort by cell = 1 - For each contour value, all
  cells are processed. This order should be used if the
  extracted polygons must be rendered in a back-to-front or
  front-to-back order. This is very problem dependent. For
  most applications, the default order is fine (and faster).
  Sort by cell is going to have a problem if the input has
  2D and 3D cells. Cell data will be scrambled becauses with
  vtkPolyData output, verts and lines have lower cell ids
  than triangles.
* obj.CreateDefaultLocator () - Create default locator. Used
  to create one when none is specified. The locator is used
  to merge coincident points.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

