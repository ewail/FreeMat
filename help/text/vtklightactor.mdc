
 Usage

vtkLightActor is a composite actor used to represent a
spotlight. The cone angle is equal to the spotlight angle,
the cone apex is at the position of the light, the direction
of the light goes from the cone apex to the center of the
base of the cone. The square frustum position is the light
position, the frustum focal point is in the direction of the
light direction. The frustum vertical view angle (aperture)
(this is also the horizontal view angle as the frustum is
square) is equal to twice the cone angle. The clipping range
of the frustum is arbitrary set by the user (initially at
0.5,11.0).
To create an instance of class vtkLightActor, simply invoke
its constructor as follows

    obj = vtkLightActor



 Methods

The class vtkLightActor has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkLightActor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkLightActor = obj.NewInstance ()
* vtkLightActor = obj.SafeDownCast (vtkObject o)
* obj.SetLight (vtkLight light) - The spotlight to
  represent. Initial value is NULL.
* vtkLight = obj.GetLight () - The spotlight to represent.
  Initial value is NULL.
* obj.SetClippingRange (double dNear, double dFar) - Set/Get
  the location of the near and far clipping planes along the
  direction of projection. Both of these values must be
  positive. Initial values are (0.5,11.0)
* obj.SetClippingRange (double a[2]) - Set/Get the location
  of the near and far clipping planes along the direction of
  projection. Both of these values must be positive. Initial
  values are (0.5,11.0)
* double = obj. GetClippingRange () - Set/Get the location
  of the near and far clipping planes along the direction of
  projection. Both of these values must be positive. Initial
  values are (0.5,11.0)
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Support the standard render methods.
* int = obj.HasTranslucentPolygonalGeometry () - Does this
  prop have some translucent polygonal geometry? No.
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.
* long = obj.GetMTime () - Get the actors mtime plus
  consider its properties and texture if set.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

