
 Usage

vtk3DWidget is an abstract superclass for 3D interactor
observers. These 3D widgets represent themselves in the
scene, and have special callbacks associated with them that
allows interactive manipulation of the widget. Inparticular,
the difference between a vtk3DWidget and its abstract
superclass vtkInteractorObserver is that vtk3DWidgets are
"placed" in 3D space. vtkInteractorObservers have no notion
of where they are placed, and may not exist in 3D space at
all. 3D widgets also provide auxiliary functions like
producing a transformation, creating polydata (for seeding
streamlines, probes, etc.) or creating implicit functions.
See the concrete subclasses for particulars.
Typically the widget is used by specifying a vtkProp3D or
VTK dataset as input, and then invoking the "On" method to
activate it. (You can also specify a bounding box to help
position the widget.) Prior to invoking the On() method, the
user may also wish to use the PlaceWidget() to initially
position it. The 'i' (for "interactor") keypresses also can
be used to turn the widgets on and off (methods exist to
change the key value and enable keypress activiation).
To support interactive manipulation of objects, this class
(and subclasses) invoke the events StartInteractionEvent,
InteractionEvent, and EndInteractionEvent. These events are
invoked when the vtk3DWidget enters a state where rapid
response is desired: mouse motion, etc. The events can be
used, for example, to set the desired update frame rate
(StartInteractionEvent), operate on the vtkProp3D or other
object (InteractionEvent), and set the desired frame rate
back to normal values (EndInteractionEvent).
Note that the Priority attribute inherited from
vtkInteractorObserver has a new default value which is now
0.5 so that all 3D widgets have a higher priority than the
usual interactor styles.
To create an instance of class vtk3DWidget, simply invoke
its constructor as follows

    obj = vtk3DWidget



 Methods

The class vtk3DWidget has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtk3DWidget class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtk3DWidget = obj.NewInstance ()
* vtk3DWidget = obj.SafeDownCast (vtkObject o)
* obj.PlaceWidget (double bounds[6]) - This method is used
  to initially place the widget. The placement of the widget
  depends on whether a Prop3D or input dataset is provided.
  If one of these two is provided, they will be used to
  obtain a bounding box, around which the widget is placed.
  Otherwise, you can manually specify a bounds with the
  PlaceWidget(bounds) method. Note: PlaceWidget(bounds) is
  required by all subclasses; the other methods are provided
  as convenience methods.
* obj.PlaceWidget () - This method is used to initially
  place the widget. The placement of the widget depends on
  whether a Prop3D or input dataset is provided. If one of
  these two is provided, they will be used to obtain a
  bounding box, around which the widget is placed.
  Otherwise, you can manually specify a bounds with the
  PlaceWidget(bounds) method. Note: PlaceWidget(bounds) is
  required by all subclasses; the other methods are provided
  as convenience methods.
* obj.PlaceWidget (double xmin, double xmax, double ymin,
  double ymax, double zmin, double zmax) - This method is
  used to initially place the widget. The placement of the
  widget depends on whether a Prop3D or input dataset is
  provided. If one of these two is provided, they will be
  used to obtain a bounding box, around which the widget is
  placed. Otherwise, you can manually specify a bounds with
  the PlaceWidget(bounds) method. Note: PlaceWidget(bounds)
  is required by all subclasses; the other methods are
  provided as convenience methods.
* obj.SetProp3D (vtkProp3D ) - Specify a vtkProp3D around
  which to place the widget. This is not required, but if
  supplied, it is used to initially position the widget.
* vtkProp3D = obj.GetProp3D () - Specify a vtkProp3D around
  which to place the widget. This is not required, but if
  supplied, it is used to initially position the widget.
* obj.SetInput (vtkDataSet ) - Specify the input dataset.
  This is not required, but if supplied, and no vtkProp3D is
  specified, it is used to initially position the widget.
* vtkDataSet = obj.GetInput () - Specify the input dataset.
  This is not required, but if supplied, and no vtkProp3D is
  specified, it is used to initially position the widget.
* obj.SetPlaceFactor (double ) - Set/Get a factor
  representing the scaling of the widget upon placement (via
  the PlaceWidget() method). Normally the widget is placed
  so that it just fits within the bounding box defined in
  PlaceWidget(bounds). The PlaceFactor will make the widget
  larger (PlaceFactor > 1) or smaller (PlaceFactor < 1). By
  default, PlaceFactor is set to 0.5.
* double = obj.GetPlaceFactorMinValue () - Set/Get a factor
  representing the scaling of the widget upon placement (via
  the PlaceWidget() method). Normally the widget is placed
  so that it just fits within the bounding box defined in
  PlaceWidget(bounds). The PlaceFactor will make the widget
  larger (PlaceFactor > 1) or smaller (PlaceFactor < 1). By
  default, PlaceFactor is set to 0.5.
* double = obj.GetPlaceFactorMaxValue () - Set/Get a factor
  representing the scaling of the widget upon placement (via
  the PlaceWidget() method). Normally the widget is placed
  so that it just fits within the bounding box defined in
  PlaceWidget(bounds). The PlaceFactor will make the widget
  larger (PlaceFactor > 1) or smaller (PlaceFactor < 1). By
  default, PlaceFactor is set to 0.5.
* double = obj.GetPlaceFactor () - Set/Get a factor
  representing the scaling of the widget upon placement (via
  the PlaceWidget() method). Normally the widget is placed
  so that it just fits within the bounding box defined in
  PlaceWidget(bounds). The PlaceFactor will make the widget
  larger (PlaceFactor > 1) or smaller (PlaceFactor < 1). By
  default, PlaceFactor is set to 0.5.
* obj.SetHandleSize (double ) - Set/Get the factor that
  controls the size of the handles that appear as part of
  the widget. These handles (like spheres, etc.) are used to
  manipulate the widget, and are sized as a fraction of the
  screen diagonal.
* double = obj.GetHandleSizeMinValue () - Set/Get the factor
  that controls the size of the handles that appear as part
  of the widget. These handles (like spheres, etc.) are used
  to manipulate the widget, and are sized as a fraction of
  the screen diagonal.
* double = obj.GetHandleSizeMaxValue () - Set/Get the factor
  that controls the size of the handles that appear as part
  of the widget. These handles (like spheres, etc.) are used
  to manipulate the widget, and are sized as a fraction of
  the screen diagonal.
* double = obj.GetHandleSize () - Set/Get the factor that
  controls the size of the handles that appear as part of
  the widget. These handles (like spheres, etc.) are used to
  manipulate the widget, and are sized as a fraction of the
  screen diagonal.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

