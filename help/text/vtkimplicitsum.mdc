
 Usage

vtkImplicitSum produces a linear combination of other
implicit functions. The contribution of each function is
weighted by a scalar coefficient. The NormalizeByWeight
option normalizes the output so that the scalar weights add
up to 1. Note that this function gives accurate sums and
gradients only if the input functions are linear.
To create an instance of class vtkImplicitSum, simply invoke
its constructor as follows

    obj = vtkImplicitSum



 Methods

The class vtkImplicitSum has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkImplicitSum class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImplicitSum = obj.NewInstance ()
* vtkImplicitSum = obj.SafeDownCast (vtkObject o)
* double = obj.EvaluateFunction (double x[3]) - Evaluate
  implicit function using current functions and weights.
* double = obj.EvaluateFunction (double x, double y, double
  z) - Evaluate implicit function using current functions
  and weights.
* obj.EvaluateGradient (double x[3], double g[3]) - Evaluate
  gradient of the weighted sum of functions. Input functions
  should be linear.
* long = obj.GetMTime () - Override modified time retrieval
  because of object dependencies.
* obj.AddFunction (vtkImplicitFunction in, double weight) -
  Add another implicit function to the list of functions,
  along with a weighting factor.
* obj.AddFunction (vtkImplicitFunction in) - Remove all
  functions from the list.
* obj.RemoveAllFunctions () - Remove all functions from the
  list.
* obj.SetFunctionWeight (vtkImplicitFunction f, double
  weight) - Set the weight (coefficient) of the given
  function to be weight.
* obj.SetNormalizeByWeight (int ) - When calculating the
  function and gradient values of the composite function,
  setting NormalizeByWeight on will divide the final result
  by the total weight of the component functions. This
  process does not otherwise normalize the gradient vector.
  By default, NormalizeByWeight is off.
* int = obj.GetNormalizeByWeight () - When calculating the
  function and gradient values of the composite function,
  setting NormalizeByWeight on will divide the final result
  by the total weight of the component functions. This
  process does not otherwise normalize the gradient vector.
  By default, NormalizeByWeight is off.
* obj.NormalizeByWeightOn () - When calculating the function
  and gradient values of the composite function, setting
  NormalizeByWeight on will divide the final result by the
  total weight of the component functions. This process does
  not otherwise normalize the gradient vector. By default,
  NormalizeByWeight is off.
* obj.NormalizeByWeightOff () - When calculating the
  function and gradient values of the composite function,
  setting NormalizeByWeight on will divide the final result
  by the total weight of the component functions. This
  process does not otherwise normalize the gradient vector.
  By default, NormalizeByWeight is off.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

