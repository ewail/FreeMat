
 Usage

vtkDataSetAttributes is a class that is used to represent
and manipulate attribute data (e.g., scalars, vectors,
normals, texture coordinates, tensors, global ids, pedigree
ids, and field data).
This adds to vtkFieldData the ability to pick one of the
arrays from the field as the currently active array for each
attribute type. In other words, you pick one array to be
called "THE" Scalars, and then filters down the pipeline
will treat that array specially. For example
vtkContourFilter will contour "THE" Scalar array unless a
different array is asked for.
Additionally vtkDataSetAttributes provides methods that
filters call to pass data through, copy data into, and
interpolate from Fields. PassData passes entire arrays from
the source to the destination. Copy passes through some
subset of the tuples from the source to the destination.
Interpolate interpolates from the chosen tuple(s) in the
source data, using the provided weights, to produce new
tuples in the destination. Each attribute type has pass,
copy and interpolate "copy" flags that can be set in the
destination to choose which attribute arrays will be
transfered from the source to the destination.
Finally this class provides a mechanism to determine which
attributes a group of sources have in common, and to copy
tuples from a source into the destination, for only those
attributes that are held by all.
To create an instance of class vtkDataSetAttributes, simply
invoke its constructor as follows

    obj = vtkDataSetAttributes



 Methods

The class vtkDataSetAttributes has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkDataSetAttributes class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkDataSetAttributes = obj.NewInstance ()
* vtkDataSetAttributes = obj.SafeDownCast (vtkObject o)
* obj.Initialize () - Initialize all of the object's data to
  NULL Also, clear the copy flags.
* obj.Update () - Deep copy of data (i.e., create new data
  arrays and copy from input data). Ignores the copy flags
  but preserves them in the output.
* obj.DeepCopy (vtkFieldData pd) - Deep copy of data (i.e.,
  create new data arrays and copy from input data). Ignores
  the copy flags but preserves them in the output.
* obj.ShallowCopy (vtkFieldData pd) - Shallow copy of data
  (i.e., use reference counting). Ignores the copy flags but
  preserves them in the output.
* int = obj.SetScalars (vtkDataArray da) - Set/Get the
  scalar data.
* int = obj.SetActiveScalars (string name) - Set/Get the
  scalar data.
* vtkDataArray = obj.GetScalars () - Set/Get the scalar
  data.
* int = obj.SetVectors (vtkDataArray da) - Set/Get the
  vector data.
* int = obj.SetActiveVectors (string name) - Set/Get the
  vector data.
* vtkDataArray = obj.GetVectors () - Set/Get the vector
  data.
* int = obj.SetNormals (vtkDataArray da) - Set/get the
  normal data.
* int = obj.SetActiveNormals (string name) - Set/get the
  normal data.
* vtkDataArray = obj.GetNormals () - Set/get the normal
  data.
* int = obj.SetTCoords (vtkDataArray da) - Set/Get the
  texture coordinate data.
* int = obj.SetActiveTCoords (string name) - Set/Get the
  texture coordinate data.
* vtkDataArray = obj.GetTCoords () - Set/Get the texture
  coordinate data.
* int = obj.SetTensors (vtkDataArray da) - Set/Get the
  tensor data.
* int = obj.SetActiveTensors (string name) - Set/Get the
  tensor data.
* vtkDataArray = obj.GetTensors () - Set/Get the tensor
  data.
* int = obj.SetGlobalIds (vtkDataArray da) - Set/Get the
  global id data.
* int = obj.SetActiveGlobalIds (string name) - Set/Get the
  global id data.
* vtkDataArray = obj.GetGlobalIds () - Set/Get the global id
  data.
* int = obj.SetPedigreeIds (vtkAbstractArray da) - Set/Get
  the pedigree id data.
* int = obj.SetActivePedigreeIds (string name) - Set/Get the
  pedigree id data.
* vtkAbstractArray = obj.GetPedigreeIds () - Set/Get the
  pedigree id data.
* vtkDataArray = obj.GetScalars (string name) - This will
  first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* vtkDataArray = obj.GetVectors (string name) - This will
  first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* vtkDataArray = obj.GetNormals (string name) - This will
  first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* vtkDataArray = obj.GetTCoords (string name) - This will
  first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* vtkDataArray = obj.GetTensors (string name) - This will
  first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* vtkDataArray = obj.GetGlobalIds (string name) - This will
  first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* vtkAbstractArray = obj.GetPedigreeIds (string name) - This
  will first look for an array with the correct name. If one
  exists, it is returned. Otherwise, the name argument is
  ignored, and the active attribute is returned.
* int = obj.SetActiveAttribute (string name, int
  attributeType) - Make the array with the given name the
  active attribute. Attribute types are:
  vtkDataSetAttributes::SCALARS = 0 vtkDataSetAttributes::
  VECTORS = 1 vtkDataSetAttributes::NORMALS = 2
  vtkDataSetAttributes::TCOORDS = 3 vtkDataSetAttributes::
  TENSORS = 4 vtkDataSetAttributes::GLOBALIDS = 5
  vtkDataSetAttributes::PEDIGREEIDS = 6 Returns the index of
  the array if succesful, -1 if the array is not in the list
  of arrays.
* int = obj.SetActiveAttribute (int index, int
  attributeType) - Make the array with the given index the
  active attribute.
* obj.GetAttributeIndices (int indexArray) - Get the field
  data array indices corresponding to scalars, vectors,
  tensors, etc.
* int = obj.IsArrayAnAttribute (int idx) - Determine whether
  a data array of index idx is considered a data set
  attribute (i.e., scalar, vector, tensor, etc). Return
  less-than zero if it is, otherwise an index
  0<=idx<NUM_ATTRIBUTES to indicate which attribute.
* vtkDataArray = obj.GetAttribute (int attributeType) -
  Return an attribute given the attribute type (see
  vtkDataSetAttributes::AttributeTypes). Some attributes
  (such as PEDIGREEIDS) may not be vtkDataArray subclass, so
  in that case use GetAbstractAttribute().
* vtkAbstractArray = obj.GetAbstractAttribute (int
  attributeType) - Return an attribute given the attribute
  type (see vtkDataSetAttributes::AttributeTypes). This is
  the same as GetAttribute(), except that the returned array
  is a vtkAbstractArray instead of vtkDataArray. Some
  attributes (such as PEDIGREEIDS) may not be vtkDataArray
  subclass.
* obj.RemoveArray (string name) - Remove an array (with the
  given name) from the list of arrays.
* obj.SetCopyAttribute (int index, int value, int
  ctypeALLCOPY) - Specify whether to copy the data attribute
  referred to by index. ctype selects from the
  AttributeCopyOperations. If ctype is set to ALLCOPY, then
  COPYTUPLE, INTERPOLATE, and PASSDATA are set to value. If
  value is 0, copying is disallowed. otherwise it is
  allowed.
* obj.SetCopyScalars (int i, int ctypeALLCOPY) - Turn on/off
  the copying of scalar data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyScalars (int ctypeALLCOPY) - Turn on/off
  the copying of scalar data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyScalarsOn () - Turn on/off the copying of scalar
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyScalarsOff () - Turn on/off the copying of scalar
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.SetCopyVectors (int i, int ctypeALLCOPY) - Turn on/off
  the copying of vector data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyVectors (int ctypeALLCOPY) - Turn on/off
  the copying of vector data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyVectorsOn () - Turn on/off the copying of vector
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyVectorsOff () - Turn on/off the copying of vector
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.SetCopyNormals (int i, int ctypeALLCOPY) - Turn on/off
  the copying of normals data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyNormals (int ctypeALLCOPY) - Turn on/off
  the copying of normals data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyNormalsOn () - Turn on/off the copying of normals
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyNormalsOff () - Turn on/off the copying of normals
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.SetCopyTCoords (int i, int ctypeALLCOPY) - Turn on/off
  the copying of texture coordinates data. ctype is one of
  the AttributeCopyOperations, and controls copy,
  interpolate and passdata behavior. For set, ctype=ALLCOPY
  means set all three flags to the same value. For get,
  ctype=ALLCOPY returns true only if all three flags are
  true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyTCoords (int ctypeALLCOPY) - Turn on/off
  the copying of texture coordinates data. ctype is one of
  the AttributeCopyOperations, and controls copy,
  interpolate and passdata behavior. For set, ctype=ALLCOPY
  means set all three flags to the same value. For get,
  ctype=ALLCOPY returns true only if all three flags are
  true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyTCoordsOn () - Turn on/off the copying of texture
  coordinates data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyTCoordsOff () - Turn on/off the copying of texture
  coordinates data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.SetCopyTensors (int i, int ctypeALLCOPY) - Turn on/off
  the copying of tensor data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyTensors (int ctypeALLCOPY) - Turn on/off
  the copying of tensor data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyTensorsOn () - Turn on/off the copying of tensor
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyTensorsOff () - Turn on/off the copying of tensor
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.SetCopyGlobalIds (int i, int ctypeALLCOPY) - Turn on/
  off the copying of global id data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyGlobalIds (int ctypeALLCOPY) - Turn on/
  off the copying of global id data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyGlobalIdsOn () - Turn on/off the copying of global
  id data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyGlobalIdsOff () - Turn on/off the copying of
  global id data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.SetCopyPedigreeIds (int i, int ctypeALLCOPY) - Turn
  on/off the copying of pedigree id data. ctype is one of
  the AttributeCopyOperations, and controls copy,
  interpolate and passdata behavior. For set, ctype=ALLCOPY
  means set all three flags to the same value. For get,
  ctype=ALLCOPY returns true only if all three flags are
  true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* int = obj.GetCopyPedigreeIds (int ctypeALLCOPY) - Turn on/
  off the copying of pedigree id data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyPedigreeIdsOn () - Turn on/off the copying of
  pedigree id data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyPedigreeIdsOff () - Turn on/off the copying of
  pedigree id data. ctype is one of the
  AttributeCopyOperations, and controls copy, interpolate
  and passdata behavior. For set, ctype=ALLCOPY means set
  all three flags to the same value. For get, ctype=ALLCOPY
  returns true only if all three flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass for an attribute is set
       (on or off), it is applied. This overrides rules 2
       and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyAllOn (int ctypeALLCOPY) - Turn on copying of all
  data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.CopyAllOff (int ctypeALLCOPY) - Turn off copying of
  all data. ctype is one of the AttributeCopyOperations, and
  controls copy, interpolate and passdata behavior. For set,
  ctype=ALLCOPY means set all three flags to the same value.
  For get, ctype=ALLCOPY returns true only if all three
  flags are true.
  During copying, interpolation and passdata, the following
  rules are followed for each array:

    1. If the copy/interpolate/pass flag for an attribute is
       set (on or off), it is applied. This overrides rules
       2 and 3.
    2. If the copy flag for an array is set (on or off), it
       is applied This overrides rule 3.
    3. If CopyAllOn is set, copy the array. If CopyAllOff is
       set, do not copy the array

* obj.PassData (vtkFieldData fd) - Pass entire arrays of
  input data through to output. Obey the "copy" flags. When
  passing a field, the following copying rules are followed:
  1) Check if a field is an attribute, if yes and if there
  is a PASSDATA copy flag for that attribute (on or off),
  obey the flag for that attribute, ignore (2) and (3), 2)
  if there is a copy field for that field (on or off), obey
  the flag, ignore (3) 3) obey CopyAllOn/Off
* obj.CopyAllocate (vtkDataSetAttributes pd, vtkIdType sze,
  vtkIdType ext) - Allocates point data for point-by-point
  (or cell-by-cell) copy operation. If sze=0, then use the
  input DataSetAttributes to create (i.e., find initial size
  of) new objects; otherwise use the sze variable. Note that
  pd HAS to be the vtkDataSetAttributes object which will
  later be used with CopyData. If this is not the case,
  consider using the alternative forms of CopyAllocate and
  CopyData. ext is no longer used. If shallowCopyArrays is
  true, input arrays are copied to the output instead of new
  ones being allocated.
* obj.CopyAllocate (vtkDataSetAttributes pd, vtkIdType sze,
  vtkIdType ext, int shallowCopyArrays) - Allocates point
  data for point-by-point (or cell-by-cell) copy operation.
  If sze=0, then use the input DataSetAttributes to create
  (i.e., find initial size of) new objects; otherwise use
  the sze variable. Note that pd HAS to be the
  vtkDataSetAttributes object which will later be used with
  CopyData. If this is not the case, consider using the
  alternative forms of CopyAllocate and CopyData. ext is no
  longer used. If shallowCopyArrays is true, input arrays
  are copied to the output instead of new ones being
  allocated.
* obj.CopyStructuredData (vtkDataSetAttributes inDsa, int
  inExt, int outExt) - This method is used to copy data
  arrays in images. You should call "CopyAllocate" before
  calling this method.
* obj.CopyData (vtkDataSetAttributes fromPd, vtkIdType
  fromId, vtkIdType toId) - Copy the attribute data from one
  id to another. Make sure CopyAllocate() has been invoked
  before using this method. When copying a field, the
  following copying rules are followed: 1) Check if a field
  is an attribute, if yes and if there is a COPYTUPLE copy
  flag for that attribute (on or off), obey the flag for
  that attribute, ignore (2) and (3), 2) if there is a copy
  field for that field (on or off), obey the flag, ignore
  (3) 3) obey CopyAllOn/Off
* obj.CopyTuple (vtkAbstractArray fromData, vtkAbstractArray
  toData, vtkIdType fromId, vtkIdType toId) - Copy a tuple
  of data from one data array to another. This method
  assumes that the fromData and toData objects are of the
  same type, and have the same number of components. This is
  true if you invoke CopyAllocate() or InterpolateAllocate
  ().
* obj.InterpolateAllocate (vtkDataSetAttributes pd,
  vtkIdType sze, vtkIdType ext) - Initialize point
  interpolation method. Note that pd HAS to be the
  vtkDataSetAttributes object which will later be used with
  InterpolatePoint or InterpolateEdge. ext is no longer
  used. If shallowCopyArrays is true, input arrays are
  copied to the output instead of new ones being allocated.
* obj.InterpolateAllocate (vtkDataSetAttributes pd,
  vtkIdType sze, vtkIdType ext, int shallowCopyArrays) -
  Initialize point interpolation method. Note that pd HAS to
  be the vtkDataSetAttributes object which will later be
  used with InterpolatePoint or InterpolateEdge. ext is no
  longer used. If shallowCopyArrays is true, input arrays
  are copied to the output instead of new ones being
  allocated.
* obj.InterpolatePoint (vtkDataSetAttributes fromPd,
  vtkIdType toId, vtkIdList ids, double weights) -
  Interpolate data set attributes from other data set
  attributes given cell or point ids and associated
  interpolation weights. If the INTERPOLATION copy flag is
  set to 0 for an array, interpolation is prevented. If the
  flag is set to 1, weighted interpolation occurs. If the
  flag is set to 2, nearest neighbor interpolation is used.
* obj.InterpolateEdge (vtkDataSetAttributes fromPd,
  vtkIdType toId, vtkIdType p1, vtkIdType p2, double t) -
  Interpolate data from the two points p1,p2 (forming an
  edge) and an interpolation factor, t, along the edge. The
  weight ranges from (0,1), with t=0 located at p1. Make
  sure that the method InterpolateAllocate() has been
  invoked before using this method. If the INTERPOLATION
  copy flag is set to 0 for an array, interpolation is
  prevented. If the flag is set to 1, weighted interpolation
  occurs. If the flag is set to 2, nearest neighbor
  interpolation is used.
* obj.InterpolateTime (vtkDataSetAttributes from1,
  vtkDataSetAttributes from2, vtkIdType id, double t) -
  Interpolate data from the same id (point or cell) at
  different points in time (parameter t). Two input data set
  attributes objects are input. The parameter t lies between
  (0<=t<=1). IMPORTANT: it is assumed that the number of
  attributes and number of components is the same for both
  from1 and from2, and the type of data for from1 and from2
  are the same. Make sure that the method
  InterpolateAllocate() has been invoked before using this
  method. If the INTERPOLATION copy flag is set to 0 for an
  array, interpolation is prevented. If the flag is set to
  1, weighted interpolation occurs. If the flag is set to 2,
  nearest neighbor interpolation is used.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

