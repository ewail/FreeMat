
 Usage

This class is a concrete implementation of
vtkHandleRepresentation. It renders handles as spherical
blobs in 3D space.
To create an instance of class
vtkSphereHandleRepresentation, simply invoke its constructor
as follows

    obj = vtkSphereHandleRepresentation



 Methods

The class vtkSphereHandleRepresentation has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkSphereHandleRepresentation
class.

* string = obj.GetClassName () - Standard methods for
  instances of this class.
* int = obj.IsA (string name) - Standard methods for
  instances of this class.
* vtkSphereHandleRepresentation = obj.NewInstance () -
  Standard methods for instances of this class.
* vtkSphereHandleRepresentation = obj.SafeDownCast
  (vtkObject o) - Standard methods for instances of this
  class.
* obj.SetWorldPosition (double p[3]) - Set the position of
  the point in world and display coordinates. Note that if
  the position is set outside of the bounding box, it will
  be clamped to the boundary of the bounding box. This
  method overloads the superclasses' SetWorldPosition() and
  SetDisplayPosition() in order to set the focal point of
  the cursor properly.
* obj.SetDisplayPosition (double p[3]) - Set the position of
  the point in world and display coordinates. Note that if
  the position is set outside of the bounding box, it will
  be clamped to the boundary of the bounding box. This
  method overloads the superclasses' SetWorldPosition() and
  SetDisplayPosition() in order to set the focal point of
  the cursor properly.
* obj.SetTranslationMode (int ) - If translation mode is on,
  as the widget is moved the bounding box, shadows, and
  cursor are all translated simultaneously as the point
  moves (i.e., the left and middle mouse buttons act the
  same). Otherwise, only the cursor focal point moves, which
  is constrained by the bounds of the point representation.
  (Note that the bounds can be scaled up using the right
  mouse button.)
* int = obj.GetTranslationMode () - If translation mode is
  on, as the widget is moved the bounding box, shadows, and
  cursor are all translated simultaneously as the point
  moves (i.e., the left and middle mouse buttons act the
  same). Otherwise, only the cursor focal point moves, which
  is constrained by the bounds of the point representation.
  (Note that the bounds can be scaled up using the right
  mouse button.)
* obj.TranslationModeOn () - If translation mode is on, as
  the widget is moved the bounding box, shadows, and cursor
  are all translated simultaneously as the point moves
  (i.e., the left and middle mouse buttons act the same).
  Otherwise, only the cursor focal point moves, which is
  constrained by the bounds of the point representation.
  (Note that the bounds can be scaled up using the right
  mouse button.)
* obj.TranslationModeOff () - If translation mode is on, as
  the widget is moved the bounding box, shadows, and cursor
  are all translated simultaneously as the point moves
  (i.e., the left and middle mouse buttons act the same).
  Otherwise, only the cursor focal point moves, which is
  constrained by the bounds of the point representation.
  (Note that the bounds can be scaled up using the right
  mouse button.)
* obj.SetSphereRadius (double )
* double = obj.GetSphereRadius ()
* obj.SetProperty (vtkProperty ) - Set/Get the handle
  properties when unselected and selected.
* obj.SetSelectedProperty (vtkProperty ) - Set/Get the
  handle properties when unselected and selected.
* vtkProperty = obj.GetProperty () - Set/Get the handle
  properties when unselected and selected.
* vtkProperty = obj.GetSelectedProperty () - Set/Get the
  handle properties when unselected and selected.
* obj.SetHotSpotSize (double ) - Set the "hot spot" size;
  i.e., the region around the focus, in which the motion
  vector is used to control the constrained sliding action.
  Note the size is specified as a fraction of the length of
  the diagonal of the point widget's bounding box.
* double = obj.GetHotSpotSizeMinValue () - Set the "hot
  spot" size; i.e., the region around the focus, in which
  the motion vector is used to control the constrained
  sliding action. Note the size is specified as a fraction
  of the length of the diagonal of the point widget's
  bounding box.
* double = obj.GetHotSpotSizeMaxValue () - Set the "hot
  spot" size; i.e., the region around the focus, in which
  the motion vector is used to control the constrained
  sliding action. Note the size is specified as a fraction
  of the length of the diagonal of the point widget's
  bounding box.
* double = obj.GetHotSpotSize () - Set the "hot spot" size;
  i.e., the region around the focus, in which the motion
  vector is used to control the constrained sliding action.
  Note the size is specified as a fraction of the length of
  the diagonal of the point widget's bounding box.
* obj.SetHandleSize (double size) - Overload the
  superclasses SetHandleSize() method to update internal
  variables.
* double = obj.GetBounds () - Methods to make this class
  properly act like a vtkWidgetRepresentation.
* obj.BuildRepresentation () - Methods to make this class
  properly act like a vtkWidgetRepresentation.
* obj.StartWidgetInteraction (double eventPos[2]) - Methods
  to make this class properly act like a
  vtkWidgetRepresentation.
* obj.WidgetInteraction (double eventPos[2]) - Methods to
  make this class properly act like a
  vtkWidgetRepresentation.
* int = obj.ComputeInteractionState (int X, int Y, int
  modify) - Methods to make this class properly act like a
  vtkWidgetRepresentation.
* obj.PlaceWidget (double bounds[6]) - Methods to make this
  class properly act like a vtkWidgetRepresentation.
* obj.ShallowCopy (vtkProp prop) - Methods to make this
  class behave as a vtkProp.
* obj.DeepCopy (vtkProp prop) - Methods to make this class
  behave as a vtkProp.
* obj.GetActors (vtkPropCollection ) - Methods to make this
  class behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - Methods to
  make this class behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Methods to make this class behave as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Methods to make this class behave as a
  vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - Methods to
  make this class behave as a vtkProp.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

