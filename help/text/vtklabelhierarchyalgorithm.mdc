
 Usage

vtkLabelHierarchyAlgorithm is a convenience class to make
writing algorithms easier. It is also designed to help
transition old algorithms to the new pipeline architecture.
There are some assumptions and defaults made by this class
you should be aware of. This class defaults such that your
filter will have one input port and one output port. If that
is not the case simply change it with SetNumberOfInputPorts
etc. See this class constructor for the default. This class
also provides a FillInputPortInfo method that by default
says that all inputs will be DataObjects. If that isn't the
case then please override this method in your subclass. This
class breaks out the downstream requests into separate
functions such as RequestData and RequestInformation. You
should implement RequestData( request, inputVec, outputVec)
in subclasses.
To create an instance of class vtkLabelHierarchyAlgorithm,
simply invoke its constructor as follows

    obj = vtkLabelHierarchyAlgorithm



 Methods

The class vtkLabelHierarchyAlgorithm has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkLabelHierarchyAlgorithm class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkLabelHierarchyAlgorithm = obj.NewInstance ()
* vtkLabelHierarchyAlgorithm = obj.SafeDownCast (vtkObject
  o)
* vtkLabelHierarchy = obj.GetOutput () - Get the output data
  object for a port on this algorithm.
* vtkLabelHierarchy = obj.GetOutput (int ) - Get the output
  data object for a port on this algorithm.
* obj.SetOutput (vtkDataObject d) - Get the output data
  object for a port on this algorithm.
* vtkDataObject = obj.GetInput ()
* vtkDataObject = obj.GetInput (int port)
* vtkLabelHierarchy = obj.GetLabelHierarchyInput (int port)
* obj.SetInput (vtkDataObject ) - Set an input of this
  algorithm. You should not override these methods because
  they are not the only way to connect a pipeline. Note that
  these methods support old-style pipeline connections. When
  writing new code you should use the more general
  vtkAlgorithm::SetInputConnection(). These methods
  transform the input index to the input port index, not an
  index of a connection within a single port.
* obj.SetInput (int , vtkDataObject ) - Set an input of this
  algorithm. You should not override these methods because
  they are not the only way to connect a pipeline. Note that
  these methods support old-style pipeline connections. When
  writing new code you should use the more general
  vtkAlgorithm::SetInputConnection(). These methods
  transform the input index to the input port index, not an
  index of a connection within a single port.
* obj.AddInput (vtkDataObject ) - Add an input of this
  algorithm. Note that these methods support old-style
  pipeline connections. When writing new code you should use
  the more general vtkAlgorithm::AddInputConnection(). See
  SetInput() for details.
* obj.AddInput (int , vtkDataObject ) - Add an input of this
  algorithm. Note that these methods support old-style
  pipeline connections. When writing new code you should use
  the more general vtkAlgorithm::AddInputConnection(). See
  SetInput() for details.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

