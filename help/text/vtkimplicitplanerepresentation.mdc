
 Usage

This class is a concrete representation for the
vtkImplicitPlaneWidget2. It represents an infinite plane
defined by a normal and point in the context of a bounding
box. Through interaction with the widget, the plane can be
manipulated by adjusting the plane normal or moving the
origin point.
To use this representation, you normally define a (plane)
origin and (plane) normal. The PlaceWidget() method is also
used to intially position the representation.
To create an instance of class
vtkImplicitPlaneRepresentation, simply invoke its
constructor as follows

    obj = vtkImplicitPlaneRepresentation



 Methods

The class vtkImplicitPlaneRepresentation has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkImplicitPlaneRepresentation
class.

* string = obj.GetClassName () - Standard methods for the
  class.
* int = obj.IsA (string name) - Standard methods for the
  class.
* vtkImplicitPlaneRepresentation = obj.NewInstance () -
  Standard methods for the class.
* vtkImplicitPlaneRepresentation = obj.SafeDownCast
  (vtkObject o) - Standard methods for the class.
* obj.SetOrigin (double x, double y, double z) - Get the
  origin of the plane.
* obj.SetOrigin (double x[3]) - Get the origin of the plane.
* double = obj.GetOrigin () - Get the origin of the plane.
* obj.GetOrigin (double xyz[3]) - Get the origin of the
  plane.
* obj.SetNormal (double x, double y, double z) - Get the
  normal to the plane.
* obj.SetNormal (double x[3]) - Get the normal to the plane.
* double = obj.GetNormal () - Get the normal to the plane.
* obj.GetNormal (double xyz[3]) - Get the normal to the
  plane.
* obj.SetNormalToXAxis (int ) - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* int = obj.GetNormalToXAxis () - Force the plane widget to
  be aligned with one of the x-y-z axes. If one axis is set
  on, the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToXAxisOn () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToXAxisOff () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.SetNormalToYAxis (int ) - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* int = obj.GetNormalToYAxis () - Force the plane widget to
  be aligned with one of the x-y-z axes. If one axis is set
  on, the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToYAxisOn () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToYAxisOff () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.SetNormalToZAxis (int ) - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* int = obj.GetNormalToZAxis () - Force the plane widget to
  be aligned with one of the x-y-z axes. If one axis is set
  on, the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToZAxisOn () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToZAxisOff () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.SetTubing (int ) - Turn on/off tubing of the wire
  outline of the plane. The tube thickens the line by
  wrapping with a vtkTubeFilter.
* int = obj.GetTubing () - Turn on/off tubing of the wire
  outline of the plane. The tube thickens the line by
  wrapping with a vtkTubeFilter.
* obj.TubingOn () - Turn on/off tubing of the wire outline
  of the plane. The tube thickens the line by wrapping with
  a vtkTubeFilter.
* obj.TubingOff () - Turn on/off tubing of the wire outline
  of the plane. The tube thickens the line by wrapping with
  a vtkTubeFilter.
* obj.SetDrawPlane (int plane) - Enable/disable the drawing
  of the plane. In some cases the plane interferes with the
  object that it is operating on (i.e., the plane interferes
  with the cut surface it produces producing z-buffer
  artifacts.)
* int = obj.GetDrawPlane () - Enable/disable the drawing of
  the plane. In some cases the plane interferes with the
  object that it is operating on (i.e., the plane interferes
  with the cut surface it produces producing z-buffer
  artifacts.)
* obj.DrawPlaneOn () - Enable/disable the drawing of the
  plane. In some cases the plane interferes with the object
  that it is operating on (i.e., the plane interferes with
  the cut surface it produces producing z-buffer artifacts.)
* obj.DrawPlaneOff () - Enable/disable the drawing of the
  plane. In some cases the plane interferes with the object
  that it is operating on (i.e., the plane interferes with
  the cut surface it produces producing z-buffer artifacts.)
* obj.SetOutlineTranslation (int ) - Turn on/off the ability
  to translate the bounding box by grabbing it with the left
  mouse button.
* int = obj.GetOutlineTranslation () - Turn on/off the
  ability to translate the bounding box by grabbing it with
  the left mouse button.
* obj.OutlineTranslationOn () - Turn on/off the ability to
  translate the bounding box by grabbing it with the left
  mouse button.
* obj.OutlineTranslationOff () - Turn on/off the ability to
  translate the bounding box by grabbing it with the left
  mouse button.
* obj.SetOutsideBounds (int ) - Turn on/off the ability to
  move the widget outside of the bounds specified in the
  initial PlaceWidget() invocation.
* int = obj.GetOutsideBounds () - Turn on/off the ability to
  move the widget outside of the bounds specified in the
  initial PlaceWidget() invocation.
* obj.OutsideBoundsOn () - Turn on/off the ability to move
  the widget outside of the bounds specified in the initial
  PlaceWidget() invocation.
* obj.OutsideBoundsOff () - Turn on/off the ability to move
  the widget outside of the bounds specified in the initial
  PlaceWidget() invocation.
* obj.SetScaleEnabled (int ) - Turn on/off the ability to
  scale the widget with the mouse.
* int = obj.GetScaleEnabled () - Turn on/off the ability to
  scale the widget with the mouse.
* obj.ScaleEnabledOn () - Turn on/off the ability to scale
  the widget with the mouse.
* obj.ScaleEnabledOff () - Turn on/off the ability to scale
  the widget with the mouse.
* obj.GetPolyData (vtkPolyData pd) - Grab the polydata that
  defines the plane. The polydata contains a single polygon
  that is clipped by the bounding box.
* vtkPolyDataAlgorithm = obj.GetPolyDataAlgorithm () -
  Satisfies superclass API. This returns a pointer to the
  underlying PolyData (which represents the plane).
* obj.GetPlane (vtkPlane plane) - Get the implicit function
  for the plane. The user must provide the instance of the
  class vtkPlane. Note that vtkPlane is a subclass of
  vtkImplicitFunction, meaning that it can be used by a
  variety of filters to perform clipping, cutting, and
  selection of data.
* obj.UpdatePlacement (void ) - Satisfies the superclass
  API. This will change the state of the widget to match
  changes that have been made to the underlying
  PolyDataSource
* vtkProperty = obj.GetNormalProperty () - Get the
  properties on the normal (line and cone).
* vtkProperty = obj.GetSelectedNormalProperty () - Get the
  properties on the normal (line and cone).
* vtkProperty = obj.GetPlaneProperty () - Get the plane
  properties. The properties of the plane when selected and
  unselected can be manipulated.
* vtkProperty = obj.GetSelectedPlaneProperty () - Get the
  plane properties. The properties of the plane when
  selected and unselected can be manipulated.
* vtkProperty = obj.GetOutlineProperty () - Get the property
  of the outline.
* vtkProperty = obj.GetSelectedOutlineProperty () - Get the
  property of the outline.
* vtkProperty = obj.GetEdgesProperty () - Get the property
  of the intersection edges. (This property also applies to
  the edges when tubed.)
* int = obj.ComputeInteractionState (int X, int Y, int
  modify) - Methods to interface with the vtkSliderWidget.
* obj.PlaceWidget (double bounds[6]) - Methods to interface
  with the vtkSliderWidget.
* obj.BuildRepresentation () - Methods to interface with the
  vtkSliderWidget.
* obj.StartWidgetInteraction (double eventPos[2]) - Methods
  to interface with the vtkSliderWidget.
* obj.WidgetInteraction (double newEventPos[2]) - Methods to
  interface with the vtkSliderWidget.
* obj.EndWidgetInteraction (double newEventPos[2]) - Methods
  to interface with the vtkSliderWidget.
* double = obj.GetBounds ()
* obj.GetActors (vtkPropCollection pc)
* obj.ReleaseGraphicsResources (vtkWindow )
* int = obj.RenderOpaqueGeometry (vtkViewport )
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  )
* int = obj.HasTranslucentPolygonalGeometry ()
* obj.SetInteractionState (int ) - The interaction state may
  be set from a widget (e.g., vtkImplicitPlaneWidget2) or
  other object. This controls how the interaction with the
  widget proceeds. Normally this method is used as part of a
  handshaking process with the widget: First
  ComputeInteractionState() is invoked that returns a state
  based on geometric considerations (i.e., cursor near a
  widget feature), then based on events, the widget may
  modify this further.
* int = obj.GetInteractionStateMinValue () - The interaction
  state may be set from a widget (e.g.,
  vtkImplicitPlaneWidget2) or other object. This controls
  how the interaction with the widget proceeds. Normally
  this method is used as part of a handshaking process with
  the widget: First ComputeInteractionState() is invoked
  that returns a state based on geometric considerations
  (i.e., cursor near a widget feature), then based on
  events, the widget may modify this further.
* int = obj.GetInteractionStateMaxValue () - The interaction
  state may be set from a widget (e.g.,
  vtkImplicitPlaneWidget2) or other object. This controls
  how the interaction with the widget proceeds. Normally
  this method is used as part of a handshaking process with
  the widget: First ComputeInteractionState() is invoked
  that returns a state based on geometric considerations
  (i.e., cursor near a widget feature), then based on
  events, the widget may modify this further.
* obj.SetRepresentationState (int ) - Sets the visual
  appearance of the representation based on the state it is
  in. This state is usually the same as InteractionState.
* int = obj.GetRepresentationState () - Sets the visual
  appearance of the representation based on the state it is
  in. This state is usually the same as InteractionState.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

