
 Usage

This PointPlacer is used to constrain the placement of
points on the supplied image actor. Additionally, you may
set bounds to restrict the placement of the points. The
placement of points will then be constrained to lie not only
on the ImageActor but also within the bounds specified. If
no bounds are specified, they may lie anywhere on the
supplied ImageActor.
To create an instance of class vtkImageActorPointPlacer,
simply invoke its constructor as follows

    obj = vtkImageActorPointPlacer



 Methods

The class vtkImageActorPointPlacer has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkImageActorPointPlacer class.

* string = obj.GetClassName () - Standard methods for
  instances of this class.
* int = obj.IsA (string name) - Standard methods for
  instances of this class.
* vtkImageActorPointPlacer = obj.NewInstance () - Standard
  methods for instances of this class.
* vtkImageActorPointPlacer = obj.SafeDownCast (vtkObject o)
  - Standard methods for instances of this class.
* int = obj.ComputeWorldPosition (vtkRenderer ren, double
  displayPos[2], double worldPos[3], double worldOrient[9])
  - Given and renderer and a display position in pixels,
  find a world position and orientation. In this class an
  internal vtkBoundedPlanePointPlacer is used to compute the
  world position and orientation. The internal placer is set
  to use the plane of the image actor and the bounds of the
  image actor as the constraints for placing points.
* int = obj.ComputeWorldPosition (vtkRenderer ren, double
  displayPos[2], double refWorldPos[2], double worldPos[3],
  double worldOrient[9]) - This method is identical to the
  one above since the reference position is ignored by the
  bounded plane point placer.
* int = obj.ValidateWorldPosition (double worldPos[3]) -
  This method validates a world position by checking to see
  if the world position is valid according to the
  constraints of the internal placer (essentially - is this
  world position on the image?)
* int = obj.ValidateWorldPosition (double worldPos[3],
  double worldOrient[9]) - This method is identical to the
  one above since the bounded plane point placer ignores
  orientation
* int = obj.UpdateWorldPosition (vtkRenderer ren, double
  worldPos[3], double worldOrient[9]) - Update the world
  position and orientation according the the current
  constraints of the placer. Will be called by the
  representation when it notices that this placer has been
  modified.
* int = obj.UpdateInternalState () - A method for
  configuring the internal placer according to the
  constraints of the image actor. Called by the
  representation to give the placer a chance to update
  itself, which may cause the MTime to change, which would
  then cause the representation to update all of its points
* obj.SetImageActor (vtkImageActor ) - Set / get the
  reference vtkImageActor used to place the points. An image
  actor must be set for this placer to work. An internal
  bounded plane point placer is created and set to match the
  bounds of the displayed image.
* vtkImageActor = obj.GetImageActor () - Set / get the
  reference vtkImageActor used to place the points. An image
  actor must be set for this placer to work. An internal
  bounded plane point placer is created and set to match the
  bounds of the displayed image.
* obj.SetBounds (double , double , double , double , double
  , double ) - Optionally, you may set bounds to restrict
  the placement of the points. The placement of points will
  then be constrained to lie not only on the ImageActor but
  also within the bounds specified. If no bounds are
  specified, they may lie anywhere on the supplied
  ImageActor.
* obj.SetBounds (double a[6]) - Optionally, you may set
  bounds to restrict the placement of the points. The
  placement of points will then be constrained to lie not
  only on the ImageActor but also within the bounds
  specified. If no bounds are specified, they may lie
  anywhere on the supplied ImageActor.
* double = obj. GetBounds () - Optionally, you may set
  bounds to restrict the placement of the points. The
  placement of points will then be constrained to lie not
  only on the ImageActor but also within the bounds
  specified. If no bounds are specified, they may lie
  anywhere on the supplied ImageActor.
* obj.SetWorldTolerance (double s) - Set the world
  tolerance. This propagates it to the internal
  BoundedPlanePointPlacer.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

