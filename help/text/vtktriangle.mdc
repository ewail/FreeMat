
 Usage

vtkTriangle is a concrete implementation of vtkCell to
represent a triangle located in 3-space.
To create an instance of class vtkTriangle, simply invoke
its constructor as follows

    obj = vtkTriangle



 Methods

The class vtkTriangle has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkTriangle class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkTriangle = obj.NewInstance ()
* vtkTriangle = obj.SafeDownCast (vtkObject o)
* vtkCell = obj.GetEdge (int edgeId) - Get the edge
  specified by edgeId (range 0 to 2) and return that edge's
  coordinates.
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetFace (int ) - See the vtkCell API for
  descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - See the vtkCell API for
  descriptions of these methods.
* double = obj.ComputeArea () - A convenience function to
  compute the area of a vtkTriangle.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray polys,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this triangle using scalar value provided. Like
  contouring, except that it cuts the triangle to produce
  other triangles.
* obj.InterpolateFunctions (double pcoords[3], double sf[3])
  - Compute the interpolation functions/derivatives (aka
  shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [6]) - Return the ids of the vertices defining edge
  (edgeId). Ids are related to the cell, not to the dataset.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the triangle in parametric coordinates.
* double = obj.GetParametricDistance (double pcoords[3]) -
  Return the distance of the parametric coordinate provided
  to the cell. If inside the cell, a distance of zero is
  returned.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

