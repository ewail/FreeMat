
 Usage

vtkActor is used to represent an entity in a rendering
scene. It inherits functions related to the actors position,
and orientation from vtkProp. The actor also has scaling and
maintains a reference to the defining geometry (i.e., the
mapper), rendering properties, and possibly a texture map.
vtkActor combines these instance variables into one 4x4
transformation matrix as follows: [x y z 1] = [x y z 1]
Translate(-origin) Scale(scale) Rot(y) Rot(x) Rot (z) Trans
(origin) Trans(position)
To create an instance of class vtkActor, simply invoke its
constructor as follows

    obj = vtkActor



 Methods

The class vtkActor has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkActor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkActor = obj.NewInstance ()
* vtkActor = obj.SafeDownCast (vtkObject o)
* obj.GetActors (vtkPropCollection ) - For some exporters
  and other other operations we must be able to collect all
  the actors or volumes. These methods are used in that
  process.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Support the standard render methods.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Support the standard render methods.
* int = obj.HasTranslucentPolygonalGeometry () - Does this
  prop have some translucent polygonal geometry?
* obj.Render (vtkRenderer , vtkMapper ) - Shallow copy of an
  actor. Overloads the virtual vtkProp method.
* obj.ShallowCopy (vtkProp prop) - Shallow copy of an actor.
  Overloads the virtual vtkProp method.
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.
* obj.SetProperty (vtkProperty lut) - Set/Get the property
  object that controls this actors surface properties. This
  should be an instance of a vtkProperty object. Every actor
  must have a property associated with it. If one isn't
  specified, then one will be generated automatically.
  Multiple actors can share one property object.
* vtkProperty = obj.GetProperty () - Set/Get the property
  object that controls this actors surface properties. This
  should be an instance of a vtkProperty object. Every actor
  must have a property associated with it. If one isn't
  specified, then one will be generated automatically.
  Multiple actors can share one property object.
* vtkProperty = obj.MakeProperty () - Create a new property
  suitable for use with this type of Actor. For example, a
  vtkMesaActor should create a vtkMesaProperty in this
  function. The default is to just call vtkProperty::New.
* obj.SetBackfaceProperty (vtkProperty lut) - Set/Get the
  property object that controls this actors backface surface
  properties. This should be an instance of a vtkProperty
  object. If one isn't specified, then the front face
  properties will be used. Multiple actors can share one
  property object.
* vtkProperty = obj.GetBackfaceProperty () - Set/Get the
  property object that controls this actors backface surface
  properties. This should be an instance of a vtkProperty
  object. If one isn't specified, then the front face
  properties will be used. Multiple actors can share one
  property object.
* obj.SetTexture (vtkTexture ) - Set/Get the texture object
  to control rendering texture maps. This will be a
  vtkTexture object. An actor does not need to have an
  associated texture map and multiple actors can share one
  texture.
* vtkTexture = obj.GetTexture () - Set/Get the texture
  object to control rendering texture maps. This will be a
  vtkTexture object. An actor does not need to have an
  associated texture map and multiple actors can share one
  texture.
* obj.SetMapper (vtkMapper ) - This is the method that is
  used to connect an actor to the end of a visualization
  pipeline, i.e. the mapper. This should be a subclass of
  vtkMapper. Typically vtkPolyDataMapper and
  vtkDataSetMapper will be used.
* vtkMapper = obj.GetMapper () - Returns the Mapper that
  this actor is getting its data from.
* obj.GetBounds (double bounds[6]) - Get the bounds for this
  Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The method
  GetBounds(double bounds[6]) is available from the
  superclass.)
* double = obj.GetBounds () - Get the bounds for this Actor
  as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The method GetBounds
  (double bounds[6]) is available from the superclass.)
* obj.ApplyProperties () - Get the actors mtime plus
  consider its properties and texture if set.
* long = obj.GetMTime () - Get the actors mtime plus
  consider its properties and texture if set.
* long = obj.GetRedrawMTime () - Return the mtime of
  anything that would cause the rendered image to appear
  differently. Usually this involves checking the mtime of
  the prop plus anything else it depends on such as
  properties, textures etc.
* obj.InitPartTraversal () - The following methods are for
  compatibility. The methods will be deprecated in the near
  future. Use vtkProp::GetNextPath() (and related
  functionality) to get the parts in an assembly (or more
  correctly, the paths in the assembly).
* vtkActor = obj.GetNextPart () - The following methods are
  for compatibility. The methods will be deprecated in the
  near future. Use vtkProp::GetNextPath() (and related
  functionality) to get the parts in an assembly (or more
  correctly, the paths in the assembly).
* int = obj.GetNumberOfParts () - The following methods are
  for compatibility. The methods will be deprecated in the
  near future. Use vtkProp::GetNextPath() (and related
  functionality) to get the parts in an assembly (or more
  correctly, the paths in the assembly).
* bool = obj.GetSupportsSelection () - WARNING: INTERNAL
  METHOD - NOT INTENDED FOR GENERAL USE DO NOT USE THIS
  METHOD OUTSIDE OF THE RENDERING PROCESS Used by
  vtkHardwareSelector to determine if the prop supports
  hardware selection.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

