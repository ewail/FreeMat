
 Usage

vtkTableBasedClipDataSet is a filter that clips any type of
dataset using either any subclass of vtkImplicitFunction or
an input scalar point data array. Clipping means that it
actually "cuts" through the cells of the dataset, returning
everything outside the specified implicit function (or
greater than the scalar value) including "pieces" of a cell
(Note to compare this with vtkExtractGeometry, which pulls
out entire, uncut cells). The output of this filter is a
vtkUnstructuredGrid data.
To use this filter, you need to decide whether an implicit
function or an input scalar point data array is used for
clipping. For the former case, 1) define an implicit
function 2) provide it to this filter via SetClipFunction()
If a clipping function is not specified, or
GenerateClipScalars is off( the default), the input scalar
point data array is then employed for clipping.
You can also specify a scalar (iso-)value, which is used to
decide what is inside and outside the implicit function. You
can also reverse the sense of what inside/outside is by
setting IVAR InsideOut. The clipping algorithm proceeds by
computing an implicit function value or using the input
scalar point data value for each point in the dataset. This
is compared against the scalar (iso-)value to determine the
inside/outside status.
Although this filter sometimes (but rarely) may resort to
the sibling class vtkClipDataSet for handling some special
grids (such as cylinders or cones with capping faces in the
form of a vtkPolyData), it itself is able to deal with most
grids. It is worth mentioning that vtkTableBasedClipDataSet
is capable of addressing the artifacts that may occur with
vtkClipDataSet due to the possibly inconsistent triagulation
modes between neighboring cells. In addition, the former is
much faster than the latter. Furthermore, the former
produces less cells (with ratio usually being 5~6) than by
the latter in the output. In other words, this filter
retains the original cells (i.e., without triangulation /
tetrahedralization) wherever possible. All these advantages
are gained by adopting the unique clipping and triangulation
tables proposed by VisIt.
To create an instance of class vtkTableBasedClipDataSet,
simply invoke its constructor as follows

    obj = vtkTableBasedClipDataSet



 Methods

The class vtkTableBasedClipDataSet has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkTableBasedClipDataSet class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkTableBasedClipDataSet = obj.NewInstance ()
* vtkTableBasedClipDataSet = obj.SafeDownCast (vtkObject o)
* long = obj.GetMTime () - Get the MTime for which the point
  locator and clip function are consdiered.
* obj.SetInsideOut (int ) - Set/Get the InsideOut flag. With
  this flag off, a vertex is considered inside (the implicit
  function or the isosurface) if the (function or scalar)
  value is greater than IVAR Value. With this flag on, a
  vertex is considered inside (the implicit function or the
  isosurface) if the (function or scalar) value is less than
  or equal to IVAR Value. This flag is off by default.
* int = obj.GetInsideOut () - Set/Get the InsideOut flag.
  With this flag off, a vertex is considered inside (the
  implicit function or the isosurface) if the (function or
  scalar) value is greater than IVAR Value. With this flag
  on, a vertex is considered inside (the implicit function
  or the isosurface) if the (function or scalar) value is
  less than or equal to IVAR Value. This flag is off by
  default.
* obj.InsideOutOn () - Set/Get the InsideOut flag. With this
  flag off, a vertex is considered inside (the implicit
  function or the isosurface) if the (function or scalar)
  value is greater than IVAR Value. With this flag on, a
  vertex is considered inside (the implicit function or the
  isosurface) if the (function or scalar) value is less than
  or equal to IVAR Value. This flag is off by default.
* obj.InsideOutOff () - Set/Get the InsideOut flag. With
  this flag off, a vertex is considered inside (the implicit
  function or the isosurface) if the (function or scalar)
  value is greater than IVAR Value. With this flag on, a
  vertex is considered inside (the implicit function or the
  isosurface) if the (function or scalar) value is less than
  or equal to IVAR Value. This flag is off by default.
* obj.SetValue (double ) - Set/Get the clipping value of the
  implicit function (if an implicit function is applied) or
  scalar data array (if a scalar data array is used), with
  0.0 as the default value. This value is ignored if flag
  UseValueAsOffset is true AND a clip function is defined.
* double = obj.GetValue () - Set/Get the clipping value of
  the implicit function (if an implicit function is applied)
  or scalar data array (if a scalar data array is used),
  with 0.0 as the default value. This value is ignored if
  flag UseValueAsOffset is true AND a clip function is
  defined.
* obj.SetUseValueAsOffset (bool ) - Set/Get flag
  UseValueAsOffset, with true as the default value. With
  this flag on, IVAR Value is used as an offset parameter to
  the implicit function. Value is used only when clipping
  using a scalar array.
* bool = obj.GetUseValueAsOffset () - Set/Get flag
  UseValueAsOffset, with true as the default value. With
  this flag on, IVAR Value is used as an offset parameter to
  the implicit function. Value is used only when clipping
  using a scalar array.
* obj.UseValueAsOffsetOn () - Set/Get flag UseValueAsOffset,
  with true as the default value. With this flag on, IVAR
  Value is used as an offset parameter to the implicit
  function. Value is used only when clipping using a scalar
  array.
* obj.UseValueAsOffsetOff () - Set/Get flag
  UseValueAsOffset, with true as the default value. With
  this flag on, IVAR Value is used as an offset parameter to
  the implicit function. Value is used only when clipping
  using a scalar array.
* obj.SetClipFunction (vtkImplicitFunction )
* vtkImplicitFunction = obj.GetClipFunction ()
* obj.SetGenerateClipScalars (int ) - Set/Get flag
  GenerateClipScalars, with 0 as the default value. With
  this flag on, the scalar point data values obtained by
  evaluating the implicit function will be exported to the
  output. Note that this flag requries that an implicit
  function be provided.
* int = obj.GetGenerateClipScalars () - Set/Get flag
  GenerateClipScalars, with 0 as the default value. With
  this flag on, the scalar point data values obtained by
  evaluating the implicit function will be exported to the
  output. Note that this flag requries that an implicit
  function be provided.
* obj.GenerateClipScalarsOn () - Set/Get flag
  GenerateClipScalars, with 0 as the default value. With
  this flag on, the scalar point data values obtained by
  evaluating the implicit function will be exported to the
  output. Note that this flag requries that an implicit
  function be provided.
* obj.GenerateClipScalarsOff () - Set/Get flag
  GenerateClipScalars, with 0 as the default value. With
  this flag on, the scalar point data values obtained by
  evaluating the implicit function will be exported to the
  output. Note that this flag requries that an implicit
  function be provided.
* obj.SetLocator (vtkIncrementalPointLocator locator) - Set/
  Get a point locator locator for merging duplicate points.
  By default, an instance of vtkMergePoints is used. Note
  that this IVAR is provided in this class only because this
  filter may resort to its sibling class vtkClipDataSet when
  processing some special grids (such as cylinders or cones
  with capping faces in the form of a vtkPolyData) while the
  latter requires a point locator. This filter itself does
  not need a locator.
* vtkIncrementalPointLocator = obj.GetLocator () - Set/Get a
  point locator locator for merging duplicate points. By
  default, an instance of vtkMergePoints is used. Note that
  this IVAR is provided in this class only because this
  filter may resort to its sibling class vtkClipDataSet when
  processing some special grids (such as cylinders or cones
  with capping faces in the form of a vtkPolyData) while the
  latter requires a point locator. This filter itself does
  not need a locator.
* obj.SetMergeTolerance (double ) - Set/Get the tolerance
  used for merging duplicate points near the clipping
  intersection cells. This tolerance may prevent the
  generation of degenerate primitives. Note that only 3D
  cells actually use this IVAR.
* double = obj.GetMergeToleranceMinValue () - Set/Get the
  tolerance used for merging duplicate points near the
  clipping intersection cells. This tolerance may prevent
  the generation of degenerate primitives. Note that only 3D
  cells actually use this IVAR.
* double = obj.GetMergeToleranceMaxValue () - Set/Get the
  tolerance used for merging duplicate points near the
  clipping intersection cells. This tolerance may prevent
  the generation of degenerate primitives. Note that only 3D
  cells actually use this IVAR.
* double = obj.GetMergeTolerance () - Set/Get the tolerance
  used for merging duplicate points near the clipping
  intersection cells. This tolerance may prevent the
  generation of degenerate primitives. Note that only 3D
  cells actually use this IVAR.
* obj.CreateDefaultLocator () - Create a default point
  locator when none is specified. The point locator is used
  to merge coincident points.
* obj.SetGenerateClippedOutput (int ) - Set/Get whether a
  second output is generated. The second output contains the
  polygonal data that is clipped away by the iso-surface.
* int = obj.GetGenerateClippedOutput () - Set/Get whether a
  second output is generated. The second output contains the
  polygonal data that is clipped away by the iso-surface.
* obj.GenerateClippedOutputOn () - Set/Get whether a second
  output is generated. The second output contains the
  polygonal data that is clipped away by the iso-surface.
* obj.GenerateClippedOutputOff () - Set/Get whether a second
  output is generated. The second output contains the
  polygonal data that is clipped away by the iso-surface.
* vtkUnstructuredGrid = obj.GetClippedOutput () - Return the
  clipped output.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

