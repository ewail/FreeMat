
 Usage

vtkTreeFieldAggregator may be used to assign sizes to all
the vertices in the tree, based on the sizes of the leaves.
The size of a vertex will equal the sum of the sizes of the
child vertices. If you have a data array with values for all
leaves, you may specify that array, and the values will be
filled in for interior tree vertices. If you do not yet have
an array, you may tell the filter to create a new array,
assuming that the size of each leaf vertex is 1. You may
optionally set a flag to first take the log of all leaf
values before aggregating.
To create an instance of class vtkTreeFieldAggregator,
simply invoke its constructor as follows

    obj = vtkTreeFieldAggregator



 Methods

The class vtkTreeFieldAggregator has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkTreeFieldAggregator class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkTreeFieldAggregator = obj.NewInstance ()
* vtkTreeFieldAggregator = obj.SafeDownCast (vtkObject o)
* string = obj.GetField () - The field to aggregate. If this
  is a string array, the entries are converted to double.
  TODO: Remove this field and use the ArrayToProcess in
  vtkAlgorithm.
* obj.SetField (string ) - The field to aggregate. If this
  is a string array, the entries are converted to double.
  TODO: Remove this field and use the ArrayToProcess in
  vtkAlgorithm.
* double = obj.GetMinValue () - If the value of the vertex
  is less than MinValue then consider it's value to be
  minVal.
* obj.SetMinValue (double ) - If the value of the vertex is
  less than MinValue then consider it's value to be minVal.
* obj.SetLeafVertexUnitSize (bool ) - If set, the algorithm
  will assume a size of 1 for each leaf vertex.
* bool = obj.GetLeafVertexUnitSize () - If set, the
  algorithm will assume a size of 1 for each leaf vertex.
* obj.LeafVertexUnitSizeOn () - If set, the algorithm will
  assume a size of 1 for each leaf vertex.
* obj.LeafVertexUnitSizeOff () - If set, the algorithm will
  assume a size of 1 for each leaf vertex.
* obj.SetLogScale (bool ) - If set, the leaf values in the
  tree will be logarithmically scaled (base 10).
* bool = obj.GetLogScale () - If set, the leaf values in the
  tree will be logarithmically scaled (base 10).
* obj.LogScaleOn () - If set, the leaf values in the tree
  will be logarithmically scaled (base 10).
* obj.LogScaleOff () - If set, the leaf values in the tree
  will be logarithmically scaled (base 10).


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

