
 Usage

This class provides the default concrete representation for
the vtkContourWidget. It works in conjunction with the
vtkContourLineInterpolator and vtkPointPlacer. See
vtkContourWidget for details.
To create an instance of class
vtkOrientedGlyphContourRepresentation, simply invoke its
constructor as follows

    obj = vtkOrientedGlyphContourRepresentation



 Methods

The class vtkOrientedGlyphContourRepresentation has several
methods that can be used. They are listed below. Note that
the documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the
vtkOrientedGlyphContourRepresentation class.

* string = obj.GetClassName () - Standard methods for
  instances of this class.
* int = obj.IsA (string name) - Standard methods for
  instances of this class.
* vtkOrientedGlyphContourRepresentation = obj.NewInstance ()
  - Standard methods for instances of this class.
* vtkOrientedGlyphContourRepresentation = obj.SafeDownCast
  (vtkObject o) - Standard methods for instances of this
  class.
* obj.SetCursorShape (vtkPolyData cursorShape) - Specify the
  cursor shape. Keep in mind that the shape will be aligned
  with the constraining plane by orienting it such that the
  x axis of the geometry lies along the normal of the plane.
* vtkPolyData = obj.GetCursorShape () - Specify the cursor
  shape. Keep in mind that the shape will be aligned with
  the constraining plane by orienting it such that the x
  axis of the geometry lies along the normal of the plane.
* obj.SetActiveCursorShape (vtkPolyData activeShape) -
  Specify the shape of the cursor (handle) when it is
  active. This is the geometry that will be used when the
  mouse is close to the handle or if the user is
  manipulating the handle.
* vtkPolyData = obj.GetActiveCursorShape () - Specify the
  shape of the cursor (handle) when it is active. This is
  the geometry that will be used when the mouse is close to
  the handle or if the user is manipulating the handle.
* vtkProperty = obj.GetProperty () - This is the property
  used when the handle is not active (the mouse is not near
  the handle)
* vtkProperty = obj.GetActiveProperty () - This is the
  property used when the user is interacting with the
  handle.
* vtkProperty = obj.GetLinesProperty () - This is the
  property used by the lines.
* obj.SetRenderer (vtkRenderer ren) - Subclasses of
  vtkOrientedGlyphContourRepresentation must implement these
  methods. These are the methods that the widget and its
  representation use to communicate with each other.
* obj.BuildRepresentation () - Subclasses of
  vtkOrientedGlyphContourRepresentation must implement these
  methods. These are the methods that the widget and its
  representation use to communicate with each other.
* obj.StartWidgetInteraction (double eventPos[2]) -
  Subclasses of vtkOrientedGlyphContourRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* obj.WidgetInteraction (double eventPos[2]) - Subclasses of
  vtkOrientedGlyphContourRepresentation must implement these
  methods. These are the methods that the widget and its
  representation use to communicate with each other.
* int = obj.ComputeInteractionState (int X, int Y, int
  modified) - Subclasses of
  vtkOrientedGlyphContourRepresentation must implement these
  methods. These are the methods that the widget and its
  representation use to communicate with each other.
* obj.GetActors (vtkPropCollection ) - Methods to make this
  class behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - Methods to
  make this class behave as a vtkProp.
* int = obj.RenderOverlay (vtkViewport viewport) - Methods
  to make this class behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Methods to make this class behave as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Methods to make this class behave as a
  vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - Methods to
  make this class behave as a vtkProp.
* vtkPolyData = obj.GetContourRepresentationAsPolyData () -
  Get the points in this contour as a vtkPolyData.
* obj.SetAlwaysOnTop (int ) - Controls whether the contour
  widget should always appear on top of other actors in the
  scene. (In effect, this will disable OpenGL Depth buffer
  tests while rendering the contour). Default is to set it
  to false.
* int = obj.GetAlwaysOnTop () - Controls whether the contour
  widget should always appear on top of other actors in the
  scene. (In effect, this will disable OpenGL Depth buffer
  tests while rendering the contour). Default is to set it
  to false.
* obj.AlwaysOnTopOn () - Controls whether the contour widget
  should always appear on top of other actors in the scene.
  (In effect, this will disable OpenGL Depth buffer tests
  while rendering the contour). Default is to set it to
  false.
* obj.AlwaysOnTopOff () - Controls whether the contour
  widget should always appear on top of other actors in the
  scene. (In effect, this will disable OpenGL Depth buffer
  tests while rendering the contour). Default is to set it
  to false.
* obj.SetLineColor (double r, double g, double b) -
  Convenience method to set the line color. Ideally one
  should use GetLinesProperty()->SetColor().
* obj.SetShowSelectedNodes (int ) - A flag to indicate
  whether to show the Selected nodes Default is to set it to
  false.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

