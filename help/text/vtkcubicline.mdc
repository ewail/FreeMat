
 Usage

vtkCubicLine is a concrete implementation of
vtkNonLinearCell to represent a 1D Cubic line. The Cubic
Line is the 4 nodes isoparametric parabolic line . The
interpolation is the standard finite element, cubic
isoparametric shape function. The cell includes two mid-edge
nodes. The ordering of the four points defining the cell is
point ids (0,1,2,3) where id #2 and #3 are the mid-edge
nodes. Please note that the parametric coordinates lie
between -1 and 1 in accordance with most standard
documentations. .SECTION Thanks <verbatim> This file has
been developed by Oxalya - www.oxalya.com Copyright (c) EDF
- www.edf.fr </verbatim>
To create an instance of class vtkCubicLine, simply invoke
its constructor as follows

    obj = vtkCubicLine



 Methods

The class vtkCubicLine has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkCubicLine class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCubicLine = obj.NewInstance ()
* vtkCubicLine = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetFace (int ) - See the vtkCell API for
  descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - See the vtkCell API for
  descriptions of these methods.
* double = obj.GetParametricDistance (double pcoords[3]) -
  Return the distance of the parametric coordinate provided
  to the cell. If inside the cell, a distance of zero is
  returned.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray lines,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this line using scalar value provided. Like contouring,
  except that it cuts the line to produce other lines.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the triangle in parametric coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[4]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [4])


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

