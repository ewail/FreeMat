
 Usage

This is a vtkWriter that writes it's vtkUnstructuredGrid
input out to an Exodus II file. Go to http://
endo.sandia.gov/SEACAS/ for more information about the
Exodus II format.
Exodus files contain much information that is not captured
in a vtkUnstructuredGrid, such as time steps, information
lines, node sets, and side sets. This information can be
stored in a vtkModelMetadata object.
The vtkExodusReader and vtkPExodusReader can create a
vtkModelMetadata object and embed it in a
vtkUnstructuredGrid in a series of field arrays. This writer
searches for these field arrays and will use the metadata
contained in them when creating the new Exodus II file.
You can also explicitly give the vtkExodusIIWriter a
vtkModelMetadata object to use when writing the file.
In the absence of the information provided by
vtkModelMetadata, if this writer is not part of a parallel
application, we will use reasonable defaults for all the
values in the output Exodus file. If you don't provide a
block ID element array, we'll create a block for each cell
type that appears in the unstructured grid.
However if this writer is part of a parallel application
(hence writing out a distributed Exodus file), then we need
at the very least a list of all the block IDs that appear in
the file. And we need the element array of block IDs for the
input unstructured grid.
In the absense of a vtkModelMetadata object, you can also
provide time step information which we will include in the
output Exodus file.
.SECTION Caveats If the input floating point field arrays
and point locations are all floats or all doubles, this
class will operate more efficiently. Mixing floats and
doubles will slow you down, because Exodus II requires that
we write only floats or only doubles.
We use the terms "point" and "node" interchangeably. Also,
we use the terms "element" and "cell" interchangeably.
To create an instance of class vtkExodusIIWriter, simply
invoke its constructor as follows

    obj = vtkExodusIIWriter



 Methods

The class vtkExodusIIWriter has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkExodusIIWriter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkExodusIIWriter = obj.NewInstance ()
* vtkExodusIIWriter = obj.SafeDownCast (vtkObject o)
* obj.SetModelMetadata (vtkModelMetadata )
* vtkModelMetadata = obj.GetModelMetadata ()
* obj.SetFileName (string )
* string = obj.GetFileName ()
* obj.SetStoreDoubles (int )
* int = obj.GetStoreDoubles ()
* obj.SetGhostLevel (int )
* int = obj.GetGhostLevel ()
* obj.SetWriteOutBlockIdArray (int )
* int = obj.GetWriteOutBlockIdArray ()
* obj.WriteOutBlockIdArrayOn ()
* obj.WriteOutBlockIdArrayOff ()
* obj.SetWriteOutGlobalNodeIdArray (int )
* int = obj.GetWriteOutGlobalNodeIdArray ()
* obj.WriteOutGlobalNodeIdArrayOn ()
* obj.WriteOutGlobalNodeIdArrayOff ()
* obj.SetWriteOutGlobalElementIdArray (int )
* int = obj.GetWriteOutGlobalElementIdArray ()
* obj.WriteOutGlobalElementIdArrayOn ()
* obj.WriteOutGlobalElementIdArrayOff ()
* obj.SetWriteAllTimeSteps (int )
* int = obj.GetWriteAllTimeSteps ()
* obj.WriteAllTimeStepsOn ()
* obj.WriteAllTimeStepsOff ()
* obj.SetBlockIdArrayName (string )
* string = obj.GetBlockIdArrayName ()


* FreeMat_Documentation
* Visualization_Toolkit_Parallel_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

