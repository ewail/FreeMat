
 Usage

vtkExecutive is the superclass for all pipeline executives
in VTK. A VTK executive is responsible for controlling one
instance of vtkAlgorithm. A pipeline consists of one or more
executives that control data flow. Every reader, source,
writer, or data processing algorithm in the pipeline is
implemented in an instance of vtkAlgorithm.
To create an instance of class vtkExecutive, simply invoke
its constructor as follows

    obj = vtkExecutive



 Methods

The class vtkExecutive has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkExecutive class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkExecutive = obj.NewInstance ()
* vtkExecutive = obj.SafeDownCast (vtkObject o)
* vtkAlgorithm = obj.GetAlgorithm () - Get the algorithm to
  which this executive has been assigned.
* int = obj.Update () - Bring the algorithm's outputs up-to-
  date. Returns 1 for success and 0 for failure.
* int = obj.Update (int port) - Bring the algorithm's
  outputs up-to-date. Returns 1 for success and 0 for
  failure.
* int = obj.GetNumberOfInputPorts () - Get the number of
  input/output ports for the algorithm associated with this
  executive. Returns 0 if no algorithm is set.
* int = obj.GetNumberOfOutputPorts () - Get the number of
  input/output ports for the algorithm associated with this
  executive. Returns 0 if no algorithm is set.
* int = obj.GetNumberOfInputConnections (int port) - Get the
  number of input connections on the given port.
* vtkInformation = obj.GetOutputInformation (int port) - Get
  the pipeline information object for the given output port.
* vtkInformationVector = obj.GetOutputInformation () - Get
  the pipeline information object for all output ports.
* vtkInformation = obj.GetInputInformation (int port, int
  connection) - Get the pipeline information for the given
  input connection.
* vtkInformationVector = obj.GetInputInformation (int port)
  - Get the pipeline information vectors for the given input
  port.
* vtkExecutive = obj.GetInputExecutive (int port, int
  connection) - Get the executive managing the given input
  connection.
* vtkDataObject = obj.GetOutputData (int port) - Get/Set the
  data object for an output port of the algorithm.
* obj.SetOutputData (int port, vtkDataObject ,
  vtkInformation info) - Get/Set the data object for an
  output port of the algorithm.
* obj.SetOutputData (int port, vtkDataObject ) - Get/Set the
  data object for an output port of the algorithm.
* vtkDataObject = obj.GetInputData (int port, int
  connection) - Get the data object for an input port of the
  algorithm.
* vtkAlgorithmOutput = obj.GetProducerPort (vtkDataObject )
  - Get the output port that produces the given data object.
* obj.SetSharedOutputInformation (vtkInformationVector
  outInfoVec) - Set a pointer to an outside instance of
  input or output information vectors. No references are
  held to the given vectors, and setting this does not
  change the executive object modification time. This is a
  preliminary interface to use in implementing filters with
  internal pipelines, and may change without notice when a
  future interface is created.
* obj.Register (vtkObjectBase o) - Participate in garbage
  collection.
* obj.UnRegister (vtkObjectBase o) - Participate in garbage
  collection.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

