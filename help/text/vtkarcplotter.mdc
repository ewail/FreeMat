
 Usage

vtkArcPlotter performs plotting of attribute data along
polylines defined with an input vtkPolyData data object. Any
type of attribute data can be plotted including scalars,
vectors, tensors, normals, texture coordinates, and field
data. Either one or multiple data components can be plotted.
To use this class you must specify an input data set that
contains one or more polylines, and some attribute data
including which component of the attribute data. (By
default, this class processes the first component of scalar
data.) You will also need to set an offset radius (the
distance of the polyline to the median line of the plot), a
width for the plot (the distance that the minimum and
maximum plot values are mapped into), an possibly an offset
(used to offset attribute data with multiple components).
Normally the filter automatically computes normals for
generating the offset arc plot. However, you can specify a
default normal and use that instead.
To create an instance of class vtkArcPlotter, simply invoke
its constructor as follows

    obj = vtkArcPlotter



 Methods

The class vtkArcPlotter has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkArcPlotter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkArcPlotter = obj.NewInstance ()
* vtkArcPlotter = obj.SafeDownCast (vtkObject o)
* obj.SetCamera (vtkCamera ) - Specify a camera used to
  orient the plot along the arc. If no camera is specified,
  then the orientation of the plot is arbitrary.
* vtkCamera = obj.GetCamera () - Specify a camera used to
  orient the plot along the arc. If no camera is specified,
  then the orientation of the plot is arbitrary.
* obj.SetPlotMode (int ) - Specify which data to plot:
  scalars, vectors, normals, texture coords, tensors, or
  field data. If the data has more than one component, use
  the method SetPlotComponent to control which component to
  plot.
* int = obj.GetPlotMode () - Specify which data to plot:
  scalars, vectors, normals, texture coords, tensors, or
  field data. If the data has more than one component, use
  the method SetPlotComponent to control which component to
  plot.
* obj.SetPlotModeToPlotScalars () - Specify which data to
  plot: scalars, vectors, normals, texture coords, tensors,
  or field data. If the data has more than one component,
  use the method SetPlotComponent to control which component
  to plot.
* obj.SetPlotModeToPlotVectors () - Specify which data to
  plot: scalars, vectors, normals, texture coords, tensors,
  or field data. If the data has more than one component,
  use the method SetPlotComponent to control which component
  to plot.
* obj.SetPlotModeToPlotNormals () - Specify which data to
  plot: scalars, vectors, normals, texture coords, tensors,
  or field data. If the data has more than one component,
  use the method SetPlotComponent to control which component
  to plot.
* obj.SetPlotModeToPlotTCoords () - Specify which data to
  plot: scalars, vectors, normals, texture coords, tensors,
  or field data. If the data has more than one component,
  use the method SetPlotComponent to control which component
  to plot.
* obj.SetPlotModeToPlotTensors () - Specify which data to
  plot: scalars, vectors, normals, texture coords, tensors,
  or field data. If the data has more than one component,
  use the method SetPlotComponent to control which component
  to plot.
* obj.SetPlotModeToPlotFieldData () - Specify which data to
  plot: scalars, vectors, normals, texture coords, tensors,
  or field data. If the data has more than one component,
  use the method SetPlotComponent to control which component
  to plot.
* obj.SetPlotComponent (int ) - Set/Get the component number
  to plot if the data has more than one component. If the
  value of the plot component is == (-1), then all the
  components will be plotted.
* int = obj.GetPlotComponent () - Set/Get the component
  number to plot if the data has more than one component. If
  the value of the plot component is == (-1), then all the
  components will be plotted.
* obj.SetRadius (double ) - Set the radius of the "median"
  value of the first plotted component.
* double = obj.GetRadiusMinValue () - Set the radius of the
  "median" value of the first plotted component.
* double = obj.GetRadiusMaxValue () - Set the radius of the
  "median" value of the first plotted component.
* double = obj.GetRadius () - Set the radius of the "median"
  value of the first plotted component.
* obj.SetHeight (double ) - Set the height of the plot. (The
  radius combined with the height define the location of the
  plot relative to the generating polyline.)
* double = obj.GetHeightMinValue () - Set the height of the
  plot. (The radius combined with the height define the
  location of the plot relative to the generating polyline.)
* double = obj.GetHeightMaxValue () - Set the height of the
  plot. (The radius combined with the height define the
  location of the plot relative to the generating polyline.)
* double = obj.GetHeight () - Set the height of the plot.
  (The radius combined with the height define the location
  of the plot relative to the generating polyline.)
* obj.SetOffset (double ) - Specify an offset that
  translates each subsequent plot (if there is more than one
  component plotted) from the defining arc (i.e., polyline).
* double = obj.GetOffsetMinValue () - Specify an offset that
  translates each subsequent plot (if there is more than one
  component plotted) from the defining arc (i.e., polyline).
* double = obj.GetOffsetMaxValue () - Specify an offset that
  translates each subsequent plot (if there is more than one
  component plotted) from the defining arc (i.e., polyline).
* double = obj.GetOffset () - Specify an offset that
  translates each subsequent plot (if there is more than one
  component plotted) from the defining arc (i.e., polyline).
* obj.SetUseDefaultNormal (int ) - Set a boolean to control
  whether to use default normals. By default, normals are
  automatically computed from the generating polyline and
  camera.
* int = obj.GetUseDefaultNormal () - Set a boolean to
  control whether to use default normals. By default,
  normals are automatically computed from the generating
  polyline and camera.
* obj.UseDefaultNormalOn () - Set a boolean to control
  whether to use default normals. By default, normals are
  automatically computed from the generating polyline and
  camera.
* obj.UseDefaultNormalOff () - Set a boolean to control
  whether to use default normals. By default, normals are
  automatically computed from the generating polyline and
  camera.
* obj.SetDefaultNormal (float , float , float ) - Set the
  default normal to use if you do not wish automatic normal
  calculation. The arc plot will be generated using this
  normal.
* obj.SetDefaultNormal (float a[3]) - Set the default normal
  to use if you do not wish automatic normal calculation.
  The arc plot will be generated using this normal.
* float = obj. GetDefaultNormal () - Set the default normal
  to use if you do not wish automatic normal calculation.
  The arc plot will be generated using this normal.
* obj.SetFieldDataArray (int ) - Set/Get the field data
  array to plot. This instance variable is only applicable
  if field data is plotted.
* int = obj.GetFieldDataArrayMinValue () - Set/Get the field
  data array to plot. This instance variable is only
  applicable if field data is plotted.
* int = obj.GetFieldDataArrayMaxValue () - Set/Get the field
  data array to plot. This instance variable is only
  applicable if field data is plotted.
* int = obj.GetFieldDataArray () - Set/Get the field data
  array to plot. This instance variable is only applicable
  if field data is plotted.
* long = obj.GetMTime () - New GetMTime because of camera
  dependency.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

