
 Usage

vtkGlobeSource will generate any "rectangular" patch of the
globe given its Longitude-Latitude extent. It adds two point
scalar arrays Longitude and Latitude to the output. These
arrays can be transformed to generate texture coordinates
for any texture map. This source is imperfect near the poles
as implmented. It should really reduce the longitude
resolution as the triangles become slivers.
To create an instance of class vtkGlobeSource, simply invoke
its constructor as follows

    obj = vtkGlobeSource



 Methods

The class vtkGlobeSource has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkGlobeSource class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkGlobeSource = obj.NewInstance ()
* vtkGlobeSource = obj.SafeDownCast (vtkObject o)
* obj.SetOrigin (double , double , double )
* obj.SetOrigin (double a[3])
* obj.SetStartLongitude (double ) - Longitude Latitude
  clamps.
* double = obj.GetStartLongitudeMinValue () - Longitude
  Latitude clamps.
* double = obj.GetStartLongitudeMaxValue () - Longitude
  Latitude clamps.
* obj.SetEndLongitude (double ) - Longitude Latitude clamps.
* double = obj.GetEndLongitudeMinValue () - Longitude
  Latitude clamps.
* double = obj.GetEndLongitudeMaxValue () - Longitude
  Latitude clamps.
* obj.SetStartLatitude (double ) - Longitude Latitude
  clamps.
* double = obj.GetStartLatitudeMinValue () - Longitude
  Latitude clamps.
* double = obj.GetStartLatitudeMaxValue () - Longitude
  Latitude clamps.
* obj.SetEndLatitude (double ) - Longitude Latitude clamps.
* double = obj.GetEndLatitudeMinValue () - Longitude
  Latitude clamps.
* double = obj.GetEndLatitudeMaxValue () - Longitude
  Latitude clamps.
* obj.SetLongitudeResolution (int ) - Set the number of
  points in the longitude direction (ranging from
  StartLongitude to EndLongitude).
* int = obj.GetLongitudeResolutionMinValue () - Set the
  number of points in the longitude direction (ranging from
  StartLongitude to EndLongitude).
* int = obj.GetLongitudeResolutionMaxValue () - Set the
  number of points in the longitude direction (ranging from
  StartLongitude to EndLongitude).
* int = obj.GetLongitudeResolution () - Set the number of
  points in the longitude direction (ranging from
  StartLongitude to EndLongitude).
* obj.SetLatitudeResolution (int ) - Set the number of
  points in the latitude direction (ranging from
  StartLatitude to EndLatitude).
* int = obj.GetLatitudeResolutionMinValue () - Set the
  number of points in the latitude direction (ranging from
  StartLatitude to EndLatitude).
* int = obj.GetLatitudeResolutionMaxValue () - Set the
  number of points in the latitude direction (ranging from
  StartLatitude to EndLatitude).
* int = obj.GetLatitudeResolution () - Set the number of
  points in the latitude direction (ranging from
  StartLatitude to EndLatitude).
* obj.SetRadius (double ) - Set radius of sphere. Default is
  6356750.0
* double = obj.GetRadiusMinValue () - Set radius of sphere.
  Default is 6356750.0
* double = obj.GetRadiusMaxValue () - Set radius of sphere.
  Default is 6356750.0
* double = obj.GetRadius () - Set radius of sphere. Default
  is 6356750.0
* obj.SetCurtainHeight (double )
* double = obj.GetCurtainHeightMinValue ()
* double = obj.GetCurtainHeightMaxValue ()
* double = obj.GetCurtainHeight ()
* obj.SetQuadrilateralTessellation (int ) - Cause the sphere
  to be tessellated with edges along the latitude and
  longitude lines. If off, triangles are generated at non-
  polar regions, which results in edges that are not
  parallel to latitude and longitude lines. If on,
  quadrilaterals are generated everywhere except at the
  poles. This can be useful for generating a wireframe
  sphere with natural latitude and longitude lines.
* int = obj.GetQuadrilateralTessellation () - Cause the
  sphere to be tessellated with edges along the latitude and
  longitude lines. If off, triangles are generated at non-
  polar regions, which results in edges that are not
  parallel to latitude and longitude lines. If on,
  quadrilaterals are generated everywhere except at the
  poles. This can be useful for generating a wireframe
  sphere with natural latitude and longitude lines.
* obj.QuadrilateralTessellationOn () - Cause the sphere to
  be tessellated with edges along the latitude and longitude
  lines. If off, triangles are generated at non-polar
  regions, which results in edges that are not parallel to
  latitude and longitude lines. If on, quadrilaterals are
  generated everywhere except at the poles. This can be
  useful for generating a wireframe sphere with natural
  latitude and longitude lines.
* obj.QuadrilateralTessellationOff () - Cause the sphere to
  be tessellated with edges along the latitude and longitude
  lines. If off, triangles are generated at non-polar
  regions, which results in edges that are not parallel to
  latitude and longitude lines. If on, quadrilaterals are
  generated everywhere except at the poles. This can be
  useful for generating a wireframe sphere with natural
  latitude and longitude lines.


* FreeMat_Documentation
* Visualization_Toolkit_Geo_Vis_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

