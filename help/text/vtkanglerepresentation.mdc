
 Usage

The vtkAngleRepresentation is a superclass for classes
representing the vtkAngleWidget. This representation
consists of two rays and three vtkHandleRepresentations to
place and manipulate the three points defining the angle
representation. (Note: the three points are referred to as
Point1, Center, and Point2, at the two end points (Point1
and Point2) and Center (around which the angle is measured).
To create an instance of class vtkAngleRepresentation,
simply invoke its constructor as follows

    obj = vtkAngleRepresentation



 Methods

The class vtkAngleRepresentation has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkAngleRepresentation class.

* string = obj.GetClassName () - Standard VTK methods.
* int = obj.IsA (string name) - Standard VTK methods.
* vtkAngleRepresentation = obj.NewInstance () - Standard VTK
  methods.
* vtkAngleRepresentation = obj.SafeDownCast (vtkObject o) -
  Standard VTK methods.
* double = obj.GetAngle () - This representation and all
  subclasses must keep an angle (in degrees) consistent with
  the state of the widget.
* obj.GetPoint1WorldPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.GetCenterWorldPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.GetPoint2WorldPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.SetPoint1DisplayPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.SetCenterDisplayPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.SetPoint2DisplayPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.GetPoint1DisplayPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.GetCenterDisplayPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.GetPoint2DisplayPosition (double pos[3]) - Methods to
  Set/Get the coordinates of the three points defining this
  representation. Note that methods are available for both
  display and world coordinates.
* obj.SetHandleRepresentation (vtkHandleRepresentation
  handle) - This method is used to specify the type of
  handle representation to use for the three internal
  vtkHandleWidgets within vtkAngleRepresentation. To use
  this method, create a dummy vtkHandleRepresentation (or
  subclass), and then invoke this method with this dummy.
  Then the vtkAngleRepresentation uses this dummy to clone
  three vtkHandleRepresentations of the same type. Make sure
  you set the handle representation before the widget is
  enabled. (The method InstantiateHandleRepresentation() is
  invoked by the vtkAngle widget.)
* obj.InstantiateHandleRepresentation () - This method is
  used to specify the type of handle representation to use
  for the three internal vtkHandleWidgets within
  vtkAngleRepresentation. To use this method, create a dummy
  vtkHandleRepresentation (or subclass), and then invoke
  this method with this dummy. Then the
  vtkAngleRepresentation uses this dummy to clone three
  vtkHandleRepresentations of the same type. Make sure you
  set the handle representation before the widget is
  enabled. (The method InstantiateHandleRepresentation() is
  invoked by the vtkAngle widget.)
* vtkHandleRepresentation = obj.GetPoint1Representation () -
  Set/Get the handle representations used for the
  vtkAngleRepresentation.
* vtkHandleRepresentation = obj.GetCenterRepresentation () -
  Set/Get the handle representations used for the
  vtkAngleRepresentation.
* vtkHandleRepresentation = obj.GetPoint2Representation () -
  Set/Get the handle representations used for the
  vtkAngleRepresentation.
* obj.SetTolerance (int ) - The tolerance representing the
  distance to the representation (in pixels) in which the
  cursor is considered near enough to the end points of the
  representation to be active.
* int = obj.GetToleranceMinValue () - The tolerance
  representing the distance to the representation (in
  pixels) in which the cursor is considered near enough to
  the end points of the representation to be active.
* int = obj.GetToleranceMaxValue () - The tolerance
  representing the distance to the representation (in
  pixels) in which the cursor is considered near enough to
  the end points of the representation to be active.
* int = obj.GetTolerance () - The tolerance representing the
  distance to the representation (in pixels) in which the
  cursor is considered near enough to the end points of the
  representation to be active.
* obj.SetLabelFormat (string ) - Specify the format to use
  for labelling the angle. Note that an empty string results
  in no label, or a format string without a "%" character
  will not print the angle value.
* string = obj.GetLabelFormat () - Specify the format to use
  for labelling the angle. Note that an empty string results
  in no label, or a format string without a "%" character
  will not print the angle value.
* obj.SetRay1Visibility (int ) - Special methods for turning
  off the rays and arc that define the cone and arc of the
  angle.
* int = obj.GetRay1Visibility () - Special methods for
  turning off the rays and arc that define the cone and arc
  of the angle.
* obj.Ray1VisibilityOn () - Special methods for turning off
  the rays and arc that define the cone and arc of the
  angle.
* obj.Ray1VisibilityOff () - Special methods for turning off
  the rays and arc that define the cone and arc of the
  angle.
* obj.SetRay2Visibility (int ) - Special methods for turning
  off the rays and arc that define the cone and arc of the
  angle.
* int = obj.GetRay2Visibility () - Special methods for
  turning off the rays and arc that define the cone and arc
  of the angle.
* obj.Ray2VisibilityOn () - Special methods for turning off
  the rays and arc that define the cone and arc of the
  angle.
* obj.Ray2VisibilityOff () - Special methods for turning off
  the rays and arc that define the cone and arc of the
  angle.
* obj.SetArcVisibility (int ) - Special methods for turning
  off the rays and arc that define the cone and arc of the
  angle.
* int = obj.GetArcVisibility () - Special methods for
  turning off the rays and arc that define the cone and arc
  of the angle.
* obj.ArcVisibilityOn () - Special methods for turning off
  the rays and arc that define the cone and arc of the
  angle.
* obj.ArcVisibilityOff () - Special methods for turning off
  the rays and arc that define the cone and arc of the
  angle.
* obj.BuildRepresentation () - These are methods that
  satisfy vtkWidgetRepresentation's API.
* int = obj.ComputeInteractionState (int X, int Y, int
  modify) - These are methods that satisfy
  vtkWidgetRepresentation's API.
* obj.StartWidgetInteraction (double e[2]) - These are
  methods that satisfy vtkWidgetRepresentation's API.
* obj.CenterWidgetInteraction (double e[2]) - These are
  methods that satisfy vtkWidgetRepresentation's API.
* obj.WidgetInteraction (double e[2]) - These are methods
  that satisfy vtkWidgetRepresentation's API.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

