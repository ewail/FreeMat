
 Usage

This class is a density grid based force directed layout
strategy. Also please note that 'fast' is relative to quite
slow. :) The layout running time is O(V+E) with an extremely
high constant. .SECTION Thanks We would like to thank Mothra
for distracting Godzilla while we wrote this class.
To create an instance of class
vtkConstrained2DLayoutStrategy, simply invoke its
constructor as follows

    obj = vtkConstrained2DLayoutStrategy



 Methods

The class vtkConstrained2DLayoutStrategy has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkConstrained2DLayoutStrategy
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkConstrained2DLayoutStrategy = obj.NewInstance ()
* vtkConstrained2DLayoutStrategy = obj.SafeDownCast
  (vtkObject o)
* obj.SetRandomSeed (int ) - Seed the random number
  generator used to jitter point positions. This has a
  significant effect on their final positions when the
  layout is complete.
* int = obj.GetRandomSeedMinValue () - Seed the random
  number generator used to jitter point positions. This has
  a significant effect on their final positions when the
  layout is complete.
* int = obj.GetRandomSeedMaxValue () - Seed the random
  number generator used to jitter point positions. This has
  a significant effect on their final positions when the
  layout is complete.
* int = obj.GetRandomSeed () - Seed the random number
  generator used to jitter point positions. This has a
  significant effect on their final positions when the
  layout is complete.
* obj.SetMaxNumberOfIterations (int ) - Set/Get the maximum
  number of iterations to be used. The higher this number,
  the more iterations through the algorithm is possible, and
  thus, the more the graph gets modified. The default is
  '100' for no particular reason Note: The strong
  recommendation is that you do not change this parameter. :
  )
* int = obj.GetMaxNumberOfIterationsMinValue () - Set/Get
  the maximum number of iterations to be used. The higher
  this number, the more iterations through the algorithm is
  possible, and thus, the more the graph gets modified. The
  default is '100' for no particular reason Note: The strong
  recommendation is that you do not change this parameter. :
  )
* int = obj.GetMaxNumberOfIterationsMaxValue () - Set/Get
  the maximum number of iterations to be used. The higher
  this number, the more iterations through the algorithm is
  possible, and thus, the more the graph gets modified. The
  default is '100' for no particular reason Note: The strong
  recommendation is that you do not change this parameter. :
  )
* int = obj.GetMaxNumberOfIterations () - Set/Get the
  maximum number of iterations to be used. The higher this
  number, the more iterations through the algorithm is
  possible, and thus, the more the graph gets modified. The
  default is '100' for no particular reason Note: The strong
  recommendation is that you do not change this parameter. :
  )
* obj.SetIterationsPerLayout (int ) - Set/Get the number of
  iterations per layout. The only use for this ivar is for
  the application to do visualizations of the layout before
  it's complete. The default is '100' to match the default
  'MaxNumberOfIterations' Note: Changing this parameter is
  just fine :)
* int = obj.GetIterationsPerLayoutMinValue () - Set/Get the
  number of iterations per layout. The only use for this
  ivar is for the application to do visualizations of the
  layout before it's complete. The default is '100' to match
  the default 'MaxNumberOfIterations' Note: Changing this
  parameter is just fine :)
* int = obj.GetIterationsPerLayoutMaxValue () - Set/Get the
  number of iterations per layout. The only use for this
  ivar is for the application to do visualizations of the
  layout before it's complete. The default is '100' to match
  the default 'MaxNumberOfIterations' Note: Changing this
  parameter is just fine :)
* int = obj.GetIterationsPerLayout () - Set/Get the number
  of iterations per layout. The only use for this ivar is
  for the application to do visualizations of the layout
  before it's complete. The default is '100' to match the
  default 'MaxNumberOfIterations' Note: Changing this
  parameter is just fine :)
* obj.SetInitialTemperature (float ) - Set the initial
  temperature. The temperature default is '5' for no
  particular reason Note: The strong recommendation is that
  you do not change this parameter. :)
* float = obj.GetInitialTemperatureMinValue () - Set the
  initial temperature. The temperature default is '5' for no
  particular reason Note: The strong recommendation is that
  you do not change this parameter. :)
* float = obj.GetInitialTemperatureMaxValue () - Set the
  initial temperature. The temperature default is '5' for no
  particular reason Note: The strong recommendation is that
  you do not change this parameter. :)
* float = obj.GetInitialTemperature () - Set the initial
  temperature. The temperature default is '5' for no
  particular reason Note: The strong recommendation is that
  you do not change this parameter. :)
* obj.SetCoolDownRate (double ) - Set/Get the Cool-down
  rate. The higher this number is, the longer it will take
  to "cool-down", and thus, the more the graph will be
  modified. The default is '10' for no particular reason.
  Note: The strong recommendation is that you do not change
  this parameter. :)
* double = obj.GetCoolDownRateMinValue () - Set/Get the
  Cool-down rate. The higher this number is, the longer it
  will take to "cool-down", and thus, the more the graph
  will be modified. The default is '10' for no particular
  reason. Note: The strong recommendation is that you do not
  change this parameter. :)
* double = obj.GetCoolDownRateMaxValue () - Set/Get the
  Cool-down rate. The higher this number is, the longer it
  will take to "cool-down", and thus, the more the graph
  will be modified. The default is '10' for no particular
  reason. Note: The strong recommendation is that you do not
  change this parameter. :)
* double = obj.GetCoolDownRate () - Set/Get the Cool-down
  rate. The higher this number is, the longer it will take
  to "cool-down", and thus, the more the graph will be
  modified. The default is '10' for no particular reason.
  Note: The strong recommendation is that you do not change
  this parameter. :)
* obj.SetRestDistance (float ) - Manually set the resting
  distance. Otherwise the distance is computed
  automatically.
* float = obj.GetRestDistance () - Manually set the resting
  distance. Otherwise the distance is computed
  automatically.
* obj.Initialize () - This strategy sets up some data
  structures for faster processing of each Layout() call
* obj.Layout () - This is the layout method where the graph
  that was set in SetGraph() is laid out. The method can
  either entirely layout the graph or iteratively lay out
  the graph. If you have an iterative layout please
  implement the IsLayoutComplete() method.
* int = obj.IsLayoutComplete () - Set/Get the input
  constraint array name. If no input array name is set then
  the name 'constraint' is used.
* obj.SetInputArrayName (string ) - Set/Get the input
  constraint array name. If no input array name is set then
  the name 'constraint' is used.
* string = obj.GetInputArrayName () - Set/Get the input
  constraint array name. If no input array name is set then
  the name 'constraint' is used.


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

