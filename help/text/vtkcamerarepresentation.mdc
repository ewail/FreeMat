
 Usage

This class provides support for interactively saving a
series of camera views into an interpolated path (using
vtkCameraInterpolator). The class typically works in
conjunction with vtkCameraWidget. To use this class simply
specify the camera to interpolate and use the methods
AddCameraToPath(), AnimatePath(), and InitializePath() to
add a new camera view, animate the current views, and
initialize the interpolation.
To create an instance of class vtkCameraRepresentation,
simply invoke its constructor as follows

    obj = vtkCameraRepresentation



 Methods

The class vtkCameraRepresentation has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkCameraRepresentation class.

* string = obj.GetClassName () - Standard VTK class methods.
* int = obj.IsA (string name) - Standard VTK class methods.
* vtkCameraRepresentation = obj.NewInstance () - Standard
  VTK class methods.
* vtkCameraRepresentation = obj.SafeDownCast (vtkObject o) -
  Standard VTK class methods.
* obj.SetCamera (vtkCamera camera) - Specify the camera to
  interpolate. This must be specified by the user.
* vtkCamera = obj.GetCamera () - Specify the camera to
  interpolate. This must be specified by the user.
* obj.SetInterpolator (vtkCameraInterpolator camInt) - Get
  the vtkCameraInterpolator used to interpolate and save the
  sequence of camera views. If not defined, one is created
  automatically. Note that you can access this object to set
  the interpolation type (linear, spline) and other instance
  variables.
* vtkCameraInterpolator = obj.GetInterpolator () - Get the
  vtkCameraInterpolator used to interpolate and save the
  sequence of camera views. If not defined, one is created
  automatically. Note that you can access this object to set
  the interpolation type (linear, spline) and other instance
  variables.
* obj.SetNumberOfFrames (int ) - Set the number of frames to
  generate when playback is initiated.
* int = obj.GetNumberOfFramesMinValue () - Set the number of
  frames to generate when playback is initiated.
* int = obj.GetNumberOfFramesMaxValue () - Set the number of
  frames to generate when playback is initiated.
* int = obj.GetNumberOfFrames () - Set the number of frames
  to generate when playback is initiated.
* vtkProperty2D = obj.GetProperty () - By obtaining this
  property you can specify the properties of the
  representation.
* obj.AddCameraToPath () - These methods are used to create
  interpolated camera paths. The AddCameraToPath() method
  adds the view defined by the current camera (via SetCamera
  ()) to the interpolated camera path. AnimatePath()
  interpolates NumberOfFrames along the current path.
  InitializePath() resets the interpolated path to its
  initial, empty configuration.
* obj.AnimatePath (vtkRenderWindowInteractor rwi) - These
  methods are used to create interpolated camera paths. The
  AddCameraToPath() method adds the view defined by the
  current camera (via SetCamera()) to the interpolated
  camera path. AnimatePath() interpolates NumberOfFrames
  along the current path. InitializePath() resets the
  interpolated path to its initial, empty configuration.
* obj.InitializePath () - These methods are used to create
  interpolated camera paths. The AddCameraToPath() method
  adds the view defined by the current camera (via SetCamera
  ()) to the interpolated camera path. AnimatePath()
  interpolates NumberOfFrames along the current path.
  InitializePath() resets the interpolated path to its
  initial, empty configuration.
* obj.BuildRepresentation () - Satisfy the superclasses'
  API.
* obj.GetSize (double size[2]) - These methods are necessary
  to make this representation behave as a vtkProp.
* obj.GetActors2D (vtkPropCollection ) - These methods are
  necessary to make this representation behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - These methods
  are necessary to make this representation behave as a
  vtkProp.
* int = obj.RenderOverlay (vtkViewport ) - These methods are
  necessary to make this representation behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport ) - These
  methods are necessary to make this representation behave
  as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  ) - These methods are necessary to make this
  representation behave as a vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - These
  methods are necessary to make this representation behave
  as a vtkProp.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

