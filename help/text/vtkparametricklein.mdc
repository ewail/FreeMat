
 Usage

vtkParametricKlein generates a "classical" representation of
a Klein bottle. A Klein bottle is a closed surface with no
interior and only one surface. It is unrealisable in 3
dimensions without intersecting surfaces. It can be realised
in 4 dimensions by considering the map  $F:R^2 \rightarrow
R^4$  given by:

*  $f(u,v) = ((r*cos(v)+a)*cos(u),(r*cos(v)+a)*sin(u),r*sin
  (v)*cos(u/2),r*sin(v)*sin(u/2))$

The classical representation of the immersion in  $R^3$  is
returned by this function.
For further information about this surface, please consult
the technical description "Parametric surfaces" in http://
www.vtk.org/documents.php in the "VTK Technical Documents"
section in the VTk.org web pages.
.SECTION Thanks Andrew Maclean
a.mac.nosp@m.lean.nosp@m.@cas..nosp@m.edu..nosp@m.au for
creating and contributing the class.
To create an instance of class vtkParametricKlein, simply
invoke its constructor as follows

    obj = vtkParametricKlein



 Methods

The class vtkParametricKlein has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkParametricKlein class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkParametricKlein = obj.NewInstance ()
* vtkParametricKlein = obj.SafeDownCast (vtkObject o)
* int = obj.GetDimension () - A Klein bottle.
  This function performs the mapping  $f(u,v) \rightarrow
  (x,y,x)$ , returning it as Pt. It also returns the partial
  derivatives Du and Dv.  $Pt = (x, y, z), Du = (dx/du, dy/
  du, dz/du), Dv = (dx/dv, dy/dv, dz/dv)$  . Then the normal
  is  $N = Du X Dv$  .
* obj.Evaluate (double uvw[3], double Pt[3], double Duvw[9])
  - A Klein bottle.
  This function performs the mapping  $f(u,v) \rightarrow
  (x,y,x)$ , returning it as Pt. It also returns the partial
  derivatives Du and Dv.  $Pt = (x, y, z), Du = (dx/du, dy/
  du, dz/du), Dv = (dx/dv, dy/dv, dz/dv)$  . Then the normal
  is  $N = Du X Dv$  .
* double = obj.EvaluateScalar (double uvw[3], double Pt[3],
  double Duvw[9]) - Calculate a user defined scalar using
  one or all of uvw, Pt, Duvw.
  uvw are the parameters with Pt being the the cartesian
  point, Duvw are the derivatives of this point with respect
  to u, v and w. Pt, Duvw are obtained from Evaluate().
  This function is only called if the ScalarMode has the
  value vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
  If the user does not need to calculate a scalar, then the
  instantiated function should return zero.


* FreeMat_Documentation
* Visualization_Toolkit_Common_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

