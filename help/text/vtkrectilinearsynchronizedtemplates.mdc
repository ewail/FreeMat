
 Usage

vtkRectilinearSynchronizedTemplates is a 3D implementation
(for rectilinear grids) of the synchronized template
algorithm. Note that vtkContourFilter will automatically use
this class when appropriate.
To create an instance of class
vtkRectilinearSynchronizedTemplates, simply invoke its
constructor as follows

    obj = vtkRectilinearSynchronizedTemplates



 Methods

The class vtkRectilinearSynchronizedTemplates has several
methods that can be used. They are listed below. Note that
the documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the
vtkRectilinearSynchronizedTemplates class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRectilinearSynchronizedTemplates = obj.NewInstance ()
* vtkRectilinearSynchronizedTemplates = obj.SafeDownCast
  (vtkObject o)
* long = obj.GetMTime () - Because we delegate to
  vtkContourValues
* obj.SetComputeNormals (int ) - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* int = obj.GetComputeNormals () - Set/Get the computation
  of normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.ComputeNormalsOn () - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.ComputeNormalsOff () - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.SetComputeGradients (int ) - Set/Get the computation
  of gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* int = obj.GetComputeGradients () - Set/Get the computation
  of gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.ComputeGradientsOn () - Set/Get the computation of
  gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.ComputeGradientsOff () - Set/Get the computation of
  gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.SetComputeScalars (int ) - Set/Get the computation of
  scalars.
* int = obj.GetComputeScalars () - Set/Get the computation
  of scalars.
* obj.ComputeScalarsOn () - Set/Get the computation of
  scalars.
* obj.ComputeScalarsOff () - Set/Get the computation of
  scalars.
* obj.SetValue (int i, double value) - Get the ith contour
  value.
* double = obj.GetValue (int i) - Get a pointer to an array
  of contour values. There will be GetNumberOfContours()
  values in the list.
* obj.GetValues (double contourValues) - Set the number of
  contours to place into the list. You only really need to
  use this method to reduce list size. The method SetValue()
  will automatically increase list size as needed.
* obj.SetNumberOfContours (int number) - Get the number of
  contours in the list of contour values.
* int = obj.GetNumberOfContours () - Generate numContours
  equally spaced contour values between specified range.
  Contour values will include min/max range values.
* obj.GenerateValues (int numContours, double range[2]) -
  Generate numContours equally spaced contour values between
  specified range. Contour values will include min/max range
  values.
* obj.GenerateValues (int numContours, double rangeStart,
  double rangeEnd) - Needed by templated functions.
* obj.SetArrayComponent (int ) - Set/get which component of
  the scalar array to contour on; defaults to 0.
* int = obj.GetArrayComponent () - Set/get which component
  of the scalar array to contour on; defaults to 0.
* obj.ComputeSpacing (vtkRectilinearGrid data, int i, int j,
  int k, int extent[6], double spacing[6]) - Compute the
  spacing between this point and its 6 neighbors. This
  method needs to be public so it can be accessed from a
  templated function.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

