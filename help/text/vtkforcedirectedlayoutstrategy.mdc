
 Usage

Lays out a graph in 2D or 3D using a force-directed
algorithm. The user may specify whether to layout the graph
randomly initially, the bounds, the number of dimensions (2
or 3), and the cool-down rate.
.SECTION Thanks Thanks to Brian Wylie for adding
functionality for allowing this layout to be incremental.
To create an instance of class
vtkForceDirectedLayoutStrategy, simply invoke its
constructor as follows

    obj = vtkForceDirectedLayoutStrategy



 Methods

The class vtkForceDirectedLayoutStrategy has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkForceDirectedLayoutStrategy
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkForceDirectedLayoutStrategy = obj.NewInstance ()
* vtkForceDirectedLayoutStrategy = obj.SafeDownCast
  (vtkObject o)
* obj.SetRandomSeed (int ) - Seed the random number
  generator used to jitter point positions. This has a
  significant effect on their final positions when the
  layout is complete.
* int = obj.GetRandomSeedMinValue () - Seed the random
  number generator used to jitter point positions. This has
  a significant effect on their final positions when the
  layout is complete.
* int = obj.GetRandomSeedMaxValue () - Seed the random
  number generator used to jitter point positions. This has
  a significant effect on their final positions when the
  layout is complete.
* int = obj.GetRandomSeed () - Seed the random number
  generator used to jitter point positions. This has a
  significant effect on their final positions when the
  layout is complete.
* obj.SetGraphBounds (double , double , double , double ,
  double , double ) - Set / get the region in space in which
  to place the final graph. The GraphBounds only affects the
  results if AutomaticBoundsComputation is off.
* obj.SetGraphBounds (double a[6]) - Set / get the region in
  space in which to place the final graph. The GraphBounds
  only affects the results if AutomaticBoundsComputation is
  off.
* double = obj. GetGraphBounds () - Set / get the region in
  space in which to place the final graph. The GraphBounds
  only affects the results if AutomaticBoundsComputation is
  off.
* obj.SetAutomaticBoundsComputation (int ) - Turn on/off
  automatic graph bounds calculation. If this boolean is
  off, then the manually specified GraphBounds is used. If
  on, then the input's bounds us used as the graph bounds.
* int = obj.GetAutomaticBoundsComputation () - Turn on/off
  automatic graph bounds calculation. If this boolean is
  off, then the manually specified GraphBounds is used. If
  on, then the input's bounds us used as the graph bounds.
* obj.AutomaticBoundsComputationOn () - Turn on/off
  automatic graph bounds calculation. If this boolean is
  off, then the manually specified GraphBounds is used. If
  on, then the input's bounds us used as the graph bounds.
* obj.AutomaticBoundsComputationOff () - Turn on/off
  automatic graph bounds calculation. If this boolean is
  off, then the manually specified GraphBounds is used. If
  on, then the input's bounds us used as the graph bounds.
* obj.SetMaxNumberOfIterations (int ) - Set/Get the maximum
  number of iterations to be used. The higher this number,
  the more iterations through the algorithm is possible, and
  thus, the more the graph gets modified. The default is
  '50' for no particular reason
* int = obj.GetMaxNumberOfIterationsMinValue () - Set/Get
  the maximum number of iterations to be used. The higher
  this number, the more iterations through the algorithm is
  possible, and thus, the more the graph gets modified. The
  default is '50' for no particular reason
* int = obj.GetMaxNumberOfIterationsMaxValue () - Set/Get
  the maximum number of iterations to be used. The higher
  this number, the more iterations through the algorithm is
  possible, and thus, the more the graph gets modified. The
  default is '50' for no particular reason
* int = obj.GetMaxNumberOfIterations () - Set/Get the
  maximum number of iterations to be used. The higher this
  number, the more iterations through the algorithm is
  possible, and thus, the more the graph gets modified. The
  default is '50' for no particular reason
* obj.SetIterationsPerLayout (int ) - Set/Get the number of
  iterations per layout. The only use for this ivar is for
  the application to do visualizations of the layout before
  it's complete. The default is '50' to match the default
  'MaxNumberOfIterations'
* int = obj.GetIterationsPerLayoutMinValue () - Set/Get the
  number of iterations per layout. The only use for this
  ivar is for the application to do visualizations of the
  layout before it's complete. The default is '50' to match
  the default 'MaxNumberOfIterations'
* int = obj.GetIterationsPerLayoutMaxValue () - Set/Get the
  number of iterations per layout. The only use for this
  ivar is for the application to do visualizations of the
  layout before it's complete. The default is '50' to match
  the default 'MaxNumberOfIterations'
* int = obj.GetIterationsPerLayout () - Set/Get the number
  of iterations per layout. The only use for this ivar is
  for the application to do visualizations of the layout
  before it's complete. The default is '50' to match the
  default 'MaxNumberOfIterations'
* obj.SetCoolDownRate (double ) - Set/Get the Cool-down
  rate. The higher this number is, the longer it will take
  to "cool-down", and thus, the more the graph will be
  modified.
* double = obj.GetCoolDownRateMinValue () - Set/Get the
  Cool-down rate. The higher this number is, the longer it
  will take to "cool-down", and thus, the more the graph
  will be modified.
* double = obj.GetCoolDownRateMaxValue () - Set/Get the
  Cool-down rate. The higher this number is, the longer it
  will take to "cool-down", and thus, the more the graph
  will be modified.
* double = obj.GetCoolDownRate () - Set/Get the Cool-down
  rate. The higher this number is, the longer it will take
  to "cool-down", and thus, the more the graph will be
  modified.
* obj.SetThreeDimensionalLayout (int ) - Turn on/off layout
  of graph in three dimensions. If off, graph layout occurs
  in two dimensions. By default, three dimensional layout is
  off.
* int = obj.GetThreeDimensionalLayout () - Turn on/off
  layout of graph in three dimensions. If off, graph layout
  occurs in two dimensions. By default, three dimensional
  layout is off.
* obj.ThreeDimensionalLayoutOn () - Turn on/off layout of
  graph in three dimensions. If off, graph layout occurs in
  two dimensions. By default, three dimensional layout is
  off.
* obj.ThreeDimensionalLayoutOff () - Turn on/off layout of
  graph in three dimensions. If off, graph layout occurs in
  two dimensions. By default, three dimensional layout is
  off.
* obj.SetRandomInitialPoints (int ) - Turn on/off use of
  random positions within the graph bounds as initial
  points.
* int = obj.GetRandomInitialPoints () - Turn on/off use of
  random positions within the graph bounds as initial
  points.
* obj.RandomInitialPointsOn () - Turn on/off use of random
  positions within the graph bounds as initial points.
* obj.RandomInitialPointsOff () - Turn on/off use of random
  positions within the graph bounds as initial points.
* obj.SetInitialTemperature (float ) - Set the initial
  temperature. If zero (the default) , the initial
  temperature will be computed automatically.
* float = obj.GetInitialTemperatureMinValue () - Set the
  initial temperature. If zero (the default) , the initial
  temperature will be computed automatically.
* float = obj.GetInitialTemperatureMaxValue () - Set the
  initial temperature. If zero (the default) , the initial
  temperature will be computed automatically.
* float = obj.GetInitialTemperature () - Set the initial
  temperature. If zero (the default) , the initial
  temperature will be computed automatically.
* obj.Initialize () - This strategy sets up some data
  structures for faster processing of each Layout() call
* obj.Layout () - This is the layout method where the graph
  that was set in SetGraph() is laid out. The method can
  either entirely layout the graph or iteratively lay out
  the graph. If you have an iterative layout please
  implement the IsLayoutComplete() method.
* int = obj.IsLayoutComplete ()


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

