
 Usage

vtkVoxelModeller is a filter that converts an arbitrary data
set to a structured point (i.e., voxel) representation. It
is very similar to vtkImplicitModeller, except that it
doesn't record distance; instead it records occupancy. By
default it supports a compact output of 0/1 VTK_BIT. Other
vtk scalar types can be specified. The Foreground and
Background values of the output can also be specified. NOTE:
Not all vtk filters/readers/writers support the VTK_BIT
scalar type. You may want to use VTK_CHAR as an alternative.
To create an instance of class vtkVoxelModeller, simply
invoke its constructor as follows

    obj = vtkVoxelModeller



 Methods

The class vtkVoxelModeller has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkVoxelModeller class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkVoxelModeller = obj.NewInstance ()
* vtkVoxelModeller = obj.SafeDownCast (vtkObject o)
* double = obj.ComputeModelBounds (double origin[3], double
  ar[3]) - Compute the ModelBounds based on the input
  geometry.
* obj.SetSampleDimensions (int i, int j, int k) - Set the i-
  j-k dimensions on which to sample the distance function.
  Default is (50, 50, 50)
* obj.SetSampleDimensions (int dim[3]) - Set the i-j-
  k dimensions on which to sample the distance function.
  Default is (50, 50, 50)
* int = obj. GetSampleDimensions () - Set the i-j-
  k dimensions on which to sample the distance function.
  Default is (50, 50, 50)
* obj.SetMaximumDistance (double ) - Specify distance away
  from surface of input geometry to sample. Smaller values
  make large increases in performance. Default is 1.0.
* double = obj.GetMaximumDistanceMinValue () - Specify
  distance away from surface of input geometry to sample.
  Smaller values make large increases in performance.
  Default is 1.0.
* double = obj.GetMaximumDistanceMaxValue () - Specify
  distance away from surface of input geometry to sample.
  Smaller values make large increases in performance.
  Default is 1.0.
* double = obj.GetMaximumDistance () - Specify distance away
  from surface of input geometry to sample. Smaller values
  make large increases in performance. Default is 1.0.
* obj.SetModelBounds (double bounds[6]) - Specify the
  position in space to perform the voxelization. Default is
  (0, 0, 0, 0, 0, 0)
* obj.SetModelBounds (double xmin, double xmax, double ymin,
  double ymax, double zmin, double zmax) - Specify the
  position in space to perform the voxelization. Default is
  (0, 0, 0, 0, 0, 0)
* double = obj. GetModelBounds () - Specify the position in
  space to perform the voxelization. Default is (0, 0, 0, 0,
  0, 0)
* obj.SetScalarType (int ) - Control the scalar type of the
  output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToFloat () - Control the scalar type of
  the output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToDouble () - Control the scalar type of
  the output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToInt () - Control the scalar type of the
  output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToUnsignedInt () - Control the scalar
  type of the output image. The default is VTK_BIT. NOTE:
  Not all filters/readers/writers support the VTK_BIT scalar
  type. You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToLong () - Control the scalar type of
  the output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToUnsignedLong () - Control the scalar
  type of the output image. The default is VTK_BIT. NOTE:
  Not all filters/readers/writers support the VTK_BIT scalar
  type. You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToShort () - Control the scalar type of
  the output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToUnsignedShort () - Control the scalar
  type of the output image. The default is VTK_BIT. NOTE:
  Not all filters/readers/writers support the VTK_BIT scalar
  type. You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToUnsignedChar () - Control the scalar
  type of the output image. The default is VTK_BIT. NOTE:
  Not all filters/readers/writers support the VTK_BIT scalar
  type. You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToChar () - Control the scalar type of
  the output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetScalarTypeToBit () - Control the scalar type of the
  output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* int = obj.GetScalarType () - Control the scalar type of
  the output image. The default is VTK_BIT. NOTE: Not all
  filters/readers/writers support the VTK_BIT scalar type.
  You may want to use VTK_CHAR as an alternative.
* obj.SetForegroundValue (double ) - Set the Foreground/
  Background values of the output. The Foreground value is
  set when a voxel is occupied. The Background value is set
  when a voxel is not occupied. The default ForegroundValue
  is 1. The default BackgroundValue is 0.
* double = obj.GetForegroundValue () - Set the Foreground/
  Background values of the output. The Foreground value is
  set when a voxel is occupied. The Background value is set
  when a voxel is not occupied. The default ForegroundValue
  is 1. The default BackgroundValue is 0.
* obj.SetBackgroundValue (double ) - Set the Foreground/
  Background values of the output. The Foreground value is
  set when a voxel is occupied. The Background value is set
  when a voxel is not occupied. The default ForegroundValue
  is 1. The default BackgroundValue is 0.
* double = obj.GetBackgroundValue () - Set the Foreground/
  Background values of the output. The Foreground value is
  set when a voxel is occupied. The Background value is set
  when a voxel is not occupied. The default ForegroundValue
  is 1. The default BackgroundValue is 0.


* FreeMat_Documentation
* Visualization_Toolkit_Imaging_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

