
 Usage

vtkSphereSource creates a sphere (represented by polygons)
of specified radius centered at the origin. The resolution
(polygonal discretization) in both the latitude (phi) and
longitude (theta) directions can be specified. It also is
possible to create partial spheres by specifying maximum phi
and theta angles. By default, the surface tessellation of
the sphere uses triangles; however you can set
LatLongTessellation to produce a tessellation using
quadrilaterals.
To create an instance of class vtkSphereSource, simply
invoke its constructor as follows

    obj = vtkSphereSource



 Methods

The class vtkSphereSource has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkSphereSource class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkSphereSource = obj.NewInstance ()
* vtkSphereSource = obj.SafeDownCast (vtkObject o)
* obj.SetRadius (double ) - Set radius of sphere. Default is
  .5.
* double = obj.GetRadiusMinValue () - Set radius of sphere.
  Default is .5.
* double = obj.GetRadiusMaxValue () - Set radius of sphere.
  Default is .5.
* double = obj.GetRadius () - Set radius of sphere. Default
  is .5.
* obj.SetCenter (double , double , double ) - Set the center
  of the sphere. Default is 0,0,0.
* obj.SetCenter (double a[3]) - Set the center of the
  sphere. Default is 0,0,0.
* double = obj. GetCenter () - Set the center of the sphere.
  Default is 0,0,0.
* obj.SetThetaResolution (int ) - Set the number of points
  in the longitude direction (ranging from StartTheta to
  EndTheta).
* int = obj.GetThetaResolutionMinValue () - Set the number
  of points in the longitude direction (ranging from
  StartTheta to EndTheta).
* int = obj.GetThetaResolutionMaxValue () - Set the number
  of points in the longitude direction (ranging from
  StartTheta to EndTheta).
* int = obj.GetThetaResolution () - Set the number of points
  in the longitude direction (ranging from StartTheta to
  EndTheta).
* obj.SetPhiResolution (int ) - Set the number of points in
  the latitude direction (ranging from StartPhi to EndPhi).
* int = obj.GetPhiResolutionMinValue () - Set the number of
  points in the latitude direction (ranging from StartPhi to
  EndPhi).
* int = obj.GetPhiResolutionMaxValue () - Set the number of
  points in the latitude direction (ranging from StartPhi to
  EndPhi).
* int = obj.GetPhiResolution () - Set the number of points
  in the latitude direction (ranging from StartPhi to
  EndPhi).
* obj.SetStartTheta (double ) - Set the starting longitude
  angle. By default StartTheta=0 degrees.
* double = obj.GetStartThetaMinValue () - Set the starting
  longitude angle. By default StartTheta=0 degrees.
* double = obj.GetStartThetaMaxValue () - Set the starting
  longitude angle. By default StartTheta=0 degrees.
* double = obj.GetStartTheta () - Set the starting longitude
  angle. By default StartTheta=0 degrees.
* obj.SetEndTheta (double ) - Set the ending longitude
  angle. By default EndTheta=360 degrees.
* double = obj.GetEndThetaMinValue () - Set the ending
  longitude angle. By default EndTheta=360 degrees.
* double = obj.GetEndThetaMaxValue () - Set the ending
  longitude angle. By default EndTheta=360 degrees.
* double = obj.GetEndTheta () - Set the ending longitude
  angle. By default EndTheta=360 degrees.
* obj.SetStartPhi (double ) - Set the starting latitude
  angle (0 is at north pole). By default StartPhi=0 degrees.
* double = obj.GetStartPhiMinValue () - Set the starting
  latitude angle (0 is at north pole). By default StartPhi=0
  degrees.
* double = obj.GetStartPhiMaxValue () - Set the starting
  latitude angle (0 is at north pole). By default StartPhi=0
  degrees.
* double = obj.GetStartPhi () - Set the starting latitude
  angle (0 is at north pole). By default StartPhi=0 degrees.
* obj.SetEndPhi (double ) - Set the ending latitude angle.
  By default EndPhi=180 degrees.
* double = obj.GetEndPhiMinValue () - Set the ending
  latitude angle. By default EndPhi=180 degrees.
* double = obj.GetEndPhiMaxValue () - Set the ending
  latitude angle. By default EndPhi=180 degrees.
* double = obj.GetEndPhi () - Set the ending latitude angle.
  By default EndPhi=180 degrees.
* obj.SetLatLongTessellation (int ) - Cause the sphere to be
  tessellated with edges along the latitude and longitude
  lines. If off, triangles are generated at non-polar
  regions, which results in edges that are not parallel to
  latitude and longitude lines. If on, quadrilaterals are
  generated everywhere except at the poles. This can be
  useful for generating a wireframe sphere with natural
  latitude and longitude lines.
* int = obj.GetLatLongTessellation () - Cause the sphere to
  be tessellated with edges along the latitude and longitude
  lines. If off, triangles are generated at non-polar
  regions, which results in edges that are not parallel to
  latitude and longitude lines. If on, quadrilaterals are
  generated everywhere except at the poles. This can be
  useful for generating a wireframe sphere with natural
  latitude and longitude lines.
* obj.LatLongTessellationOn () - Cause the sphere to be
  tessellated with edges along the latitude and longitude
  lines. If off, triangles are generated at non-polar
  regions, which results in edges that are not parallel to
  latitude and longitude lines. If on, quadrilaterals are
  generated everywhere except at the poles. This can be
  useful for generating a wireframe sphere with natural
  latitude and longitude lines.
* obj.LatLongTessellationOff () - Cause the sphere to be
  tessellated with edges along the latitude and longitude
  lines. If off, triangles are generated at non-polar
  regions, which results in edges that are not parallel to
  latitude and longitude lines. If on, quadrilaterals are
  generated everywhere except at the poles. This can be
  useful for generating a wireframe sphere with natural
  latitude and longitude lines.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

