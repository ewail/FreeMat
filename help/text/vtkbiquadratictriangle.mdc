
 Usage

vtkBiQuadraticTriangle is a concrete implementation of
vtkNonLinearCell to represent a two-dimensional, 7-node,
isoparametric parabolic triangle. The interpolation is the
standard finite element, bi-quadratic isoparametric shape
function. The cell includes three mid-edge nodes besides the
three triangle vertices and a center node. The ordering of
the three points defining the cell is point ids (0-2,3-6)
where id #3 is the midedge node between points (0,1); id #4
is the midedge node between points (1,2); and id #5 is the
midedge node between points (2,0). id #6 is the center node
of the cell.
To create an instance of class vtkBiQuadraticTriangle,
simply invoke its constructor as follows

    obj = vtkBiQuadraticTriangle



 Methods

The class vtkBiQuadraticTriangle has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkBiQuadraticTriangle class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkBiQuadraticTriangle = obj.NewInstance ()
* vtkBiQuadraticTriangle = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - Implement the vtkCell
  API. See the vtkCell API for descriptions of these
  methods.
* vtkCell = obj.GetFace (int )
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray polys,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this quadratic triangle using scalar value provided. Like
  contouring, except that it cuts the triangle to produce
  linear triangles.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the quadratic triangle in parametric
  coordinates.
* double = obj.GetParametricDistance (double pcoords[3]) -
  Return the distance of the parametric coordinate provided
  to the cell. If inside the cell, a distance of zero is
  returned.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[7]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [14])


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

