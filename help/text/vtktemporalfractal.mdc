
 Usage

vtkTemporalFractal is a collection of uniform grids. All
have the same dimensions. Each block has a different origin
and spacing. It uses mandelbrot to create cell data. I scale
the fractal array to look like a volme fraction. I may also
add block id and level as extra cell arrays. This source
produces a vtkHierarchicalBoxDataSet when
GenerateRectilinearGrids is off, otherwise produces a
vtkMultiBlockDataSet.
To create an instance of class vtkTemporalFractal, simply
invoke its constructor as follows

    obj = vtkTemporalFractal



 Methods

The class vtkTemporalFractal has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkTemporalFractal class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkTemporalFractal = obj.NewInstance ()
* vtkTemporalFractal = obj.SafeDownCast (vtkObject o)
* obj.SetFractalValue (float ) - Essentially the iso surface
  value. The fractal array is scaled to map this value to
  0.5 for use as a volume fraction.
* float = obj.GetFractalValue () - Essentially the iso
  surface value. The fractal array is scaled to map this
  value to 0.5 for use as a volume fraction.
* obj.SetMaximumLevel (int ) - Any blocks touching a
  predefined line will be subdivided to this level. Other
  blocks are subdivided so that neighboring blocks only
  differ by one level.
* int = obj.GetMaximumLevel () - Any blocks touching a
  predefined line will be subdivided to this level. Other
  blocks are subdivided so that neighboring blocks only
  differ by one level.
* obj.SetDimensions (int ) - XYZ dimensions of cells.
* int = obj.GetDimensions () - XYZ dimensions of cells.
* obj.SetGhostLevels (int ) - For testing ghost levels.
* int = obj.GetGhostLevels () - For testing ghost levels.
* obj.GhostLevelsOn () - For testing ghost levels.
* obj.GhostLevelsOff () - For testing ghost levels.
* obj.SetGenerateRectilinearGrids (int ) - Generate either
  rectilinear grids either uniform grids. Default is false.
* int = obj.GetGenerateRectilinearGrids () - Generate either
  rectilinear grids either uniform grids. Default is false.
* obj.GenerateRectilinearGridsOn () - Generate either
  rectilinear grids either uniform grids. Default is false.
* obj.GenerateRectilinearGridsOff () - Generate either
  rectilinear grids either uniform grids. Default is false.
* obj.SetDiscreteTimeSteps (int ) - Limit this source to
  discrete integer time steps Default is off (continuous)
* int = obj.GetDiscreteTimeSteps () - Limit this source to
  discrete integer time steps Default is off (continuous)
* obj.DiscreteTimeStepsOn () - Limit this source to discrete
  integer time steps Default is off (continuous)
* obj.DiscreteTimeStepsOff () - Limit this source to
  discrete integer time steps Default is off (continuous)
* obj.SetTwoDimensional (int ) - Make a 2D data set to test.
* int = obj.GetTwoDimensional () - Make a 2D data set to
  test.
* obj.TwoDimensionalOn () - Make a 2D data set to test.
* obj.TwoDimensionalOff () - Make a 2D data set to test.
* obj.SetAsymetric (int ) - Test the case when the blocks do
  not have the same sizes. Adds 2 to the x extent of the far
  x blocks (level 1).
* int = obj.GetAsymetric () - Test the case when the blocks
  do not have the same sizes. Adds 2 to the x extent of the
  far x blocks (level 1).
* obj.SetAdaptiveSubdivision (int ) - Make the division
  adaptive or not, defaults to Adaptive
* int = obj.GetAdaptiveSubdivision () - Make the division
  adaptive or not, defaults to Adaptive
* obj.AdaptiveSubdivisionOn () - Make the division adaptive
  or not, defaults to Adaptive
* obj.AdaptiveSubdivisionOff () - Make the division adaptive
  or not, defaults to Adaptive


* FreeMat_Documentation
* Visualization_Toolkit_Parallel_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

