
 Usage

vtkQuadricLODActor implements a specific strategy for level-
of-detail using the vtkQuadricClustering decimation
algorithm. It supports only two levels of detail: full
resolution and a decimated version. The decimated LOD is
generated using a tuned strategy to produce output
consistent with the requested interactive frame rate (i.e.,
the vtkRenderWindowInteractor's DesiredUpdateRate). It also
makes use of display lists for performance, and adjusts the
vtkQuadricClustering algorithm to take into account the
dimensionality of the data (e.g., 2D, x-y surfaces may be
binned into n x n x 1 to reduce extra polygons in the z-
direction). Finally, the filter may optionally be set in
"Static" mode (this works with the vtkMapper::SetStatic()
method). `Enabling Static results in a one time execution of
the Mapper's pipeline. After that, the pipeline no longer
updated (unless manually forced to do so).
To create an instance of class vtkQuadricLODActor, simply
invoke its constructor as follows

    obj = vtkQuadricLODActor



 Methods

The class vtkQuadricLODActor has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkQuadricLODActor class.

* string = obj.GetClassName () - Standard class methods.
* int = obj.IsA (string name) - Standard class methods.
* vtkQuadricLODActor = obj.NewInstance () - Standard class
  methods.
* vtkQuadricLODActor = obj.SafeDownCast (vtkObject o) -
  Standard class methods.
* obj.SetDeferLODConstruction (int ) - Specify whether to
  build the LOD immediately (i.e., on the first render) or
  to wait until the LOD is requested in a subsequent render.
  By default, LOD construction is not deferred
  (DeferLODConstruction is false).
* int = obj.GetDeferLODConstruction () - Specify whether to
  build the LOD immediately (i.e., on the first render) or
  to wait until the LOD is requested in a subsequent render.
  By default, LOD construction is not deferred
  (DeferLODConstruction is false).
* obj.DeferLODConstructionOn () - Specify whether to build
  the LOD immediately (i.e., on the first render) or to wait
  until the LOD is requested in a subsequent render. By
  default, LOD construction is not deferred
  (DeferLODConstruction is false).
* obj.DeferLODConstructionOff () - Specify whether to build
  the LOD immediately (i.e., on the first render) or to wait
  until the LOD is requested in a subsequent render. By
  default, LOD construction is not deferred
  (DeferLODConstruction is false).
* obj.SetStatic (int ) - Turn on/off a flag to control
  whether the underlying pipeline is static. If static, this
  means that the data pipeline executes once and then not
  again until the user manually modifies this class. By
  default, Static is off because trying to debug this is
  tricky, and you should only use it when you know what you
  are doing.
* int = obj.GetStatic () - Turn on/off a flag to control
  whether the underlying pipeline is static. If static, this
  means that the data pipeline executes once and then not
  again until the user manually modifies this class. By
  default, Static is off because trying to debug this is
  tricky, and you should only use it when you know what you
  are doing.
* obj.StaticOn () - Turn on/off a flag to control whether
  the underlying pipeline is static. If static, this means
  that the data pipeline executes once and then not again
  until the user manually modifies this class. By default,
  Static is off because trying to debug this is tricky, and
  you should only use it when you know what you are doing.
* obj.StaticOff () - Turn on/off a flag to control whether
  the underlying pipeline is static. If static, this means
  that the data pipeline executes once and then not again
  until the user manually modifies this class. By default,
  Static is off because trying to debug this is tricky, and
  you should only use it when you know what you are doing.
* obj.SetDataConfiguration (int ) - Force the binning of the
  quadric clustering according to application knowledge
  relative to the dimension of the data. For example, if you
  know your data lies in a 2D x-y plane, the performance of
  the quadric clustering algorithm can be greatly improved
  by indicating this (i.e., the number of resulting
  triangles, and the quality of the decimation version is
  better). Setting this parameter forces the binning to be
  configured consistent with the dimnesionality of the data,
  and the collapse dimension ratio is ignored. Specifying
  the value of DataConfiguration to UNKNOWN (the default
  value) means that the class will attempt to figure the
  dimension of the class automatically using the
  CollapseDimensionRatio ivar.
* int = obj.GetDataConfigurationMinValue () - Force the
  binning of the quadric clustering according to application
  knowledge relative to the dimension of the data. For
  example, if you know your data lies in a 2D x-y plane, the
  performance of the quadric clustering algorithm can be
  greatly improved by indicating this (i.e., the number of
  resulting triangles, and the quality of the decimation
  version is better). Setting this parameter forces the
  binning to be configured consistent with the
  dimnesionality of the data, and the collapse dimension
  ratio is ignored. Specifying the value of
  DataConfiguration to UNKNOWN (the default value) means
  that the class will attempt to figure the dimension of the
  class automatically using the CollapseDimensionRatio ivar.
* int = obj.GetDataConfigurationMaxValue () - Force the
  binning of the quadric clustering according to application
  knowledge relative to the dimension of the data. For
  example, if you know your data lies in a 2D x-y plane, the
  performance of the quadric clustering algorithm can be
  greatly improved by indicating this (i.e., the number of
  resulting triangles, and the quality of the decimation
  version is better). Setting this parameter forces the
  binning to be configured consistent with the
  dimnesionality of the data, and the collapse dimension
  ratio is ignored. Specifying the value of
  DataConfiguration to UNKNOWN (the default value) means
  that the class will attempt to figure the dimension of the
  class automatically using the CollapseDimensionRatio ivar.
* int = obj.GetDataConfiguration () - Force the binning of
  the quadric clustering according to application knowledge
  relative to the dimension of the data. For example, if you
  know your data lies in a 2D x-y plane, the performance of
  the quadric clustering algorithm can be greatly improved
  by indicating this (i.e., the number of resulting
  triangles, and the quality of the decimation version is
  better). Setting this parameter forces the binning to be
  configured consistent with the dimnesionality of the data,
  and the collapse dimension ratio is ignored. Specifying
  the value of DataConfiguration to UNKNOWN (the default
  value) means that the class will attempt to figure the
  dimension of the class automatically using the
  CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToUnknown () - Force the binning
  of the quadric clustering according to application
  knowledge relative to the dimension of the data. For
  example, if you know your data lies in a 2D x-y plane, the
  performance of the quadric clustering algorithm can be
  greatly improved by indicating this (i.e., the number of
  resulting triangles, and the quality of the decimation
  version is better). Setting this parameter forces the
  binning to be configured consistent with the
  dimnesionality of the data, and the collapse dimension
  ratio is ignored. Specifying the value of
  DataConfiguration to UNKNOWN (the default value) means
  that the class will attempt to figure the dimension of the
  class automatically using the CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToXLine () - Force the binning of
  the quadric clustering according to application knowledge
  relative to the dimension of the data. For example, if you
  know your data lies in a 2D x-y plane, the performance of
  the quadric clustering algorithm can be greatly improved
  by indicating this (i.e., the number of resulting
  triangles, and the quality of the decimation version is
  better). Setting this parameter forces the binning to be
  configured consistent with the dimnesionality of the data,
  and the collapse dimension ratio is ignored. Specifying
  the value of DataConfiguration to UNKNOWN (the default
  value) means that the class will attempt to figure the
  dimension of the class automatically using the
  CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToYLine () - Force the binning of
  the quadric clustering according to application knowledge
  relative to the dimension of the data. For example, if you
  know your data lies in a 2D x-y plane, the performance of
  the quadric clustering algorithm can be greatly improved
  by indicating this (i.e., the number of resulting
  triangles, and the quality of the decimation version is
  better). Setting this parameter forces the binning to be
  configured consistent with the dimnesionality of the data,
  and the collapse dimension ratio is ignored. Specifying
  the value of DataConfiguration to UNKNOWN (the default
  value) means that the class will attempt to figure the
  dimension of the class automatically using the
  CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToZLine () - Force the binning of
  the quadric clustering according to application knowledge
  relative to the dimension of the data. For example, if you
  know your data lies in a 2D x-y plane, the performance of
  the quadric clustering algorithm can be greatly improved
  by indicating this (i.e., the number of resulting
  triangles, and the quality of the decimation version is
  better). Setting this parameter forces the binning to be
  configured consistent with the dimnesionality of the data,
  and the collapse dimension ratio is ignored. Specifying
  the value of DataConfiguration to UNKNOWN (the default
  value) means that the class will attempt to figure the
  dimension of the class automatically using the
  CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToXYPlane () - Force the binning
  of the quadric clustering according to application
  knowledge relative to the dimension of the data. For
  example, if you know your data lies in a 2D x-y plane, the
  performance of the quadric clustering algorithm can be
  greatly improved by indicating this (i.e., the number of
  resulting triangles, and the quality of the decimation
  version is better). Setting this parameter forces the
  binning to be configured consistent with the
  dimnesionality of the data, and the collapse dimension
  ratio is ignored. Specifying the value of
  DataConfiguration to UNKNOWN (the default value) means
  that the class will attempt to figure the dimension of the
  class automatically using the CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToYZPlane () - Force the binning
  of the quadric clustering according to application
  knowledge relative to the dimension of the data. For
  example, if you know your data lies in a 2D x-y plane, the
  performance of the quadric clustering algorithm can be
  greatly improved by indicating this (i.e., the number of
  resulting triangles, and the quality of the decimation
  version is better). Setting this parameter forces the
  binning to be configured consistent with the
  dimnesionality of the data, and the collapse dimension
  ratio is ignored. Specifying the value of
  DataConfiguration to UNKNOWN (the default value) means
  that the class will attempt to figure the dimension of the
  class automatically using the CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToXZPlane () - Force the binning
  of the quadric clustering according to application
  knowledge relative to the dimension of the data. For
  example, if you know your data lies in a 2D x-y plane, the
  performance of the quadric clustering algorithm can be
  greatly improved by indicating this (i.e., the number of
  resulting triangles, and the quality of the decimation
  version is better). Setting this parameter forces the
  binning to be configured consistent with the
  dimnesionality of the data, and the collapse dimension
  ratio is ignored. Specifying the value of
  DataConfiguration to UNKNOWN (the default value) means
  that the class will attempt to figure the dimension of the
  class automatically using the CollapseDimensionRatio ivar.
* obj.SetDataConfigurationToXYZVolume () - If the data
  configuration is set to UNKNOWN, this class attempts to
  figure out the dimensionality of the data using
  CollapseDimensionRatio. This ivar is the ratio of short
  edge of the input bounding box to its long edge, which is
  then used to collapse the data dimension (and set the
  quadric bin size in that direction to one). By default,
  this value is 0.05.
* obj.SetCollapseDimensionRatio (double ) - If the data
  configuration is set to UNKNOWN, this class attempts to
  figure out the dimensionality of the data using
  CollapseDimensionRatio. This ivar is the ratio of short
  edge of the input bounding box to its long edge, which is
  then used to collapse the data dimension (and set the
  quadric bin size in that direction to one). By default,
  this value is 0.05.
* double = obj.GetCollapseDimensionRatioMinValue () - If the
  data configuration is set to UNKNOWN, this class attempts
  to figure out the dimensionality of the data using
  CollapseDimensionRatio. This ivar is the ratio of short
  edge of the input bounding box to its long edge, which is
  then used to collapse the data dimension (and set the
  quadric bin size in that direction to one). By default,
  this value is 0.05.
* double = obj.GetCollapseDimensionRatioMaxValue () - If the
  data configuration is set to UNKNOWN, this class attempts
  to figure out the dimensionality of the data using
  CollapseDimensionRatio. This ivar is the ratio of short
  edge of the input bounding box to its long edge, which is
  then used to collapse the data dimension (and set the
  quadric bin size in that direction to one). By default,
  this value is 0.05.
* double = obj.GetCollapseDimensionRatio () - If the data
  configuration is set to UNKNOWN, this class attempts to
  figure out the dimensionality of the data using
  CollapseDimensionRatio. This ivar is the ratio of short
  edge of the input bounding box to its long edge, which is
  then used to collapse the data dimension (and set the
  quadric bin size in that direction to one). By default,
  this value is 0.05.
* obj.SetLODFilter (vtkQuadricClustering lodFilter) - This
  class will create a vtkQuadricClustering algorithm
  automatically. However, if you would like to specify the
  filter to use, or to access it and configure it, these
  method provide access to the filter.
* vtkQuadricClustering = obj.GetLODFilter () - This class
  will create a vtkQuadricClustering algorithm
  automatically. However, if you would like to specify the
  filter to use, or to access it and configure it, these
  method provide access to the filter.
* obj.SetMaximumDisplayListSize (int ) - Specify the maximum
  display list size. This variable is used to determine
  whether to use display lists (ImmediateModeRenderingOff)
  or not. Controlling display list size is important to
  prevent program crashes (i.e., overly large display lists
  on some graphics hardware will cause faults). The display
  list size is the length of the vtkCellArray representing
  the topology of the input vtkPolyData.
* int = obj.GetMaximumDisplayListSizeMinValue () - Specify
  the maximum display list size. This variable is used to
  determine whether to use display lists
  (ImmediateModeRenderingOff) or not. Controlling display
  list size is important to prevent program crashes (i.e.,
  overly large display lists on some graphics hardware will
  cause faults). The display list size is the length of the
  vtkCellArray representing the topology of the input
  vtkPolyData.
* int = obj.GetMaximumDisplayListSizeMaxValue () - Specify
  the maximum display list size. This variable is used to
  determine whether to use display lists
  (ImmediateModeRenderingOff) or not. Controlling display
  list size is important to prevent program crashes (i.e.,
  overly large display lists on some graphics hardware will
  cause faults). The display list size is the length of the
  vtkCellArray representing the topology of the input
  vtkPolyData.
* int = obj.GetMaximumDisplayListSize () - Specify the
  maximum display list size. This variable is used to
  determine whether to use display lists
  (ImmediateModeRenderingOff) or not. Controlling display
  list size is important to prevent program crashes (i.e.,
  overly large display lists on some graphics hardware will
  cause faults). The display list size is the length of the
  vtkCellArray representing the topology of the input
  vtkPolyData.
* obj.SetPropType (int ) - Indicate that this actor is
  actually a follower. By default, the prop type is a
  vtkActor.
* int = obj.GetPropTypeMinValue () - Indicate that this
  actor is actually a follower. By default, the prop type is
  a vtkActor.
* int = obj.GetPropTypeMaxValue () - Indicate that this
  actor is actually a follower. By default, the prop type is
  a vtkActor.
* int = obj.GetPropType () - Indicate that this actor is
  actually a follower. By default, the prop type is a
  vtkActor.
* obj.SetPropTypeToFollower () - Indicate that this actor is
  actually a follower. By default, the prop type is a
  vtkActor.
* obj.SetPropTypeToActor () - Set/Get the camera to follow.
  This method is only applicable when the prop type is set
  to a vtkFollower.
* obj.SetCamera (vtkCamera ) - Set/Get the camera to follow.
  This method is only applicable when the prop type is set
  to a vtkFollower.
* vtkCamera = obj.GetCamera () - Set/Get the camera to
  follow. This method is only applicable when the prop type
  is set to a vtkFollower.
* obj.Render (vtkRenderer , vtkMapper ) - This causes the
  actor to be rendered. Depending on the frame rate request,
  it will use either a full resolution render or an
  interactive render (i.e., it will use the decimated
  geometry).
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  This method is used internally by the rendering process.
  We overide the superclass method to properly set the
  estimated render time.
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.
* obj.ShallowCopy (vtkProp prop) - Shallow copy of an LOD
  actor. Overloads the virtual vtkProp method.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

