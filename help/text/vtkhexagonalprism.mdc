
 Usage

vtkHexagonalPrism is a concrete implementation of vtkCell to
represent a linear 3D prism with hexagonal base. Such prism
is defined by the twelve points (0-12) where (0,1,2,3,4,5)
is the base of the prism which, using the right hand rule,
forms a hexagon whose normal points is in the direction of
the opposite face (6,7,8,9,10,11).
To create an instance of class vtkHexagonalPrism, simply
invoke its constructor as follows

    obj = vtkHexagonalPrism



 Methods

The class vtkHexagonalPrism has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkHexagonalPrism class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkHexagonalPrism = obj.NewInstance ()
* vtkHexagonalPrism = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - See the vtkCell API
  for descriptions of these methods.
* vtkCell = obj.GetFace (int faceId) - See the vtkCell API
  for descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the wedge in parametric coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[12]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [36]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

