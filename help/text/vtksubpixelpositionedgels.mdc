
 Usage

vtkSubPixelPositionEdgels is a filter that takes a series of
linked edgels (digital curves) and gradient maps as input.
It then adjusts the edgel locations based on the gradient
data. Specifically, the algorithm first determines the
neighboring gradient magnitudes of an edgel using simple
interpolation of its neighbors. It then fits the following
three data points: negative gradient direction gradient
magnitude, edgel gradient magnitude and positive gradient
direction gradient magnitude to a quadratic function. It
then solves this quadratic to find the maximum gradient
location along the gradient orientation. It then modifies
the edgels location along the gradient orientation to the
calculated maximum location. This algorithm does not adjust
an edgel in the direction orthogonal to its gradient vector.
To create an instance of class vtkSubPixelPositionEdgels,
simply invoke its constructor as follows

    obj = vtkSubPixelPositionEdgels



 Methods

The class vtkSubPixelPositionEdgels has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkSubPixelPositionEdgels class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkSubPixelPositionEdgels = obj.NewInstance ()
* vtkSubPixelPositionEdgels = obj.SafeDownCast (vtkObject o)
* obj.SetGradMaps (vtkStructuredPoints gm) - Set/Get the
  gradient data for doing the position adjustments.
* vtkStructuredPoints = obj.GetGradMaps () - Set/Get the
  gradient data for doing the position adjustments.
* obj.SetTargetFlag (int ) - These methods can make the
  positioning look for a target scalar value instead of
  looking for a maximum.
* int = obj.GetTargetFlag () - These methods can make the
  positioning look for a target scalar value instead of
  looking for a maximum.
* obj.TargetFlagOn () - These methods can make the
  positioning look for a target scalar value instead of
  looking for a maximum.
* obj.TargetFlagOff () - These methods can make the
  positioning look for a target scalar value instead of
  looking for a maximum.
* obj.SetTargetValue (double ) - These methods can make the
  positioning look for a target scalar value instead of
  looking for a maximum.
* double = obj.GetTargetValue () - These methods can make
  the positioning look for a target scalar value instead of
  looking for a maximum.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

