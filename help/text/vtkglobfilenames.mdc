
 Usage

vtkGlobFileNames is a utility for finding files and
directories that match a given wildcard pattern. Allowed
wildcards are , ?, [...], [!...]. The "*" wildcard matches
any substring, the "?" matches any single character, the
[...] matches any one of the enclosed characters, e.g. [abc]
will match one of a, b, or c, while [0-9] will match any
digit, and [!...] will match any single character except for
the ones within the brackets. Special treatment is given to
"/" (or "\" on Windows) because these are path separators.
These are never matched by a wildcard, they are only matched
with another file separator.
To create an instance of class vtkGlobFileNames, simply
invoke its constructor as follows

    obj = vtkGlobFileNames



 Methods

The class vtkGlobFileNames has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkGlobFileNames class.

* string = obj.GetClassName () - Return the class name as a
  string.
* int = obj.IsA (string name) - Return the class name as a
  string.
* vtkGlobFileNames = obj.NewInstance () - Return the class
  name as a string.
* vtkGlobFileNames = obj.SafeDownCast (vtkObject o) - Return
  the class name as a string.
* obj.Reset () - Reset the glob by clearing the list of
  output filenames.
* obj.SetDirectory (string ) - Set the directory in which to
  perform the glob. If this is not set, then the current
  directory will be used. Also, if you use a glob pattern
  that contains absolute path (one that starts with "/" or a
  drive letter) then that absolute path will be used and
  Directory will be ignored.
* string = obj.GetDirectory () - Set the directory in which
  to perform the glob. If this is not set, then the current
  directory will be used. Also, if you use a glob pattern
  that contains absolute path (one that starts with "/" or a
  drive letter) then that absolute path will be used and
  Directory will be ignored.
* int = obj.AddFileNames (string pattern) - Search for all
  files that match the given expression, sort them, and add
  them to the output. This method can be called repeatedly
  to add files matching additional patterns. Returns 1 if
  successful, otherwise returns zero.
* obj.SetRecurse (int ) - Recurse into subdirectories.
* obj.RecurseOn () - Recurse into subdirectories.
* obj.RecurseOff () - Recurse into subdirectories.
* int = obj.GetRecurse () - Recurse into subdirectories.
* int = obj.GetNumberOfFileNames () - Return the number of
  files found.
* string = obj.GetNthFileName (int index) - Return the file
  at the given index, the indexing is 0 based.
* vtkStringArray = obj.GetFileNames () - Get an array that
  contains all the file names.


* FreeMat_Documentation
* Visualization_Toolkit_IO_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

