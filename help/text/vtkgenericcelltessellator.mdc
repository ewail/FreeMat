
 Usage

vtkGenericCellTessellator is a helper class to perform
adaptive tessellation of particular cell topologies. The
major purpose for this class is to transform higher-order
cell types (e.g., higher-order finite elements) into linear
cells that can then be easily visualized by VTK. This class
works in conjunction with the vtkGenericDataSet and
vtkGenericAdaptorCell classes.
This algorithm is based on edge subdivision. An error metric
along each edge is evaluated, and if the error is greater
than some tolerance, the edge is subdivided (as well as all
connected 2D and 3D cells). The process repeats until the
error metric is satisfied.
A significant issue addressed by this algorithm is to insure
face compatibility across neigboring cells. That is,
diagonals due to face triangulation must match to insure
that the mesh is compatible. The algorithm employs a
precomputed table to accelerate the tessellation process.
The table was generated with the help of
vtkOrderedTriangulator; the basic idea is that the choice of
diagonal is made by considering the relative value of the
point ids.
To create an instance of class vtkGenericCellTessellator,
simply invoke its constructor as follows

    obj = vtkGenericCellTessellator



 Methods

The class vtkGenericCellTessellator has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkGenericCellTessellator class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkGenericCellTessellator = obj.NewInstance ()
* vtkGenericCellTessellator = obj.SafeDownCast (vtkObject o)
* obj.TessellateFace (vtkGenericAdaptorCell cell,
  vtkGenericAttributeCollection att, vtkIdType index,
  vtkDoubleArray points, vtkCellArray cellArray,
  vtkPointData internalPd) - Tessellate a face of a 3D
  `cell'. The face is specified by the index value. The
  result is a set of smaller linear triangles in `cellArray'
  with `points' and point data `internalPd'.


    Precondition:
        cell_exists: cell!=0
        valid_dimension: cell->GetDimension()==3
        valid_index_range: (index>=0) &amp;&amp;
        (index<cell->GetNumberOfBoundaries(2))
        att_exists: att!=0
        points_exists: points!=0
        cellArray_exists: cellArray!=0
        internalPd_exists: internalPd!=0

* obj.Tessellate (vtkGenericAdaptorCell cell,
  vtkGenericAttributeCollection att, vtkDoubleArray points,
  vtkCellArray cellArray, vtkPointData internalPd) -
  Tessellate a 3D `cell'. The result is a set of smaller
  linear tetrahedra in `cellArray' with `points' and point
  data `internalPd'.


    Precondition:
        cell_exists: cell!=0
        valid_dimension: cell->GetDimension()==3
        att_exists: att!=0
        points_exists: points!=0
        cellArray_exists: cellArray!=0
        internalPd_exists: internalPd!=0

* obj.Triangulate (vtkGenericAdaptorCell cell,
  vtkGenericAttributeCollection att, vtkDoubleArray points,
  vtkCellArray cellArray, vtkPointData internalPd) -
  Triangulate a 2D `cell'. The result is a set of smaller
  linear triangles in `cellArray' with `points' and point
  data `internalPd'.


    Precondition:
        cell_exists: cell!=0
        valid_dimension: cell->GetDimension()==2
        att_exists: att!=0
        points_exists: points!=0
        cellArray_exists: cellArray!=0
        internalPd_exists: internalPd!=0

* obj.SetErrorMetrics (vtkCollection someErrorMetrics) -
  Specify the list of error metrics used to decide if an
  edge has to be splitted or not. It is a collection of
  vtkGenericSubdivisionErrorMetric-s.
* vtkCollection = obj.GetErrorMetrics () - Specify the list
  of error metrics used to decide if an edge has to be
  splitted or not. It is a collection of
  vtkGenericSubdivisionErrorMetric-s.
* obj.Initialize (vtkGenericDataSet ds) - Initialize the
  tessellator with a data set `ds'.
* obj.InitErrorMetrics (vtkGenericDataSet ds) - Init the
  error metric with the dataset. Should be called in each
  filter before any tessellation of any cell.
* int = obj.GetMeasurement () - If true, measure the quality
  of the fixed subdivision.
* obj.SetMeasurement (int ) - If true, measure the quality
  of the fixed subdivision.
* obj.GetMaxErrors (double errors) - Get the maximum error
  measured after the fixed subdivision.


    Precondition:
        errors_exists: errors!=0
        valid_size: sizeof(errors)==GetErrorMetrics()-
        >GetNumberOfItems()



* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

