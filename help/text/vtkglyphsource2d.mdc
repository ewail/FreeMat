
 Usage

vtkGlyphSource2D can generate a family of 2D glyphs each of
which lies in the x-y plane (i.e., the z-coordinate is
zero). The class is a helper class to be used with
vtkGlyph2D and vtkXYPlotActor.
To use this class, specify the glyph type to use and its
attributes. Attributes include its position (i.e., center
point), scale, color, and whether the symbol is filled or
not (a polygon or closed line sequence). You can also put a
short line through the glyph running from -x to +x (the
glyph looks like it's on a line), or a cross.
To create an instance of class vtkGlyphSource2D, simply
invoke its constructor as follows

    obj = vtkGlyphSource2D



 Methods

The class vtkGlyphSource2D has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkGlyphSource2D class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkGlyphSource2D = obj.NewInstance ()
* vtkGlyphSource2D = obj.SafeDownCast (vtkObject o)
* obj.SetCenter (double , double , double ) - Set the center
  of the glyph. By default the center is (0,0,0).
* obj.SetCenter (double a[3]) - Set the center of the glyph.
  By default the center is (0,0,0).
* double = obj. GetCenter () - Set the center of the glyph.
  By default the center is (0,0,0).
* obj.SetScale (double ) - Set the scale of the glyph. Note
  that the glyphs are designed to fit in the (1,1)
  rectangle.
* double = obj.GetScaleMinValue () - Set the scale of the
  glyph. Note that the glyphs are designed to fit in the
  (1,1) rectangle.
* double = obj.GetScaleMaxValue () - Set the scale of the
  glyph. Note that the glyphs are designed to fit in the
  (1,1) rectangle.
* double = obj.GetScale () - Set the scale of the glyph.
  Note that the glyphs are designed to fit in the (1,1)
  rectangle.
* obj.SetScale2 (double ) - Set the scale of optional
  portions of the glyph (e.g., the dash and cross is DashOn
  () and CrossOn()).
* double = obj.GetScale2MinValue () - Set the scale of
  optional portions of the glyph (e.g., the dash and cross
  is DashOn() and CrossOn()).
* double = obj.GetScale2MaxValue () - Set the scale of
  optional portions of the glyph (e.g., the dash and cross
  is DashOn() and CrossOn()).
* double = obj.GetScale2 () - Set the scale of optional
  portions of the glyph (e.g., the dash and cross is DashOn
  () and CrossOn()).
* obj.SetColor (double , double , double ) - Set the color
  of the glyph. The default color is white.
* obj.SetColor (double a[3]) - Set the color of the glyph.
  The default color is white.
* double = obj. GetColor () - Set the color of the glyph.
  The default color is white.
* obj.SetFilled (int ) - Specify whether the glyph is filled
  (a polygon) or not (a closed polygon defined by line
  segments). This only applies to 2D closed glyphs.
* int = obj.GetFilled () - Specify whether the glyph is
  filled (a polygon) or not (a closed polygon defined by
  line segments). This only applies to 2D closed glyphs.
* obj.FilledOn () - Specify whether the glyph is filled (a
  polygon) or not (a closed polygon defined by line
  segments). This only applies to 2D closed glyphs.
* obj.FilledOff () - Specify whether the glyph is filled (a
  polygon) or not (a closed polygon defined by line
  segments). This only applies to 2D closed glyphs.
* obj.SetDash (int ) - Specify whether a short line segment
  is drawn through the glyph. (This is in addition to the
  glyph. If the glyph type is set to "Dash" there is no need
  to enable this flag.)
* int = obj.GetDash () - Specify whether a short line
  segment is drawn through the glyph. (This is in addition
  to the glyph. If the glyph type is set to "Dash" there is
  no need to enable this flag.)
* obj.DashOn () - Specify whether a short line segment is
  drawn through the glyph. (This is in addition to the
  glyph. If the glyph type is set to "Dash" there is no need
  to enable this flag.)
* obj.DashOff () - Specify whether a short line segment is
  drawn through the glyph. (This is in addition to the
  glyph. If the glyph type is set to "Dash" there is no need
  to enable this flag.)
* obj.SetCross (int ) - Specify whether a cross is drawn as
  part of the glyph. (This is in addition to the glyph. If
  the glyph type is set to "Cross" there is no need to
  enable this flag.)
* int = obj.GetCross () - Specify whether a cross is drawn
  as part of the glyph. (This is in addition to the glyph.
  If the glyph type is set to "Cross" there is no need to
  enable this flag.)
* obj.CrossOn () - Specify whether a cross is drawn as part
  of the glyph. (This is in addition to the glyph. If the
  glyph type is set to "Cross" there is no need to enable
  this flag.)
* obj.CrossOff () - Specify whether a cross is drawn as part
  of the glyph. (This is in addition to the glyph. If the
  glyph type is set to "Cross" there is no need to enable
  this flag.)
* obj.SetRotationAngle (double ) - Specify an angle (in
  degrees) to rotate the glyph around the z-axis. Using this
  ivar, it is possible to generate rotated glyphs (e.g.,
  crosses, arrows, etc.)
* double = obj.GetRotationAngle () - Specify an angle (in
  degrees) to rotate the glyph around the z-axis. Using this
  ivar, it is possible to generate rotated glyphs (e.g.,
  crosses, arrows, etc.)
* obj.SetGlyphType (int ) - Specify the type of glyph to
  generate.
* int = obj.GetGlyphTypeMinValue () - Specify the type of
  glyph to generate.
* int = obj.GetGlyphTypeMaxValue () - Specify the type of
  glyph to generate.
* int = obj.GetGlyphType () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToNone () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToVertex () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToDash () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToCross () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToThickCross () - Specify the type of
  glyph to generate.
* obj.SetGlyphTypeToTriangle () - Specify the type of glyph
  to generate.
* obj.SetGlyphTypeToSquare () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToCircle () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToDiamond () - Specify the type of glyph
  to generate.
* obj.SetGlyphTypeToArrow () - Specify the type of glyph to
  generate.
* obj.SetGlyphTypeToThickArrow () - Specify the type of
  glyph to generate.
* obj.SetGlyphTypeToHookedArrow () - Specify the type of
  glyph to generate.
* obj.SetGlyphTypeToEdgeArrow ()


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

