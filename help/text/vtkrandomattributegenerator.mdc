
 Usage

vtkRandomAttributeGenerator is a filter that creates random
attributes including scalars, vectors, normals, tensors,
texture coordinates and/or general data arrays. These
attributes can be generated as point data, cell data or
general field data. The generation of each component is
normalized between a user-specified minimum and maximum
value.
This filter provides that capability to specify the data
type of the attributes, the range for each of the
components, and the number of components. Note, however,
that this flexibility only goes so far because some
attributes (e.g., normals, vectors and tensors) are fixed in
the number of components, and in the case of normals and
tensors, are constrained in the values that some of the
components can take (i.e., normals have magnitude one, and
tensors are symmetric).
To create an instance of class vtkRandomAttributeGenerator,
simply invoke its constructor as follows

    obj = vtkRandomAttributeGenerator



 Methods

The class vtkRandomAttributeGenerator has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkRandomAttributeGenerator class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRandomAttributeGenerator = obj.NewInstance ()
* vtkRandomAttributeGenerator = obj.SafeDownCast (vtkObject
  o)
* obj.SetDataType (int ) - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToBit () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToChar () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToUnsignedChar () - Specify the type of
  array to create (all components of this array are of this
  type). This holds true for all arrays that are created.
* obj.SetDataTypeToShort () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToUnsignedShort () - Specify the type of
  array to create (all components of this array are of this
  type). This holds true for all arrays that are created.
* obj.SetDataTypeToInt () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToUnsignedInt () - Specify the type of
  array to create (all components of this array are of this
  type). This holds true for all arrays that are created.
* obj.SetDataTypeToLong () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToUnsignedLong () - Specify the type of
  array to create (all components of this array are of this
  type). This holds true for all arrays that are created.
* obj.SetDataTypeToFloat () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetDataTypeToDouble () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* int = obj.GetDataType () - Specify the type of array to
  create (all components of this array are of this type).
  This holds true for all arrays that are created.
* obj.SetNumberOfComponents (int ) - Specify the number of
  components to generate. This value only applies to those
  attribute types that take a variable number of components.
  For example, a vector is only three components so the
  number of components is not applicable; whereas a scalar
  may support multiple, varying number of components.
* int = obj.GetNumberOfComponentsMinValue () - Specify the
  number of components to generate. This value only applies
  to those attribute types that take a variable number of
  components. For example, a vector is only three components
  so the number of components is not applicable; whereas a
  scalar may support multiple, varying number of components.
* int = obj.GetNumberOfComponentsMaxValue () - Specify the
  number of components to generate. This value only applies
  to those attribute types that take a variable number of
  components. For example, a vector is only three components
  so the number of components is not applicable; whereas a
  scalar may support multiple, varying number of components.
* int = obj.GetNumberOfComponents () - Specify the number of
  components to generate. This value only applies to those
  attribute types that take a variable number of components.
  For example, a vector is only three components so the
  number of components is not applicable; whereas a scalar
  may support multiple, varying number of components.
* obj.SetMinimumComponentValue (double ) - Set the minimum
  component value. This applies to all data that is
  generated, although normals and tensors have internal
  constraints that must be observed.
* double = obj.GetMinimumComponentValue () - Set the minimum
  component value. This applies to all data that is
  generated, although normals and tensors have internal
  constraints that must be observed.
* obj.SetMaximumComponentValue (double ) - Set the maximum
  component value. This applies to all data that is
  generated, although normals and tensors have internal
  constraints that must be observed.
* double = obj.GetMaximumComponentValue () - Set the maximum
  component value. This applies to all data that is
  generated, although normals and tensors have internal
  constraints that must be observed.
* obj.SetNumberOfTuples (vtkIdType ) - Specify the number of
  tuples to generate. This value only applies when creating
  general field data. In all other cases (i.e., point data
  or cell data), the number of tuples is controlled by the
  number of points and cells, respectively.
* vtkIdType = obj.GetNumberOfTuplesMinValue () - Specify the
  number of tuples to generate. This value only applies when
  creating general field data. In all other cases (i.e.,
  point data or cell data), the number of tuples is
  controlled by the number of points and cells,
  respectively.
* vtkIdType = obj.GetNumberOfTuplesMaxValue () - Specify the
  number of tuples to generate. This value only applies when
  creating general field data. In all other cases (i.e.,
  point data or cell data), the number of tuples is
  controlled by the number of points and cells,
  respectively.
* vtkIdType = obj.GetNumberOfTuples () - Specify the number
  of tuples to generate. This value only applies when
  creating general field data. In all other cases (i.e.,
  point data or cell data), the number of tuples is
  controlled by the number of points and cells,
  respectively.
* obj.SetGeneratePointScalars (int ) - Indicate that point
  scalars are to be generated. Note that the specified
  number of components is used to create the scalar.
* int = obj.GetGeneratePointScalars () - Indicate that point
  scalars are to be generated. Note that the specified
  number of components is used to create the scalar.
* obj.GeneratePointScalarsOn () - Indicate that point
  scalars are to be generated. Note that the specified
  number of components is used to create the scalar.
* obj.GeneratePointScalarsOff () - Indicate that point
  scalars are to be generated. Note that the specified
  number of components is used to create the scalar.
* obj.SetGeneratePointVectors (int ) - Indicate that point
  vectors are to be generated. Note that the number of
  components is always equal to three.
* int = obj.GetGeneratePointVectors () - Indicate that point
  vectors are to be generated. Note that the number of
  components is always equal to three.
* obj.GeneratePointVectorsOn () - Indicate that point
  vectors are to be generated. Note that the number of
  components is always equal to three.
* obj.GeneratePointVectorsOff () - Indicate that point
  vectors are to be generated. Note that the number of
  components is always equal to three.
* obj.SetGeneratePointNormals (int ) - Indicate that point
  normals are to be generated. Note that the number of
  components is always equal to three.
* int = obj.GetGeneratePointNormals () - Indicate that point
  normals are to be generated. Note that the number of
  components is always equal to three.
* obj.GeneratePointNormalsOn () - Indicate that point
  normals are to be generated. Note that the number of
  components is always equal to three.
* obj.GeneratePointNormalsOff () - Indicate that point
  normals are to be generated. Note that the number of
  components is always equal to three.
* obj.SetGeneratePointTensors (int ) - Indicate that point
  tensors are to be generated. Note that the number of
  components is always equal to nine.
* int = obj.GetGeneratePointTensors () - Indicate that point
  tensors are to be generated. Note that the number of
  components is always equal to nine.
* obj.GeneratePointTensorsOn () - Indicate that point
  tensors are to be generated. Note that the number of
  components is always equal to nine.
* obj.GeneratePointTensorsOff () - Indicate that point
  tensors are to be generated. Note that the number of
  components is always equal to nine.
* obj.SetGeneratePointTCoords (int ) - Indicate that point
  texture coordinates are to be generated. Note that the
  specified number of components is used to create the
  texture coordinates (but must range between one and
  three).
* int = obj.GetGeneratePointTCoords () - Indicate that point
  texture coordinates are to be generated. Note that the
  specified number of components is used to create the
  texture coordinates (but must range between one and
  three).
* obj.GeneratePointTCoordsOn () - Indicate that point
  texture coordinates are to be generated. Note that the
  specified number of components is used to create the
  texture coordinates (but must range between one and
  three).
* obj.GeneratePointTCoordsOff () - Indicate that point
  texture coordinates are to be generated. Note that the
  specified number of components is used to create the
  texture coordinates (but must range between one and
  three).
* obj.SetGeneratePointArray (int ) - Indicate that an
  arbitrary point array is to be generated. Note that the
  specified number of components is used to create the
  array.
* int = obj.GetGeneratePointArray () - Indicate that an
  arbitrary point array is to be generated. Note that the
  specified number of components is used to create the
  array.
* obj.GeneratePointArrayOn () - Indicate that an arbitrary
  point array is to be generated. Note that the specified
  number of components is used to create the array.
* obj.GeneratePointArrayOff () - Indicate that an arbitrary
  point array is to be generated. Note that the specified
  number of components is used to create the array.
* obj.SetGenerateCellScalars (int ) - Indicate that cell
  scalars are to be generated. Note that the specified
  number of components is used to create the scalar.
* int = obj.GetGenerateCellScalars () - Indicate that cell
  scalars are to be generated. Note that the specified
  number of components is used to create the scalar.
* obj.GenerateCellScalarsOn () - Indicate that cell scalars
  are to be generated. Note that the specified number of
  components is used to create the scalar.
* obj.GenerateCellScalarsOff () - Indicate that cell scalars
  are to be generated. Note that the specified number of
  components is used to create the scalar.
* obj.SetGenerateCellVectors (int ) - Indicate that cell
  vectors are to be generated. Note that the number of
  components is always equal to three.
* int = obj.GetGenerateCellVectors () - Indicate that cell
  vectors are to be generated. Note that the number of
  components is always equal to three.
* obj.GenerateCellVectorsOn () - Indicate that cell vectors
  are to be generated. Note that the number of components is
  always equal to three.
* obj.GenerateCellVectorsOff () - Indicate that cell vectors
  are to be generated. Note that the number of components is
  always equal to three.
* obj.SetGenerateCellNormals (int ) - Indicate that cell
  normals are to be generated. Note that the number of
  components is always equal to three.
* int = obj.GetGenerateCellNormals () - Indicate that cell
  normals are to be generated. Note that the number of
  components is always equal to three.
* obj.GenerateCellNormalsOn () - Indicate that cell normals
  are to be generated. Note that the number of components is
  always equal to three.
* obj.GenerateCellNormalsOff () - Indicate that cell normals
  are to be generated. Note that the number of components is
  always equal to three.
* obj.SetGenerateCellTensors (int ) - Indicate that cell
  tensors are to be generated. Note that the number of
  components is always equal to nine.
* int = obj.GetGenerateCellTensors () - Indicate that cell
  tensors are to be generated. Note that the number of
  components is always equal to nine.
* obj.GenerateCellTensorsOn () - Indicate that cell tensors
  are to be generated. Note that the number of components is
  always equal to nine.
* obj.GenerateCellTensorsOff () - Indicate that cell tensors
  are to be generated. Note that the number of components is
  always equal to nine.
* obj.SetGenerateCellTCoords (int ) - Indicate that cell
  texture coordinates are to be generated. Note that the
  specified number of components is used to create the
  texture coordinates (but must range between one and
  three).
* int = obj.GetGenerateCellTCoords () - Indicate that cell
  texture coordinates are to be generated. Note that the
  specified number of components is used to create the
  texture coordinates (but must range between one and
  three).
* obj.GenerateCellTCoordsOn () - Indicate that cell texture
  coordinates are to be generated. Note that the specified
  number of components is used to create the texture
  coordinates (but must range between one and three).
* obj.GenerateCellTCoordsOff () - Indicate that cell texture
  coordinates are to be generated. Note that the specified
  number of components is used to create the texture
  coordinates (but must range between one and three).
* obj.SetGenerateCellArray (int ) - Indicate that an
  arbitrary cell array is to be generated. Note that the
  specified number of components is used to create the
  array.
* int = obj.GetGenerateCellArray () - Indicate that an
  arbitrary cell array is to be generated. Note that the
  specified number of components is used to create the
  array.
* obj.GenerateCellArrayOn () - Indicate that an arbitrary
  cell array is to be generated. Note that the specified
  number of components is used to create the array.
* obj.GenerateCellArrayOff () - Indicate that an arbitrary
  cell array is to be generated. Note that the specified
  number of components is used to create the array.
* obj.SetGenerateFieldArray (int ) - Indicate that an
  arbitrary field data array is to be generated. Note that
  the specified number of components is used to create the
  scalar.
* int = obj.GetGenerateFieldArray () - Indicate that an
  arbitrary field data array is to be generated. Note that
  the specified number of components is used to create the
  scalar.
* obj.GenerateFieldArrayOn () - Indicate that an arbitrary
  field data array is to be generated. Note that the
  specified number of components is used to create the
  scalar.
* obj.GenerateFieldArrayOff () - Indicate that an arbitrary
  field data array is to be generated. Note that the
  specified number of components is used to create the
  scalar.
* obj.GenerateAllPointDataOn () - Convenience methods for
  generating data: all data, all point data, or all cell
  data. For example, if all data is enabled, then all point,
  cell and field data is generated. If all point data is
  enabled, then point scalars, vectors, normals, tensors,
  tcoords, and a data array are produced.
* obj.GenerateAllPointDataOff () - Convenience methods for
  generating data: all data, all point data, or all cell
  data. For example, if all data is enabled, then all point,
  cell and field data is generated. If all point data is
  enabled, then point scalars, vectors, normals, tensors,
  tcoords, and a data array are produced.
* obj.GenerateAllCellDataOn () - Convenience methods for
  generating data: all data, all point data, or all cell
  data. For example, if all data is enabled, then all point,
  cell and field data is generated. If all point data is
  enabled, then point scalars, vectors, normals, tensors,
  tcoords, and a data array are produced.
* obj.GenerateAllCellDataOff () - Convenience methods for
  generating data: all data, all point data, or all cell
  data. For example, if all data is enabled, then all point,
  cell and field data is generated. If all point data is
  enabled, then point scalars, vectors, normals, tensors,
  tcoords, and a data array are produced.
* obj.GenerateAllDataOn () - Convenience methods for
  generating data: all data, all point data, or all cell
  data. For example, if all data is enabled, then all point,
  cell and field data is generated. If all point data is
  enabled, then point scalars, vectors, normals, tensors,
  tcoords, and a data array are produced.
* obj.GenerateAllDataOff ()


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

