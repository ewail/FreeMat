
 Usage

vtkParallelRenderManager operates in multiple processes. It
provides proper renderers and render windows for performing
the parallel rendering correctly. It can also attach itself
to render windows and propagate rendering events and camera
views.
.SECTION Note: Many parallel rendering schemes do not
correctly handle transparency. Unless otherwise documented,
assume a sub class does not.
.SECTION ToDo: Synchronization/barrier primitives.
Query ranges of scalar values of objects in addition to the
boundry in three-space
To create an instance of class vtkParallelRenderManager,
simply invoke its constructor as follows

    obj = vtkParallelRenderManager



 Methods

The class vtkParallelRenderManager has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkParallelRenderManager class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkParallelRenderManager = obj.NewInstance ()
* vtkParallelRenderManager = obj.SafeDownCast (vtkObject o)
* vtkRenderWindow = obj.MakeRenderWindow () - Builds a
  vtkRenderWindow compatible with this render manager. The
  user program is responsible for registering the render
  window with the SetRenderWindow method and calling Delete.
  It is not advisable to use a parallel render manager with
  a render window that was not built with this method.
* vtkRenderer = obj.MakeRenderer () - Builds a vtkRenderer
  compatible with this render manager. (Should we also
  register it?) The user program is responsible for calling
  Delete. It is not advisable to use a parallel render
  manager with a renderer that was not built with this
  method.
* vtkRenderWindow = obj.GetRenderWindow () - Set/Get the
  RenderWindow to use for compositing. We add a start and
  end observer to the window.
* obj.SetRenderWindow (vtkRenderWindow renWin) - Set/Get the
  RenderWindow to use for compositing. We add a start and
  end observer to the window.
* vtkMultiProcessController = obj.GetController () - Set/Get
  the vtkMultiProcessController which will handle
  communications for the parallel rendering.
* obj.SetController (vtkMultiProcessController controller) -
  Set/Get the vtkMultiProcessController which will handle
  communications for the parallel rendering.
* obj.InitializePieces () - This method sets the piece and
  number of pieces for each actor with a polydata mapper.
* obj.InitializeOffScreen () - Make all rendering windows
  not viewable set as off screen rendering. To make all
  renderwindows on screen rendering again, call
  OffScreenRenderingOff on all the render windows. This
  class assumes the window on root node is the only one
  viewable. Subclasses should change this as necessary.
* obj.StartInteractor () - Initializes the RMIs and then, if
  on root node, starts the interactor on the attached render
  window. Otherwise, starts processing RMIs. When the
  interactor returns, it breaks the RMI listening on all
  other processors.
* obj.StartServices () - If on node other than root, starts
  serving RMI requests for parallel renders.
* obj.StopServices () - If on root node, stops the RMI
  processing on all service nodes.
* obj.StartRender () - Callbacks that initialize and finish
  rendering and other tasks.
* obj.EndRender () - Callbacks that initialize and finish
  rendering and other tasks.
* obj.SatelliteStartRender () - Callbacks that initialize
  and finish rendering and other tasks.
* obj.SatelliteEndRender () - Callbacks that initialize and
  finish rendering and other tasks.
* obj.RenderRMI () - Callbacks that initialize and finish
  rendering and other tasks.
* obj.ResetCamera (vtkRenderer ren) - Callbacks that
  initialize and finish rendering and other tasks.
* obj.ResetCameraClippingRange (vtkRenderer ren) - Callbacks
  that initialize and finish rendering and other tasks.
* obj.ComputeVisiblePropBoundsRMI (int renderId) - Callbacks
  that initialize and finish rendering and other tasks.
* obj.InitializeRMIs ()
* obj.ResetAllCameras () - Resets the camera of each
  renderer contained in the RenderWindow. Should only be
  called in the "root" process, and all remote processes
  must be processing RMIs for this method to complete.
* obj.ComputeVisiblePropBounds (vtkRenderer ren, double
  bounds[6]) - Calculates the bounds by gathering
  information from all processes.
* obj.SetParallelRendering (int ) - Turns on/off parallel
  rendering. When on (the default) the object responds to
  render events of the attached window, propagates the
  render event to other processors, and otherwise enables
  the parallel rendering process.
* int = obj.GetParallelRendering () - Turns on/off parallel
  rendering. When on (the default) the object responds to
  render events of the attached window, propagates the
  render event to other processors, and otherwise enables
  the parallel rendering process.
* obj.ParallelRenderingOn () - Turns on/off parallel
  rendering. When on (the default) the object responds to
  render events of the attached window, propagates the
  render event to other processors, and otherwise enables
  the parallel rendering process.
* obj.ParallelRenderingOff () - Turns on/off parallel
  rendering. When on (the default) the object responds to
  render events of the attached window, propagates the
  render event to other processors, and otherwise enables
  the parallel rendering process.
* obj.SetRenderEventPropagation (int ) - Turns on/off render
  event propagation. When on (the default) and
  ParallelRendering is on, process 0 will send an RMI call
  to all remote processes to perform a synchronized render.
  When off, render must be manually called on each process.
* int = obj.GetRenderEventPropagation () - Turns on/off
  render event propagation. When on (the default) and
  ParallelRendering is on, process 0 will send an RMI call
  to all remote processes to perform a synchronized render.
  When off, render must be manually called on each process.
* obj.RenderEventPropagationOn () - Turns on/off render
  event propagation. When on (the default) and
  ParallelRendering is on, process 0 will send an RMI call
  to all remote processes to perform a synchronized render.
  When off, render must be manually called on each process.
* obj.RenderEventPropagationOff () - Turns on/off render
  event propagation. When on (the default) and
  ParallelRendering is on, process 0 will send an RMI call
  to all remote processes to perform a synchronized render.
  When off, render must be manually called on each process.
* obj.SetUseCompositing (int ) - This is used for tiled
  display rendering. When data has been duplicated on all
  processes, then we do not need to compositing. Cameras and
  renders are still propagated though.
* int = obj.GetUseCompositing () - This is used for tiled
  display rendering. When data has been duplicated on all
  processes, then we do not need to compositing. Cameras and
  renders are still propagated though.
* obj.UseCompositingOn () - This is used for tiled display
  rendering. When data has been duplicated on all processes,
  then we do not need to compositing. Cameras and renders
  are still propagated though.
* obj.UseCompositingOff () - This is used for tiled display
  rendering. When data has been duplicated on all processes,
  then we do not need to compositing. Cameras and renders
  are still propagated though.
* obj.SetImageReductionFactor (double factor) - Set/Get the
  reduction factor (for sort-last based parallel renderers).
  The size of rendered image is divided by the reduction
  factor and then is blown up to the size of the current
  vtkRenderWindow. Setting higher reduction factors enables
  shorter image transfer times (which is often the
  bottleneck) but will greatly reduce image quality. A
  reduction factor of 2 or greater should only be used for
  intermediate images in interactive applications. A
  reduction factor of 1 (or less) will result in no change
  in image quality. A parallel render manager may ignore the
  image reduction factor if it will result in little or no
  performance enhancements (eg. it does not do image space
  manipulations).
* double = obj.GetImageReductionFactor () - Set/Get the
  reduction factor (for sort-last based parallel renderers).
  The size of rendered image is divided by the reduction
  factor and then is blown up to the size of the current
  vtkRenderWindow. Setting higher reduction factors enables
  shorter image transfer times (which is often the
  bottleneck) but will greatly reduce image quality. A
  reduction factor of 2 or greater should only be used for
  intermediate images in interactive applications. A
  reduction factor of 1 (or less) will result in no change
  in image quality. A parallel render manager may ignore the
  image reduction factor if it will result in little or no
  performance enhancements (eg. it does not do image space
  manipulations).
* obj.SetMaxImageReductionFactor (double )
* double = obj.GetMaxImageReductionFactor ()
* obj.SetImageReductionFactorForUpdateRate (double
  DesiredUpdateRate) - Sets the ReductionFactor based on the
  given desired update rate and the rendering metrics taken
  from the last time UpdateServerInfo was called. Note that
  if AutoReductionFactor is on, this function is called with
  the desired update rate of the render window
  automatically.
* obj.SetAutoImageReductionFactor (int ) - If on, the
  ReductionFactor is automatically adjusted to best meet the
  the DesiredUpdateRate in the current RenderWindow based on
  metrics from the last render.
* int = obj.GetAutoImageReductionFactor () - If on, the
  ReductionFactor is automatically adjusted to best meet the
  the DesiredUpdateRate in the current RenderWindow based on
  metrics from the last render.
* obj.AutoImageReductionFactorOn () - If on, the
  ReductionFactor is automatically adjusted to best meet the
  the DesiredUpdateRate in the current RenderWindow based on
  metrics from the last render.
* obj.AutoImageReductionFactorOff () - If on, the
  ReductionFactor is automatically adjusted to best meet the
  the DesiredUpdateRate in the current RenderWindow based on
  metrics from the last render.
* double = obj.GetRenderTime () - Get rendering metrics.
* double = obj.GetImageProcessingTime () - Get rendering
  metrics.
* int = obj.GetSyncRenderWindowRenderers () - By default,
  the state of all renderers in the root's render window is
  propagated to the rest of the processes. In order for this
  to work, all render windows must have the same renderers
  in the same order. If this is not the case, you can turn
  off the SyncRenderWindowRenderers. When this flag is off,
  the list of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.SetSyncRenderWindowRenderers (int ) - By default, the
  state of all renderers in the root's render window is
  propagated to the rest of the processes. In order for this
  to work, all render windows must have the same renderers
  in the same order. If this is not the case, you can turn
  off the SyncRenderWindowRenderers. When this flag is off,
  the list of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.SyncRenderWindowRenderersOn () - By default, the state
  of all renderers in the root's render window is propagated
  to the rest of the processes. In order for this to work,
  all render windows must have the same renderers in the
  same order. If this is not the case, you can turn off the
  SyncRenderWindowRenderers. When this flag is off, the list
  of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.SyncRenderWindowRenderersOff () - By default, the
  state of all renderers in the root's render window is
  propagated to the rest of the processes. In order for this
  to work, all render windows must have the same renderers
  in the same order. If this is not the case, you can turn
  off the SyncRenderWindowRenderers. When this flag is off,
  the list of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.AddRenderer (vtkRenderer ) - By default, the state of
  all renderers in the root's render window is propagated to
  the rest of the processes. In order for this to work, all
  render windows must have the same renderers in the same
  order. If this is not the case, you can turn off the
  SyncRenderWindowRenderers. When this flag is off, the list
  of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.RemoveRenderer (vtkRenderer ) - By default, the state
  of all renderers in the root's render window is propagated
  to the rest of the processes. In order for this to work,
  all render windows must have the same renderers in the
  same order. If this is not the case, you can turn off the
  SyncRenderWindowRenderers. When this flag is off, the list
  of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.RemoveAllRenderers () - By default, the state of all
  renderers in the root's render window is propagated to the
  rest of the processes. In order for this to work, all
  render windows must have the same renderers in the same
  order. If this is not the case, you can turn off the
  SyncRenderWindowRenderers. When this flag is off, the list
  of renderers held by this parallel render manager
  (initially empty) is synced. You can modify the list of
  renderers with the AddRenderer, RemoveRenderer, and
  RemoveAllRenderers methods.
* obj.SetWriteBackImages (int ) - If on (the default), the
  result of any image space manipulations are written back
  to the render window frame buffer. If off, the image
  stored in the frame buffer may not be correct. Either way,
  the correct frame buffer images may be read with
  vtkParallelRenderManager::GetPixelData. Turning
  WriteBackImages off may result in a speedup if the render
  window is not visible to the user and images are read back
  for further processing or transit.
* int = obj.GetWriteBackImages () - If on (the default), the
  result of any image space manipulations are written back
  to the render window frame buffer. If off, the image
  stored in the frame buffer may not be correct. Either way,
  the correct frame buffer images may be read with
  vtkParallelRenderManager::GetPixelData. Turning
  WriteBackImages off may result in a speedup if the render
  window is not visible to the user and images are read back
  for further processing or transit.
* obj.WriteBackImagesOn () - If on (the default), the result
  of any image space manipulations are written back to the
  render window frame buffer. If off, the image stored in
  the frame buffer may not be correct. Either way, the
  correct frame buffer images may be read with
  vtkParallelRenderManager::GetPixelData. Turning
  WriteBackImages off may result in a speedup if the render
  window is not visible to the user and images are read back
  for further processing or transit.
* obj.WriteBackImagesOff () - If on (the default), the
  result of any image space manipulations are written back
  to the render window frame buffer. If off, the image
  stored in the frame buffer may not be correct. Either way,
  the correct frame buffer images may be read with
  vtkParallelRenderManager::GetPixelData. Turning
  WriteBackImages off may result in a speedup if the render
  window is not visible to the user and images are read back
  for further processing or transit.
* obj.SetMagnifyImages (int ) - If on (the default), when
  the ImageReductionFactor is greater than 1 and
  WriteBackImages is on, the image will be magnified to fill
  the entire render window.
* int = obj.GetMagnifyImages () - If on (the default), when
  the ImageReductionFactor is greater than 1 and
  WriteBackImages is on, the image will be magnified to fill
  the entire render window.
* obj.MagnifyImagesOn () - If on (the default), when the
  ImageReductionFactor is greater than 1 and WriteBackImages
  is on, the image will be magnified to fill the entire
  render window.
* obj.MagnifyImagesOff () - If on (the default), when the
  ImageReductionFactor is greater than 1 and WriteBackImages
  is on, the image will be magnified to fill the entire
  render window.
* obj.SetMagnifyImageMethod (int method) - Sets the method
  used to magnify images. Nearest simply replicates each
  pixel enough times to fill the image. Linear performs
  linear interpolation between the pixels.
* int = obj.GetMagnifyImageMethod () - Sets the method used
  to magnify images. Nearest simply replicates each pixel
  enough times to fill the image. Linear performs linear
  interpolation between the pixels.
* obj.SetMagnifyImageMethodToNearest () - Sets the method
  used to magnify images. Nearest simply replicates each
  pixel enough times to fill the image. Linear performs
  linear interpolation between the pixels.
* obj.SetMagnifyImageMethodToLinear () - Convenience
  functions for magnifying images.
* obj.MagnifyImage (vtkUnsignedCharArray fullImage, int
  fullImageSize[2], vtkUnsignedCharArray reducedImage, int
  reducedImageSize[2], int fullImageViewport[4]NULL, int
  reducedImageViewport[4]NULL) - Convenience functions for
  magnifying images.
* obj.GetPixelData (vtkUnsignedCharArray data) - The most
  appropriate way to retrieve full size image data after a
  render. Will work regardless of whether WriteBackImages or
  MagnifyImage is on or off. The data returned may be a
  shallow copy of an internal array. Therefore, the data may
  be invalid after the next render or if the
  ParallelRenderManager is destroyed.
* obj.GetPixelData (int x1, int y1, int x2, int y2,
  vtkUnsignedCharArray data) - The most appropriate way to
  retrieve full size image data after a render. Will work
  regardless of whether WriteBackImages or MagnifyImage is
  on or off. The data returned may be a shallow copy of an
  internal array. Therefore, the data may be invalid after
  the next render or if the ParallelRenderManager is
  destroyed.
* obj.GetReducedPixelData (vtkUnsignedCharArray data) - The
  most appropriate way to retrieve reduced size image data
  after a render. Will work regardless of whether
  WriteBackImages or MagnifyImage is on or off. The data
  returned may be a shallow copy of an internal array.
  Therefore, the data may be invalid after the next render
  or if the ParallelRenderManager is destroyed.
* obj.GetReducedPixelData (int x1, int y1, int x2, int y2,
  vtkUnsignedCharArray data) - The most appropriate way to
  retrieve reduced size image data after a render. Will work
  regardless of whether WriteBackImages or MagnifyImage is
  on or off. The data returned may be a shallow copy of an
  internal array. Therefore, the data may be invalid after
  the next render or if the ParallelRenderManager is
  destroyed.
* int = obj. GetFullImageSize () - Returns the full image
  size calculated at the last render.
* int = obj. GetReducedImageSize () - Returns the reduced
  image size calculated at the last render.
* obj.TileWindows (int xsize, int ysize, int nColumns) -
  Given the x and y size of the render windows, reposition
  them in a tile of n columns.
* obj.SetUseRGBA (int ) - Get/Set if all Images must use
  RGBA instead of RGB. By default, this flag is on.
* int = obj.GetUseRGBA () - Get/Set if all Images must use
  RGBA instead of RGB. By default, this flag is on.
* obj.SetForceRenderWindowSize (int ) - If
  ForceRenderWindowSize is set to true, the render manager
  will use the RenderWindowSize ivar instead of getting the
  size from the render window.
* int = obj.GetForceRenderWindowSize () - If
  ForceRenderWindowSize is set to true, the render manager
  will use the RenderWindowSize ivar instead of getting the
  size from the render window.
* obj.SetForcedRenderWindowSize (int , int ) - If
  ForceRenderWindowSize is set to true, the render manager
  will use the Size ivar instead of getting the size from
  the render window.
* obj.SetForcedRenderWindowSize (int a[2]) - If
  ForceRenderWindowSize is set to true, the render manager
  will use the Size ivar instead of getting the size from
  the render window.
* int = obj. GetForcedRenderWindowSize () - If
  ForceRenderWindowSize is set to true, the render manager
  will use the Size ivar instead of getting the size from
  the render window.
* obj.StartService () -


* FreeMat_Documentation
* Visualization_Toolkit_Parallel_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

