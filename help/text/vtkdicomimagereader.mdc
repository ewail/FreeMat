
 Usage

DICOM (stands for Digital Imaging in COmmunications and
Medicine) is a medical image file format widely used to
exchange data, provided by various modalities. .SECTION
Warnings This reader might eventually handle ACR-NEMA file
(predecessor of the DICOM format for medical images). This
reader does not handle encapsulated format, only plain raw
file are handled. This reader also does not handle multi-
frames DICOM datasets. .SECTION Warnings Internally
DICOMParser assumes the x,y pixel spacing is stored in
0028,0030 and that z spacing is stored in Slice Thickness
(correct only when slice were acquired contiguous):
0018,0050. Which means this is only valid for some rare MR
Image Storage
To create an instance of class vtkDICOMImageReader, simply
invoke its constructor as follows

    obj = vtkDICOMImageReader



 Methods

The class vtkDICOMImageReader has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkDICOMImageReader class.

* string = obj.GetClassName () - Static method for
  construction.
* int = obj.IsA (string name) - Static method for
  construction.
* vtkDICOMImageReader = obj.NewInstance () - Static method
  for construction.
* vtkDICOMImageReader = obj.SafeDownCast (vtkObject o) -
  Static method for construction.
* obj.SetFileName (string fn) - Set the directory name for
  the reader to look in for DICOM files. If this method is
  used, the reader will try to find all the DICOM files in a
  directory. It will select the subset corresponding to the
  first series UID it stumbles across and it will try to
  build an ordered volume from them based on the slice
  number. The volume building will be upgraded to something
  more sophisticated in the future.
* obj.SetDirectoryName (string dn) - Set the directory name
  for the reader to look in for DICOM files. If this method
  is used, the reader will try to find all the DICOM files
  in a directory. It will select the subset corresponding to
  the first series UID it stumbles across and it will try to
  build an ordered volume from them based on the slice
  number. The volume building will be upgraded to something
  more sophisticated in the future.
* string = obj.GetDirectoryName () - Returns the directory
  name.
* double = obj.GetPixelSpacing () - Returns the pixel
  spacing (in X, Y, Z). Note: if there is only one slice,
  the Z spacing is set to the slice thickness. If there is
  more than one slice, it is set to the distance between the
  first two slices.
* int = obj.GetWidth () - Returns the image width.
* int = obj.GetHeight () - Returns the image height.
* float = obj.GetImagePositionPatient () - Get the (DICOM)
  x,y,z coordinates of the first pixel in the image (upper
  left hand corner) of the last image processed by the
  DICOMParser
* float = obj.GetImageOrientationPatient () - Get the
  (DICOM) directions cosines. It consist of the components
  of the first two vectors. The third vector needs to be
  computed to form an orthonormal basis.
* int = obj.GetBitsAllocated () - Get the number of bits
  allocated for each pixel in the file.
* int = obj.GetPixelRepresentation () - Get the pixel
  representation of the last image processed by the
  DICOMParser. A zero is a unsigned quantity. A one
  indicates a signed quantity
* int = obj.GetNumberOfComponents () - Get the number of
  components of the image data for the last image processed.
* string = obj.GetTransferSyntaxUID () - Get the transfer
  syntax UID for the last image processed.
* float = obj.GetRescaleSlope () - Get the rescale slope for
  the pixel data.
* float = obj.GetRescaleOffset () - Get the rescale offset
  for the pixel data.
* string = obj.GetPatientName () - Get the patient name for
  the last image processed.
* string = obj.GetStudyUID () - Get the study uid for the
  last image processed.
* string = obj.GetStudyID () - Get the Study ID for the last
  image processed.
* float = obj.GetGantryAngle () - Get the gantry angle for
  the last image processed.
* int = obj.CanReadFile (string fname)
* string = obj.GetFileExtensions () - Return a descriptive
  name for the file format that might be useful in a GUI.
* string = obj.GetDescriptiveName ()


* FreeMat_Documentation
* Visualization_Toolkit_IO_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

