
 Usage

vtkThreshold is a filter that extracts cells from any
dataset type that satisfy a threshold criterion. A cell
satisfies the criterion if the scalar value of (every or
any) point satisfies the criterion. The criterion can take
three forms: 1) greater than a particular value; 2) less
than a particular value; or 3) between two values. The
output of this filter is an unstructured grid.
Note that scalar values are available from the point and
cell attribute data. By default, point data is used to
obtain scalars, but you can control this behavior. See the
AttributeMode ivar below.
By default only the first scalar value is used in the
decision. Use the ComponentMode and SelectedComponent ivars
to control this behavior.
To create an instance of class vtkThreshold, simply invoke
its constructor as follows

    obj = vtkThreshold



 Methods

The class vtkThreshold has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkThreshold class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkThreshold = obj.NewInstance ()
* vtkThreshold = obj.SafeDownCast (vtkObject o)
* obj.ThresholdByLower (double lower) - Criterion is cells
  whose scalars are less or equal to lower threshold.
* obj.ThresholdByUpper (double upper) - Criterion is cells
  whose scalars are greater or equal to upper threshold.
* obj.ThresholdBetween (double lower, double upper) -
  Criterion is cells whose scalars are between lower and
  upper thresholds (inclusive of the end values).
* double = obj.GetUpperThreshold () - Get the Upper and
  Lower thresholds.
* double = obj.GetLowerThreshold () - Get the Upper and
  Lower thresholds.
* obj.SetAttributeMode (int ) - Control how the filter works
  with scalar point data and cell attribute data. By default
  (AttributeModeToDefault), the filter will use point data,
  and if no point data is available, then cell data is used.
  Alternatively you can explicitly set the filter to use
  point data (AttributeModeToUsePointData) or cell data
  (AttributeModeToUseCellData).
* int = obj.GetAttributeMode () - Control how the filter
  works with scalar point data and cell attribute data. By
  default (AttributeModeToDefault), the filter will use
  point data, and if no point data is available, then cell
  data is used. Alternatively you can explicitly set the
  filter to use point data (AttributeModeToUsePointData) or
  cell data (AttributeModeToUseCellData).
* obj.SetAttributeModeToDefault () - Control how the filter
  works with scalar point data and cell attribute data. By
  default (AttributeModeToDefault), the filter will use
  point data, and if no point data is available, then cell
  data is used. Alternatively you can explicitly set the
  filter to use point data (AttributeModeToUsePointData) or
  cell data (AttributeModeToUseCellData).
* obj.SetAttributeModeToUsePointData () - Control how the
  filter works with scalar point data and cell attribute
  data. By default (AttributeModeToDefault), the filter will
  use point data, and if no point data is available, then
  cell data is used. Alternatively you can explicitly set
  the filter to use point data (AttributeModeToUsePointData)
  or cell data (AttributeModeToUseCellData).
* obj.SetAttributeModeToUseCellData () - Control how the
  filter works with scalar point data and cell attribute
  data. By default (AttributeModeToDefault), the filter will
  use point data, and if no point data is available, then
  cell data is used. Alternatively you can explicitly set
  the filter to use point data (AttributeModeToUsePointData)
  or cell data (AttributeModeToUseCellData).
* string = obj.GetAttributeModeAsString () - Control how the
  filter works with scalar point data and cell attribute
  data. By default (AttributeModeToDefault), the filter will
  use point data, and if no point data is available, then
  cell data is used. Alternatively you can explicitly set
  the filter to use point data (AttributeModeToUsePointData)
  or cell data (AttributeModeToUseCellData).
* obj.SetComponentMode (int ) - Control how the decision of
  in / out is made with multi-component data. The choices
  are to use the selected component (specified in the
  SelectedComponent ivar), or to look at all components.
  When looking at all components, the evaluation can pass if
  all the components satisfy the rule (UseAll) or if any
  satisfy is (UseAny). The default value is UseSelected.
* int = obj.GetComponentModeMinValue () - Control how the
  decision of in / out is made with multi-component data.
  The choices are to use the selected component (specified
  in the SelectedComponent ivar), or to look at all
  components. When looking at all components, the evaluation
  can pass if all the components satisfy the rule (UseAll)
  or if any satisfy is (UseAny). The default value is
  UseSelected.
* int = obj.GetComponentModeMaxValue () - Control how the
  decision of in / out is made with multi-component data.
  The choices are to use the selected component (specified
  in the SelectedComponent ivar), or to look at all
  components. When looking at all components, the evaluation
  can pass if all the components satisfy the rule (UseAll)
  or if any satisfy is (UseAny). The default value is
  UseSelected.
* int = obj.GetComponentMode () - Control how the decision
  of in / out is made with multi-component data. The choices
  are to use the selected component (specified in the
  SelectedComponent ivar), or to look at all components.
  When looking at all components, the evaluation can pass if
  all the components satisfy the rule (UseAll) or if any
  satisfy is (UseAny). The default value is UseSelected.
* obj.SetComponentModeToUseSelected () - Control how the
  decision of in / out is made with multi-component data.
  The choices are to use the selected component (specified
  in the SelectedComponent ivar), or to look at all
  components. When looking at all components, the evaluation
  can pass if all the components satisfy the rule (UseAll)
  or if any satisfy is (UseAny). The default value is
  UseSelected.
* obj.SetComponentModeToUseAll () - Control how the decision
  of in / out is made with multi-component data. The choices
  are to use the selected component (specified in the
  SelectedComponent ivar), or to look at all components.
  When looking at all components, the evaluation can pass if
  all the components satisfy the rule (UseAll) or if any
  satisfy is (UseAny). The default value is UseSelected.
* obj.SetComponentModeToUseAny () - Control how the decision
  of in / out is made with multi-component data. The choices
  are to use the selected component (specified in the
  SelectedComponent ivar), or to look at all components.
  When looking at all components, the evaluation can pass if
  all the components satisfy the rule (UseAll) or if any
  satisfy is (UseAny). The default value is UseSelected.
* string = obj.GetComponentModeAsString () - Control how the
  decision of in / out is made with multi-component data.
  The choices are to use the selected component (specified
  in the SelectedComponent ivar), or to look at all
  components. When looking at all components, the evaluation
  can pass if all the components satisfy the rule (UseAll)
  or if any satisfy is (UseAny). The default value is
  UseSelected.
* obj.SetSelectedComponent (int ) - When the component mode
  is UseSelected, this ivar indicated the selected
  component. The default value is 0.
* int = obj.GetSelectedComponentMinValue () - When the
  component mode is UseSelected, this ivar indicated the
  selected component. The default value is 0.
* int = obj.GetSelectedComponentMaxValue () - When the
  component mode is UseSelected, this ivar indicated the
  selected component. The default value is 0.
* int = obj.GetSelectedComponent () - When the component
  mode is UseSelected, this ivar indicated the selected
  component. The default value is 0.
* obj.SetAllScalars (int ) - If using scalars from point
  data, all scalars for all points in a cell must satisfy
  the threshold criterion if AllScalars is set. Otherwise,
  just a single scalar value satisfying the threshold
  criterion enables will extract the cell.
* int = obj.GetAllScalars () - If using scalars from point
  data, all scalars for all points in a cell must satisfy
  the threshold criterion if AllScalars is set. Otherwise,
  just a single scalar value satisfying the threshold
  criterion enables will extract the cell.
* obj.AllScalarsOn () - If using scalars from point data,
  all scalars for all points in a cell must satisfy the
  threshold criterion if AllScalars is set. Otherwise, just
  a single scalar value satisfying the threshold criterion
  enables will extract the cell.
* obj.AllScalarsOff () - If using scalars from point data,
  all scalars for all points in a cell must satisfy the
  threshold criterion if AllScalars is set. Otherwise, just
  a single scalar value satisfying the threshold criterion
  enables will extract the cell.
* obj.SetPointsDataTypeToDouble () - Set the data type of
  the output points (See the data types defined in
  vtkType.h). The default data type is float.
* obj.SetPointsDataTypeToFloat () - Set the data type of the
  output points (See the data types defined in vtkType.h).
  The default data type is float.
* obj.SetPointsDataType (int ) - Set the data type of the
  output points (See the data types defined in vtkType.h).
  The default data type is float.
* int = obj.GetPointsDataType () - Set the data type of the
  output points (See the data types defined in vtkType.h).
  The default data type is float.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

