
 Usage

Assigns points to the nodes of a tree in either a standard
or radial layout. The standard layout places each level on a
horizontal line, while the radial layout places each level
on a concentric circle. You may specify the sweep angle of
the tree which constrains the tree to be contained within a
wedge. Also, you may indicate the log scale of the tree,
which diminishes the length of arcs at lower levels of the
tree. Values near zero give a large proportion of the space
to the tree levels near the root, while values near one give
nearly equal proportions of space to all tree levels.
The user may also specify an array to use to indicate the
distance from the root, either vertically (for standard
layout) or radially (for radial layout). You specify this
with SetDistanceArrayName().
To create an instance of class vtkTreeLayoutStrategy, simply
invoke its constructor as follows

    obj = vtkTreeLayoutStrategy



 Methods

The class vtkTreeLayoutStrategy has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkTreeLayoutStrategy class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkTreeLayoutStrategy = obj.NewInstance ()
* vtkTreeLayoutStrategy = obj.SafeDownCast (vtkObject o)
* obj.Layout () - Perform the tree layout.
* obj.SetAngle (double ) - The sweep angle of the tree. For
  a standard tree layout, this should be between 0 and 180.
  For a radial tree layout, this can be between 0 and 360.
* double = obj.GetAngleMinValue () - The sweep angle of the
  tree. For a standard tree layout, this should be between 0
  and 180. For a radial tree layout, this can be between 0
  and 360.
* double = obj.GetAngleMaxValue () - The sweep angle of the
  tree. For a standard tree layout, this should be between 0
  and 180. For a radial tree layout, this can be between 0
  and 360.
* double = obj.GetAngle () - The sweep angle of the tree.
  For a standard tree layout, this should be between 0 and
  180. For a radial tree layout, this can be between 0 and
  360.
* obj.SetRadial (bool ) - If set, the tree is laid out with
  levels on concentric circles around the root. If unset
  (default), the tree is laid out with levels on horizontal
  lines.
* bool = obj.GetRadial () - If set, the tree is laid out
  with levels on concentric circles around the root. If
  unset (default), the tree is laid out with levels on
  horizontal lines.
* obj.RadialOn () - If set, the tree is laid out with levels
  on concentric circles around the root. If unset (default),
  the tree is laid out with levels on horizontal lines.
* obj.RadialOff () - If set, the tree is laid out with
  levels on concentric circles around the root. If unset
  (default), the tree is laid out with levels on horizontal
  lines.
* obj.SetLogSpacingValue (double ) - The spacing of tree
  levels. Levels near zero give more space to levels near
  the root, while levels near one (the default) create
  evenly-spaced levels. Levels above one give more space to
  levels near the leaves.
* double = obj.GetLogSpacingValue () - The spacing of tree
  levels. Levels near zero give more space to levels near
  the root, while levels near one (the default) create
  evenly-spaced levels. Levels above one give more space to
  levels near the leaves.
* obj.SetLeafSpacing (double ) - The spacing of leaves.
  Levels near one evenly space leaves with no gaps between
  subtrees. Levels near zero creates large gaps between
  subtrees.
* double = obj.GetLeafSpacingMinValue () - The spacing of
  leaves. Levels near one evenly space leaves with no gaps
  between subtrees. Levels near zero creates large gaps
  between subtrees.
* double = obj.GetLeafSpacingMaxValue () - The spacing of
  leaves. Levels near one evenly space leaves with no gaps
  between subtrees. Levels near zero creates large gaps
  between subtrees.
* double = obj.GetLeafSpacing () - The spacing of leaves.
  Levels near one evenly space leaves with no gaps between
  subtrees. Levels near zero creates large gaps between
  subtrees.
* obj.SetDistanceArrayName (string ) - Get/Set the array to
  use to determine the distance from the root.
* string = obj.GetDistanceArrayName () - Get/Set the array
  to use to determine the distance from the root.


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

