
 Usage

This is an annotation object that manages four text actors /
mappers to provide annotation in the four corners of a
viewport
To create an instance of class vtkCornerAnnotation, simply
invoke its constructor as follows

    obj = vtkCornerAnnotation



 Methods

The class vtkCornerAnnotation has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkCornerAnnotation class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCornerAnnotation = obj.NewInstance ()
* vtkCornerAnnotation = obj.SafeDownCast (vtkObject o)
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Draw the scalar bar and annotation text to the screen.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  ) - Draw the scalar bar and annotation text to the screen.
* int = obj.RenderOverlay (vtkViewport viewport) - Draw the
  scalar bar and annotation text to the screen.
* int = obj.HasTranslucentPolygonalGeometry () - Does this
  prop have some translucent polygonal geometry?
* obj.SetMaximumLineHeight (double ) - Set/Get the maximum
  height of a line of text as a percentage of the vertical
  area allocated to this scaled text actor. Defaults to 1.0
* double = obj.GetMaximumLineHeight () - Set/Get the maximum
  height of a line of text as a percentage of the vertical
  area allocated to this scaled text actor. Defaults to 1.0
* obj.SetMinimumFontSize (int ) - Set/Get the minimum/
  maximum size font that will be shown. If the font drops
  below the minimum size it will not be rendered.
* int = obj.GetMinimumFontSize () - Set/Get the minimum/
  maximum size font that will be shown. If the font drops
  below the minimum size it will not be rendered.
* obj.SetMaximumFontSize (int ) - Set/Get the minimum/
  maximum size font that will be shown. If the font drops
  below the minimum size it will not be rendered.
* int = obj.GetMaximumFontSize () - Set/Get the minimum/
  maximum size font that will be shown. If the font drops
  below the minimum size it will not be rendered.
* obj.SetLinearFontScaleFactor (double ) - Set/Get font
  scaling factors The font size, f, is calculated as the
  largest possible value such that the annotations for the
  given viewport do not overlap. This font size is scaled
  non-linearly with the viewport size, to maintain an
  acceptable readable size at larger viewport sizes, without
  being too big. f' = linearScale * pow(f,nonlinearScale)
* double = obj.GetLinearFontScaleFactor () - Set/Get font
  scaling factors The font size, f, is calculated as the
  largest possible value such that the annotations for the
  given viewport do not overlap. This font size is scaled
  non-linearly with the viewport size, to maintain an
  acceptable readable size at larger viewport sizes, without
  being too big. f' = linearScale * pow(f,nonlinearScale)
* obj.SetNonlinearFontScaleFactor (double ) - Set/Get font
  scaling factors The font size, f, is calculated as the
  largest possible value such that the annotations for the
  given viewport do not overlap. This font size is scaled
  non-linearly with the viewport size, to maintain an
  acceptable readable size at larger viewport sizes, without
  being too big. f' = linearScale * pow(f,nonlinearScale)
* double = obj.GetNonlinearFontScaleFactor () - Set/Get font
  scaling factors The font size, f, is calculated as the
  largest possible value such that the annotations for the
  given viewport do not overlap. This font size is scaled
  non-linearly with the viewport size, to maintain an
  acceptable readable size at larger viewport sizes, without
  being too big. f' = linearScale * pow(f,nonlinearScale)
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.
* obj.SetText (int i, string text) - Set/Get the text to be
  displayed for each corner
* string = obj.GetText (int i) - Set/Get the text to be
  displayed for each corner
* obj.ClearAllTexts () - Set/Get the text to be displayed
  for each corner
* obj.CopyAllTextsFrom (vtkCornerAnnotation ca) - Set/Get
  the text to be displayed for each corner
* obj.SetImageActor (vtkImageActor ) - Set an image actor to
  look at for slice information
* vtkImageActor = obj.GetImageActor () - Set an image actor
  to look at for slice information
* obj.SetWindowLevel (vtkImageMapToWindowLevelColors ) - Set
  an instance of vtkImageMapToWindowLevelColors to use for
  looking at window level changes
* vtkImageMapToWindowLevelColors = obj.GetWindowLevel () -
  Set an instance of vtkImageMapToWindowLevelColors to use
  for looking at window level changes
* obj.SetLevelShift (double ) - Set the value to shift the
  level by.
* double = obj.GetLevelShift () - Set the value to shift the
  level by.
* obj.SetLevelScale (double ) - Set the value to scale the
  level by.
* double = obj.GetLevelScale () - Set the value to scale the
  level by.
* obj.SetTextProperty (vtkTextProperty p) - Set/Get the text
  property of all corners.
* vtkTextProperty = obj.GetTextProperty () - Set/Get the
  text property of all corners.
* obj.ShowSliceAndImageOn () - Even if there is an image
  actor, should `slice' and `image' be displayed?
* obj.ShowSliceAndImageOff () - Even if there is an image
  actor, should `slice' and `image' be displayed?
* obj.SetShowSliceAndImage (int ) - Even if there is an
  image actor, should `slice' and `image' be displayed?
* int = obj.GetShowSliceAndImage () - Even if there is an
  image actor, should `slice' and `image' be displayed?


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

