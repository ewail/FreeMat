
 Usage

This class is used to represent and render a vtBorderWidget.
To use this class, you need to specify the two corners of a
rectangular region.
The class is typically subclassed so that specialized
representations can be created. The class defines an API and
a default implementation that the vtkBorderRepresentation
interacts with to render itself in the scene.
To create an instance of class vtkBorderRepresentation,
simply invoke its constructor as follows

    obj = vtkBorderRepresentation



 Methods

The class vtkBorderRepresentation has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkBorderRepresentation class.

* string = obj.GetClassName () - Define standard methods.
* int = obj.IsA (string name) - Define standard methods.
* vtkBorderRepresentation = obj.NewInstance () - Define
  standard methods.
* vtkBorderRepresentation = obj.SafeDownCast (vtkObject o) -
  Define standard methods.
* vtkCoordinate = obj.GetPositionCoordinate () - Specify
  opposite corners of the box defining the boundary of the
  widget. By default, these coordinates are in the
  normalized viewport coordinate system, with Position the
  lower left of the outline, and Position2 relative to
  Position. Note that using these methods are affected by
  the ProportionalResize flag. That is, if the aspect ratio
  of the representation is to be preserved (e.g.,
  ProportionalResize is on), then the rectangle
  (Position,Position2) is a bounding rectangle. Also,
* obj.SetPosition (double, double) - Specify opposite
  corners of the box defining the boundary of the widget. By
  default, these coordinates are in the normalized viewport
  coordinate system, with Position the lower left of the
  outline, and Position2 relative to Position. Note that
  using these methods are affected by the ProportionalResize
  flag. That is, if the aspect ratio of the representation
  is to be preserved (e.g., ProportionalResize is on), then
  the rectangle (Position,Position2) is a bounding
  rectangle. Also,
* obj.SetPosition (double a[2]) - Specify opposite corners
  of the box defining the boundary of the widget. By
  default, these coordinates are in the normalized viewport
  coordinate system, with Position the lower left of the
  outline, and Position2 relative to Position. Note that
  using these methods are affected by the ProportionalResize
  flag. That is, if the aspect ratio of the representation
  is to be preserved (e.g., ProportionalResize is on), then
  the rectangle (Position,Position2) is a bounding
  rectangle. Also,
* double = obj.GetPosition () - Specify opposite corners of
  the box defining the boundary of the widget. By default,
  these coordinates are in the normalized viewport
  coordinate system, with Position the lower left of the
  outline, and Position2 relative to Position. Note that
  using these methods are affected by the ProportionalResize
  flag. That is, if the aspect ratio of the representation
  is to be preserved (e.g., ProportionalResize is on), then
  the rectangle (Position,Position2) is a bounding
  rectangle. Also,
* vtkCoordinate = obj.GetPosition2Coordinate () - Specify
  opposite corners of the box defining the boundary of the
  widget. By default, these coordinates are in the
  normalized viewport coordinate system, with Position the
  lower left of the outline, and Position2 relative to
  Position. Note that using these methods are affected by
  the ProportionalResize flag. That is, if the aspect ratio
  of the representation is to be preserved (e.g.,
  ProportionalResize is on), then the rectangle
  (Position,Position2) is a bounding rectangle. Also,
* obj.SetPosition2 (double, double) - Specify opposite
  corners of the box defining the boundary of the widget. By
  default, these coordinates are in the normalized viewport
  coordinate system, with Position the lower left of the
  outline, and Position2 relative to Position. Note that
  using these methods are affected by the ProportionalResize
  flag. That is, if the aspect ratio of the representation
  is to be preserved (e.g., ProportionalResize is on), then
  the rectangle (Position,Position2) is a bounding
  rectangle. Also,
* obj.SetPosition2 (double a[2]) - Specify opposite corners
  of the box defining the boundary of the widget. By
  default, these coordinates are in the normalized viewport
  coordinate system, with Position the lower left of the
  outline, and Position2 relative to Position. Note that
  using these methods are affected by the ProportionalResize
  flag. That is, if the aspect ratio of the representation
  is to be preserved (e.g., ProportionalResize is on), then
  the rectangle (Position,Position2) is a bounding
  rectangle. Also,
* double = obj.GetPosition2 () - Specify opposite corners of
  the box defining the boundary of the widget. By default,
  these coordinates are in the normalized viewport
  coordinate system, with Position the lower left of the
  outline, and Position2 relative to Position. Note that
  using these methods are affected by the ProportionalResize
  flag. That is, if the aspect ratio of the representation
  is to be preserved (e.g., ProportionalResize is on), then
  the rectangle (Position,Position2) is a bounding
  rectangle. Also,
* obj.SetShowBorder (int ) - Specify when and if the border
  should appear. If ShowBorder is "on", then the border will
  always appear. If ShowBorder is "off" then the border will
  never appear. If ShowBorder is "active" then the border
  will appear when the mouse pointer enters the region
  bounded by the border widget.
* int = obj.GetShowBorderMinValue () - Specify when and if
  the border should appear. If ShowBorder is "on", then the
  border will always appear. If ShowBorder is "off" then the
  border will never appear. If ShowBorder is "active" then
  the border will appear when the mouse pointer enters the
  region bounded by the border widget.
* int = obj.GetShowBorderMaxValue () - Specify when and if
  the border should appear. If ShowBorder is "on", then the
  border will always appear. If ShowBorder is "off" then the
  border will never appear. If ShowBorder is "active" then
  the border will appear when the mouse pointer enters the
  region bounded by the border widget.
* int = obj.GetShowBorder () - Specify when and if the
  border should appear. If ShowBorder is "on", then the
  border will always appear. If ShowBorder is "off" then the
  border will never appear. If ShowBorder is "active" then
  the border will appear when the mouse pointer enters the
  region bounded by the border widget.
* obj.SetShowBorderToOff () - Specify when and if the border
  should appear. If ShowBorder is "on", then the border will
  always appear. If ShowBorder is "off" then the border will
  never appear. If ShowBorder is "active" then the border
  will appear when the mouse pointer enters the region
  bounded by the border widget.
* obj.SetShowBorderToOn () - Specify when and if the border
  should appear. If ShowBorder is "on", then the border will
  always appear. If ShowBorder is "off" then the border will
  never appear. If ShowBorder is "active" then the border
  will appear when the mouse pointer enters the region
  bounded by the border widget.
* obj.SetShowBorderToActive () - Specify the properties of
  the border.
* vtkProperty2D = obj.GetBorderProperty () - Specify the
  properties of the border.
* obj.SetProportionalResize (int ) - Indicate whether
  resizing operations should keep the x-y directions
  proportional to one another. Also, if ProportionalResize
  is on, then the rectangle (Position,Position2) is a
  bounding rectangle, and the representation will be placed
  in the rectangle in such a way as to preserve the aspect
  ratio of the representation.
* int = obj.GetProportionalResize () - Indicate whether
  resizing operations should keep the x-y directions
  proportional to one another. Also, if ProportionalResize
  is on, then the rectangle (Position,Position2) is a
  bounding rectangle, and the representation will be placed
  in the rectangle in such a way as to preserve the aspect
  ratio of the representation.
* obj.ProportionalResizeOn () - Indicate whether resizing
  operations should keep the x-y directions proportional to
  one another. Also, if ProportionalResize is on, then the
  rectangle (Position,Position2) is a bounding rectangle,
  and the representation will be placed in the rectangle in
  such a way as to preserve the aspect ratio of the
  representation.
* obj.ProportionalResizeOff () - Indicate whether resizing
  operations should keep the x-y directions proportional to
  one another. Also, if ProportionalResize is on, then the
  rectangle (Position,Position2) is a bounding rectangle,
  and the representation will be placed in the rectangle in
  such a way as to preserve the aspect ratio of the
  representation.
* obj.SetMinimumSize (int , int ) - Specify a minimum and/or
  maximum size (in pixels) that this representation can
  take. These methods require two values: size values in the
  x and y directions, respectively.
* obj.SetMinimumSize (int a[2]) - Specify a minimum and/or
  maximum size (in pixels) that this representation can
  take. These methods require two values: size values in the
  x and y directions, respectively.
* int = obj. GetMinimumSize () - Specify a minimum and/or
  maximum size (in pixels) that this representation can
  take. These methods require two values: size values in the
  x and y directions, respectively.
* obj.SetMaximumSize (int , int ) - Specify a minimum and/or
  maximum size (in pixels) that this representation can
  take. These methods require two values: size values in the
  x and y directions, respectively.
* obj.SetMaximumSize (int a[2]) - Specify a minimum and/or
  maximum size (in pixels) that this representation can
  take. These methods require two values: size values in the
  x and y directions, respectively.
* int = obj. GetMaximumSize () - Specify a minimum and/or
  maximum size (in pixels) that this representation can
  take. These methods require two values: size values in the
  x and y directions, respectively.
* obj.SetTolerance (int ) - The tolerance representing the
  distance to the widget (in pixels) in which the cursor is
  considered to be on the widget, or on a widget feature
  (e.g., a corner point or edge).
* int = obj.GetToleranceMinValue () - The tolerance
  representing the distance to the widget (in pixels) in
  which the cursor is considered to be on the widget, or on
  a widget feature (e.g., a corner point or edge).
* int = obj.GetToleranceMaxValue () - The tolerance
  representing the distance to the widget (in pixels) in
  which the cursor is considered to be on the widget, or on
  a widget feature (e.g., a corner point or edge).
* int = obj.GetTolerance () - The tolerance representing the
  distance to the widget (in pixels) in which the cursor is
  considered to be on the widget, or on a widget feature
  (e.g., a corner point or edge).
* double = obj. GetSelectionPoint () - After a selection
  event within the region interior to the border; the
  normalized selection coordinates may be obtained.
* obj.SetMoving (int ) - This is a modifier of the
  interaction state. When set, widget interaction allows the
  border (and stuff inside of it) to be translated with
  mouse motion.
* int = obj.GetMoving () - This is a modifier of the
  interaction state. When set, widget interaction allows the
  border (and stuff inside of it) to be translated with
  mouse motion.
* obj.MovingOn () - This is a modifier of the interaction
  state. When set, widget interaction allows the border (and
  stuff inside of it) to be translated with mouse motion.
* obj.MovingOff () - This is a modifier of the interaction
  state. When set, widget interaction allows the border (and
  stuff inside of it) to be translated with mouse motion.
* obj.BuildRepresentation () - Subclasses should implement
  these methods. See the superclasses' documentation for
  more information.
* obj.StartWidgetInteraction (double eventPos[2]) -
  Subclasses should implement these methods. See the
  superclasses' documentation for more information.
* obj.WidgetInteraction (double eventPos[2]) - Subclasses
  should implement these methods. See the superclasses'
  documentation for more information.
* obj.GetSize (double size[2]) - Subclasses should implement
  these methods. See the superclasses' documentation for
  more information.
* int = obj.ComputeInteractionState (int X, int Y, int
  modify) - Subclasses should implement these methods. See
  the superclasses' documentation for more information.
* obj.GetActors2D (vtkPropCollection ) - These methods are
  necessary to make this representation behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - These methods
  are necessary to make this representation behave as a
  vtkProp.
* int = obj.RenderOverlay (vtkViewport ) - These methods are
  necessary to make this representation behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport ) - These
  methods are necessary to make this representation behave
  as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  ) - These methods are necessary to make this
  representation behave as a vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - These
  methods are necessary to make this representation behave
  as a vtkProp.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

