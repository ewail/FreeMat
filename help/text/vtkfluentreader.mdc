
 Usage

vtkFLUENTReader creates an unstructured grid dataset. It
reads .cas and .dat files stored in FLUENT native format.
.SECTION Thanks Thanks to Brian W. Dotson &amp; Terry E.
Jordan (Department of Energy, National Energy Technology
Laboratory) &amp; Douglas McCorkle (Iowa State University)
who developed this class. Please address all comments to
Brian Dotson
(brian.nosp@m..dot.nosp@m.son@n.nosp@m.etl..nosp@m.doe.g.nosp@m.ov)
&amp; Terry Jordan
(terry.nosp@m..jor.nosp@m.dan@s.nosp@m.a.ne.nosp@m.tl.do.nosp@m.e.go.nosp@m.v)
&amp; Doug McCorkle
(mccdo.nosp@m.@ias.nosp@m.tate..nosp@m.edu)
To create an instance of class vtkFLUENTReader, simply
invoke its constructor as follows

    obj = vtkFLUENTReader



 Methods

The class vtkFLUENTReader has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkFLUENTReader class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkFLUENTReader = obj.NewInstance ()
* vtkFLUENTReader = obj.SafeDownCast (vtkObject o)
* obj.SetFileName (string ) - Specify the file name of the
  Fluent case file to read.
* string = obj.GetFileName () - Specify the file name of the
  Fluent case file to read.
* int = obj.GetNumberOfCells () - Get the total number of
  cells. The number of cells is only valid after a
  successful read of the data file is performed. Initial
  value is 0.
* int = obj.GetNumberOfCellArrays (void ) - Get the number
  of cell arrays available in the input.
* string = obj.GetCellArrayName (int index) - Get the name
  of the cell array with the given index in the input.
* int = obj.GetCellArrayStatus (string name) - Get/Set
  whether the cell array with the given name is to be read.
* obj.SetCellArrayStatus (string name, int status) - Get/Set
  whether the cell array with the given name is to be read.
* obj.DisableAllCellArrays () - Turn on/off all cell arrays.
* obj.EnableAllCellArrays () - Turn on/off all cell arrays.
* obj.SetDataByteOrderToBigEndian () - These methods should
  be used instead of the SwapBytes methods. They indicate
  the byte ordering of the file you are trying to read in.
  These methods will then either swap or not swap the bytes
  depending on the byte ordering of the machine it is being
  run on. For example, reading in a BigEndian file on a
  BigEndian machine will result in no swapping. Trying to
  read the same file on a LittleEndian machine will result
  in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian. Not used when reading text
  files.
* obj.SetDataByteOrderToLittleEndian () - These methods
  should be used instead of the SwapBytes methods. They
  indicate the byte ordering of the file you are trying to
  read in. These methods will then either swap or not swap
  the bytes depending on the byte ordering of the machine it
  is being run on. For example, reading in a BigEndian file
  on a BigEndian machine will result in no swapping. Trying
  to read the same file on a LittleEndian machine will
  result in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian. Not used when reading text
  files.
* int = obj.GetDataByteOrder () - These methods should be
  used instead of the SwapBytes methods. They indicate the
  byte ordering of the file you are trying to read in. These
  methods will then either swap or not swap the bytes
  depending on the byte ordering of the machine it is being
  run on. For example, reading in a BigEndian file on a
  BigEndian machine will result in no swapping. Trying to
  read the same file on a LittleEndian machine will result
  in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian. Not used when reading text
  files.
* obj.SetDataByteOrder (int ) - These methods should be used
  instead of the SwapBytes methods. They indicate the byte
  ordering of the file you are trying to read in. These
  methods will then either swap or not swap the bytes
  depending on the byte ordering of the machine it is being
  run on. For example, reading in a BigEndian file on a
  BigEndian machine will result in no swapping. Trying to
  read the same file on a LittleEndian machine will result
  in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian. Not used when reading text
  files.
* string = obj.GetDataByteOrderAsString () - These methods
  should be used instead of the SwapBytes methods. They
  indicate the byte ordering of the file you are trying to
  read in. These methods will then either swap or not swap
  the bytes depending on the byte ordering of the machine it
  is being run on. For example, reading in a BigEndian file
  on a BigEndian machine will result in no swapping. Trying
  to read the same file on a LittleEndian machine will
  result in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian. Not used when reading text
  files.


* FreeMat_Documentation
* Visualization_Toolkit_IO_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

