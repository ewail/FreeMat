
 Usage

vtkParametricEllipsoid generates an ellipsoid. If all the
radii are the same, we have a sphere. An oblate spheroid
occurs if RadiusX = RadiusY > RadiusZ. Here the Z-axis forms
the symmetry axis. To a first approximation, this is the
shape of the earth. A prolate spheroid occurs if RadiusX =
RadiusY < RadiusZ.
For further information about this surface, please consult
the technical description "Parametric surfaces" in http://
www.vtk.org/documents.php in the "VTK Technical Documents"
section in the VTk.org web pages.
.SECTION Thanks Andrew Maclean
a.mac.nosp@m.lean.nosp@m.@cas..nosp@m.edu..nosp@m.au for
creating and contributing the class.
To create an instance of class vtkParametricEllipsoid,
simply invoke its constructor as follows

    obj = vtkParametricEllipsoid



 Methods

The class vtkParametricEllipsoid has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkParametricEllipsoid class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkParametricEllipsoid = obj.NewInstance ()
* vtkParametricEllipsoid = obj.SafeDownCast (vtkObject o)
* int = obj.GetDimension () - Set/Get the scaling factor for
  the x-axis. Default = 1.
* obj.SetXRadius (double ) - Set/Get the scaling factor for
  the x-axis. Default = 1.
* double = obj.GetXRadius () - Set/Get the scaling factor
  for the x-axis. Default = 1.
* obj.SetYRadius (double ) - Set/Get the scaling factor for
  the y-axis. Default = 1.
* double = obj.GetYRadius () - Set/Get the scaling factor
  for the y-axis. Default = 1.
* obj.SetZRadius (double ) - Set/Get the scaling factor for
  the z-axis. Default = 1.
* double = obj.GetZRadius () - Set/Get the scaling factor
  for the z-axis. Default = 1.
* obj.Evaluate (double uvw[3], double Pt[3], double Duvw[9])
  - An ellipsoid.
  This function performs the mapping  $f(u,v) \rightarrow
  (x,y,x)$ , returning it as Pt. It also returns the partial
  derivatives Du and Dv.  $Pt = (x, y, z), Du = (dx/du, dy/
  du, dz/du), Dv = (dx/dv, dy/dv, dz/dv)$  . Then the normal
  is  $N = Du X Dv$  .
* double = obj.EvaluateScalar (double uvw[3], double Pt[3],
  double Duvw[9]) - Calculate a user defined scalar using
  one or all of uvw, Pt, Duvw.
  uvw are the parameters with Pt being the the cartesian
  point, Duvw are the derivatives of this point with respect
  to u, v and w. Pt, Duvw are obtained from Evaluate().
  This function is only called if the ScalarMode has the
  value vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
  If the user does not need to calculate a scalar, then the
  instantiated function should return zero.


* FreeMat_Documentation
* Visualization_Toolkit_Common_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

