
 Usage

vtkImageFlip will reflect the data along the filtered axis.
This filter is actually a thin wrapper around
vtkImageReslice.
To create an instance of class vtkImageFlip, simply invoke
its constructor as follows

    obj = vtkImageFlip



 Methods

The class vtkImageFlip has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkImageFlip class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageFlip = obj.NewInstance ()
* vtkImageFlip = obj.SafeDownCast (vtkObject o)
* obj.SetFilteredAxis (int ) - Specify which axis will be
  flipped. This must be an integer between 0 (for x) and 2
  (for z). Initial value is 0.
* int = obj.GetFilteredAxis () - Specify which axis will be
  flipped. This must be an integer between 0 (for x) and 2
  (for z). Initial value is 0.
* obj.SetFlipAboutOrigin (int ) - By default the image will
  be flipped about its center, and the Origin, Spacing and
  Extent of the output will be identical to the input.
  However, if you have a coordinate system associated with
  the image and you want to use the flip to convert +ve
  values along one axis to -ve values (and vice versa) then
  you actually want to flip the image about coordinate
  (0,0,0) instead of about the center of the image. This
  method will adjust the Origin of the output such that the
  flip occurs about (0,0,0). Note that this method only
  changes the Origin (and hence the coordinate system) the
  output data: the actual pixel values are the same whether
  or not this method is used. Also note that the Origin in
  this method name refers to (0,0,0) in the coordinate
  system associated with the image, it does not refer to the
  Origin ivar that is associated with a vtkImageData.
* int = obj.GetFlipAboutOrigin () - By default the image
  will be flipped about its center, and the Origin, Spacing
  and Extent of the output will be identical to the input.
  However, if you have a coordinate system associated with
  the image and you want to use the flip to convert +ve
  values along one axis to -ve values (and vice versa) then
  you actually want to flip the image about coordinate
  (0,0,0) instead of about the center of the image. This
  method will adjust the Origin of the output such that the
  flip occurs about (0,0,0). Note that this method only
  changes the Origin (and hence the coordinate system) the
  output data: the actual pixel values are the same whether
  or not this method is used. Also note that the Origin in
  this method name refers to (0,0,0) in the coordinate
  system associated with the image, it does not refer to the
  Origin ivar that is associated with a vtkImageData.
* obj.FlipAboutOriginOn () - By default the image will be
  flipped about its center, and the Origin, Spacing and
  Extent of the output will be identical to the input.
  However, if you have a coordinate system associated with
  the image and you want to use the flip to convert +ve
  values along one axis to -ve values (and vice versa) then
  you actually want to flip the image about coordinate
  (0,0,0) instead of about the center of the image. This
  method will adjust the Origin of the output such that the
  flip occurs about (0,0,0). Note that this method only
  changes the Origin (and hence the coordinate system) the
  output data: the actual pixel values are the same whether
  or not this method is used. Also note that the Origin in
  this method name refers to (0,0,0) in the coordinate
  system associated with the image, it does not refer to the
  Origin ivar that is associated with a vtkImageData.
* obj.FlipAboutOriginOff () - By default the image will be
  flipped about its center, and the Origin, Spacing and
  Extent of the output will be identical to the input.
  However, if you have a coordinate system associated with
  the image and you want to use the flip to convert +ve
  values along one axis to -ve values (and vice versa) then
  you actually want to flip the image about coordinate
  (0,0,0) instead of about the center of the image. This
  method will adjust the Origin of the output such that the
  flip occurs about (0,0,0). Note that this method only
  changes the Origin (and hence the coordinate system) the
  output data: the actual pixel values are the same whether
  or not this method is used. Also note that the Origin in
  this method name refers to (0,0,0) in the coordinate
  system associated with the image, it does not refer to the
  Origin ivar that is associated with a vtkImageData.
* obj.SetFilteredAxes (int axis) - Keep the mis-named Axes
  variations around for compatibility with old scripts. Axis
  is singular, not plural...
* int = obj.GetFilteredAxes () - PreserveImageExtentOff
  wasn't covered by test scripts and its implementation was
  broken. It is deprecated now and it has no effect (i.e.
  the ImageExtent is always preserved).
* obj.SetPreserveImageExtent (int ) - PreserveImageExtentOff
  wasn't covered by test scripts and its implementation was
  broken. It is deprecated now and it has no effect (i.e.
  the ImageExtent is always preserved).
* int = obj.GetPreserveImageExtent () -
  PreserveImageExtentOff wasn't covered by test scripts and
  its implementation was broken. It is deprecated now and it
  has no effect (i.e. the ImageExtent is always preserved).
* obj.PreserveImageExtentOn () - PreserveImageExtentOff
  wasn't covered by test scripts and its implementation was
  broken. It is deprecated now and it has no effect (i.e.
  the ImageExtent is always preserved).
* obj.PreserveImageExtentOff () - PreserveImageExtentOff
  wasn't covered by test scripts and its implementation was
  broken. It is deprecated now and it has no effect (i.e.
  the ImageExtent is always preserved).


* FreeMat_Documentation
* Visualization_Toolkit_Imaging_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

