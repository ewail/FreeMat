
 Usage

vtkGraphMapper is a mapper to map vtkGraph (and all derived
classes) to graphics primitives.
To create an instance of class vtkGraphMapper, simply invoke
its constructor as follows

    obj = vtkGraphMapper



 Methods

The class vtkGraphMapper has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkGraphMapper class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkGraphMapper = obj.NewInstance ()
* vtkGraphMapper = obj.SafeDownCast (vtkObject o)
* obj.Render (vtkRenderer ren, vtkActor act)
* obj.SetVertexColorArrayName (string name) - The array to
  use for coloring vertices. Default is "color".
* string = obj.GetVertexColorArrayName () - The array to use
  for coloring vertices. Default is "color".
* obj.SetColorVertices (bool vis) - Whether to color
  vertices. Default is off.
* bool = obj.GetColorVertices () - Whether to color
  vertices. Default is off.
* obj.ColorVerticesOn () - Whether to color vertices.
  Default is off.
* obj.ColorVerticesOff () - Whether to color vertices.
  Default is off.
* obj.SetScaledGlyphs (bool arg) - Whether scaled glyphs are
  on or not. Default is off. By default this mapper uses
  vertex glyphs that do not scale. If you turn this option
  on you will get circles at each vertex and they will scale
  as you zoom in/out.
* bool = obj.GetScaledGlyphs () - Whether scaled glyphs are
  on or not. Default is off. By default this mapper uses
  vertex glyphs that do not scale. If you turn this option
  on you will get circles at each vertex and they will scale
  as you zoom in/out.
* obj.ScaledGlyphsOn () - Whether scaled glyphs are on or
  not. Default is off. By default this mapper uses vertex
  glyphs that do not scale. If you turn this option on you
  will get circles at each vertex and they will scale as you
  zoom in/out.
* obj.ScaledGlyphsOff () - Whether scaled glyphs are on or
  not. Default is off. By default this mapper uses vertex
  glyphs that do not scale. If you turn this option on you
  will get circles at each vertex and they will scale as you
  zoom in/out.
* obj.SetScalingArrayName (string ) - Glyph scaling array
  name. Default is "scale"
* string = obj.GetScalingArrayName () - Glyph scaling array
  name. Default is "scale"
* obj.SetEdgeVisibility (bool vis) - Whether to show edges
  or not. Default is on.
* bool = obj.GetEdgeVisibility () - Whether to show edges or
  not. Default is on.
* obj.EdgeVisibilityOn () - Whether to show edges or not.
  Default is on.
* obj.EdgeVisibilityOff () - Whether to show edges or not.
  Default is on.
* obj.SetEdgeColorArrayName (string name) - The array to use
  for coloring edges. Default is "color".
* string = obj.GetEdgeColorArrayName () - The array to use
  for coloring edges. Default is "color".
* obj.SetColorEdges (bool vis) - Whether to color edges.
  Default is off.
* bool = obj.GetColorEdges () - Whether to color edges.
  Default is off.
* obj.ColorEdgesOn () - Whether to color edges. Default is
  off.
* obj.ColorEdgesOff () - Whether to color edges. Default is
  off.
* obj.SetEnabledEdgesArrayName (string ) - The array to use
  for coloring edges. Default is "color".
* string = obj.GetEnabledEdgesArrayName () - The array to
  use for coloring edges. Default is "color".
* obj.SetEnableEdgesByArray (int ) - Whether to enable/
  disable edges using array values. Default is off.
* int = obj.GetEnableEdgesByArray () - Whether to enable/
  disable edges using array values. Default is off.
* obj.EnableEdgesByArrayOn () - Whether to enable/disable
  edges using array values. Default is off.
* obj.EnableEdgesByArrayOff () - Whether to enable/disable
  edges using array values. Default is off.
* obj.SetEnabledVerticesArrayName (string ) - The array to
  use for coloring edges. Default is "color".
* string = obj.GetEnabledVerticesArrayName () - The array to
  use for coloring edges. Default is "color".
* obj.SetEnableVerticesByArray (int ) - Whether to enable/
  disable vertices using array values. Default is off.
* int = obj.GetEnableVerticesByArray () - Whether to enable/
  disable vertices using array values. Default is off.
* obj.EnableVerticesByArrayOn () - Whether to enable/disable
  vertices using array values. Default is off.
* obj.EnableVerticesByArrayOff () - Whether to enable/
  disable vertices using array values. Default is off.
* obj.SetIconArrayName (string name) - The array to use for
  assigning icons.
* string = obj.GetIconArrayName () - The array to use for
  assigning icons.
* obj.AddIconType (string type, int index) - Associate the
  icon at index "index" in the vtkTexture to all vertices
  containing "type" as a value in the vertex attribute array
  specified by IconArrayName.
* obj.ClearIconTypes () - Clear all icon mappings.
* obj.SetIconSize (int size) - Specify the Width and Height,
  in pixels, of an icon in the icon sheet.
* obj.SetIconAlignment (int alignment) - Specify where the
  icons should be placed in relation to the vertex. See
  vtkIconGlyphFilter.h for possible values.
* vtkTexture = obj.GetIconTexture () - The texture
  containing the icon sheet.
* obj.SetIconTexture (vtkTexture texture) - The texture
  containing the icon sheet.
* obj.SetIconVisibility (bool vis) - Whether to show icons.
  Default is off.
* bool = obj.GetIconVisibility () - Whether to show icons.
  Default is off.
* obj.IconVisibilityOn () - Whether to show icons. Default
  is off.
* obj.IconVisibilityOff () - Whether to show icons. Default
  is off.
* float = obj.GetVertexPointSize () - Get/Set the vertex
  point size
* obj.SetVertexPointSize (float size) - Get/Set the vertex
  point size
* float = obj.GetEdgeLineWidth () - Get/Set the edge line
  width
* obj.SetEdgeLineWidth (float width) - Get/Set the edge line
  width
* obj.ApplyViewTheme (vtkViewTheme theme) - Apply the theme
  to this view.
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this mapper.
  The parameter window could be used to determine which
  graphic resources to release.
* long = obj.GetMTime () - Get the mtime also considering
  the lookup table.
* obj.SetInput (vtkGraph input) - Set the Input of this
  mapper.
* vtkGraph = obj.GetInput () - Set the Input of this mapper.
* double = obj.GetBounds () - Return bounding box (array of
  six doubles) of data expressed as (xmin,xmax, ymin,ymax,
  zmin,zmax).
* obj.GetBounds (double bounds) - Access to the lookup
  tables used by the vertex and edge mappers.
* vtkLookupTable = obj.GetEdgeLookupTable () - Access to the
  lookup tables used by the vertex and edge mappers.
* vtkLookupTable = obj.GetVertexLookupTable () - Access to
  the lookup tables used by the vertex and edge mappers.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

