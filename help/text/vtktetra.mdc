
 Usage

vtkTetra is a concrete implementation of vtkCell to
represent a 3D tetrahedron. vtkTetra uses the standard
isoparametric shape functions for a linear tetrahedron. The
tetrahedron is defined by the four points (0-3); where
(0,1,2) is the base of the tetrahedron which, using the
right hand rule, forms a triangle whose normal points in the
direction of the fourth point.
To create an instance of class vtkTetra, simply invoke its
constructor as follows

    obj = vtkTetra



 Methods

The class vtkTetra has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkTetra class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkTetra = obj.NewInstance ()
* vtkTetra = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - See the vtkCell API
  for descriptions of these methods.
* vtkCell = obj.GetFace (int faceId) - See the vtkCell API
  for descriptions of these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray
  connectivity, vtkPointData inPd, vtkPointData outPd,
  vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int
  insideOut) - See the vtkCell API for descriptions of these
  methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - See the vtkCell API for
  descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - Returns the set of points that are on the
  boundary of the tetrahedron that are closest
  parametrically to the point specified. This may include
  faces, edges, or vertices.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the tetrahedron in parametric coordinates.
* double = obj.GetParametricDistance (double pcoords[3]) -
  Return the distance of the parametric coordinate provided
  to the cell. If inside the cell, a distance of zero is
  returned.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[4]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [12]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

