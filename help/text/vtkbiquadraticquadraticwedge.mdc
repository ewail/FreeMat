
 Usage

vtkBiQuadraticQuadraticWedge is a concrete implementation of
vtkNonLinearCell to represent a three-dimensional, 18-node
isoparametric biquadratic wedge. The interpolation is the
standard finite element, biquadratic-quadratic isoparametric
shape function plus the linear functions. The cell includes
a mid-edge node. The ordering of the 18 points defining the
cell is point ids (0-5,6-15, 16-18) where point ids 0-5 are
the six corner vertices of the wedge; followed by nine
midedge nodes (6-15) and 3 center-face nodes. Note that
these midedge nodes correspond lie on the edges defined by
(0,1), (1,2), (2,0), (3,4), (4,5), (5,3), (0,3), (1,4),
(2,5), and the center-face nodes are lieing in quads 16-
(0,1,4,3), 17-(1,2,5,4) and (2,0,3,5).
To create an instance of class vtkBiQuadraticQuadraticWedge,
simply invoke its constructor as follows

    obj = vtkBiQuadraticQuadraticWedge



 Methods

The class vtkBiQuadraticQuadraticWedge has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkBiQuadraticQuadraticWedge
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkBiQuadraticQuadraticWedge = obj.NewInstance ()
* vtkBiQuadraticQuadraticWedge = obj.SafeDownCast (vtkObject
  o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - Implement the vtkCell
  API. See the vtkCell API for descriptions of these
  methods.
* vtkCell = obj.GetFace (int faceId) - Implement the vtkCell
  API. See the vtkCell API for descriptions of these
  methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray tetras,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this quadratic Wedge using scalar value provided. Like
  contouring, except that it cuts the hex to produce linear
  tetrahedron.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the quadratic wedge in parametric
  coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[15]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [45]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

