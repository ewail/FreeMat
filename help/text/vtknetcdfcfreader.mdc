
 Usage

Reads netCDF files that follow the CF convention. Details on
this convention can be found at http://cf-pcmdi.llnl.gov/.
To create an instance of class vtkNetCDFCFReader, simply
invoke its constructor as follows

    obj = vtkNetCDFCFReader



 Methods

The class vtkNetCDFCFReader has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkNetCDFCFReader class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkNetCDFCFReader = obj.NewInstance ()
* vtkNetCDFCFReader = obj.SafeDownCast (vtkObject o)
* int = obj.GetSphericalCoordinates () - If on (the
  default), then 3D data with latitude/longitude dimensions
  will be read in as curvilinear data shaped like spherical
  coordinates. If false, then the data will always be read
  in Cartesian coordinates.
* obj.SetSphericalCoordinates (int ) - If on (the default),
  then 3D data with latitude/longitude dimensions will be
  read in as curvilinear data shaped like spherical
  coordinates. If false, then the data will always be read
  in Cartesian coordinates.
* obj.SphericalCoordinatesOn () - If on (the default), then
  3D data with latitude/longitude dimensions will be read in
  as curvilinear data shaped like spherical coordinates. If
  false, then the data will always be read in Cartesian
  coordinates.
* obj.SphericalCoordinatesOff () - If on (the default), then
  3D data with latitude/longitude dimensions will be read in
  as curvilinear data shaped like spherical coordinates. If
  false, then the data will always be read in Cartesian
  coordinates.
* double = obj.GetVerticalScale () - The scale and bias of
  the vertical component of spherical coordinates. It is
  common to write the vertical component with respect to
  something other than the center of the sphere (for
  example, the surface). In this case, it might be necessary
  to scale and/or bias the vertical height. The height will
  become height*scale + bias. Keep in mind that if the
  positive attribute of the vertical dimension is down, then
  the height is negated. By default the scale is 1 and the
  bias is 0 (that is, no change). The scaling will be
  adjusted if it results in invalid (negative) vertical
  values.
* obj.SetVerticalScale (double ) - The scale and bias of the
  vertical component of spherical coordinates. It is common
  to write the vertical component with respect to something
  other than the center of the sphere (for example, the
  surface). In this case, it might be necessary to scale
  and/or bias the vertical height. The height will become
  height*scale + bias. Keep in mind that if the positive
  attribute of the vertical dimension is down, then the
  height is negated. By default the scale is 1 and the bias
  is 0 (that is, no change). The scaling will be adjusted if
  it results in invalid (negative) vertical values.
* double = obj.GetVerticalBias () - The scale and bias of
  the vertical component of spherical coordinates. It is
  common to write the vertical component with respect to
  something other than the center of the sphere (for
  example, the surface). In this case, it might be necessary
  to scale and/or bias the vertical height. The height will
  become height*scale + bias. Keep in mind that if the
  positive attribute of the vertical dimension is down, then
  the height is negated. By default the scale is 1 and the
  bias is 0 (that is, no change). The scaling will be
  adjusted if it results in invalid (negative) vertical
  values.
* obj.SetVerticalBias (double ) - The scale and bias of the
  vertical component of spherical coordinates. It is common
  to write the vertical component with respect to something
  other than the center of the sphere (for example, the
  surface). In this case, it might be necessary to scale
  and/or bias the vertical height. The height will become
  height*scale + bias. Keep in mind that if the positive
  attribute of the vertical dimension is down, then the
  height is negated. By default the scale is 1 and the bias
  is 0 (that is, no change). The scaling will be adjusted if
  it results in invalid (negative) vertical values.


* FreeMat_Documentation
* Visualization_Toolkit_IO_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

