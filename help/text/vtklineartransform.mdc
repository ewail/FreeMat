
 Usage

vtkLinearTransform provides a generic interface for linear
(affine or 12 degree-of-freedom) geometric transformations.
To create an instance of class vtkLinearTransform, simply
invoke its constructor as follows

    obj = vtkLinearTransform



 Methods

The class vtkLinearTransform has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkLinearTransform class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkLinearTransform = obj.NewInstance ()
* vtkLinearTransform = obj.SafeDownCast (vtkObject o)
* obj.TransformNormal (float in[3], float out[3]) - Apply
  the transformation to a normal. You can use the same array
  to store both the input and output.
* obj.TransformNormal (double in[3], double out[3]) - Apply
  the transformation to a double-precision normal. You can
  use the same array to store both the input and output.
* double = obj.TransformNormal (double x, double y, double
  z) - Synonymous with TransformDoubleNormal(x,y,z). Use
  this if you are programming in python, tcl or Java.
* double = obj.TransformNormal (double normal[3]) -
  Synonymous with TransformDoubleNormal(x,y,z). Use this if
  you are programming in python, tcl or Java.
* float = obj.TransformFloatNormal (float x, float y, float
  z) - Apply the transformation to an (x,y,z) normal. Use
  this if you are programming in python, tcl or Java.
* float = obj.TransformFloatNormal (float normal[3]) - Apply
  the transformation to an (x,y,z) normal. Use this if you
  are programming in python, tcl or Java.
* double = obj.TransformDoubleNormal (double x, double y,
  double z) - Apply the transformation to a double-precision
  (x,y,z) normal. Use this if you are programming in python,
  tcl or Java.
* double = obj.TransformDoubleNormal (double normal[3]) -
  Apply the transformation to a double-precision (x,y,z)
  normal. Use this if you are programming in python, tcl or
  Java.
* double = obj.TransformVector (double x, double y, double
  z) - Synonymous with TransformDoubleVector(x,y,z). Use
  this if you are programming in python, tcl or Java.
* double = obj.TransformVector (double normal[3]) -
  Synonymous with TransformDoubleVector(x,y,z). Use this if
  you are programming in python, tcl or Java.
* obj.TransformVector (float in[3], float out[3]) - Apply
  the transformation to a vector. You can use the same array
  to store both the input and output.
* obj.TransformVector (double in[3], double out[3]) - Apply
  the transformation to a double-precision vector. You can
  use the same array to store both the input and output.
* float = obj.TransformFloatVector (float x, float y, float
  z) - Apply the transformation to an (x,y,z) vector. Use
  this if you are programming in python, tcl or Java.
* float = obj.TransformFloatVector (float vec[3]) - Apply
  the transformation to an (x,y,z) vector. Use this if you
  are programming in python, tcl or Java.
* double = obj.TransformDoubleVector (double x, double y,
  double z) - Apply the transformation to a double-precision
  (x,y,z) vector. Use this if you are programming in python,
  tcl or Java.
* double = obj.TransformDoubleVector (double vec[3]) - Apply
  the transformation to a double-precision (x,y,z) vector.
  Use this if you are programming in python, tcl or Java.
* obj.TransformPoints (vtkPoints inPts, vtkPoints outPts) -
  Apply the transformation to a series of points, and append
  the results to outPts.
* obj.TransformNormals (vtkDataArray inNms, vtkDataArray
  outNms) - Apply the transformation to a series of normals,
  and append the results to outNms.
* obj.TransformVectors (vtkDataArray inVrs, vtkDataArray
  outVrs) - Apply the transformation to a series of vectors,
  and append the results to outVrs.
* obj.TransformPointsNormalsVectors (vtkPoints inPts,
  vtkPoints outPts, vtkDataArray inNms, vtkDataArray outNms,
  vtkDataArray inVrs, vtkDataArray outVrs) - Apply the
  transformation to a combination of points, normals and
  vectors.
* vtkLinearTransform = obj.GetLinearInverse () - This will
  calculate the transformation without calling Update. Meant
  for use only within other VTK classes.
* obj.InternalTransformPoint (float in[3], float out[3]) -
  This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.InternalTransformPoint (double in[3], double out[3]) -
  This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.InternalTransformNormal (float in[3], float out[3]) -
  This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.InternalTransformNormal (double in[3], double out[3])
  - This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.InternalTransformVector (float in[3], float out[3]) -
  This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.InternalTransformVector (double in[3], double out[3])
  - This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.


* FreeMat_Documentation
* Visualization_Toolkit_Common_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

