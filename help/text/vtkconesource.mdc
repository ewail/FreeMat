
 Usage

vtkConeSource creates a cone centered at a specified point
and pointing in a specified direction. (By default, the
center is the origin and the direction is the x-axis.)
Depending upon the resolution of this object, different
representations are created. If resolution=0 a line is
created; if resolution=1, a single triangle is created; if
resolution=2, two crossed triangles are created. For
resolution > 2, a 3D cone (with resolution number of sides)
is created. It also is possible to control whether the
bottom of the cone is capped with a (resolution-sided)
polygon, and to specify the height and radius of the cone.
To create an instance of class vtkConeSource, simply invoke
its constructor as follows

    obj = vtkConeSource



 Methods

The class vtkConeSource has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkConeSource class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkConeSource = obj.NewInstance ()
* vtkConeSource = obj.SafeDownCast (vtkObject o)
* obj.SetHeight (double ) - Set the height of the cone. This
  is the height along the cone in its specified direction.
* double = obj.GetHeightMinValue () - Set the height of the
  cone. This is the height along the cone in its specified
  direction.
* double = obj.GetHeightMaxValue () - Set the height of the
  cone. This is the height along the cone in its specified
  direction.
* double = obj.GetHeight () - Set the height of the cone.
  This is the height along the cone in its specified
  direction.
* obj.SetRadius (double ) - Set the base radius of the cone.
* double = obj.GetRadiusMinValue () - Set the base radius of
  the cone.
* double = obj.GetRadiusMaxValue () - Set the base radius of
  the cone.
* double = obj.GetRadius () - Set the base radius of the
  cone.
* obj.SetResolution (int ) - Set the number of facets used
  to represent the cone.
* int = obj.GetResolutionMinValue () - Set the number of
  facets used to represent the cone.
* int = obj.GetResolutionMaxValue () - Set the number of
  facets used to represent the cone.
* int = obj.GetResolution () - Set the number of facets used
  to represent the cone.
* obj.SetCenter (double , double , double ) - Set the center
  of the cone. It is located at the middle of the axis of
  the cone. Warning: this is not the center of the base of
  the cone! The default is 0,0,0.
* obj.SetCenter (double a[3]) - Set the center of the cone.
  It is located at the middle of the axis of the cone.
  Warning: this is not the center of the base of the cone!
  The default is 0,0,0.
* double = obj. GetCenter () - Set the center of the cone.
  It is located at the middle of the axis of the cone.
  Warning: this is not the center of the base of the cone!
  The default is 0,0,0.
* obj.SetDirection (double , double , double ) - Set the
  orientation vector of the cone. The vector does not have
  to be normalized. The direction goes from the center of
  the base toward the apex. The default is (1,0,0).
* obj.SetDirection (double a[3]) - Set the orientation
  vector of the cone. The vector does not have to be
  normalized. The direction goes from the center of the base
  toward the apex. The default is (1,0,0).
* double = obj. GetDirection () - Set the orientation vector
  of the cone. The vector does not have to be normalized.
  The direction goes from the center of the base toward the
  apex. The default is (1,0,0).
* obj.SetAngle (double angle) - Set the angle of the cone.
  This is the angle between the axis of the cone and a
  generatrix. Warning: this is not the aperture! The
  aperture is twice this angle. As a side effect, the angle
  plus height sets the base radius of the cone. Angle is
  expressed in degrees.
* double = obj.GetAngle () - Set the angle of the cone. This
  is the angle between the axis of the cone and a
  generatrix. Warning: this is not the aperture! The
  aperture is twice this angle. As a side effect, the angle
  plus height sets the base radius of the cone. Angle is
  expressed in degrees.
* obj.SetCapping (int ) - Turn on/off whether to cap the
  base of the cone with a polygon.
* int = obj.GetCapping () - Turn on/off whether to cap the
  base of the cone with a polygon.
* obj.CappingOn () - Turn on/off whether to cap the base of
  the cone with a polygon.
* obj.CappingOff () - Turn on/off whether to cap the base of
  the cone with a polygon.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

