
 Usage

vtkQuadraticQuad is a concrete implementation of
vtkNonLinearCell to represent a two-dimensional, 9-node
isoparametric parabolic quadrilateral element with a
Centerpoint. The interpolation is the standard finite
element, quadratic isoparametric shape function. The cell
includes a mid-edge node for each of the four edges of the
cell and a center node at the surface. The ordering of the
eight points defining the cell are point ids (0-3,4-8) where
ids 0-3 define the four corner vertices of the quad; ids 4-
7 define the midedge nodes (0,1), (1,2), (2,3), (3,0) and 8
define the face center node.
To create an instance of class vtkBiQuadraticQuad, simply
invoke its constructor as follows

    obj = vtkBiQuadraticQuad



 Methods

The class vtkBiQuadraticQuad has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkBiQuadraticQuad class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkBiQuadraticQuad = obj.NewInstance ()
* vtkBiQuadraticQuad = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetFace (int )
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray polys,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this biquadratic quad using scalar value provided. Like
  contouring, except that it cuts the twi quads to produce
  linear triangles.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the pyramid in parametric coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[9]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [18])


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

