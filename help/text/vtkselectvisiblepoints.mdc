
 Usage

vtkSelectVisiblePoints is a filter that selects points based
on whether they are visible or not. Visibility is determined
by accessing the z-buffer of a rendering window. (The
position of each input point is converted into display
coordinates, and then the z-value at that point is obtained.
If within the user-specified tolerance, the point is
considered visible.)
Points that are visible (or if the ivar SelectInvisible is
on, invisible points) are passed to the output. Associated
data attributes are passed to the output as well.
This filter also allows you to specify a rectangular window
in display (pixel) coordinates in which the visible points
must lie. This can be used as a sort of local "brushing"
operation to select just data within a window.
To create an instance of class vtkSelectVisiblePoints,
simply invoke its constructor as follows

    obj = vtkSelectVisiblePoints



 Methods

The class vtkSelectVisiblePoints has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkSelectVisiblePoints class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkSelectVisiblePoints = obj.NewInstance ()
* vtkSelectVisiblePoints = obj.SafeDownCast (vtkObject o)
* obj.SetRenderer (vtkRenderer ren) - Specify the renderer
  in which the visibility computation is to be performed.
* vtkRenderer = obj.GetRenderer () - Set/Get the flag which
  enables selection in a rectangular display region.
* obj.SetSelectionWindow (int ) - Set/Get the flag which
  enables selection in a rectangular display region.
* int = obj.GetSelectionWindow () - Set/Get the flag which
  enables selection in a rectangular display region.
* obj.SelectionWindowOn () - Set/Get the flag which enables
  selection in a rectangular display region.
* obj.SelectionWindowOff () - Set/Get the flag which enables
  selection in a rectangular display region.
* obj.SetSelection (int , int , int , int ) - Specify the
  selection window in display coordinates. You must specify
  a rectangular region using (xmin,xmax,ymin,ymax).
* obj.SetSelection (int a[4]) - Specify the selection window
  in display coordinates. You must specify a rectangular
  region using (xmin,xmax,ymin,ymax).
* int = obj. GetSelection () - Specify the selection window
  in display coordinates. You must specify a rectangular
  region using (xmin,xmax,ymin,ymax).
* obj.SetSelectInvisible (int ) - Set/Get the flag which
  enables inverse selection; i.e., invisible points are
  selected.
* int = obj.GetSelectInvisible () - Set/Get the flag which
  enables inverse selection; i.e., invisible points are
  selected.
* obj.SelectInvisibleOn () - Set/Get the flag which enables
  inverse selection; i.e., invisible points are selected.
* obj.SelectInvisibleOff () - Set/Get the flag which enables
  inverse selection; i.e., invisible points are selected.
* obj.SetTolerance (double ) - Set/Get a tolerance to use to
  determine whether a point is visible. A tolerance is
  usually required because the conversion from world space
  to display space during rendering introduces numerical
  round-off.
* double = obj.GetToleranceMinValue () - Set/Get a tolerance
  to use to determine whether a point is visible. A
  tolerance is usually required because the conversion from
  world space to display space during rendering introduces
  numerical round-off.
* double = obj.GetToleranceMaxValue () - Set/Get a tolerance
  to use to determine whether a point is visible. A
  tolerance is usually required because the conversion from
  world space to display space during rendering introduces
  numerical round-off.
* double = obj.GetTolerance () - Set/Get a tolerance to use
  to determine whether a point is visible. A tolerance is
  usually required because the conversion from world space
  to display space during rendering introduces numerical
  round-off.
* bool = obj.IsPointOccluded (double x[], float zPtr) -
  Tests if a point x is being occluded or not against the Z-
  Buffer array passed in by zPtr. Call Initialize before
  calling this method.
* long = obj.GetMTime () - Return MTime also considering the
  renderer.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

