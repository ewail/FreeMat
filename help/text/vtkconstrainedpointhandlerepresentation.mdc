
 Usage

This class is used to represent a vtkHandleWidget. It
represents a position in 3D world coordinates that is
constrained to a specified plane. The default look is to
draw a white point when this widget is not selected or
active, a thin green circle when it is highlighted, and a
thicker cyan circle when it is active (being positioned).
Defaults can be adjusted - but take care to define cursor
geometry that makes sense for this widget. The geometry will
be aligned on the constraining plane, with the plane normal
aligned with the X axis of the geometry (similar behavior to
vtkGlyph3D).
TODO: still need to work on 1) translation when mouse is
outside bounding planes 2) size of the widget
To create an instance of class
vtkConstrainedPointHandleRepresentation, simply invoke its
constructor as follows

    obj = vtkConstrainedPointHandleRepresentation



 Methods

The class vtkConstrainedPointHandleRepresentation has
several methods that can be used. They are listed below.
Note that the documentation is translated automatically from
the VTK sources, and may not be completely intelligible.
When in doubt, consult the VTK website. In the methods
listed below, obj is an instance of the
vtkConstrainedPointHandleRepresentation class.

* string = obj.GetClassName () - Standard methods for
  instances of this class.
* int = obj.IsA (string name) - Standard methods for
  instances of this class.
* vtkConstrainedPointHandleRepresentation = obj.NewInstance
  () - Standard methods for instances of this class.
* vtkConstrainedPointHandleRepresentation = obj.SafeDownCast
  (vtkObject o) - Standard methods for instances of this
  class.
* obj.SetCursorShape (vtkPolyData cursorShape) - Specify the
  cursor shape. Keep in mind that the shape will be aligned
  with the constraining plane by orienting it such that the
  x axis of the geometry lies along the normal of the plane.
* vtkPolyData = obj.GetCursorShape () - Specify the cursor
  shape. Keep in mind that the shape will be aligned with
  the constraining plane by orienting it such that the x
  axis of the geometry lies along the normal of the plane.
* obj.SetActiveCursorShape (vtkPolyData activeShape) -
  Specify the shape of the cursor (handle) when it is
  active. This is the geometry that will be used when the
  mouse is close to the handle or if the user is
  manipulating the handle.
* vtkPolyData = obj.GetActiveCursorShape () - Specify the
  shape of the cursor (handle) when it is active. This is
  the geometry that will be used when the mouse is close to
  the handle or if the user is manipulating the handle.
* obj.SetProjectionNormal (int ) - Set the projection normal
  to lie along the x, y, or z axis, or to be oblique. If it
  is oblique, then the plane is defined in the ObliquePlane
  ivar.
* int = obj.GetProjectionNormalMinValue () - Set the
  projection normal to lie along the x, y, or z axis, or to
  be oblique. If it is oblique, then the plane is defined in
  the ObliquePlane ivar.
* int = obj.GetProjectionNormalMaxValue () - Set the
  projection normal to lie along the x, y, or z axis, or to
  be oblique. If it is oblique, then the plane is defined in
  the ObliquePlane ivar.
* int = obj.GetProjectionNormal () - Set the projection
  normal to lie along the x, y, or z axis, or to be oblique.
  If it is oblique, then the plane is defined in the
  ObliquePlane ivar.
* obj.SetProjectionNormalToXAxis ()
* obj.SetProjectionNormalToYAxis ()
* obj.SetProjectionNormalToZAxis ()
* obj.SetProjectionNormalToOblique () - If the
  ProjectionNormal is set to Oblique, then this is the
  oblique plane used to constrain the handle position
* obj.SetObliquePlane (vtkPlane ) - If the ProjectionNormal
  is set to Oblique, then this is the oblique plane used to
  constrain the handle position
* vtkPlane = obj.GetObliquePlane () - If the
  ProjectionNormal is set to Oblique, then this is the
  oblique plane used to constrain the handle position
* obj.SetProjectionPosition (double position) - The position
  of the bounding plane from the origin along the normal.
  The origin and normal are defined in the oblique plane
  when the ProjectionNormal is Oblique. For the X, Y, and Z
  axes projection normals, the normal is the axis direction,
  and the origin is (0,0,0).
* double = obj.GetProjectionPosition () - The position of
  the bounding plane from the origin along the normal. The
  origin and normal are defined in the oblique plane when
  the ProjectionNormal is Oblique. For the X, Y, and Z axes
  projection normals, the normal is the axis direction, and
  the origin is (0,0,0).
* obj.AddBoundingPlane (vtkPlane plane) - A collection of
  plane equations used to bound the position of the point.
  This is in addition to confining the point to a plane -
  these contraints are meant to, for example, keep a point
  within the extent of an image. Using a set of plane
  equations allows for more complex bounds (such as bounding
  a point to an oblique reliced image that has hexagonal
  shape) than a simple extent.
* obj.RemoveBoundingPlane (vtkPlane plane) - A collection of
  plane equations used to bound the position of the point.
  This is in addition to confining the point to a plane -
  these contraints are meant to, for example, keep a point
  within the extent of an image. Using a set of plane
  equations allows for more complex bounds (such as bounding
  a point to an oblique reliced image that has hexagonal
  shape) than a simple extent.
* obj.RemoveAllBoundingPlanes () - A collection of plane
  equations used to bound the position of the point. This is
  in addition to confining the point to a plane - these
  contraints are meant to, for example, keep a point within
  the extent of an image. Using a set of plane equations
  allows for more complex bounds (such as bounding a point
  to an oblique reliced image that has hexagonal shape) than
  a simple extent.
* obj.SetBoundingPlanes (vtkPlaneCollection ) - A collection
  of plane equations used to bound the position of the
  point. This is in addition to confining the point to a
  plane - these contraints are meant to, for example, keep a
  point within the extent of an image. Using a set of plane
  equations allows for more complex bounds (such as bounding
  a point to an oblique reliced image that has hexagonal
  shape) than a simple extent.
* vtkPlaneCollection = obj.GetBoundingPlanes () - A
  collection of plane equations used to bound the position
  of the point. This is in addition to confining the point
  to a plane - these contraints are meant to, for example,
  keep a point within the extent of an image. Using a set of
  plane equations allows for more complex bounds (such as
  bounding a point to an oblique reliced image that has
  hexagonal shape) than a simple extent.
* obj.SetBoundingPlanes (vtkPlanes planes) - A collection of
  plane equations used to bound the position of the point.
  This is in addition to confining the point to a plane -
  these contraints are meant to, for example, keep a point
  within the extent of an image. Using a set of plane
  equations allows for more complex bounds (such as bounding
  a point to an oblique reliced image that has hexagonal
  shape) than a simple extent.
* int = obj.CheckConstraint (vtkRenderer renderer, double
  pos[2]) - Overridden from the base class. It converts the
  display co-ordinates to world co-ordinates. It returns 1
  if the point lies within the constrained region, otherwise
  return 0
* obj.SetPosition (double x, double y, double z) - Set/Get
  the position of the point in display coordinates. These
  are convenience methods that extend the superclasses'
  GetHandlePosition() method. Note that only the x-
  y coordinate values are used
* obj.SetPosition (double xyz[3]) - Set/Get the position of
  the point in display coordinates. These are convenience
  methods that extend the superclasses' GetHandlePosition()
  method. Note that only the x-y coordinate values are used
* obj.GetPosition (double xyz[3]) - Set/Get the position of
  the point in display coordinates. These are convenience
  methods that extend the superclasses' GetHandlePosition()
  method. Note that only the x-y coordinate values are used
* vtkProperty = obj.GetProperty () - This is the property
  used when the handle is not active (the mouse is not near
  the handle)
* vtkProperty = obj.GetSelectedProperty () - This is the
  property used when the mouse is near the handle (but the
  user is not yet interacting with it)
* vtkProperty = obj.GetActiveProperty () - This is the
  property used when the user is interacting with the
  handle.
* obj.SetRenderer (vtkRenderer ren) - Subclasses of
  vtkConstrainedPointHandleRepresentation must implement
  these methods. These are the methods that the widget and
  its representation use to communicate with each other.
* obj.BuildRepresentation () - Subclasses of
  vtkConstrainedPointHandleRepresentation must implement
  these methods. These are the methods that the widget and
  its representation use to communicate with each other.
* obj.StartWidgetInteraction (double eventPos[2]) -
  Subclasses of vtkConstrainedPointHandleRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* obj.WidgetInteraction (double eventPos[2]) - Subclasses of
  vtkConstrainedPointHandleRepresentation must implement
  these methods. These are the methods that the widget and
  its representation use to communicate with each other.
* int = obj.ComputeInteractionState (int X, int Y, int
  modify) - Subclasses of
  vtkConstrainedPointHandleRepresentation must implement
  these methods. These are the methods that the widget and
  its representation use to communicate with each other.
* obj.SetDisplayPosition (double pos[3]) - Method overridden
  from Superclass. computes the world co-ordinates using
  GetIntersectionPosition()
* obj.GetActors (vtkPropCollection ) - Methods to make this
  class behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - Methods to
  make this class behave as a vtkProp.
* int = obj.RenderOverlay (vtkViewport viewport) - Methods
  to make this class behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Methods to make this class behave as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Methods to make this class behave as a
  vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - Methods to
  make this class behave as a vtkProp.
* obj.ShallowCopy (vtkProp prop) - Methods to make this
  class behave as a vtkProp.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

