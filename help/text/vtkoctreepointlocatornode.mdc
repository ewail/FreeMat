
 Usage

This class represents a single spatial region in a 3D axis
octant partitioning. It is intended to work efficiently with
the vtkOctreePointLocator and is not meant for general use.
It is assumed the region bounds some set of points. The
ordering of the children is (-x,-y,-z),(+x,-y,-z),(-x,+y,-
z),(+x,+y,-z),(-x,-y,+z),(+x,-y,+z), (-x,+y,+z),(+x,+y,+z).
The portion of the domain assigned to an octant is Min < x
<= Max.
To create an instance of class vtkOctreePointLocatorNode,
simply invoke its constructor as follows

    obj = vtkOctreePointLocatorNode



 Methods

The class vtkOctreePointLocatorNode has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkOctreePointLocatorNode class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkOctreePointLocatorNode = obj.NewInstance ()
* vtkOctreePointLocatorNode = obj.SafeDownCast (vtkObject o)
* obj.SetNumberOfPoints (int numberOfPoints) - Set/Get the
  number of points contained in this region.
* int = obj.GetNumberOfPoints () - Set/Get the number of
  points contained in this region.
* obj.SetBounds (double xMin, double xMax, double yMin,
  double yMax, double zMin, double zMax) - Set/Get the
  bounds of the spatial region represented by this node.
  Caller allocates storage for 6-vector in GetBounds.
* obj.SetBounds (double b[6]) - Set/Get the bounds of the
  spatial region represented by this node. Caller allocates
  storage for 6-vector in GetBounds.
* obj.GetBounds (double b) const - Set/Get the bounds of the
  spatial region represented by this node. Caller allocates
  storage for 6-vector in GetBounds.
* obj.SetDataBounds (double xMin, double xMax, double yMin,
  double yMax, double zMin, double zMax) - Set/Get the
  bounds of the points contained in this spatial region.
  This may be smaller than the bounds of the region itself.
  Caller allocates storage for 6-vector in GetDataBounds.
* obj.GetDataBounds (double b) const - Set/Get the bounds of
  the points contained in this spatial region. This may be
  smaller than the bounds of the region itself. Caller
  allocates storage for 6-vector in GetDataBounds.
* obj.SetMinBounds (double minBounds[3]) - Set the xmax,
  ymax and zmax value of the bounds of this region
* obj.SetMaxBounds (double maxBounds[3]) - Set the xmin,
  ymin and zmin value of the bounds of this data within this
  region.
* obj.SetMinDataBounds (double minDataBounds[3]) - Set the
  xmax, ymax and zmax value of the bounds of this data
  within this region.
* obj.SetMaxDataBounds (double maxDataBounds[3]) - Get the
  ID associated with the region described by this node. If
  this is not a leaf node, this value should be -1.
* int = obj.GetID () - Get the ID associated with the region
  described by this node. If this is not a leaf node, this
  value should be -1.
* int = obj.GetMinID () - If this node is not a leaf node,
  there are leaf nodes below it whose regions represent a
  partitioning of this region. The IDs of these leaf nodes
  form a contigous set. Get the first of the first point's
  ID that is contained in this node.
* obj.CreateChildNodes () - Add the 8 children.
* obj.DeleteChildNodes () - Delete the 8 children.
* vtkOctreePointLocatorNode = obj.GetChild (int i) - Get a
  pointer to the ith child of this node.
* int = obj.IntersectsRegion (vtkPlanesIntersection pi, int
  useDataBounds) - A vtkPlanesIntersection object represents
  a convex 3D region bounded by planes, and it is capable of
  computing intersections of boxes with itself. Return 1 if
  this spatial region intersects the spatial region
  described by the vtkPlanesIntersection object. Use the
  possibly smaller bounds of the points within the region if
  useDataBounds is non-zero.
* int = obj.ContainsPoint (double x, double y, double z, int
  useDataBounds) - Return 1 if this spatial region entirely
  contains the given point. Use the possibly smaller bounds
  of the points within the region if useDataBounds is non-
  zero.
* double = obj.GetDistance2ToBoundary (double x, double y,
  double z, vtkOctreePointLocatorNode top, int
  useDataBounds) - Calculate the distance squared from any
  point to the boundary of this region. Use the boundary of
  the points within the region if useDataBounds is non-zero.
* double = obj.GetDistance2ToBoundary (double x, double y,
  double z, double boundaryPt, vtkOctreePointLocatorNode
  top, int useDataBounds) - Calculate the distance squared
  from any point to the boundary of this region. Use the
  boundary of the points within the region if useDataBounds
  is non-zero. Set boundaryPt to the point on the boundary.
* double = obj.GetDistance2ToInnerBoundary (double x, double
  y, double z, vtkOctreePointLocatorNode top) - Calculate
  the distance from the specified point (which is required
  to be inside this spatial region) to an interior boundary.
  An interior boundary is one that is not also an boundary
  of the entire space partitioned by the tree of
  vtkOctreePointLocatorNode's.
* int = obj.GetSubOctantIndex (double point, int
  CheckContainment) - Return the id of the suboctant that a
  given point is in. If CheckContainment is non-zero then it
  checks whether the point is in the actual bounding box of
  the suboctant, otherwise it only checks which octant the
  point is in that is created from the axis-aligned
  partitioning of the domain at this octant's center.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

