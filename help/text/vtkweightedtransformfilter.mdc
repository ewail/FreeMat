
 Usage

To create an instance of class vtkWeightedTransformFilter,
simply invoke its constructor as follows

    obj = vtkWeightedTransformFilter



 Methods

The class vtkWeightedTransformFilter has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkWeightedTransformFilter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkWeightedTransformFilter = obj.NewInstance ()
* vtkWeightedTransformFilter = obj.SafeDownCast (vtkObject
  o)
* long = obj.GetMTime () - Return the MTime also considering
  the filter's transforms.
* obj.SetWeightArray (string ) - WeightArray is the string
  name of the DataArray in the input's FieldData that holds
  the weighting coefficients for each point. The filter will
  first look for the array in the input's PointData
  FieldData. If the array isn't there, the filter looks in
  the input's FieldData. The WeightArray can have tuples of
  any length, but must have a tuple for every point in the
  input data set. This array transforms points, normals, and
  vectors.
* string = obj.GetWeightArray () - WeightArray is the string
  name of the DataArray in the input's FieldData that holds
  the weighting coefficients for each point. The filter will
  first look for the array in the input's PointData
  FieldData. If the array isn't there, the filter looks in
  the input's FieldData. The WeightArray can have tuples of
  any length, but must have a tuple for every point in the
  input data set. This array transforms points, normals, and
  vectors.
* obj.SetTransformIndexArray (string ) - TransformIndexArray
  is the string name of the DataArray in the input's
  FieldData that holds the indices for the transforms for
  each point. These indices are used to select which
  transforms each weight of the DataArray refers. If the
  TransformIndexArray is not specified, the weights of each
  point are assumed to map directly to a transform. This
  DataArray must be of type UnsignedShort, which effectively
  limits the number of transforms to 65536 if a transform
  index array is used.
  The filter will first look for the array in the input's
  PointData FieldData. If the array isn't there, the filter
  looks in the input's FieldData. The TransformIndexArray
  can have tuples of any length, but must have a tuple for
  every point in the input data set. This array transforms
  points, normals, and vectors.
* string = obj.GetTransformIndexArray () -
  TransformIndexArray is the string name of the DataArray in
  the input's FieldData that holds the indices for the
  transforms for each point. These indices are used to
  select which transforms each weight of the DataArray
  refers. If the TransformIndexArray is not specified, the
  weights of each point are assumed to map directly to a
  transform. This DataArray must be of type UnsignedShort,
  which effectively limits the number of transforms to 65536
  if a transform index array is used.
  The filter will first look for the array in the input's
  PointData FieldData. If the array isn't there, the filter
  looks in the input's FieldData. The TransformIndexArray
  can have tuples of any length, but must have a tuple for
  every point in the input data set. This array transforms
  points, normals, and vectors.
* obj.SetCellDataWeightArray (string ) - The
  CellDataWeightArray is analogous to the WeightArray,
  except for CellData. The array is searched for first in
  the CellData FieldData, then in the input's FieldData. The
  data array must have a tuple for each cell. This array is
  used to transform only normals and vectors.
* string = obj.GetCellDataWeightArray () - The
  CellDataWeightArray is analogous to the WeightArray,
  except for CellData. The array is searched for first in
  the CellData FieldData, then in the input's FieldData. The
  data array must have a tuple for each cell. This array is
  used to transform only normals and vectors.
* obj.SetCellDataTransformIndexArray (string )
* string = obj.GetCellDataTransformIndexArray ()
* obj.SetTransform (vtkAbstractTransform transform, int num)
  - Set or Get one of the filter's transforms. The transform
  number must be less than the number of transforms
  allocated for the object. Setting a transform slot to NULL
  is equivalent to assigning an overriding weight of zero to
  that filter slot.
* vtkAbstractTransform = obj.GetTransform (int num) - Set or
  Get one of the filter's transforms. The transform number
  must be less than the number of transforms allocated for
  the object. Setting a transform slot to NULL is equivalent
  to assigning an overriding weight of zero to that filter
  slot.
* obj.SetNumberOfTransforms (int num) - Set the number of
  transforms for the filter. References to non-existent
  filter numbers in the data array is equivalent to a weight
  of zero (i.e., no contribution of that filter or weight).
  The maximum number of transforms is limited to 65536 if
  transform index arrays are used.
* int = obj.GetNumberOfTransforms () - Set the number of
  transforms for the filter. References to non-existent
  filter numbers in the data array is equivalent to a weight
  of zero (i.e., no contribution of that filter or weight).
  The maximum number of transforms is limited to 65536 if
  transform index arrays are used.
* obj.AddInputValuesOn () - If AddInputValues is true, the
  output values of this filter will be offset from the input
  values. The effect is exactly equivalent to having an
  identity transform of weight 1 added into each output
  point.
* obj.AddInputValuesOff () - If AddInputValues is true, the
  output values of this filter will be offset from the input
  values. The effect is exactly equivalent to having an
  identity transform of weight 1 added into each output
  point.
* obj.SetAddInputValues (int ) - If AddInputValues is true,
  the output values of this filter will be offset from the
  input values. The effect is exactly equivalent to having
  an identity transform of weight 1 added into each output
  point.
* int = obj.GetAddInputValues () - If AddInputValues is
  true, the output values of this filter will be offset from
  the input values. The effect is exactly equivalent to
  having an identity transform of weight 1 added into each
  output point.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

