
 Usage

vtkExtentTranslator generates a structured extent from an
unstructured extent. It uses a recursive scheme that splits
the largest axis. A hard coded extent can be used for a
starting point.
To create an instance of class vtkExtentTranslator, simply
invoke its constructor as follows

    obj = vtkExtentTranslator



 Methods

The class vtkExtentTranslator has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkExtentTranslator class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkExtentTranslator = obj.NewInstance ()
* vtkExtentTranslator = obj.SafeDownCast (vtkObject o)
* obj.SetWholeExtent (int , int , int , int , int , int ) -
  Set the Piece/NumPieces. Set the WholeExtent and then call
  PieceToExtent. The result can be obtained from the Extent
  ivar.
* obj.SetWholeExtent (int a[6]) - Set the Piece/NumPieces.
  Set the WholeExtent and then call PieceToExtent. The
  result can be obtained from the Extent ivar.
* int = obj. GetWholeExtent () - Set the Piece/NumPieces.
  Set the WholeExtent and then call PieceToExtent. The
  result can be obtained from the Extent ivar.
* obj.SetExtent (int , int , int , int , int , int ) - Set
  the Piece/NumPieces. Set the WholeExtent and then call
  PieceToExtent. The result can be obtained from the Extent
  ivar.
* obj.SetExtent (int a[6]) - Set the Piece/NumPieces. Set
  the WholeExtent and then call PieceToExtent. The result
  can be obtained from the Extent ivar.
* int = obj. GetExtent () - Set the Piece/NumPieces. Set the
  WholeExtent and then call PieceToExtent. The result can be
  obtained from the Extent ivar.
* obj.SetPiece (int ) - Set the Piece/NumPieces. Set the
  WholeExtent and then call PieceToExtent. The result can be
  obtained from the Extent ivar.
* int = obj.GetPiece () - Set the Piece/NumPieces. Set the
  WholeExtent and then call PieceToExtent. The result can be
  obtained from the Extent ivar.
* obj.SetNumberOfPieces (int ) - Set the Piece/NumPieces.
  Set the WholeExtent and then call PieceToExtent. The
  result can be obtained from the Extent ivar.
* int = obj.GetNumberOfPieces () - Set the Piece/NumPieces.
  Set the WholeExtent and then call PieceToExtent. The
  result can be obtained from the Extent ivar.
* obj.SetGhostLevel (int ) - Set the Piece/NumPieces. Set
  the WholeExtent and then call PieceToExtent. The result
  can be obtained from the Extent ivar.
* int = obj.GetGhostLevel () - Set the Piece/NumPieces. Set
  the WholeExtent and then call PieceToExtent. The result
  can be obtained from the Extent ivar.
* int = obj.PieceToExtent () - These are the main methods
  that should be called. These methods are responsible for
  converting a piece to an extent. The signatures without
  arguments are only thread safe when each thread accesses a
  different instance. The signatures with arguements are
  fully thread safe.
* int = obj.PieceToExtentByPoints () - These are the main
  methods that should be called. These methods are
  responsible for converting a piece to an extent. The
  signatures without arguments are only thread safe when
  each thread accesses a different instance. The signatures
  with arguements are fully thread safe.
* int = obj.PieceToExtentThreadSafe (int piece, int
  numPieces, int ghostLevel, int wholeExtent, int
  resultExtent, int splitMode, int byPoints) - These are the
  main methods that should be called. These methods are
  responsible for converting a piece to an extent. The
  signatures without arguments are only thread safe when
  each thread accesses a different instance. The signatures
  with arguements are fully thread safe.
* obj.SetSplitModeToBlock () - How should the streamer break
  up extents. Block mode tries to break an extent up into
  cube blocks. It always chooses the largest axis to split.
  Slab mode first breaks up the Z axis. If it gets to one
  slice, then it starts breaking up other axes.
* obj.SetSplitModeToXSlab () - How should the streamer break
  up extents. Block mode tries to break an extent up into
  cube blocks. It always chooses the largest axis to split.
  Slab mode first breaks up the Z axis. If it gets to one
  slice, then it starts breaking up other axes.
* obj.SetSplitModeToYSlab () - How should the streamer break
  up extents. Block mode tries to break an extent up into
  cube blocks. It always chooses the largest axis to split.
  Slab mode first breaks up the Z axis. If it gets to one
  slice, then it starts breaking up other axes.
* obj.SetSplitModeToZSlab () - How should the streamer break
  up extents. Block mode tries to break an extent up into
  cube blocks. It always chooses the largest axis to split.
  Slab mode first breaks up the Z axis. If it gets to one
  slice, then it starts breaking up other axes.
* int = obj.GetSplitMode () - How should the streamer break
  up extents. Block mode tries to break an extent up into
  cube blocks. It always chooses the largest axis to split.
  Slab mode first breaks up the Z axis. If it gets to one
  slice, then it starts breaking up other axes.
* obj.SetSplitPath (int len, int splitpath)


* FreeMat_Documentation
* Visualization_Toolkit_Common_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

