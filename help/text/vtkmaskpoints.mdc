
 Usage

vtkMaskPoints is a filter that passes through points and
point attributes from input dataset. (Other geometry is not
passed through.) It is possible to mask every nth point, and
to specify an initial offset to begin masking from. A
special random mode feature enables random selection of
points. The filter can also generate vertices (topological
primitives) as well as points. This is useful because
vertices are rendered while points are not.
To create an instance of class vtkMaskPoints, simply invoke
its constructor as follows

    obj = vtkMaskPoints



 Methods

The class vtkMaskPoints has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkMaskPoints class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkMaskPoints = obj.NewInstance ()
* vtkMaskPoints = obj.SafeDownCast (vtkObject o)
* obj.SetOnRatio (int ) - Turn on every nth point.
* int = obj.GetOnRatioMinValue () - Turn on every nth point.
* int = obj.GetOnRatioMaxValue () - Turn on every nth point.
* int = obj.GetOnRatio () - Turn on every nth point.
* obj.SetMaximumNumberOfPoints (vtkIdType ) - Limit the
  number of points that can be passed through.
* vtkIdType = obj.GetMaximumNumberOfPointsMinValue () -
  Limit the number of points that can be passed through.
* vtkIdType = obj.GetMaximumNumberOfPointsMaxValue () -
  Limit the number of points that can be passed through.
* vtkIdType = obj.GetMaximumNumberOfPoints () - Limit the
  number of points that can be passed through.
* obj.SetOffset (vtkIdType ) - Start with this point.
* vtkIdType = obj.GetOffsetMinValue () - Start with this
  point.
* vtkIdType = obj.GetOffsetMaxValue () - Start with this
  point.
* vtkIdType = obj.GetOffset () - Start with this point.
* obj.SetRandomMode (int ) - Special flag causes
  randomization of point selection. If this mode is on,
  statistically every nth point (i.e., OnRatio) will be
  displayed.
* int = obj.GetRandomMode () - Special flag causes
  randomization of point selection. If this mode is on,
  statistically every nth point (i.e., OnRatio) will be
  displayed.
* obj.RandomModeOn () - Special flag causes randomization of
  point selection. If this mode is on, statistically every
  nth point (i.e., OnRatio) will be displayed.
* obj.RandomModeOff () - Special flag causes randomization
  of point selection. If this mode is on, statistically
  every nth point (i.e., OnRatio) will be displayed.
* obj.SetGenerateVertices (int ) - Generate output polydata
  vertices as well as points. A useful convenience method
  because vertices are drawn (they are topology) while
  points are not (they are geometry). By default this method
  is off.
* int = obj.GetGenerateVertices () - Generate output
  polydata vertices as well as points. A useful convenience
  method because vertices are drawn (they are topology)
  while points are not (they are geometry). By default this
  method is off.
* obj.GenerateVerticesOn () - Generate output polydata
  vertices as well as points. A useful convenience method
  because vertices are drawn (they are topology) while
  points are not (they are geometry). By default this method
  is off.
* obj.GenerateVerticesOff () - Generate output polydata
  vertices as well as points. A useful convenience method
  because vertices are drawn (they are topology) while
  points are not (they are geometry). By default this method
  is off.
* obj.SetSingleVertexPerCell (int ) - When vertex generation
  is enabled, by default vertices are produced as multi-
  vertex cells (more than one per cell), if you wish to have
  a single vertex per cell, enable this flag.
* int = obj.GetSingleVertexPerCell () - When vertex
  generation is enabled, by default vertices are produced as
  multi-vertex cells (more than one per cell), if you wish
  to have a single vertex per cell, enable this flag.
* obj.SingleVertexPerCellOn () - When vertex generation is
  enabled, by default vertices are produced as multi-vertex
  cells (more than one per cell), if you wish to have a
  single vertex per cell, enable this flag.
* obj.SingleVertexPerCellOff () - When vertex generation is
  enabled, by default vertices are produced as multi-vertex
  cells (more than one per cell), if you wish to have a
  single vertex per cell, enable this flag.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

