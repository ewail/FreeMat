
 Usage

vtkQuadraticPyramid is a concrete implementation of
vtkNonLinearCell to represent a three-dimensional, 13-node
isoparametric parabolic pyramid. The interpolation is the
standard finite element, quadratic isoparametric shape
function. The cell includes a mid-edge node. The ordering of
the thirteen points defining the cell is point ids (0-4,5-
12) where point ids 0-4 are the five corner vertices of the
pyramid; followed by eight midedge nodes (5-12). Note that
these midedge nodes correspond lie on the edges defined by
(0,1), (1,2), (2,3), (3,0), (0,4), (1,4), (2,4), (3,4).
To create an instance of class vtkQuadraticPyramid, simply
invoke its constructor as follows

    obj = vtkQuadraticPyramid



 Methods

The class vtkQuadraticPyramid has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkQuadraticPyramid class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkQuadraticPyramid = obj.NewInstance ()
* vtkQuadraticPyramid = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - Implement the vtkCell
  API. See the vtkCell API for descriptions of these
  methods.
* vtkCell = obj.GetFace (int faceId) - Implement the vtkCell
  API. See the vtkCell API for descriptions of these
  methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray tets,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this quadratic triangle using scalar value provided. Like
  contouring, except that it cuts the triangle to produce
  linear triangles.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the quadratic pyramid in parametric
  coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[13]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [39]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

