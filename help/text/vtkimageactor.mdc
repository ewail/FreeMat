
 Usage

vtkImageActor is used to render an image in a 3D scene. The
image is placed at the origin of the image, and its size is
controlled by the image dimensions and image spacing. The
orientation of the image is orthogonal to one of the x-y-
z axes depending on which plane the image is defined in.
vtkImageActor duplicates the functionality of combinations
of other VTK classes in a convenient, single class.
To create an instance of class vtkImageActor, simply invoke
its constructor as follows

    obj = vtkImageActor



 Methods

The class vtkImageActor has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkImageActor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageActor = obj.NewInstance ()
* vtkImageActor = obj.SafeDownCast (vtkObject o)
* obj.SetInput (vtkImageData ) - Set/Get the image data
  input for the image actor.
* vtkImageData = obj.GetInput () - Set/Get the image data
  input for the image actor.
* int = obj.GetInterpolate () - Turn on/off linear
  interpolation of the image when rendering.
* obj.SetInterpolate (int ) - Turn on/off linear
  interpolation of the image when rendering.
* obj.InterpolateOn () - Turn on/off linear interpolation of
  the image when rendering.
* obj.InterpolateOff () - Turn on/off linear interpolation
  of the image when rendering.
* obj.SetOpacity (double ) - Set/Get the object's opacity.
  1.0 is totally opaque and 0.0 is completely transparent.
* double = obj.GetOpacityMinValue () - Set/Get the object's
  opacity. 1.0 is totally opaque and 0.0 is completely
  transparent.
* double = obj.GetOpacityMaxValue () - Set/Get the object's
  opacity. 1.0 is totally opaque and 0.0 is completely
  transparent.
* double = obj.GetOpacity () - Set/Get the object's opacity.
  1.0 is totally opaque and 0.0 is completely transparent.
* obj.SetDisplayExtent (int extent[6]) - The image extent is
  generally set explicitly, but if not set it will be
  determined from the input image data.
* obj.SetDisplayExtent (int minX, int maxX, int minY, int
  maxY, int minZ, int maxZ) - The image extent is generally
  set explicitly, but if not set it will be determined from
  the input image data.
* obj.GetDisplayExtent (int extent[6]) - The image extent is
  generally set explicitly, but if not set it will be
  determined from the input image data.
* int = obj.GetDisplayExtent () - Get the bounds of this
  image actor. Either copy the bounds into a user provided
  array or return a pointer to an array. In either case the
  boudns is expressed as a 6-vector (xmin,xmax, ymin,ymax,
  zmin,zmax).
* double = obj.GetBounds () - Get the bounds of this image
  actor. Either copy the bounds into a user provided array
  or return a pointer to an array. In either case the boudns
  is expressed as a 6-vector (xmin,xmax, ymin,ymax,
  zmin,zmax).
* obj.GetBounds (double bounds[6]) - Get the bounds of this
  image actor. Either copy the bounds into a user provided
  array or return a pointer to an array. In either case the
  boudns is expressed as a 6-vector (xmin,xmax, ymin,ymax,
  zmin,zmax).
* obj.GetDisplayBounds (double bounds[6]) - Get the bounds
  of the data that is displayed by this image actor. If the
  transformation matrix for this actor is the identity
  matrix, this will return the same value as GetBounds.
* int = obj.GetSliceNumber () - Return the slice number
  (&amp; min/max slice number) computed from the display
  extent.
* int = obj.GetSliceNumberMax () - Return the slice number
  (&amp; min/max slice number) computed from the display
  extent.
* int = obj.GetSliceNumberMin () - Return the slice number
  (&amp; min/max slice number) computed from the display
  extent.
* obj.SetZSlice (int z) - Set/Get the current slice number.
  The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* int = obj.GetZSlice () - Set/Get the current slice number.
  The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* int = obj.GetWholeZMin () - Set/Get the current slice
  number. The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)
* int = obj.GetWholeZMax () - Set/Get the current slice
  number. The axis Z in ZSlice does not necessarily have any
  relation to the z axis of the data on disk. It is simply
  the axis orthogonal to the x,y, display plane.
  GetWholeZMax and Min are convenience methods for obtaining
  the number of slices that can be displayed. Again the
  number of slices is in reference to the display z axis,
  which is not necessarily the z axis on disk. (due to
  reformatting etc)


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

