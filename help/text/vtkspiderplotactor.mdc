
 Usage

vtkSpiderPlotActor generates a spider plot from an input
field (i.e., vtkDataObject). A spider plot represents N-
dimensional data by using a set of N axes that originate
from the center of a circle, and form the spokes of a wheel
(like a spider web). Each N-dimensional point is plotted as
a polyline that forms a closed polygon; the vertices of the
polygon are plotted against the radial axes.
To use this class, you must specify an input data object.
You'll probably also want to specify the position of the
plot be setting the Position and Position2 instance
variables, which define a rectangle in which the plot lies.
Another important parameter is the IndependentVariables
ivar, which tells the instance how to interpret the field
data (independent variables as the rows or columns of the
field). There are also many other instance variables that
control the look of the plot includes its title and legend.
Set the text property/attributes of the title and the labels
through the vtkTextProperty objects associated with these
components.
To create an instance of class vtkSpiderPlotActor, simply
invoke its constructor as follows

    obj = vtkSpiderPlotActor



 Methods

The class vtkSpiderPlotActor has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkSpiderPlotActor class.

* string = obj.GetClassName () - Standard methods for type
  information and printing.
* int = obj.IsA (string name) - Standard methods for type
  information and printing.
* vtkSpiderPlotActor = obj.NewInstance () - Standard methods
  for type information and printing.
* vtkSpiderPlotActor = obj.SafeDownCast (vtkObject o) -
  Standard methods for type information and printing.
* obj.SetInput (vtkDataObject ) - Set the input to the
  spider plot actor.
* vtkDataObject = obj.GetInput () - Get the input data
  object to this actor.
* obj.SetIndependentVariables (int ) - Specify whether to
  use the rows or columns as independent variables. If
  columns, then each row represents a separate point. If
  rows, then each column represents a separate point.
* int = obj.GetIndependentVariablesMinValue () - Specify
  whether to use the rows or columns as independent
  variables. If columns, then each row represents a separate
  point. If rows, then each column represents a separate
  point.
* int = obj.GetIndependentVariablesMaxValue () - Specify
  whether to use the rows or columns as independent
  variables. If columns, then each row represents a separate
  point. If rows, then each column represents a separate
  point.
* int = obj.GetIndependentVariables () - Specify whether to
  use the rows or columns as independent variables. If
  columns, then each row represents a separate point. If
  rows, then each column represents a separate point.
* obj.SetIndependentVariablesToColumns () - Specify whether
  to use the rows or columns as independent variables. If
  columns, then each row represents a separate point. If
  rows, then each column represents a separate point.
* obj.SetIndependentVariablesToRows () - Specify whether to
  use the rows or columns as independent variables. If
  columns, then each row represents a separate point. If
  rows, then each column represents a separate point.
* obj.SetTitleVisibility (int ) - Enable/Disable the display
  of a plot title.
* int = obj.GetTitleVisibility () - Enable/Disable the
  display of a plot title.
* obj.TitleVisibilityOn () - Enable/Disable the display of a
  plot title.
* obj.TitleVisibilityOff () - Enable/Disable the display of
  a plot title.
* obj.SetTitle (string ) - Set/Get the title of the spider
  plot.
* string = obj.GetTitle () - Set/Get the title of the spider
  plot.
* obj.SetTitleTextProperty (vtkTextProperty p) - Set/Get the
  title text property.
* vtkTextProperty = obj.GetTitleTextProperty () - Set/Get
  the title text property.
* obj.SetLabelVisibility (int )
* int = obj.GetLabelVisibility ()
* obj.LabelVisibilityOn ()
* obj.LabelVisibilityOff ()
* obj.SetLabelTextProperty (vtkTextProperty p) - Enable/
  Disable the creation of a legend. If on, the legend labels
  will be created automatically unless the per plot legend
  symbol has been set.
* vtkTextProperty = obj.GetLabelTextProperty () - Enable/
  Disable the creation of a legend. If on, the legend labels
  will be created automatically unless the per plot legend
  symbol has been set.
* obj.SetNumberOfRings (int ) - Specify the number of
  circumferential rings. If set to zero, then none will be
  shown; othewise the specified number will be shown.
* int = obj.GetNumberOfRingsMinValue () - Specify the number
  of circumferential rings. If set to zero, then none will
  be shown; othewise the specified number will be shown.
* int = obj.GetNumberOfRingsMaxValue () - Specify the number
  of circumferential rings. If set to zero, then none will
  be shown; othewise the specified number will be shown.
* int = obj.GetNumberOfRings () - Specify the number of
  circumferential rings. If set to zero, then none will be
  shown; othewise the specified number will be shown.
* obj.SetAxisLabel (int i, string ) - Specify the names of
  the radial spokes (i.e., the radial axes). If not
  specified, then an integer number is automatically
  generated.
* string = obj.GetAxisLabel (int i) - Specify the names of
  the radial spokes (i.e., the radial axes). If not
  specified, then an integer number is automatically
  generated.
* obj.SetAxisRange (int i, double min, double max) - Specify
  the range of data on each radial axis. If not specified,
  then the range is computed automatically.
* obj.SetAxisRange (int i, double range[2]) - Specify the
  range of data on each radial axis. If not specified, then
  the range is computed automatically.
* obj.GetAxisRange (int i, double range[2]) - Specify the
  range of data on each radial axis. If not specified, then
  the range is computed automatically.
* obj.SetPlotColor (int i, double r, double g, double b) -
  Specify colors for each plot. If not specified, they are
  automatically generated.
* obj.SetPlotColor (int i, double color[3]) - Specify colors
  for each plot. If not specified, they are automatically
  generated.
* obj.SetLegendVisibility (int ) - Enable/Disable the
  creation of a legend. If on, the legend labels will be
  created automatically unless the per plot legend symbol
  has been set.
* int = obj.GetLegendVisibility () - Enable/Disable the
  creation of a legend. If on, the legend labels will be
  created automatically unless the per plot legend symbol
  has been set.
* obj.LegendVisibilityOn () - Enable/Disable the creation of
  a legend. If on, the legend labels will be created
  automatically unless the per plot legend symbol has been
  set.
* obj.LegendVisibilityOff () - Enable/Disable the creation
  of a legend. If on, the legend labels will be created
  automatically unless the per plot legend symbol has been
  set.
* vtkLegendBoxActor = obj.GetLegendActor () - Retrieve
  handles to the legend box. This is useful if you would
  like to manually control the legend appearance.
* int = obj.RenderOverlay (vtkViewport ) - Draw the spider
  plot.
* int = obj.RenderOpaqueGeometry (vtkViewport ) - Draw the
  spider plot.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  ) - Does this prop have some translucent polygonal
  geometry?
* int = obj.HasTranslucentPolygonalGeometry () - Does this
  prop have some translucent polygonal geometry?
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

