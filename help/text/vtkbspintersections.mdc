
 Usage

Given an axis aligned binary spatial partitioning described
by a vtkBSPCuts object, perform intersection queries on
various geometric entities with regions of the spatial
partitioning.
To create an instance of class vtkBSPIntersections, simply
invoke its constructor as follows

    obj = vtkBSPIntersections



 Methods

The class vtkBSPIntersections has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkBSPIntersections class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkBSPIntersections = obj.NewInstance ()
* vtkBSPIntersections = obj.SafeDownCast (vtkObject o)
* obj.SetCuts (vtkBSPCuts cuts)
* vtkBSPCuts = obj.GetCuts ()
* int = obj.GetBounds (double bounds)
* int = obj.GetNumberOfRegions ()
* int = obj.GetRegionBounds (int regionID, double bounds[6])
* int = obj.GetRegionDataBounds (int regionID, double bounds
  [6])
* int = obj.IntersectsBox (int regionId, double x) -
  Determine whether a region of the spatial decomposition
  intersects an axis aligned box.
* int = obj.IntersectsBox (int regionId, double xmin, double
  xmax, double ymin, double ymax, double zmin, double zmax)
  - Determine whether a region of the spatial decomposition
  intersects an axis aligned box.
* int = obj.IntersectsBox (int ids, int len, double x) -
  Compute a list of the Ids of all regions that intersect
  the specified axis aligned box. Returns: the number of ids
  in the list.
* int = obj.IntersectsBox (int ids, int len, double x0,
  double x1, double y0, double y1, double z0, double z1) -
  Compute a list of the Ids of all regions that intersect
  the specified axis aligned box. Returns: the number of ids
  in the list.
* int = obj.IntersectsSphere2 (int regionId, double x,
  double y, double z, double rSquared) - Determine whether a
  region of the spatial decomposition intersects a sphere,
  given the center of the sphere and the square of it's
  radius.
* int = obj.IntersectsSphere2 (int ids, int len, double x,
  double y, double z, double rSquared) - Compute a list of
  the Ids of all regions that intersect the specified
  sphere. The sphere is given by it's center and the square
  of it's radius. Returns: the number of ids in the list.
* int = obj.IntersectsCell (int regionId, vtkCell cell, int
  cellRegion) - Determine whether a region of the spatial
  decomposition intersects the given cell. If you already
  know the region that the cell centroid lies in, provide
  that as the last argument to make the computation quicker.
* int = obj.IntersectsCell (int ids, int len, vtkCell cell,
  int cellRegion) - Compute a list of the Ids of all regions
  that intersect the given cell. If you alrady know the
  region that the cell centroid lies in, provide that as the
  last argument to make the computation quicker. Returns the
  number of regions the cell intersects.
* int = obj.GetComputeIntersectionsUsingDataBounds ()
* obj.SetComputeIntersectionsUsingDataBounds (int c)
* obj.ComputeIntersectionsUsingDataBoundsOn ()
* obj.ComputeIntersectionsUsingDataBoundsOff ()


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

