
 Usage

vtkAppendPolyData is a filter that appends one of more
polygonal datasets into a single polygonal dataset. All
geometry is extracted and appended, but point and cell
attributes (i.e., scalars, vectors, normals) are extracted
and appended only if all datasets have the point and/or cell
attributes available. (For example, if one dataset has point
scalars but another does not, point scalars will not be
appended.)
To create an instance of class vtkAppendPolyData, simply
invoke its constructor as follows

    obj = vtkAppendPolyData



 Methods

The class vtkAppendPolyData has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkAppendPolyData class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkAppendPolyData = obj.NewInstance ()
* vtkAppendPolyData = obj.SafeDownCast (vtkObject o)
* obj.SetUserManagedInputs (int ) - UserManagedInputs allows
  the user to set inputs by number instead of using the
  AddInput/RemoveInput functions. Calls to
  SetNumberOfInputs/SetInputByNumber should not be mixed
  with calls to AddInput/RemoveInput. By default,
  UserManagedInputs is false.
* int = obj.GetUserManagedInputs () - UserManagedInputs
  allows the user to set inputs by number instead of using
  the AddInput/RemoveInput functions. Calls to
  SetNumberOfInputs/SetInputByNumber should not be mixed
  with calls to AddInput/RemoveInput. By default,
  UserManagedInputs is false.
* obj.UserManagedInputsOn () - UserManagedInputs allows the
  user to set inputs by number instead of using the
  AddInput/RemoveInput functions. Calls to
  SetNumberOfInputs/SetInputByNumber should not be mixed
  with calls to AddInput/RemoveInput. By default,
  UserManagedInputs is false.
* obj.UserManagedInputsOff () - UserManagedInputs allows the
  user to set inputs by number instead of using the
  AddInput/RemoveInput functions. Calls to
  SetNumberOfInputs/SetInputByNumber should not be mixed
  with calls to AddInput/RemoveInput. By default,
  UserManagedInputs is false.
* obj.AddInput (vtkPolyData ) - Add a dataset to the list of
  data to append. Should not be used when UserManagedInputs
  is true, use SetInputByNumber instead.
* obj.RemoveInput (vtkPolyData ) - Remove a dataset from the
  list of data to append. Should not be used when
  UserManagedInputs is true, use SetInputByNumber (NULL)
  instead.
* obj.SetNumberOfInputs (int num) - Directly set(allocate)
  number of inputs, should only be used when
  UserManagedInputs is true.
* obj.SetInputByNumber (int num, vtkPolyData input)
* obj.SetParallelStreaming (int ) - ParallelStreaming is for
  a particular application. It causes this filter to ask for
  a different piece from each of its inputs. If all the
  inputs are the same, then the output of this append filter
  is the whole dataset pieced back together. Duplicate
  points are create along the seams. The purpose of this
  feature is to get data parallelism at a course scale. Each
  of the inputs can be generated in a different process at
  the same time.
* int = obj.GetParallelStreaming () - ParallelStreaming is
  for a particular application. It causes this filter to ask
  for a different piece from each of its inputs. If all the
  inputs are the same, then the output of this append filter
  is the whole dataset pieced back together. Duplicate
  points are create along the seams. The purpose of this
  feature is to get data parallelism at a course scale. Each
  of the inputs can be generated in a different process at
  the same time.
* obj.ParallelStreamingOn () - ParallelStreaming is for a
  particular application. It causes this filter to ask for a
  different piece from each of its inputs. If all the inputs
  are the same, then the output of this append filter is the
  whole dataset pieced back together. Duplicate points are
  create along the seams. The purpose of this feature is to
  get data parallelism at a course scale. Each of the inputs
  can be generated in a different process at the same time.
* obj.ParallelStreamingOff () - ParallelStreaming is for a
  particular application. It causes this filter to ask for a
  different piece from each of its inputs. If all the inputs
  are the same, then the output of this append filter is the
  whole dataset pieced back together. Duplicate points are
  create along the seams. The purpose of this feature is to
  get data parallelism at a course scale. Each of the inputs
  can be generated in a different process at the same time.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

