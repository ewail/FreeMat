
 Usage

vtkPolygon is a concrete implementation of vtkCell to
represent a 2D n-sided polygon. The polygons cannot have any
internal holes, and cannot self-intersect. Define the
polygon with n-points ordered in the counter- clockwise
direction; do not repeat the last point.
To create an instance of class vtkPolygon, simply invoke its
constructor as follows

    obj = vtkPolygon



 Methods

The class vtkPolygon has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkPolygon class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkPolygon = obj.NewInstance ()
* vtkPolygon = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetCellDimension () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - See the vtkCell API
  for descriptions of these methods.
* vtkCell = obj.GetFace (int ) - See the vtkCell API for
  descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray tris,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - See
  the vtkCell API for descriptions of these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - See the vtkCell API for
  descriptions of these methods.
* int = obj.IsPrimaryCell () - Compute the area of a
  polygon. This is a convenience function which simply calls
  static double ComputeArea(vtkPoints *p, vtkIdType numPts,
  vtkIdType *pts, double normal[3]); with the appropriate
  parameters from the instantiated vtkPolygon.
* double = obj.ComputeArea () - Compute the area of a
  polygon. This is a convenience function which simply calls
  static double ComputeArea(vtkPoints *p, vtkIdType numPts,
  vtkIdType *pts, double normal[3]); with the appropriate
  parameters from the instantiated vtkPolygon.
* obj.InterpolateFunctions (double pcoords[3], double sf) -
  Compute the interpolation functions/derivatives (aka shape
  functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs) -
  Compute the interpolation functions/derivatives (aka shape
  functions/derivatives)
* obj.ComputeWeights (double x[3], double weights) - Compute
  interpolation weights using 1/r**2 normalized sum.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

