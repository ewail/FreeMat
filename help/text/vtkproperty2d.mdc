
 Usage

vtkProperty2D contains properties used to render two
dimensional images and annotations.
To create an instance of class vtkProperty2D, simply invoke
its constructor as follows

    obj = vtkProperty2D



 Methods

The class vtkProperty2D has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkProperty2D class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkProperty2D = obj.NewInstance ()
* vtkProperty2D = obj.SafeDownCast (vtkObject o)
* obj.DeepCopy (vtkProperty2D p) - Assign one property to
  another.
* obj.SetColor (double , double , double ) - Set/Get the RGB
  color of this property.
* obj.SetColor (double a[3]) - Set/Get the RGB color of this
  property.
* double = obj. GetColor () - Set/Get the RGB color of this
  property.
* double = obj.GetOpacity () - Set/Get the Opacity of this
  property.
* obj.SetOpacity (double ) - Set/Get the Opacity of this
  property.
* obj.SetPointSize (float ) - Set/Get the diameter of a
  Point. The size is expressed in screen units. This is only
  implemented for OpenGL. The default is 1.0.
* float = obj.GetPointSizeMinValue () - Set/Get the diameter
  of a Point. The size is expressed in screen units. This is
  only implemented for OpenGL. The default is 1.0.
* float = obj.GetPointSizeMaxValue () - Set/Get the diameter
  of a Point. The size is expressed in screen units. This is
  only implemented for OpenGL. The default is 1.0.
* float = obj.GetPointSize () - Set/Get the diameter of a
  Point. The size is expressed in screen units. This is only
  implemented for OpenGL. The default is 1.0.
* obj.SetLineWidth (float ) - Set/Get the width of a Line.
  The width is expressed in screen units. This is only
  implemented for OpenGL. The default is 1.0.
* float = obj.GetLineWidthMinValue () - Set/Get the width of
  a Line. The width is expressed in screen units. This is
  only implemented for OpenGL. The default is 1.0.
* float = obj.GetLineWidthMaxValue () - Set/Get the width of
  a Line. The width is expressed in screen units. This is
  only implemented for OpenGL. The default is 1.0.
* float = obj.GetLineWidth () - Set/Get the width of a Line.
  The width is expressed in screen units. This is only
  implemented for OpenGL. The default is 1.0.
* obj.SetLineStipplePattern (int ) - Set/Get the stippling
  pattern of a Line, as a 16-bit binary pattern (1 = pixel
  on, 0 = pixel off). This is only implemented for OpenGL.
  The default is 0xFFFF.
* int = obj.GetLineStipplePattern () - Set/Get the stippling
  pattern of a Line, as a 16-bit binary pattern (1 = pixel
  on, 0 = pixel off). This is only implemented for OpenGL.
  The default is 0xFFFF.
* obj.SetLineStippleRepeatFactor (int ) - Set/Get the
  stippling repeat factor of a Line, which specifies how
  many times each bit in the pattern is to be repeated. This
  is only implemented for OpenGL. The default is 1.
* int = obj.GetLineStippleRepeatFactorMinValue () - Set/Get
  the stippling repeat factor of a Line, which specifies how
  many times each bit in the pattern is to be repeated. This
  is only implemented for OpenGL. The default is 1.
* int = obj.GetLineStippleRepeatFactorMaxValue () - Set/Get
  the stippling repeat factor of a Line, which specifies how
  many times each bit in the pattern is to be repeated. This
  is only implemented for OpenGL. The default is 1.
* int = obj.GetLineStippleRepeatFactor () - Set/Get the
  stippling repeat factor of a Line, which specifies how
  many times each bit in the pattern is to be repeated. This
  is only implemented for OpenGL. The default is 1.
* obj.SetDisplayLocation (int ) - The DisplayLocation is
  either background or foreground. If it is background, then
  this 2D actor will be drawn behind all 3D props or
  foreground 2D actors. If it is background, then this 2D
  actor will be drawn in front of all 3D props and
  background 2D actors. Within 2D actors of the same
  DisplayLocation type, order is determined by the order in
  which the 2D actors were added to the viewport.
* int = obj.GetDisplayLocationMinValue () - The
  DisplayLocation is either background or foreground. If it
  is background, then this 2D actor will be drawn behind all
  3D props or foreground 2D actors. If it is background,
  then this 2D actor will be drawn in front of all 3D props
  and background 2D actors. Within 2D actors of the same
  DisplayLocation type, order is determined by the order in
  which the 2D actors were added to the viewport.
* int = obj.GetDisplayLocationMaxValue () - The
  DisplayLocation is either background or foreground. If it
  is background, then this 2D actor will be drawn behind all
  3D props or foreground 2D actors. If it is background,
  then this 2D actor will be drawn in front of all 3D props
  and background 2D actors. Within 2D actors of the same
  DisplayLocation type, order is determined by the order in
  which the 2D actors were added to the viewport.
* int = obj.GetDisplayLocation () - The DisplayLocation is
  either background or foreground. If it is background, then
  this 2D actor will be drawn behind all 3D props or
  foreground 2D actors. If it is background, then this 2D
  actor will be drawn in front of all 3D props and
  background 2D actors. Within 2D actors of the same
  DisplayLocation type, order is determined by the order in
  which the 2D actors were added to the viewport.
* obj.SetDisplayLocationToBackground () - The
  DisplayLocation is either background or foreground. If it
  is background, then this 2D actor will be drawn behind all
  3D props or foreground 2D actors. If it is background,
  then this 2D actor will be drawn in front of all 3D props
  and background 2D actors. Within 2D actors of the same
  DisplayLocation type, order is determined by the order in
  which the 2D actors were added to the viewport.
* obj.SetDisplayLocationToForeground () - The
  DisplayLocation is either background or foreground. If it
  is background, then this 2D actor will be drawn behind all
  3D props or foreground 2D actors. If it is background,
  then this 2D actor will be drawn in front of all 3D props
  and background 2D actors. Within 2D actors of the same
  DisplayLocation type, order is determined by the order in
  which the 2D actors were added to the viewport.


* FreeMat_Documentation
* Visualization_Toolkit_Common_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

