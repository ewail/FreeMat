
 Usage

vtkVolumeTextureMapper2D renders a volume using 2D texture
mapping.
To create an instance of class vtkVolumeTextureMapper2D,
simply invoke its constructor as follows

    obj = vtkVolumeTextureMapper2D



 Methods

The class vtkVolumeTextureMapper2D has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkVolumeTextureMapper2D class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkVolumeTextureMapper2D = obj.NewInstance ()
* vtkVolumeTextureMapper2D = obj.SafeDownCast (vtkObject o)
* obj.SetTargetTextureSize (int , int ) - Target size in
  pixels of each size of the texture for downloading.
  Default is 512x512 - so a 512x512 texture will be tiled
  with as many slices of the volume as possible, then all
  the quads will be rendered. This can be set to optimize
  for a particular architecture. This must be set with
  numbers that are a power of two.
* obj.SetTargetTextureSize (int a[2]) - Target size in
  pixels of each size of the texture for downloading.
  Default is 512x512 - so a 512x512 texture will be tiled
  with as many slices of the volume as possible, then all
  the quads will be rendered. This can be set to optimize
  for a particular architecture. This must be set with
  numbers that are a power of two.
* int = obj. GetTargetTextureSize () - Target size in pixels
  of each size of the texture for downloading. Default is
  512x512 - so a 512x512 texture will be tiled with as many
  slices of the volume as possible, then all the quads will
  be rendered. This can be set to optimize for a particular
  architecture. This must be set with numbers that are a
  power of two.
* obj.SetMaximumNumberOfPlanes (int ) - This is the maximum
  number of planes that will be created for texture mapping
  the volume. If the volume has more voxels than this along
  the viewing direction, then planes of the volume will be
  skipped to ensure that this maximum is not violated. A
  skip factor is used, and is incremented until the maximum
  condition is satisfied.
* int = obj.GetMaximumNumberOfPlanes () - This is the
  maximum number of planes that will be created for texture
  mapping the volume. If the volume has more voxels than
  this along the viewing direction, then planes of the
  volume will be skipped to ensure that this maximum is not
  violated. A skip factor is used, and is incremented until
  the maximum condition is satisfied.
* obj.SetMaximumStorageSize (int ) - This is the maximum
  size of saved textures in bytes. If this size is large
  enough to hold the RGBA textures for all three directions
  (XxYxZx3x4 is the approximate value - it is actually a bit
  larger due to wasted space in the textures) then the
  textures will be saved.
* int = obj.GetMaximumStorageSize () - This is the maximum
  size of saved textures in bytes. If this size is large
  enough to hold the RGBA textures for all three directions
  (XxYxZx3x4 is the approximate value - it is actually a bit
  larger due to wasted space in the textures) then the
  textures will be saved.


* FreeMat_Documentation
* Visualization_Toolkit_Volume_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

