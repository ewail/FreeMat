
 Usage

vtkXYPlotActor creates an x-y plot of data from one or more
input data sets or field data. The class plots dataset
scalar values (y-axis) against the points (x-axis). The x-
axis values are generated by taking the point ids, computing
a cumulative arc length, or a normalized arc length. More
than one input data set can be specified to generate
multiple plots. Alternatively, if field data is supplied as
input, the class plots one component against another. (The
user must specify which component to use as the x-axis and
which for the y-axis.)
To use this class to plot dataset(s), you must specify one
or more input datasets containing scalar and point data.
You'll probably also want to invoke a method to control how
the point coordinates are converted into x values (by
default point ids are used).
To use this class to plot field data, you must specify one
or more input data objects with its associated field data.
You'll also want to specify which component to use as the x-
axis and which to use as the y-axis. Note that when plotting
field data, the x and y values are used directly (i.e.,
there are no options to normalize the components).
Once you've set up the plot, you'll want to position it. The
PositionCoordinate defines the lower-left location of the x-
y plot (specified in normalized viewport coordinates) and
the Position2Coordinate define the upper-right corner.
(Note: the Position2Coordinate is relative to
PositionCoordinate, so you can move the vtkXYPlotActor
around the viewport by setting just the PositionCoordinate.)
The combination of the two position coordinates specifies a
rectangle in which the plot will lie.
Optional features include the ability to specify axes
labels, label format and plot title. You can also manually
specify the x and y plot ranges (by default they are
computed automatically). The Border instance variable is
used to create space between the boundary of the plot window
(specified by PositionCoordinate and Position2Coordinate)
and the plot itself.
The font property of the plot title can be modified through
the TitleTextProperty attribute. The font property of the
axes titles and labels can be modified through the
AxisTitleTextProperty and AxisLabelTextProperty attributes.
You may also use the GetXAxisActor2D or GetYAxisActor2D
methods to access each individual axis actor to modify their
font properties. In the same way, the GetLegendBoxActor
method can be used to access the legend box actor to modify
its font properties.
There are several advanced features as well. You can assign
per curve properties (such as color and a plot symbol).
(Note that each input dataset and/or data object creates a
single curve.) Another option is to add a plot legend that
graphically indicates the correspondance between the curve,
curve symbols, and the data source. You can also exchange
the x and y axes if you prefer you plot orientation that
way.
To create an instance of class vtkXYPlotActor, simply invoke
its constructor as follows

    obj = vtkXYPlotActor



 Methods

The class vtkXYPlotActor has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkXYPlotActor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkXYPlotActor = obj.NewInstance ()
* vtkXYPlotActor = obj.SafeDownCast (vtkObject o)
* obj.AddInput (vtkDataSet in, string arrayName, int
  component) - Add a dataset to the list of data to append.
  The array name specifies which point array to plot. The
  array must be a vtkDataArray subclass, i.e. a numeric
  array. If the array name is NULL, then the default scalars
  are used. The array can have multiple components, but only
  the first component is ploted.
* obj.AddInput (vtkDataSet in) - Remove a dataset from the
  list of data to append.
* obj.RemoveInput (vtkDataSet in, string arrayName, int
  component) - Remove a dataset from the list of data to
  append.
* obj.RemoveInput (vtkDataSet in) - This removes all of the
  data set inputs, but does not change the data object
  inputs.
* obj.RemoveAllInputs () - This removes all of the data set
  inputs, but does not change the data object inputs.
* vtkDataSetCollection = obj.GetInputList () - If plotting
  points by value, which component to use to determine the
  value. This sets a value per each input dataset (i.e., the
  ith dataset).
* obj.SetPointComponent (int i, int comp) - If plotting
  points by value, which component to use to determine the
  value. This sets a value per each input dataset (i.e., the
  ith dataset).
* int = obj.GetPointComponent (int i) - If plotting points
  by value, which component to use to determine the value.
  This sets a value per each input dataset (i.e., the ith
  dataset).
* obj.SetXValues (int ) - Specify how the independent (x)
  variable is computed from the points. The independent
  variable can be the scalar/point index (i.e., point id),
  the accumulated arc length along the points, the
  normalized arc length, or by component value. If plotting
  datasets (e.g., points), the value that is used is
  specified by the PointComponent ivar. (Note: these methods
  also control how field data is plotted. Field data is
  usually plotted by value or index, if plotting length 1-
  dimensional length measures are used.)
* int = obj.GetXValuesMinValue () - Specify how the
  independent (x) variable is computed from the points. The
  independent variable can be the scalar/point index (i.e.,
  point id), the accumulated arc length along the points,
  the normalized arc length, or by component value. If
  plotting datasets (e.g., points), the value that is used
  is specified by the PointComponent ivar. (Note: these
  methods also control how field data is plotted. Field data
  is usually plotted by value or index, if plotting length
  1-dimensional length measures are used.)
* int = obj.GetXValuesMaxValue () - Specify how the
  independent (x) variable is computed from the points. The
  independent variable can be the scalar/point index (i.e.,
  point id), the accumulated arc length along the points,
  the normalized arc length, or by component value. If
  plotting datasets (e.g., points), the value that is used
  is specified by the PointComponent ivar. (Note: these
  methods also control how field data is plotted. Field data
  is usually plotted by value or index, if plotting length
  1-dimensional length measures are used.)
* int = obj.GetXValues () - Specify how the independent (x)
  variable is computed from the points. The independent
  variable can be the scalar/point index (i.e., point id),
  the accumulated arc length along the points, the
  normalized arc length, or by component value. If plotting
  datasets (e.g., points), the value that is used is
  specified by the PointComponent ivar. (Note: these methods
  also control how field data is plotted. Field data is
  usually plotted by value or index, if plotting length 1-
  dimensional length measures are used.)
* obj.SetXValuesToIndex () - Specify how the independent (x)
  variable is computed from the points. The independent
  variable can be the scalar/point index (i.e., point id),
  the accumulated arc length along the points, the
  normalized arc length, or by component value. If plotting
  datasets (e.g., points), the value that is used is
  specified by the PointComponent ivar. (Note: these methods
  also control how field data is plotted. Field data is
  usually plotted by value or index, if plotting length 1-
  dimensional length measures are used.)
* obj.SetXValuesToArcLength () - Specify how the independent
  (x) variable is computed from the points. The independent
  variable can be the scalar/point index (i.e., point id),
  the accumulated arc length along the points, the
  normalized arc length, or by component value. If plotting
  datasets (e.g., points), the value that is used is
  specified by the PointComponent ivar. (Note: these methods
  also control how field data is plotted. Field data is
  usually plotted by value or index, if plotting length 1-
  dimensional length measures are used.)
* obj.SetXValuesToNormalizedArcLength () - Specify how the
  independent (x) variable is computed from the points. The
  independent variable can be the scalar/point index (i.e.,
  point id), the accumulated arc length along the points,
  the normalized arc length, or by component value. If
  plotting datasets (e.g., points), the value that is used
  is specified by the PointComponent ivar. (Note: these
  methods also control how field data is plotted. Field data
  is usually plotted by value or index, if plotting length
  1-dimensional length measures are used.)
* obj.SetXValuesToValue () - Specify how the independent (x)
  variable is computed from the points. The independent
  variable can be the scalar/point index (i.e., point id),
  the accumulated arc length along the points, the
  normalized arc length, or by component value. If plotting
  datasets (e.g., points), the value that is used is
  specified by the PointComponent ivar. (Note: these methods
  also control how field data is plotted. Field data is
  usually plotted by value or index, if plotting length 1-
  dimensional length measures are used.)
* string = obj.GetXValuesAsString () - Specify how the
  independent (x) variable is computed from the points. The
  independent variable can be the scalar/point index (i.e.,
  point id), the accumulated arc length along the points,
  the normalized arc length, or by component value. If
  plotting datasets (e.g., points), the value that is used
  is specified by the PointComponent ivar. (Note: these
  methods also control how field data is plotted. Field data
  is usually plotted by value or index, if plotting length
  1-dimensional length measures are used.)
* obj.AddDataObjectInput (vtkDataObject in) - Add a dataset
  to the list of data to append.
* obj.RemoveDataObjectInput (vtkDataObject in) - Remove a
  dataset from the list of data to append.
* vtkDataObjectCollection = obj.GetDataObjectInputList () -
  Indicate whether to plot rows or columns. If plotting
  rows, then the dependent variables is taken from a
  specified row, versus rows (y).
* obj.SetDataObjectPlotMode (int ) - Indicate whether to
  plot rows or columns. If plotting rows, then the dependent
  variables is taken from a specified row, versus rows (y).
* int = obj.GetDataObjectPlotModeMinValue () - Indicate
  whether to plot rows or columns. If plotting rows, then
  the dependent variables is taken from a specified row,
  versus rows (y).
* int = obj.GetDataObjectPlotModeMaxValue () - Indicate
  whether to plot rows or columns. If plotting rows, then
  the dependent variables is taken from a specified row,
  versus rows (y).
* int = obj.GetDataObjectPlotMode () - Indicate whether to
  plot rows or columns. If plotting rows, then the dependent
  variables is taken from a specified row, versus rows (y).
* obj.SetDataObjectPlotModeToRows () - Indicate whether to
  plot rows or columns. If plotting rows, then the dependent
  variables is taken from a specified row, versus rows (y).
* obj.SetDataObjectPlotModeToColumns () - Indicate whether
  to plot rows or columns. If plotting rows, then the
  dependent variables is taken from a specified row, versus
  rows (y).
* string = obj.GetDataObjectPlotModeAsString () - Indicate
  whether to plot rows or columns. If plotting rows, then
  the dependent variables is taken from a specified row,
  versus rows (y).
* obj.SetDataObjectXComponent (int i, int comp) - Specify
  which component of the input data object to use as the
  independent variable for the ith input data object. (This
  ivar is ignored if plotting the index.) Note that the
  value is interpreted differently depending on
  DataObjectPlotMode. If the mode is Rows, then the value of
  DataObjectXComponent is the row number; otherwise it's the
  column number.
* int = obj.GetDataObjectXComponent (int i) - Specify which
  component of the input data object to use as the
  independent variable for the ith input data object. (This
  ivar is ignored if plotting the index.) Note that the
  value is interpreted differently depending on
  DataObjectPlotMode. If the mode is Rows, then the value of
  DataObjectXComponent is the row number; otherwise it's the
  column number.
* obj.SetDataObjectYComponent (int i, int comp) - Specify
  which component of the input data object to use as the
  dependent variable for the ith input data object. (This
  ivar is ignored if plotting the index.) Note that the
  value is interpreted differently depending on
  DataObjectPlotMode. If the mode is Rows, then the value of
  DataObjectYComponent is the row number; otherwise it's the
  column number.
* int = obj.GetDataObjectYComponent (int i) - Specify which
  component of the input data object to use as the dependent
  variable for the ith input data object. (This ivar is
  ignored if plotting the index.) Note that the value is
  interpreted differently depending on DataObjectPlotMode.
  If the mode is Rows, then the value of
  DataObjectYComponent is the row number; otherwise it's the
  column number.
* obj.SetPlotColor (int i, double r, double g, double b)
* obj.SetPlotColor (int i, double color[3])
* double = obj.GetPlotColor (int i)
* obj.SetPlotSymbol (int i, vtkPolyData input)
* vtkPolyData = obj.GetPlotSymbol (int i)
* obj.SetPlotLabel (int i, string label)
* string = obj.GetPlotLabel (int i)
* int = obj.GetPlotCurvePoints ()
* obj.SetPlotCurvePoints (int )
* obj.PlotCurvePointsOn ()
* obj.PlotCurvePointsOff ()
* int = obj.GetPlotCurveLines ()
* obj.SetPlotCurveLines (int )
* obj.PlotCurveLinesOn ()
* obj.PlotCurveLinesOff ()
* obj.SetPlotLines (int i, int )
* int = obj.GetPlotLines (int i)
* obj.SetPlotPoints (int i, int )
* int = obj.GetPlotPoints (int i)
* obj.SetExchangeAxes (int ) - Enable/Disable exchange of
  the x-y axes (i.e., what was x becomes y, and vice-versa).
  Exchanging axes affects the labeling as well.
* int = obj.GetExchangeAxes () - Enable/Disable exchange of
  the x-y axes (i.e., what was x becomes y, and vice-versa).
  Exchanging axes affects the labeling as well.
* obj.ExchangeAxesOn () - Enable/Disable exchange of the x-
  y axes (i.e., what was x becomes y, and vice-versa).
  Exchanging axes affects the labeling as well.
* obj.ExchangeAxesOff () - Enable/Disable exchange of the x-
  y axes (i.e., what was x becomes y, and vice-versa).
  Exchanging axes affects the labeling as well.
* obj.SetReverseXAxis (int ) - Normally the x-axis is
  plotted from minimum to maximum. Setting this instance
  variable causes the x-axis to be plotted from maximum to
  minimum. Note that boolean always applies to the x-axis
  even if ExchangeAxes is set.
* int = obj.GetReverseXAxis () - Normally the x-axis is
  plotted from minimum to maximum. Setting this instance
  variable causes the x-axis to be plotted from maximum to
  minimum. Note that boolean always applies to the x-axis
  even if ExchangeAxes is set.
* obj.ReverseXAxisOn () - Normally the x-axis is plotted
  from minimum to maximum. Setting this instance variable
  causes the x-axis to be plotted from maximum to minimum.
  Note that boolean always applies to the x-axis even if
  ExchangeAxes is set.
* obj.ReverseXAxisOff () - Normally the x-axis is plotted
  from minimum to maximum. Setting this instance variable
  causes the x-axis to be plotted from maximum to minimum.
  Note that boolean always applies to the x-axis even if
  ExchangeAxes is set.
* obj.SetReverseYAxis (int ) - Normally the y-axis is
  plotted from minimum to maximum. Setting this instance
  variable causes the y-axis to be plotted from maximum to
  minimum. Note that boolean always applies to the y-axis
  even if ExchangeAxes is set.
* int = obj.GetReverseYAxis () - Normally the y-axis is
  plotted from minimum to maximum. Setting this instance
  variable causes the y-axis to be plotted from maximum to
  minimum. Note that boolean always applies to the y-axis
  even if ExchangeAxes is set.
* obj.ReverseYAxisOn () - Normally the y-axis is plotted
  from minimum to maximum. Setting this instance variable
  causes the y-axis to be plotted from maximum to minimum.
  Note that boolean always applies to the y-axis even if
  ExchangeAxes is set.
* obj.ReverseYAxisOff () - Normally the y-axis is plotted
  from minimum to maximum. Setting this instance variable
  causes the y-axis to be plotted from maximum to minimum.
  Note that boolean always applies to the y-axis even if
  ExchangeAxes is set.
* vtkLegendBoxActor = obj.GetLegendActor () - Retrieve
  handles to the legend box and glyph source. This is useful
  if you would like to change the default behavior of the
  legend box or glyph source. For example, the default glyph
  can be changed from a line to a vertex plus line, etc.)
* vtkGlyphSource2D = obj.GetGlyphSource () - Retrieve
  handles to the legend box and glyph source. This is useful
  if you would like to change the default behavior of the
  legend box or glyph source. For example, the default glyph
  can be changed from a line to a vertex plus line, etc.)
* obj.SetTitle (string ) - Set/Get the title of the x-
  y plot, and the title along the x and y axes.
* string = obj.GetTitle () - Set/Get the title of the x-
  y plot, and the title along the x and y axes.
* obj.SetXTitle (string ) - Set/Get the title of the x-
  y plot, and the title along the x and y axes.
* string = obj.GetXTitle () - Set/Get the title of the x-
  y plot, and the title along the x and y axes.
* obj.SetYTitle (string ) - Set/Get the title of the x-
  y plot, and the title along the x and y axes.
* string = obj.GetYTitle () - Set/Get the title of the x-
  y plot, and the title along the x and y axes.
* vtkAxisActor2D = obj.GetXAxisActor2D () - Retrieve handles
  to the X and Y axis (so that you can set their text
  properties for example)
* vtkAxisActor2D = obj.GetYAxisActor2D () - Set the plot
  range (range of independent and dependent variables) to
  plot. Data outside of the range will be clipped. If the
  plot range of either the x or y variables is set to
  (v1,v2), where v1 == v2, then the range will be computed
  automatically. Note that the x-range values should be
  consistent with the way the independent variable is
  created (via INDEX, DISTANCE, or ARC_LENGTH).
* obj.SetXRange (double , double ) - Set the plot range
  (range of independent and dependent variables) to plot.
  Data outside of the range will be clipped. If the plot
  range of either the x or y variables is set to (v1,v2),
  where v1 == v2, then the range will be computed
  automatically. Note that the x-range values should be
  consistent with the way the independent variable is
  created (via INDEX, DISTANCE, or ARC_LENGTH).
* obj.SetXRange (double a[2]) - Set the plot range (range of
  independent and dependent variables) to plot. Data outside
  of the range will be clipped. If the plot range of either
  the x or y variables is set to (v1,v2), where v1 == v2,
  then the range will be computed automatically. Note that
  the x-range values should be consistent with the way the
  independent variable is created (via INDEX, DISTANCE, or
  ARC_LENGTH).
* double = obj. GetXRange () - Set the plot range (range of
  independent and dependent variables) to plot. Data outside
  of the range will be clipped. If the plot range of either
  the x or y variables is set to (v1,v2), where v1 == v2,
  then the range will be computed automatically. Note that
  the x-range values should be consistent with the way the
  independent variable is created (via INDEX, DISTANCE, or
  ARC_LENGTH).
* obj.SetYRange (double , double ) - Set the plot range
  (range of independent and dependent variables) to plot.
  Data outside of the range will be clipped. If the plot
  range of either the x or y variables is set to (v1,v2),
  where v1 == v2, then the range will be computed
  automatically. Note that the x-range values should be
  consistent with the way the independent variable is
  created (via INDEX, DISTANCE, or ARC_LENGTH).
* obj.SetYRange (double a[2]) - Set the plot range (range of
  independent and dependent variables) to plot. Data outside
  of the range will be clipped. If the plot range of either
  the x or y variables is set to (v1,v2), where v1 == v2,
  then the range will be computed automatically. Note that
  the x-range values should be consistent with the way the
  independent variable is created (via INDEX, DISTANCE, or
  ARC_LENGTH).
* double = obj. GetYRange () - Set the plot range (range of
  independent and dependent variables) to plot. Data outside
  of the range will be clipped. If the plot range of either
  the x or y variables is set to (v1,v2), where v1 == v2,
  then the range will be computed automatically. Note that
  the x-range values should be consistent with the way the
  independent variable is created (via INDEX, DISTANCE, or
  ARC_LENGTH).
* obj.SetPlotRange (double xmin, double ymin, double xmax,
  double ymax) - Set/Get the number of annotation labels to
  show along the x and y axes. This values is a suggestion:
  the number of labels may vary depending on the particulars
  of the data. The convenience method SetNumberOfLables()
  sets the number of x and y labels to the same value.
* obj.SetNumberOfXLabels (int ) - Set/Get the number of
  annotation labels to show along the x and y axes. This
  values is a suggestion: the number of labels may vary
  depending on the particulars of the data. The convenience
  method SetNumberOfLables() sets the number of x and y
  labels to the same value.
* int = obj.GetNumberOfXLabelsMinValue () - Set/Get the
  number of annotation labels to show along the x and y
  axes. This values is a suggestion: the number of labels
  may vary depending on the particulars of the data. The
  convenience method SetNumberOfLables() sets the number of
  x and y labels to the same value.
* int = obj.GetNumberOfXLabelsMaxValue () - Set/Get the
  number of annotation labels to show along the x and y
  axes. This values is a suggestion: the number of labels
  may vary depending on the particulars of the data. The
  convenience method SetNumberOfLables() sets the number of
  x and y labels to the same value.
* int = obj.GetNumberOfXLabels () - Set/Get the number of
  annotation labels to show along the x and y axes. This
  values is a suggestion: the number of labels may vary
  depending on the particulars of the data. The convenience
  method SetNumberOfLables() sets the number of x and y
  labels to the same value.
* obj.SetNumberOfYLabels (int ) - Set/Get the number of
  annotation labels to show along the x and y axes. This
  values is a suggestion: the number of labels may vary
  depending on the particulars of the data. The convenience
  method SetNumberOfLables() sets the number of x and y
  labels to the same value.
* int = obj.GetNumberOfYLabelsMinValue () - Set/Get the
  number of annotation labels to show along the x and y
  axes. This values is a suggestion: the number of labels
  may vary depending on the particulars of the data. The
  convenience method SetNumberOfLables() sets the number of
  x and y labels to the same value.
* int = obj.GetNumberOfYLabelsMaxValue () - Set/Get the
  number of annotation labels to show along the x and y
  axes. This values is a suggestion: the number of labels
  may vary depending on the particulars of the data. The
  convenience method SetNumberOfLables() sets the number of
  x and y labels to the same value.
* int = obj.GetNumberOfYLabels () - Set/Get the number of
  annotation labels to show along the x and y axes. This
  values is a suggestion: the number of labels may vary
  depending on the particulars of the data. The convenience
  method SetNumberOfLables() sets the number of x and y
  labels to the same value.
* obj.SetNumberOfLabels (int num) - Set/Get the flag that
  controls whether the labels and ticks are adjusted for
  "nice" numerical values to make it easier to read the
  labels. The adjustment is based in the Range instance
  variable. Call GetAdjustedRange and
  GetAdjustedNumberOfLabels to get the adjusted range and
  number of labels.
* obj.SetAdjustXLabels (int adjust) - Set/Get the flag that
  controls whether the labels and ticks are adjusted for
  "nice" numerical values to make it easier to read the
  labels. The adjustment is based in the Range instance
  variable. Call GetAdjustedRange and
  GetAdjustedNumberOfLabels to get the adjusted range and
  number of labels.
* int = obj.GetAdjustXLabels () - Set/Get the flag that
  controls whether the labels and ticks are adjusted for
  "nice" numerical values to make it easier to read the
  labels. The adjustment is based in the Range instance
  variable. Call GetAdjustedRange and
  GetAdjustedNumberOfLabels to get the adjusted range and
  number of labels.
* obj.SetAdjustYLabels (int adjust) - Set/Get the flag that
  controls whether the labels and ticks are adjusted for
  "nice" numerical values to make it easier to read the
  labels. The adjustment is based in the Range instance
  variable. Call GetAdjustedRange and
  GetAdjustedNumberOfLabels to get the adjusted range and
  number of labels.
* int = obj.GetAdjustYLabels () - Set/Get the flag that
  controls whether the labels and ticks are adjusted for
  "nice" numerical values to make it easier to read the
  labels. The adjustment is based in the Range instance
  variable. Call GetAdjustedRange and
  GetAdjustedNumberOfLabels to get the adjusted range and
  number of labels.
* obj.SetXTitlePosition (double position) - Set/Get the
  position of the title of X or Y axis.
* double = obj.GetXTitlePosition () - Set/Get the position
  of the title of X or Y axis.
* obj.SetYTitlePosition (double position) - Set/Get the
  position of the title of X or Y axis.
* double = obj.GetYTitlePosition () - Set/Get the position
  of the title of X or Y axis.
* obj.SetNumberOfXMinorTicks (int num) - Set/Get the number
  of minor ticks in X or Y.
* int = obj.GetNumberOfXMinorTicks () - Set/Get the number
  of minor ticks in X or Y.
* obj.SetNumberOfYMinorTicks (int num) - Set/Get the number
  of minor ticks in X or Y.
* int = obj.GetNumberOfYMinorTicks () - Set/Get the number
  of minor ticks in X or Y.
* obj.SetLegend (int ) - Enable/Disable the creation of a
  legend. If on, the legend labels will be created
  automatically unless the per plot legend symbol has been
  set.
* int = obj.GetLegend () - Enable/Disable the creation of a
  legend. If on, the legend labels will be created
  automatically unless the per plot legend symbol has been
  set.
* obj.LegendOn () - Enable/Disable the creation of a legend.
  If on, the legend labels will be created automatically
  unless the per plot legend symbol has been set.
* obj.LegendOff () - Enable/Disable the creation of a
  legend. If on, the legend labels will be created
  automatically unless the per plot legend symbol has been
  set.
* obj.SetTitlePosition (double , double ) - Set/Get the
  position of the title. This has no effect if
  AdjustTitlePosition is true.
* obj.SetTitlePosition (double a[2]) - Set/Get the position
  of the title. This has no effect if AdjustTitlePosition is
  true.
* double = obj. GetTitlePosition () - Set/Get the position
  of the title. This has no effect if AdjustTitlePosition is
  true.
* obj.SetAdjustTitlePosition (int ) - If true, the xyplot
  actor will adjust the position of the title automatically
  to be upper-middle. Default is true.
* int = obj.GetAdjustTitlePosition () - If true, the xyplot
  actor will adjust the position of the title automatically
  to be upper-middle. Default is true.
* obj.AdjustTitlePositionOn () - If true, the xyplot actor
  will adjust the position of the title automatically to be
  upper-middle. Default is true.
* obj.AdjustTitlePositionOff () - If true, the xyplot actor
  will adjust the position of the title automatically to be
  upper-middle. Default is true.
* obj.SetAdjustTitlePositionMode (int ) - If
  AdjustTitlePosition is truem, the xyplot actor will adjust
  the position of the title automatically depending on the
  given mode, the mode is a combination of the Alignment
  flags. by default: vtkXYPlotActor::AlignHCenter |
  vtkXYPlotActor::Top | vtkXYPlotActor::AlignAxisVCenter
* int = obj.GetAdjustTitlePositionMode () - If
  AdjustTitlePosition is truem, the xyplot actor will adjust
  the position of the title automatically depending on the
  given mode, the mode is a combination of the Alignment
  flags. by default: vtkXYPlotActor::AlignHCenter |
  vtkXYPlotActor::Top | vtkXYPlotActor::AlignAxisVCenter
* obj.SetLegendPosition (double , double ) - Use these
  methods to control the position of the legend. The
  variables LegendPosition and LegendPosition2 define the
  lower-left and upper-right position of the legend. The
  coordinates are expressed as normalized values with
  respect to the rectangle defined by PositionCoordinate and
  Position2Coordinate. Note that LegendPosition2 is relative
  to LegendPosition.
* obj.SetLegendPosition (double a[2]) - Use these methods to
  control the position of the legend. The variables
  LegendPosition and LegendPosition2 define the lower-left
  and upper-right position of the legend. The coordinates
  are expressed as normalized values with respect to the
  rectangle defined by PositionCoordinate and
  Position2Coordinate. Note that LegendPosition2 is relative
  to LegendPosition.
* double = obj. GetLegendPosition () - Use these methods to
  control the position of the legend. The variables
  LegendPosition and LegendPosition2 define the lower-left
  and upper-right position of the legend. The coordinates
  are expressed as normalized values with respect to the
  rectangle defined by PositionCoordinate and
  Position2Coordinate. Note that LegendPosition2 is relative
  to LegendPosition.
* obj.SetLegendPosition2 (double , double ) - Use these
  methods to control the position of the legend. The
  variables LegendPosition and LegendPosition2 define the
  lower-left and upper-right position of the legend. The
  coordinates are expressed as normalized values with
  respect to the rectangle defined by PositionCoordinate and
  Position2Coordinate. Note that LegendPosition2 is relative
  to LegendPosition.
* obj.SetLegendPosition2 (double a[2]) - Use these methods
  to control the position of the legend. The variables
  LegendPosition and LegendPosition2 define the lower-left
  and upper-right position of the legend. The coordinates
  are expressed as normalized values with respect to the
  rectangle defined by PositionCoordinate and
  Position2Coordinate. Note that LegendPosition2 is relative
  to LegendPosition.
* double = obj. GetLegendPosition2 () - Use these methods to
  control the position of the legend. The variables
  LegendPosition and LegendPosition2 define the lower-left
  and upper-right position of the legend. The coordinates
  are expressed as normalized values with respect to the
  rectangle defined by PositionCoordinate and
  Position2Coordinate. Note that LegendPosition2 is relative
  to LegendPosition.
* obj.SetTitleTextProperty (vtkTextProperty p) - Set/Get the
  title text property.
* vtkTextProperty = obj.GetTitleTextProperty () - Set/Get
  the title text property.
* obj.SetAxisTitleTextProperty (vtkTextProperty p) - Set/Get
  the title text property of all axes. Note that each axis
  can be controlled individually through the GetX/
  YAxisActor2D() methods.
* vtkTextProperty = obj.GetAxisTitleTextProperty () - Set/
  Get the title text property of all axes. Note that each
  axis can be controlled individually through the GetX/
  YAxisActor2D() methods.
* obj.SetAxisLabelTextProperty (vtkTextProperty p) - Set/Get
  the labels text property of all axes. Note that each axis
  can be controlled individually through the GetX/
  YAxisActor2D() methods.
* vtkTextProperty = obj.GetAxisLabelTextProperty () - Set/
  Get the labels text property of all axes. Note that each
  axis can be controlled individually through the GetX/
  YAxisActor2D() methods.
* obj.SetLogx (int ) - Enable/Disable plotting of Log of x-
  values.
* int = obj.GetLogx () - Enable/Disable plotting of Log of
  x-values.
* obj.LogxOn () - Enable/Disable plotting of Log of x-
  values.
* obj.LogxOff () - Enable/Disable plotting of Log of x-
  values.
* obj.SetLabelFormat (string _arg) - Set/Get the format with
  which to print the labels . This sets both X and Y label
  formats. GetLabelFormat() returns X label format.
* string = obj.GetLabelFormat () - Set/Get the format with
  which to print the X label.
* obj.SetXLabelFormat (string _arg) - Set/Get the format
  with which to print the X label.
* string = obj.GetXLabelFormat () - Set/Get the format with
  which to print the X label.
* obj.SetYLabelFormat (string _arg) - Set/Get the format
  with which to print the Y label.
* string = obj.GetYLabelFormat () - Set/Get the format with
  which to print the Y label.
* obj.SetBorder (int ) - Set/Get the spacing between the
  plot window and the plot. The value is specified in
  pixels.
* int = obj.GetBorderMinValue () - Set/Get the spacing
  between the plot window and the plot. The value is
  specified in pixels.
* int = obj.GetBorderMaxValue () - Set/Get the spacing
  between the plot window and the plot. The value is
  specified in pixels.
* int = obj.GetBorder () - Set/Get the spacing between the
  plot window and the plot. The value is specified in
  pixels.
* int = obj.GetPlotPoints () - Set/Get whether the points
  are rendered. The point size can be set in the property
  object. This is a global flag which affects the plot only
  if per curve symbols are not defined.
* obj.SetPlotPoints (int ) - Set/Get whether the points are
  rendered. The point size can be set in the property
  object. This is a global flag which affects the plot only
  if per curve symbols are not defined.
* obj.PlotPointsOn () - Set/Get whether the points are
  rendered. The point size can be set in the property
  object. This is a global flag which affects the plot only
  if per curve symbols are not defined.
* obj.PlotPointsOff () - Set/Get whether the points are
  rendered. The point size can be set in the property
  object. This is a global flag which affects the plot only
  if per curve symbols are not defined.
* int = obj.GetPlotLines () - Set/Get whether the lines are
  rendered. The line width can be set in the property
  object.
* obj.SetPlotLines (int ) - Set/Get whether the lines are
  rendered. The line width can be set in the property
  object.
* obj.PlotLinesOn () - Set/Get whether the lines are
  rendered. The line width can be set in the property
  object.
* obj.PlotLinesOff () - Set/Get whether the lines are
  rendered. The line width can be set in the property
  object.
* obj.SetGlyphSize (double ) - Set/Get the factor that
  controls how big glyphs are in the plot. The number is
  expressed as a fraction of the length of the diagonal of
  the plot bounding box.
* double = obj.GetGlyphSizeMinValue () - Set/Get the factor
  that controls how big glyphs are in the plot. The number
  is expressed as a fraction of the length of the diagonal
  of the plot bounding box.
* double = obj.GetGlyphSizeMaxValue () - Set/Get the factor
  that controls how big glyphs are in the plot. The number
  is expressed as a fraction of the length of the diagonal
  of the plot bounding box.
* double = obj.GetGlyphSize () - Set/Get the factor that
  controls how big glyphs are in the plot. The number is
  expressed as a fraction of the length of the diagonal of
  the plot bounding box.
* obj.ViewportToPlotCoordinate (vtkViewport viewport) - An
  alternate form of ViewportToPlotCoordinate() above. This
  method inputs the viewport coordinate pair (defined by the
  ivar ViewportCoordinate)and then stores them in the ivar
  PlotCoordinate.
* obj.SetPlotCoordinate (double , double ) - An alternate
  form of ViewportToPlotCoordinate() above. This method
  inputs the viewport coordinate pair (defined by the ivar
  ViewportCoordinate)and then stores them in the ivar
  PlotCoordinate.
* obj.SetPlotCoordinate (double a[2]) - An alternate form of
  ViewportToPlotCoordinate() above. This method inputs the
  viewport coordinate pair (defined by the ivar
  ViewportCoordinate)and then stores them in the ivar
  PlotCoordinate.
* double = obj. GetPlotCoordinate () - An alternate form of
  ViewportToPlotCoordinate() above. This method inputs the
  viewport coordinate pair (defined by the ivar
  ViewportCoordinate)and then stores them in the ivar
  PlotCoordinate.
* obj.PlotToViewportCoordinate (vtkViewport viewport) - An
  alternate form of PlotToViewportCoordinate() above. This
  method inputs the plot coordinate pair (defined in the
  ivar PlotCoordinate) and then stores them in the ivar
  ViewportCoordinate. (This method can be wrapped.)
* obj.SetViewportCoordinate (double , double ) - An
  alternate form of PlotToViewportCoordinate() above. This
  method inputs the plot coordinate pair (defined in the
  ivar PlotCoordinate) and then stores them in the ivar
  ViewportCoordinate. (This method can be wrapped.)
* obj.SetViewportCoordinate (double a[2]) - An alternate
  form of PlotToViewportCoordinate() above. This method
  inputs the plot coordinate pair (defined in the ivar
  PlotCoordinate) and then stores them in the ivar
  ViewportCoordinate. (This method can be wrapped.)
* double = obj. GetViewportCoordinate () - An alternate form
  of PlotToViewportCoordinate() above. This method inputs
  the plot coordinate pair (defined in the ivar
  PlotCoordinate) and then stores them in the ivar
  ViewportCoordinate. (This method can be wrapped.)
* int = obj.IsInPlot (vtkViewport viewport, double u, double
  v) - Is the specified viewport position within the plot
  area (as opposed to the region used by the plot plus the
  labels)?
* obj.SetChartBox (int ) - Set/Get the flag that controls
  whether a box will be drawn/filled corresponding to the
  chart box.
* int = obj.GetChartBox () - Set/Get the flag that controls
  whether a box will be drawn/filled corresponding to the
  chart box.
* obj.ChartBoxOn () - Set/Get the flag that controls whether
  a box will be drawn/filled corresponding to the chart box.
* obj.ChartBoxOff () - Set/Get the flag that controls
  whether a box will be drawn/filled corresponding to the
  chart box.
* obj.SetChartBorder (int ) - Set/Get the flag that controls
  whether a box will be drawn/filled corresponding to the
  legend box.
* int = obj.GetChartBorder () - Set/Get the flag that
  controls whether a box will be drawn/filled corresponding
  to the legend box.
* obj.ChartBorderOn () - Set/Get the flag that controls
  whether a box will be drawn/filled corresponding to the
  legend box.
* obj.ChartBorderOff () - Set/Get the flag that controls
  whether a box will be drawn/filled corresponding to the
  legend box.
* vtkProperty2D = obj.GetChartBoxProperty () - Get the box
  vtkProperty2D.
* obj.SetShowReferenceXLine (int ) - Set/Get if the X
  reference line is visible. hidden by default
* int = obj.GetShowReferenceXLine () - Set/Get if the X
  reference line is visible. hidden by default
* obj.ShowReferenceXLineOn () - Set/Get if the X reference
  line is visible. hidden by default
* obj.ShowReferenceXLineOff () - Set/Get if the X reference
  line is visible. hidden by default
* obj.SetReferenceXValue (double )
* double = obj.GetReferenceXValue ()
* obj.SetShowReferenceYLine (int ) - Set/Get if the Y
  reference line is visible. hidden by default
* int = obj.GetShowReferenceYLine () - Set/Get if the Y
  reference line is visible. hidden by default
* obj.ShowReferenceYLineOn () - Set/Get if the Y reference
  line is visible. hidden by default
* obj.ShowReferenceYLineOff () - Set/Get if the Y reference
  line is visible. hidden by default
* obj.SetReferenceYValue (double )
* double = obj.GetReferenceYValue ()
* long = obj.GetMTime () - Take into account the modified
  time of internal helper classes.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

