
 Usage

vtkImageAccumulate - This filter divides component space
into discrete bins. It then counts the number of pixels
associated with each bin. The output is this "scatter plot"
(histogram values for 1D). The dimensionality of the output
depends on how many components the input pixels have. Input
pixels with one component generate a 1D histogram. This
filter can only handle images with 1 to 3 scalar components.
The input can be any type, but the output is always int.
Some statistics are computed on the pixel values at the same
time. The SetStencil and ReverseStencil functions allow the
statistics to be computed on an arbitrary portion of the
input data. See the documentation for vtkImageStencilData
for more information.
This filter also support ignoring pixel with value equal to
0. Using this option with vtkImageMask may result in results
being slightly off since 0 could be a valid value from your
input.
To create an instance of class vtkImageAccumulate, simply
invoke its constructor as follows

    obj = vtkImageAccumulate



 Methods

The class vtkImageAccumulate has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkImageAccumulate class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageAccumulate = obj.NewInstance ()
* vtkImageAccumulate = obj.SafeDownCast (vtkObject o)
* obj.SetComponentSpacing (double , double , double ) - Set/
  Get - The component spacing is the dimension of each bin.
  This ends up being the spacing of the output "image". If
  the number of input scalar components are less than three,
  then some of these spacing values are ignored. For a 1D
  histogram with 10 bins spanning the values 1000 to 2000,
  this spacing should be set to 100, 0, 0
* obj.SetComponentSpacing (double a[3]) - Set/Get - The
  component spacing is the dimension of each bin. This ends
  up being the spacing of the output "image". If the number
  of input scalar components are less than three, then some
  of these spacing values are ignored. For a 1D histogram
  with 10 bins spanning the values 1000 to 2000, this
  spacing should be set to 100, 0, 0
* double = obj. GetComponentSpacing () - Set/Get - The
  component spacing is the dimension of each bin. This ends
  up being the spacing of the output "image". If the number
  of input scalar components are less than three, then some
  of these spacing values are ignored. For a 1D histogram
  with 10 bins spanning the values 1000 to 2000, this
  spacing should be set to 100, 0, 0
* obj.SetComponentOrigin (double , double , double ) - Set/
  Get - The component origin is the location of bin (0, 0,
  0). Note that if the Component extent does not include the
  value (0,0,0), then this origin bin will not actually be
  in the output. The origin of the output ends up being the
  same as the componenet origin. For a 1D histogram with 10
  bins spanning the values 1000 to 2000, this origin should
  be set to 1000, 0, 0
* obj.SetComponentOrigin (double a[3]) - Set/Get - The
  component origin is the location of bin (0, 0, 0). Note
  that if the Component extent does not include the value
  (0,0,0), then this origin bin will not actually be in the
  output. The origin of the output ends up being the same as
  the componenet origin. For a 1D histogram with 10 bins
  spanning the values 1000 to 2000, this origin should be
  set to 1000, 0, 0
* double = obj. GetComponentOrigin () - Set/Get - The
  component origin is the location of bin (0, 0, 0). Note
  that if the Component extent does not include the value
  (0,0,0), then this origin bin will not actually be in the
  output. The origin of the output ends up being the same as
  the componenet origin. For a 1D histogram with 10 bins
  spanning the values 1000 to 2000, this origin should be
  set to 1000, 0, 0
* obj.SetComponentExtent (int extent[6]) - Set/Get - The
  component extent sets the number/extent of the bins. For a
  1D histogram with 10 bins spanning the values 1000 to
  2000, this extent should be set to 0, 9, 0, 0, 0, 0. The
  extent specifies inclusive min/max values. This implies
  that the top extent should be set to the number of bins -
  1.
* obj.SetComponentExtent (int minX, int maxX, int minY, int
  maxY, int minZ, int maxZ) - Set/Get - The component extent
  sets the number/extent of the bins. For a 1D histogram
  with 10 bins spanning the values 1000 to 2000, this extent
  should be set to 0, 9, 0, 0, 0, 0. The extent specifies
  inclusive min/max values. This implies that the top extent
  should be set to the number of bins - 1.
* obj.GetComponentExtent (int extent[6]) - Set/Get - The
  component extent sets the number/extent of the bins. For a
  1D histogram with 10 bins spanning the values 1000 to
  2000, this extent should be set to 0, 9, 0, 0, 0, 0. The
  extent specifies inclusive min/max values. This implies
  that the top extent should be set to the number of bins -
  1.
* int = obj.GetComponentExtent () - Use a stencil to specify
  which voxels to accumulate.
* obj.SetStencil (vtkImageStencilData stencil) - Use a
  stencil to specify which voxels to accumulate.
* vtkImageStencilData = obj.GetStencil () - Use a stencil to
  specify which voxels to accumulate.
* obj.SetReverseStencil (int ) - Reverse the stencil.
* int = obj.GetReverseStencilMinValue () - Reverse the
  stencil.
* int = obj.GetReverseStencilMaxValue () - Reverse the
  stencil.
* obj.ReverseStencilOn () - Reverse the stencil.
* obj.ReverseStencilOff () - Reverse the stencil.
* int = obj.GetReverseStencil () - Reverse the stencil.
* double = obj. GetMin () - Get the statistics information
  for the data.
* double = obj. GetMax () - Get the statistics information
  for the data.
* double = obj. GetMean () - Get the statistics information
  for the data.
* double = obj. GetStandardDeviation () - Get the statistics
  information for the data.
* long = obj.GetVoxelCount () - Get the statistics
  information for the data.
* obj.SetIgnoreZero (int ) - Should the data with value 0 be
  ignored?
* int = obj.GetIgnoreZeroMinValue () - Should the data with
  value 0 be ignored?
* int = obj.GetIgnoreZeroMaxValue () - Should the data with
  value 0 be ignored?
* int = obj.GetIgnoreZero () - Should the data with value 0
  be ignored?
* obj.IgnoreZeroOn () - Should the data with value 0 be
  ignored?
* obj.IgnoreZeroOff () - Should the data with value 0 be
  ignored?


* FreeMat_Documentation
* Visualization_Toolkit_Imaging_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

