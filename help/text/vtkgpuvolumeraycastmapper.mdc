
 Usage

vtkGPUVolumeRayCastMapper is a volume mapper that performs
ray casting on the GPU using fragment programs.
To create an instance of class vtkGPUVolumeRayCastMapper,
simply invoke its constructor as follows

    obj = vtkGPUVolumeRayCastMapper



 Methods

The class vtkGPUVolumeRayCastMapper has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkGPUVolumeRayCastMapper class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkGPUVolumeRayCastMapper = obj.NewInstance ()
* vtkGPUVolumeRayCastMapper = obj.SafeDownCast (vtkObject o)
* obj.SetAutoAdjustSampleDistances (int ) - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* int = obj.GetAutoAdjustSampleDistancesMinValue () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* int = obj.GetAutoAdjustSampleDistancesMaxValue () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* int = obj.GetAutoAdjustSampleDistances () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* obj.AutoAdjustSampleDistancesOn () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* obj.AutoAdjustSampleDistancesOff () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* obj.SetSampleDistance (float ) - Set/Get the distance
  between samples used for rendering when
  AutoAdjustSampleDistances is off, or when this mapper has
  more than 1 second allocated to it for rendering. Initial
  value is 1.0.
* float = obj.GetSampleDistance () - Set/Get the distance
  between samples used for rendering when
  AutoAdjustSampleDistances is off, or when this mapper has
  more than 1 second allocated to it for rendering. Initial
  value is 1.0.
* obj.SetImageSampleDistance (float ) - Sampling distance in
  the XY image dimensions. Default value of 1 meaning 1 ray
  cast per pixel. If set to 0.5, 4 rays will be cast per
  pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by
  2) pixels. This value will be adjusted to meet a desired
  frame rate when AutoAdjustSampleDistances is on.
* float = obj.GetImageSampleDistanceMinValue () - Sampling
  distance in the XY image dimensions. Default value of 1
  meaning 1 ray cast per pixel. If set to 0.5, 4 rays will
  be cast per pixel. If set to 2.0, 1 ray will be cast for
  every 4 (2 by 2) pixels. This value will be adjusted to
  meet a desired frame rate when AutoAdjustSampleDistances
  is on.
* float = obj.GetImageSampleDistanceMaxValue () - Sampling
  distance in the XY image dimensions. Default value of 1
  meaning 1 ray cast per pixel. If set to 0.5, 4 rays will
  be cast per pixel. If set to 2.0, 1 ray will be cast for
  every 4 (2 by 2) pixels. This value will be adjusted to
  meet a desired frame rate when AutoAdjustSampleDistances
  is on.
* float = obj.GetImageSampleDistance () - Sampling distance
  in the XY image dimensions. Default value of 1 meaning 1
  ray cast per pixel. If set to 0.5, 4 rays will be cast per
  pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by
  2) pixels. This value will be adjusted to meet a desired
  frame rate when AutoAdjustSampleDistances is on.
* obj.SetMinimumImageSampleDistance (float ) - This is the
  minimum image sample distance allow when the image sample
  distance is being automatically adjusted.
* float = obj.GetMinimumImageSampleDistanceMinValue () -
  This is the minimum image sample distance allow when the
  image sample distance is being automatically adjusted.
* float = obj.GetMinimumImageSampleDistanceMaxValue () -
  This is the minimum image sample distance allow when the
  image sample distance is being automatically adjusted.
* float = obj.GetMinimumImageSampleDistance () - This is the
  minimum image sample distance allow when the image sample
  distance is being automatically adjusted.
* obj.SetMaximumImageSampleDistance (float ) - This is the
  maximum image sample distance allow when the image sample
  distance is being automatically adjusted.
* float = obj.GetMaximumImageSampleDistanceMinValue () -
  This is the maximum image sample distance allow when the
  image sample distance is being automatically adjusted.
* float = obj.GetMaximumImageSampleDistanceMaxValue () -
  This is the maximum image sample distance allow when the
  image sample distance is being automatically adjusted.
* float = obj.GetMaximumImageSampleDistance () - This is the
  maximum image sample distance allow when the image sample
  distance is being automatically adjusted.
* obj.SetFinalColorWindow (float ) - Set/Get the window /
  level applied to the final color. This allows brightness /
  contrast adjustments on the final image. window is the
  width of the window. level is the center of the window.
  Initial window value is 1.0 Initial level value is 0.5
  window cannot be null but can be negative, this way values
  will be reversed. |window| can be larger than 1.0 level
  can be any real value.
* float = obj.GetFinalColorWindow () - Set/Get the window /
  level applied to the final color. This allows brightness /
  contrast adjustments on the final image. window is the
  width of the window. level is the center of the window.
  Initial window value is 1.0 Initial level value is 0.5
  window cannot be null but can be negative, this way values
  will be reversed. |window| can be larger than 1.0 level
  can be any real value.
* obj.SetFinalColorLevel (float ) - Set/Get the window /
  level applied to the final color. This allows brightness /
  contrast adjustments on the final image. window is the
  width of the window. level is the center of the window.
  Initial window value is 1.0 Initial level value is 0.5
  window cannot be null but can be negative, this way values
  will be reversed. |window| can be larger than 1.0 level
  can be any real value.
* float = obj.GetFinalColorLevel () - Set/Get the window /
  level applied to the final color. This allows brightness /
  contrast adjustments on the final image. window is the
  width of the window. level is the center of the window.
  Initial window value is 1.0 Initial level value is 0.5
  window cannot be null but can be negative, this way values
  will be reversed. |window| can be larger than 1.0 level
  can be any real value.
* obj.SetMaxMemoryInBytes (vtkIdType ) - Maximum size of the
  3D texture in GPU memory. Will default to the size
  computed from the graphics card. Can be adjusted by the
  user.
* vtkIdType = obj.GetMaxMemoryInBytes () - Maximum size of
  the 3D texture in GPU memory. Will default to the size
  computed from the graphics card. Can be adjusted by the
  user.
* obj.SetMaxMemoryFraction (float ) - Maximum fraction of
  the MaxMemoryInBytes that should be used to hold the
  texture. Valid values are 0.1 to 1.0.
* float = obj.GetMaxMemoryFractionMinValue () - Maximum
  fraction of the MaxMemoryInBytes that should be used to
  hold the texture. Valid values are 0.1 to 1.0.
* float = obj.GetMaxMemoryFractionMaxValue () - Maximum
  fraction of the MaxMemoryInBytes that should be used to
  hold the texture. Valid values are 0.1 to 1.0.
* float = obj.GetMaxMemoryFraction () - Maximum fraction of
  the MaxMemoryInBytes that should be used to hold the
  texture. Valid values are 0.1 to 1.0.
* obj.SetReportProgress (bool ) - Tells if the mapper will
  report intermediate progress. Initial value is true. As
  the progress works with a GL blocking call (glFinish()),
  this can be useful for huge dataset but can slow down
  rendering of small dataset. It should be set to true for
  big dataset or complex shading and streaming but to false
  for small datasets.
* bool = obj.GetReportProgress () - Tells if the mapper will
  report intermediate progress. Initial value is true. As
  the progress works with a GL blocking call (glFinish()),
  this can be useful for huge dataset but can slow down
  rendering of small dataset. It should be set to true for
  big dataset or complex shading and streaming but to false
  for small datasets.
* int = obj.IsRenderSupported (vtkRenderWindow ,
  vtkVolumeProperty )
* obj.CreateCanonicalView (vtkRenderer ren, vtkVolume
  volume, vtkImageData image, int blend_mode, double
  viewDirection[3], double viewUp[3])
* obj.SetMaskInput (vtkImageData mask)
* vtkImageData = obj.GetMaskInput ()
* obj.SetMaskBlendFactor (float ) - Tells how much mask
  color transfer function is used compared to the standard
  color transfer function when the mask is true. 0.0 means
  only standard color transfer function. 1.0 means only mask
  color tranfer function. Initial value is 1.0.
* float = obj.GetMaskBlendFactorMinValue () - Tells how much
  mask color transfer function is used compared to the
  standard color transfer function when the mask is true.
  0.0 means only standard color transfer function. 1.0 means
  only mask color tranfer function. Initial value is 1.0.
* float = obj.GetMaskBlendFactorMaxValue () - Tells how much
  mask color transfer function is used compared to the
  standard color transfer function when the mask is true.
  0.0 means only standard color transfer function. 1.0 means
  only mask color tranfer function. Initial value is 1.0.
* float = obj.GetMaskBlendFactor () - Tells how much mask
  color transfer function is used compared to the standard
  color transfer function when the mask is true. 0.0 means
  only standard color transfer function. 1.0 means only mask
  color tranfer function. Initial value is 1.0.


* FreeMat_Documentation
* Visualization_Toolkit_Volume_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

