
 Usage

To create an instance of class vtkHyperOctreeFractalSource,
simply invoke its constructor as follows

    obj = vtkHyperOctreeFractalSource



 Methods

The class vtkHyperOctreeFractalSource has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkHyperOctreeFractalSource class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkHyperOctreeFractalSource = obj.NewInstance ()
* vtkHyperOctreeFractalSource = obj.SafeDownCast (vtkObject
  o)
* int = obj.GetMaximumLevel () - Return the maximum number
  of levels of the hyperoctree.


    Postcondition:
        positive_result: result>=1

* obj.SetMaximumLevel (int levels) - Set the maximum number
  of levels of the hyperoctree. If GetMinLevels()>=levels,
  GetMinLevels() is changed to levels-1.


    Precondition:
        positive_levels: levels>=1



    Postcondition:
        is_set: this->GetLevels()==levels
        min_is_valid: this->GetMinLevels()<this->GetLevels()

* obj.SetMinimumLevel (int level) - Return the minimal
  number of levels of systematic subdivision.


    Postcondition:
        positive_result: result>=0

* int = obj.GetMinimumLevel () - Return the minimal number
  of levels of systematic subdivision.


    Postcondition:
        positive_result: result>=0

* obj.SetProjectionAxes (int x, int y, int z) - Set the
  projection from the 4D space (4 parameters / 2 imaginary
  numbers) to the axes of the 3D Volume. 0=C_Real,
  1=C_Imaginary, 2=X_Real, 4=X_Imaginary
* obj.SetProjectionAxes (int a[3]) - Set the projection from
  the 4D space (4 parameters / 2 imaginary numbers) to the
  axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real,
  4=X_Imaginary
* int = obj. GetProjectionAxes () - Set the projection from
  the 4D space (4 parameters / 2 imaginary numbers) to the
  axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real,
  4=X_Imaginary
* obj.SetOriginCX (double , double , double , double ) -
  Imaginary and real value for C (constant in equation) and
  X (initial value).
* obj.SetOriginCX (double a[4]) - Imaginary and real value
  for C (constant in equation) and X (initial value).
* double = obj. GetOriginCX () - Imaginary and real value
  for C (constant in equation) and X (initial value).
* obj.SetSizeCX (double , double , double , double ) - Just
  a different way of setting the sample. This sets the size
  of the 4D volume. SampleCX is computed from size and
  extent. Size is ignored when a dimension i 0 (collapsed).
* obj.SetSizeCX (double a[4]) - Just a different way of
  setting the sample. This sets the size of the 4D volume.
  SampleCX is computed from size and extent. Size is ignored
  when a dimension i 0 (collapsed).
* double = obj. GetSizeCX () - Just a different way of
  setting the sample. This sets the size of the 4D volume.
  SampleCX is computed from size and extent. Size is ignored
  when a dimension i 0 (collapsed).
* obj.SetMaximumNumberOfIterations (short ) - The maximum
  number of cycles run to see if the value goes over 2
* GetMaximumNumberOfIterationsMinValue = obj.() - The
  maximum number of cycles run to see if the value goes over
  2
* GetMaximumNumberOfIterationsMaxValue = obj.() - The
  maximum number of cycles run to see if the value goes over
  2
* char = obj.GetMaximumNumberOfIterations () - The maximum
  number of cycles run to see if the value goes over 2
* obj.SetDimension (int ) - Create a 2D or 3D fractal.
* int = obj.GetDimensionMinValue () - Create a 2D or 3D
  fractal.
* int = obj.GetDimensionMaxValue () - Create a 2D or 3D
  fractal.
* int = obj.GetDimension () - Create a 2D or 3D fractal.
* obj.SetSpanThreshold (double ) - Controls when a leaf gets
  subdivided. If the corner values span a larger range than
  this value, the leaf is subdivided. This defaults to 2.
* double = obj.GetSpanThreshold () - Controls when a leaf
  gets subdivided. If the corner values span a larger range
  than this value, the leaf is subdivided. This defaults to
  2.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

