
 Usage

vtkLocator is an abstract base class for spatial search
objects, or locators. The principle behind locators is that
they divide 3-space into small pieces (or "buckets") that
can be quickly found in response to queries like point
location, line intersection, or object-object intersection.
The purpose of this base class is to provide ivars and
methods shared by all locators. The GenerateRepresentation()
is one such interesting method. This method works in
conjunction with vtkLocatorFilter to create polygonal
representations for the locator. For example, if the locator
is an OBB tree (i.e., vtkOBBTree.h), then the representation
is a set of one or more oriented bounding boxes, depending
upon the specified level.
Locators typically work as follows. One or more "entities",
such as points or cells, are inserted into the tree. These
entities are associated with one or more buckets. Then, when
performing geometric operations, the operations are
performed first on the buckets, and then if the operation
tests positive, then on the entities in the bucket. For
example, during collision tests, the locators are collided
first to identify intersecting buckets. If an intersection
is found, more expensive operations are then carried out on
the entities in the bucket.
To obtain good performance, locators are often organized in
a tree structure. In such a structure, there are frequently
multiple "levels" corresponding to different nodes in the
tree. So the word level (in the context of the locator) can
be used to specify a particular representation in the tree.
For example, in an octree (which is a tree with 8 children),
level 0 is the bounding box, or root octant, and level 1
consists of its eight children.
To create an instance of class vtkLocator, simply invoke its
constructor as follows

    obj = vtkLocator



 Methods

The class vtkLocator has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkLocator class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkLocator = obj.NewInstance ()
* vtkLocator = obj.SafeDownCast (vtkObject o)
* obj.SetDataSet (vtkDataSet ) - Build the locator from the
  points/cells defining this dataset.
* vtkDataSet = obj.GetDataSet () - Build the locator from
  the points/cells defining this dataset.
* obj.SetMaxLevel (int ) - Set the maximum allowable level
  for the tree. If the Automatic ivar is off, this will be
  the target depth of the locator. Initial value is 8.
* int = obj.GetMaxLevelMinValue () - Set the maximum
  allowable level for the tree. If the Automatic ivar is
  off, this will be the target depth of the locator. Initial
  value is 8.
* int = obj.GetMaxLevelMaxValue () - Set the maximum
  allowable level for the tree. If the Automatic ivar is
  off, this will be the target depth of the locator. Initial
  value is 8.
* int = obj.GetMaxLevel () - Set the maximum allowable level
  for the tree. If the Automatic ivar is off, this will be
  the target depth of the locator. Initial value is 8.
* int = obj.GetLevel () - Get the level of the locator
  (determined automatically if Automatic is true). The value
  of this ivar may change each time the locator is built.
  Initial value is 8.
* obj.SetAutomatic (int ) - Boolean controls whether locator
  depth/resolution of locator is computed automatically from
  average number of entities in bucket. If not set, there
  will be an explicit method to control the construction of
  the locator (found in the subclass).
* int = obj.GetAutomatic () - Boolean controls whether
  locator depth/resolution of locator is computed
  automatically from average number of entities in bucket.
  If not set, there will be an explicit method to control
  the construction of the locator (found in the subclass).
* obj.AutomaticOn () - Boolean controls whether locator
  depth/resolution of locator is computed automatically from
  average number of entities in bucket. If not set, there
  will be an explicit method to control the construction of
  the locator (found in the subclass).
* obj.AutomaticOff () - Boolean controls whether locator
  depth/resolution of locator is computed automatically from
  average number of entities in bucket. If not set, there
  will be an explicit method to control the construction of
  the locator (found in the subclass).
* obj.SetTolerance (double ) - Specify absolute tolerance
  (in world coordinates) for performing geometric
  operations.
* double = obj.GetToleranceMinValue () - Specify absolute
  tolerance (in world coordinates) for performing geometric
  operations.
* double = obj.GetToleranceMaxValue () - Specify absolute
  tolerance (in world coordinates) for performing geometric
  operations.
* double = obj.GetTolerance () - Specify absolute tolerance
  (in world coordinates) for performing geometric
  operations.
* obj.Update () - Cause the locator to rebuild itself if it
  or its input dataset has changed.
* obj.Initialize () - Initialize locator. Frees memory and
  resets object as appropriate.
* obj.BuildLocator () - Build the locator from the input
  dataset.
* obj.FreeSearchStructure () - Free the memory required for
  the spatial data structure.
* obj.GenerateRepresentation (int level, vtkPolyData pd) -
  Method to build a representation at a particular level.
  Note that the method GetLevel() returns the maximum number
  of levels available for the tree. You must provide a
  vtkPolyData object into which to place the data.
* long = obj.GetBuildTime () - Return the time of the last
  data structure build.
* obj.Register (vtkObjectBase o) - Handle the PointSet <-
  > Locator loop.
* obj.UnRegister (vtkObjectBase o) - Handle the PointSet <-
  > Locator loop.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

