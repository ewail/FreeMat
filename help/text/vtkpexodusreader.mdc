
 Usage

vtkPExodusReader is a unstructured grid source object that
reads PExodusReaderII files. Most of the meta data
associated with the file is loaded when UpdateInformation is
called. This includes information like Title, number of
blocks, number and names of arrays. This data can be
retrieved from methods in this reader. Separate arrays that
are meant to be a single vector, are combined internally for
convenience. To be combined, the array names have to be
identical except for a trailing X,Y and Z (or x,y,z). By
default all cell and point arrays are loaded. However, the
user can flag arrays not to load with the methods
"SetPointDataArrayLoadFlag" and "SetCellDataArrayLoadFlag".
The reader responds to piece requests by loading only a
range of the possible blocks. Unused points are filtered out
internally.
To create an instance of class vtkPExodusReader, simply
invoke its constructor as follows

    obj = vtkPExodusReader



 Methods

The class vtkPExodusReader has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkPExodusReader class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkPExodusReader = obj.NewInstance ()
* vtkPExodusReader = obj.SafeDownCast (vtkObject o)
* obj.SetFilePattern (string ) - These methods tell the
  reader that the data is ditributed across multiple files.
  This is for distributed execution. It this case, pieces
  are mapped to files. The pattern should have one d to
  format the file number. FileNumberRange is used to
  generate file numbers. I was thinking of having an
  arbitrary list of file numbers. This may happen in the
  future. (That is why there is no GetFileNumberRange
  method.
* string = obj.GetFilePattern () - These methods tell the
  reader that the data is ditributed across multiple files.
  This is for distributed execution. It this case, pieces
  are mapped to files. The pattern should have one d to
  format the file number. FileNumberRange is used to
  generate file numbers. I was thinking of having an
  arbitrary list of file numbers. This may happen in the
  future. (That is why there is no GetFileNumberRange
  method.
* obj.SetFilePrefix (string ) - These methods tell the
  reader that the data is ditributed across multiple files.
  This is for distributed execution. It this case, pieces
  are mapped to files. The pattern should have one d to
  format the file number. FileNumberRange is used to
  generate file numbers. I was thinking of having an
  arbitrary list of file numbers. This may happen in the
  future. (That is why there is no GetFileNumberRange
  method.
* string = obj.GetFilePrefix () - These methods tell the
  reader that the data is ditributed across multiple files.
  This is for distributed execution. It this case, pieces
  are mapped to files. The pattern should have one d to
  format the file number. FileNumberRange is used to
  generate file numbers. I was thinking of having an
  arbitrary list of file numbers. This may happen in the
  future. (That is why there is no GetFileNumberRange
  method.
* obj.SetFileRange (int , int ) - Set the range of files
  that are being loaded. The range for single file should
  add to 0.
* obj.SetFileRange (int r) - Set the range of files that are
  being loaded. The range for single file should add to 0.
* int = obj. GetFileRange () - Set the range of files that
  are being loaded. The range for single file should add to
  0.
* obj.SetFileName (string name)
* int = obj.GetNumberOfFileNames () - Return the number of
  files to be read.
* int = obj.GetNumberOfFiles () - Return the number of files
  to be read.
* obj.SetGenerateFileIdArray (int flag)
* int = obj.GetGenerateFileIdArray ()
* obj.GenerateFileIdArrayOn ()
* obj.GenerateFileIdArrayOff ()
* int = obj.GetTotalNumberOfElements ()
* int = obj.GetTotalNumberOfNodes ()
* int = obj.GetNumberOfVariableArrays ()
* string = obj.GetVariableArrayName (int a_which)
* obj.EnableDSPFiltering ()
* obj.AddFilter (vtkDSPFilterDefinition a_filter)
* obj.StartAddingFilter ()
* obj.AddFilterInputVar (string name)
* obj.AddFilterOutputVar (string name)
* obj.AddFilterNumeratorWeight (double weight)
* obj.AddFilterForwardNumeratorWeight (double weight)
* obj.AddFilterDenominatorWeight (double weight)
* obj.FinishAddingFilter ()
* obj.RemoveFilter (string a_outputVariableName)


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

