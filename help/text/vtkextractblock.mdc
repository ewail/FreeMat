
 Usage

vtkExtractBlock is a filter that extracts blocks from a
multiblock dataset. Each node in the multi-block tree is
identified by an index. The index can be obtained by
performing a preorder traversal of the tree (including empty
nodes). eg. A(B (D, E), C(F, G)). Inorder traversal yields:
A, B, D, E, C, F, G Index of A is 0, while index of C is 4.
To create an instance of class vtkExtractBlock, simply
invoke its constructor as follows

    obj = vtkExtractBlock



 Methods

The class vtkExtractBlock has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkExtractBlock class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkExtractBlock = obj.NewInstance ()
* vtkExtractBlock = obj.SafeDownCast (vtkObject o)
* obj.AddIndex (int index) - Select the block indices to
  extract. Each node in the multi-block tree is identified
  by an index. The index can be obtained by performing a
  preorder traversal of the tree (including empty nodes).
  eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B,
  D, E, C, F, G Index of A is 0, while index of C is 4.
* obj.RemoveIndex (int index) - Select the block indices to
  extract. Each node in the multi-block tree is identified
  by an index. The index can be obtained by performing a
  preorder traversal of the tree (including empty nodes).
  eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B,
  D, E, C, F, G Index of A is 0, while index of C is 4.
* obj.RemoveAllIndices () - Select the block indices to
  extract. Each node in the multi-block tree is identified
  by an index. The index can be obtained by performing a
  preorder traversal of the tree (including empty nodes).
  eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B,
  D, E, C, F, G Index of A is 0, while index of C is 4.
* obj.SetPruneOutput (int ) - When set, the output
  mutliblock dataset will be pruned to remove empty nodes.
  On by default.
* int = obj.GetPruneOutput () - When set, the output
  mutliblock dataset will be pruned to remove empty nodes.
  On by default.
* obj.PruneOutputOn () - When set, the output mutliblock
  dataset will be pruned to remove empty nodes. On by
  default.
* obj.PruneOutputOff () - When set, the output mutliblock
  dataset will be pruned to remove empty nodes. On by
  default.
* obj.SetMaintainStructure (int ) - This is used only when
  PruneOutput is ON. By default, when pruning the output
  i.e. remove empty blocks, if node has only 1 non-null
  child block, then that node is removed. To preserve these
  parent nodes, set this flag to true. Off by default.
* int = obj.GetMaintainStructure () - This is used only when
  PruneOutput is ON. By default, when pruning the output
  i.e. remove empty blocks, if node has only 1 non-null
  child block, then that node is removed. To preserve these
  parent nodes, set this flag to true. Off by default.
* obj.MaintainStructureOn () - This is used only when
  PruneOutput is ON. By default, when pruning the output
  i.e. remove empty blocks, if node has only 1 non-null
  child block, then that node is removed. To preserve these
  parent nodes, set this flag to true. Off by default.
* obj.MaintainStructureOff () - This is used only when
  PruneOutput is ON. By default, when pruning the output
  i.e. remove empty blocks, if node has only 1 non-null
  child block, then that node is removed. To preserve these
  parent nodes, set this flag to true. Off by default.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

