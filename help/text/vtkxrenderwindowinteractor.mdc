
 Usage

vtkXRenderWindowInteractor is a convenience object that
provides event bindings to common graphics functions. For
example, camera and actor functions such as zoom-in/zoom-
out, azimuth, roll, and pan. IT is one of the window system
specific subclasses of vtkRenderWindowInteractor. Please see
vtkRenderWindowInteractor documentation for event bindings.
To create an instance of class vtkXRenderWindowInteractor,
simply invoke its constructor as follows

    obj = vtkXRenderWindowInteractor



 Methods

The class vtkXRenderWindowInteractor has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkXRenderWindowInteractor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkXRenderWindowInteractor = obj.NewInstance ()
* vtkXRenderWindowInteractor = obj.SafeDownCast (vtkObject
  o)
* obj.Initialize () - Initializes the event handlers without
  an XtAppContext. This is good for when you don't have a
  user interface, but you still want to have mouse
  interaction.
* obj.TerminateApp () - Break the event loop on 'q','e'
  keypress. Want more ???
* int = obj.GetBreakLoopFlag () - The BreakLoopFlag is
  checked in the Start() method. Setting it to anything
  other than zero will cause the interactor loop to
  terminate and return to the calling function.
* obj.SetBreakLoopFlag (int ) - The BreakLoopFlag is checked
  in the Start() method. Setting it to anything other than
  zero will cause the interactor loop to terminate and
  return to the calling function.
* obj.BreakLoopFlagOff () - The BreakLoopFlag is checked in
  the Start() method. Setting it to anything other than zero
  will cause the interactor loop to terminate and return to
  the calling function.
* obj.BreakLoopFlagOn () - The BreakLoopFlag is checked in
  the Start() method. Setting it to anything other than zero
  will cause the interactor loop to terminate and return to
  the calling function.
* obj.Enable () - Enable/Disable interactions. By default
  interactors are enabled when initialized. Initialize()
  must be called prior to enabling/disabling interaction.
  These methods are used when a window/widget is being
  shared by multiple renderers and interactors. This allows
  a "modal" display where one interactor is active when its
  data is to be displayed and all other interactors
  associated with the widget are disabled when their data is
  not displayed.
* obj.Disable () - Enable/Disable interactions. By default
  interactors are enabled when initialized. Initialize()
  must be called prior to enabling/disabling interaction.
  These methods are used when a window/widget is being
  shared by multiple renderers and interactors. This allows
  a "modal" display where one interactor is active when its
  data is to be displayed and all other interactors
  associated with the widget are disabled when their data is
  not displayed.
* obj.Start () - This will start up the X event loop and
  never return. If you call this method it will loop
  processing X events until the application is exited.
* obj.UpdateSize (int , int ) - Update the Size data member
  and set the associated RenderWindow's size.
* obj.GetMousePosition (int x, int y) - Re-defines virtual
  function to get mouse position by querying X-server.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

