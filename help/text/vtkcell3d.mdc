
 Usage

vtkCell3D is an abstract class that extends the interfaces
for 3D data cells, and implements methods needed to satisfy
the vtkCell API. The 3D cells include hexehedra, tetrahedra,
wedge, pyramid, and voxel.
To create an instance of class vtkCell3D, simply invoke its
constructor as follows

    obj = vtkCell3D



 Methods

The class vtkCell3D has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkCell3D class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCell3D = obj.NewInstance ()
* vtkCell3D = obj.SafeDownCast (vtkObject o)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray
  connectivity, vtkPointData inPd, vtkPointData outPd,
  vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int
  insideOut) - Cut (or clip) the cell based on the input
  cellScalars and the specified value. The output of the
  clip operation will be one or more cells of the same
  topological dimension as the original cell. The flag
  insideOut controls what part of the cell is considered
  inside - normally cell points whose scalar value is
  greater than "value" are considered inside. If insideOut
  is on, this is reversed. Also, if the output cell data is
  non-NULL, the cell data from the clipped cell is passed to
  the generated contouring primitives. (Note: the
  CopyAllocate() method must be invoked on both the output
  cell and point data. The cellId refers to the cell from
  which the cell data is copied.) (Satisfies vtkCell API.)
* int = obj.GetCellDimension () - Set the tolerance for
  merging clip intersection points that are near the
  vertices of cells. This tolerance is used to prevent the
  generation of degenerate tetrahedra during clipping.
* obj.SetMergeTolerance (double ) - Set the tolerance for
  merging clip intersection points that are near the
  vertices of cells. This tolerance is used to prevent the
  generation of degenerate tetrahedra during clipping.
* double = obj.GetMergeToleranceMinValue () - Set the
  tolerance for merging clip intersection points that are
  near the vertices of cells. This tolerance is used to
  prevent the generation of degenerate tetrahedra during
  clipping.
* double = obj.GetMergeToleranceMaxValue () - Set the
  tolerance for merging clip intersection points that are
  near the vertices of cells. This tolerance is used to
  prevent the generation of degenerate tetrahedra during
  clipping.
* double = obj.GetMergeTolerance () - Set the tolerance for
  merging clip intersection points that are near the
  vertices of cells. This tolerance is used to prevent the
  generation of degenerate tetrahedra during clipping.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

