
 Usage

The first input is a vtkSelection containing the selected
vertices. The second input is a vtkGraph. This filter
'grows' the selection set in one of the following ways 1)
SetBFSDistance controls how many 'hops' the selection is
grown from each seed point in the selection set (defaults to
1) 2) IncludeShortestPaths controls whether this filter
tries to 'connect' the vertices in the selection set by
computing the shortest path between the vertices (if such a
path exists) Note: IncludeShortestPaths is currently non-
functional
To create an instance of class vtkExpandSelectedGraph,
simply invoke its constructor as follows

    obj = vtkExpandSelectedGraph



 Methods

The class vtkExpandSelectedGraph has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkExpandSelectedGraph class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkExpandSelectedGraph = obj.NewInstance ()
* vtkExpandSelectedGraph = obj.SafeDownCast (vtkObject o)
* obj.SetGraphConnection (vtkAlgorithmOutput in) - A
  convenience method for setting the second input (i.e. the
  graph).
* int = obj.FillInputPortInformation (int port,
  vtkInformation info) - Specify the first vtkSelection
  input and the second vtkGraph input.
* obj.SetBFSDistance (int ) - Set/Get BFSDistance which
  controls how many 'hops' the selection is grown from each
  seed point in the selection set (defaults to 1)
* int = obj.GetBFSDistance () - Set/Get BFSDistance which
  controls how many 'hops' the selection is grown from each
  seed point in the selection set (defaults to 1)
* obj.SetIncludeShortestPaths (bool ) - Set/Get
  IncludeShortestPaths controls whether this filter tries to
  'connect' the vertices in the selection set by computing
  the shortest path between the vertices (if such a path
  exists) Note: IncludeShortestPaths is currently non-
  functional
* bool = obj.GetIncludeShortestPaths () - Set/Get
  IncludeShortestPaths controls whether this filter tries to
  'connect' the vertices in the selection set by computing
  the shortest path between the vertices (if such a path
  exists) Note: IncludeShortestPaths is currently non-
  functional
* obj.IncludeShortestPathsOn () - Set/Get
  IncludeShortestPaths controls whether this filter tries to
  'connect' the vertices in the selection set by computing
  the shortest path between the vertices (if such a path
  exists) Note: IncludeShortestPaths is currently non-
  functional
* obj.IncludeShortestPathsOff () - Set/Get
  IncludeShortestPaths controls whether this filter tries to
  'connect' the vertices in the selection set by computing
  the shortest path between the vertices (if such a path
  exists) Note: IncludeShortestPaths is currently non-
  functional
* obj.SetDomain (string ) - Set/Get the vertex domain to use
  in the expansion.
* string = obj.GetDomain () - Set/Get the vertex domain to
  use in the expansion.
* obj.SetUseDomain (bool ) - Whether or not to use the
  domain when deciding to add a vertex to the expansion.
  Defaults to false.
* bool = obj.GetUseDomain () - Whether or not to use the
  domain when deciding to add a vertex to the expansion.
  Defaults to false.
* obj.UseDomainOn () - Whether or not to use the domain when
  deciding to add a vertex to the expansion. Defaults to
  false.
* obj.UseDomainOff () - Whether or not to use the domain
  when deciding to add a vertex to the expansion. Defaults
  to false.


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

