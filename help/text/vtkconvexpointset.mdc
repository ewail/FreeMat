
 Usage

vtkConvexPointSet is a concrete implementation that
represents a 3D cell defined by a convex set of points. An
example of such a cell is an octant (from an octree).
vtkConvexPointSet uses the ordered triangulations approach
(vtkOrderedTriangulator) to create triangulations guaranteed
to be compatible across shared faces. This allows a general
approach to processing complex, convex cell types.
To create an instance of class vtkConvexPointSet, simply
invoke its constructor as follows

    obj = vtkConvexPointSet



 Methods

The class vtkConvexPointSet has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkConvexPointSet class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkConvexPointSet = obj.NewInstance ()
* vtkConvexPointSet = obj.SafeDownCast (vtkObject o)
* int = obj.HasFixedTopology () - See vtkCell3D API for
  description of these methods.
* int = obj.GetCellType () - This cell requires that it be
  initialized prior to access.
* int = obj.RequiresInitialization () - This cell requires
  that it be initialized prior to access.
* obj.Initialize () - This cell requires that it be
  initialized prior to access.
* int = obj.GetNumberOfEdges () - A convex point set has no
  explicit cell edge or faces; however implicitly (after
  triangulation) it does. Currently the method
  GetNumberOfEdges() always returns 0 while the
  GetNumberOfFaces() returns the number of boundary
  triangles of the triangulation of the convex point set.
  The method GetNumberOfFaces() triggers a triangulation of
  the convex point set; repeated calls to GetFace() then
  return the boundary faces. (Note: GetNumberOfEdges()
  currently returns 0 because it is a rarely used method and
  hard to implement. It can be changed in the future.
* vtkCell = obj.GetEdge (int ) - A convex point set has no
  explicit cell edge or faces; however implicitly (after
  triangulation) it does. Currently the method
  GetNumberOfEdges() always returns 0 while the
  GetNumberOfFaces() returns the number of boundary
  triangles of the triangulation of the convex point set.
  The method GetNumberOfFaces() triggers a triangulation of
  the convex point set; repeated calls to GetFace() then
  return the boundary faces. (Note: GetNumberOfEdges()
  currently returns 0 because it is a rarely used method and
  hard to implement. It can be changed in the future.
* int = obj.GetNumberOfFaces () - A convex point set has no
  explicit cell edge or faces; however implicitly (after
  triangulation) it does. Currently the method
  GetNumberOfEdges() always returns 0 while the
  GetNumberOfFaces() returns the number of boundary
  triangles of the triangulation of the convex point set.
  The method GetNumberOfFaces() triggers a triangulation of
  the convex point set; repeated calls to GetFace() then
  return the boundary faces. (Note: GetNumberOfEdges()
  currently returns 0 because it is a rarely used method and
  hard to implement. It can be changed in the future.
* vtkCell = obj.GetFace (int faceId) - A convex point set
  has no explicit cell edge or faces; however implicitly
  (after triangulation) it does. Currently the method
  GetNumberOfEdges() always returns 0 while the
  GetNumberOfFaces() returns the number of boundary
  triangles of the triangulation of the convex point set.
  The method GetNumberOfFaces() triggers a triangulation of
  the convex point set; repeated calls to GetFace() then
  return the boundary faces. (Note: GetNumberOfEdges()
  currently returns 0 because it is a rarely used method and
  hard to implement. It can be changed in the future.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - Satisfy the vtkCell API. This method
  contours by triangulating the cell and then contouring the
  resulting tetrahedra.
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray
  connectivity, vtkPointData inPd, vtkPointData outPd,
  vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int
  insideOut) - Satisfy the vtkCell API. This method contours
  by triangulating the cell and then adding clip-edge
  intersection points into the triangulation; extracting the
  clipped region.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts) - Triangulate using methods of
  vtkOrderedTriangulator.
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs) - Computes derivatives by
  triangulating and from subId and pcoords, evaluating
  derivatives on the resulting tetrahedron.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - Returns the set of points forming a face
  of the triangulation of these points that are on the
  boundary of the cell that are closest parametrically to
  the point specified.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the cell in parametric coordinates.
* int = obj.IsPrimaryCell () - Compute the interpolation
  functions/derivatives (aka shape functions/derivatives)
* obj.InterpolateFunctions (double pcoords[3], double sf) -
  Compute the interpolation functions/derivatives (aka shape
  functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs) -
  Compute the interpolation functions/derivatives (aka shape
  functions/derivatives)


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

