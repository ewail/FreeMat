
 Usage

vtkImageMarchingCubes is a filter that takes as input images
(e.g., 3D image region) and generates on output one or more
isosurfaces. One or more contour values must be specified to
generate the isosurfaces. Alternatively, you can specify a
min/max scalar range and the number of contours to generate
a series of evenly spaced contour values. This filter can
stream, so that the entire volume need not be loaded at
once. Streaming is controlled using the instance variable
InputMemoryLimit, which has units KBytes.
To create an instance of class vtkImageMarchingCubes, simply
invoke its constructor as follows

    obj = vtkImageMarchingCubes



 Methods

The class vtkImageMarchingCubes has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkImageMarchingCubes class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImageMarchingCubes = obj.NewInstance ()
* vtkImageMarchingCubes = obj.SafeDownCast (vtkObject o)
* obj.SetValue (int i, double value) - Methods to set
  contour values
* double = obj.GetValue (int i) - Methods to set contour
  values
* obj.GetValues (double contourValues) - Methods to set
  contour values
* obj.SetNumberOfContours (int number) - Methods to set
  contour values
* int = obj.GetNumberOfContours () - Methods to set contour
  values
* obj.GenerateValues (int numContours, double range[2]) -
  Methods to set contour values
* obj.GenerateValues (int numContours, double rangeStart,
  double rangeEnd) - Methods to set contour values
* long = obj.GetMTime () - Because we delegate to
  vtkContourValues &amp; refer to vtkImplicitFunction
* obj.SetComputeScalars (int ) - Set/Get the computation of
  scalars.
* int = obj.GetComputeScalars () - Set/Get the computation
  of scalars.
* obj.ComputeScalarsOn () - Set/Get the computation of
  scalars.
* obj.ComputeScalarsOff () - Set/Get the computation of
  scalars.
* obj.SetComputeNormals (int ) - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* int = obj.GetComputeNormals () - Set/Get the computation
  of normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.ComputeNormalsOn () - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.ComputeNormalsOff () - Set/Get the computation of
  normals. Normal computation is fairly expensive in both
  time and storage. If the output data will be processed by
  filters that modify topology or geometry, it may be wise
  to turn Normals and Gradients off.
* obj.SetComputeGradients (int ) - Set/Get the computation
  of gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* int = obj.GetComputeGradients () - Set/Get the computation
  of gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.ComputeGradientsOn () - Set/Get the computation of
  gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* obj.ComputeGradientsOff () - Set/Get the computation of
  gradients. Gradient computation is fairly expensive in
  both time and storage. Note that if ComputeNormals is on,
  gradients will have to be calculated, but will not be
  stored in the output dataset. If the output data will be
  processed by filters that modify topology or geometry, it
  may be wise to turn Normals and Gradients off.
* int = obj.GetLocatorPoint (int cellX, int cellY, int edge)
* obj.AddLocatorPoint (int cellX, int cellY, int edge, int
  ptId)
* obj.IncrementLocatorZ ()
* obj.SetInputMemoryLimit (int ) - The InputMemoryLimit
  determines the chunk size (the number of slices requested
  at each iteration). The units of this limit is KiloBytes.
  For now, only the Z axis is split.
* int = obj.GetInputMemoryLimit () - The InputMemoryLimit
  determines the chunk size (the number of slices requested
  at each iteration). The units of this limit is KiloBytes.
  For now, only the Z axis is split.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

