
 Usage

This is a software ray caster for rendering volumes in
vtkImageData.
To create an instance of class vtkVolumeRayCastMapper,
simply invoke its constructor as follows

    obj = vtkVolumeRayCastMapper



 Methods

The class vtkVolumeRayCastMapper has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkVolumeRayCastMapper class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkVolumeRayCastMapper = obj.NewInstance ()
* vtkVolumeRayCastMapper = obj.SafeDownCast (vtkObject o)
* obj.SetSampleDistance (double ) - Set/Get the distance
  between samples. This variable is only used for sampling
  ray casting methods. Methods that compute a ray value by
  stepping cell-by-cell are not affected by this value.
* double = obj.GetSampleDistance () - Set/Get the distance
  between samples. This variable is only used for sampling
  ray casting methods. Methods that compute a ray value by
  stepping cell-by-cell are not affected by this value.
* obj.SetVolumeRayCastFunction (vtkVolumeRayCastFunction ) -
  Get / Set the volume ray cast function. This is used to
  process values found along the ray to compute a final
  pixel value.
* vtkVolumeRayCastFunction = obj.GetVolumeRayCastFunction ()
  - Get / Set the volume ray cast function. This is used to
  process values found along the ray to compute a final
  pixel value.
* obj.SetGradientEstimator (vtkEncodedGradientEstimator
  gradest) - Set / Get the gradient estimator used to
  estimate normals
* vtkEncodedGradientEstimator = obj.GetGradientEstimator ()
  - Set / Get the gradient estimator used to estimate
  normals
* vtkEncodedGradientShader = obj.GetGradientShader () - Get
  the gradient shader.
* obj.SetImageSampleDistance (double ) - Sampling distance
  in the XY image dimensions. Default value of 1 meaning 1
  ray cast per pixel. If set to 0.5, 4 rays will be cast per
  pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by
  2) pixels.
* double = obj.GetImageSampleDistanceMinValue () - Sampling
  distance in the XY image dimensions. Default value of 1
  meaning 1 ray cast per pixel. If set to 0.5, 4 rays will
  be cast per pixel. If set to 2.0, 1 ray will be cast for
  every 4 (2 by 2) pixels.
* double = obj.GetImageSampleDistanceMaxValue () - Sampling
  distance in the XY image dimensions. Default value of 1
  meaning 1 ray cast per pixel. If set to 0.5, 4 rays will
  be cast per pixel. If set to 2.0, 1 ray will be cast for
  every 4 (2 by 2) pixels.
* double = obj.GetImageSampleDistance () - Sampling distance
  in the XY image dimensions. Default value of 1 meaning 1
  ray cast per pixel. If set to 0.5, 4 rays will be cast per
  pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by
  2) pixels.
* obj.SetMinimumImageSampleDistance (double ) - This is the
  minimum image sample distance allow when the image sample
  distance is being automatically adjusted
* double = obj.GetMinimumImageSampleDistanceMinValue () -
  This is the minimum image sample distance allow when the
  image sample distance is being automatically adjusted
* double = obj.GetMinimumImageSampleDistanceMaxValue () -
  This is the minimum image sample distance allow when the
  image sample distance is being automatically adjusted
* double = obj.GetMinimumImageSampleDistance () - This is
  the minimum image sample distance allow when the image
  sample distance is being automatically adjusted
* obj.SetMaximumImageSampleDistance (double ) - This is the
  maximum image sample distance allow when the image sample
  distance is being automatically adjusted
* double = obj.GetMaximumImageSampleDistanceMinValue () -
  This is the maximum image sample distance allow when the
  image sample distance is being automatically adjusted
* double = obj.GetMaximumImageSampleDistanceMaxValue () -
  This is the maximum image sample distance allow when the
  image sample distance is being automatically adjusted
* double = obj.GetMaximumImageSampleDistance () - This is
  the maximum image sample distance allow when the image
  sample distance is being automatically adjusted
* obj.SetAutoAdjustSampleDistances (int ) - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* int = obj.GetAutoAdjustSampleDistancesMinValue () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* int = obj.GetAutoAdjustSampleDistancesMaxValue () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* int = obj.GetAutoAdjustSampleDistances () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* obj.AutoAdjustSampleDistancesOn () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* obj.AutoAdjustSampleDistancesOff () - If
  AutoAdjustSampleDistances is on, the the
  ImageSampleDistance will be varied to achieve the
  allocated render time of this prop (controlled by the
  desired update rate and any culling in use).
* obj.SetNumberOfThreads (int num) - Set/Get the number of
  threads to use. This by default is equal to the number of
  available processors detected.
* int = obj.GetNumberOfThreads () - Set/Get the number of
  threads to use. This by default is equal to the number of
  available processors detected.
* obj.SetIntermixIntersectingGeometry (int ) - If
  IntermixIntersectingGeometry is turned on, the zbuffer
  will be captured and used to limit the traversal of the
  rays.
* int = obj.GetIntermixIntersectingGeometryMinValue () - If
  IntermixIntersectingGeometry is turned on, the zbuffer
  will be captured and used to limit the traversal of the
  rays.
* int = obj.GetIntermixIntersectingGeometryMaxValue () - If
  IntermixIntersectingGeometry is turned on, the zbuffer
  will be captured and used to limit the traversal of the
  rays.
* int = obj.GetIntermixIntersectingGeometry () - If
  IntermixIntersectingGeometry is turned on, the zbuffer
  will be captured and used to limit the traversal of the
  rays.
* obj.IntermixIntersectingGeometryOn () - If
  IntermixIntersectingGeometry is turned on, the zbuffer
  will be captured and used to limit the traversal of the
  rays.
* obj.IntermixIntersectingGeometryOff () - If
  IntermixIntersectingGeometry is turned on, the zbuffer
  will be captured and used to limit the traversal of the
  rays.


* FreeMat_Documentation
* Visualization_Toolkit_Volume_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

