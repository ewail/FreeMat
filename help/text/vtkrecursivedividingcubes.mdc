
 Usage

vtkRecursiveDividingCubes is a filter that generates points
lying on a surface of constant scalar value (i.e., an
isosurface). Dense point clouds (i.e., at screen resolution)
will appear as a surface. Less dense clouds can be used as a
source to generate streamlines or to generate "transparent"
surfaces.
This implementation differs from vtkDividingCubes in that it
uses a recursive procedure. In many cases this can result in
generating more points than the procedural implementation of
vtkDividingCubes. This is because the recursive procedure
divides voxels by multiples of powers of two. This can over-
constrain subdivision. One of the advantages of the
recursive technique is that the recursion is terminated
earlier, which in some cases can be more efficient.
To create an instance of class vtkRecursiveDividingCubes,
simply invoke its constructor as follows

    obj = vtkRecursiveDividingCubes



 Methods

The class vtkRecursiveDividingCubes has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkRecursiveDividingCubes class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRecursiveDividingCubes = obj.NewInstance ()
* vtkRecursiveDividingCubes = obj.SafeDownCast (vtkObject o)
* obj.SetValue (double ) - Set isosurface value.
* double = obj.GetValue () - Set isosurface value.
* obj.SetDistance (double ) - Specify sub-voxel size at
  which to generate point.
* double = obj.GetDistanceMinValue () - Specify sub-voxel
  size at which to generate point.
* double = obj.GetDistanceMaxValue () - Specify sub-voxel
  size at which to generate point.
* double = obj.GetDistance () - Specify sub-voxel size at
  which to generate point.
* obj.SetIncrement (int ) - Every "Increment" point is added
  to the list of points. This parameter, if set to a large
  value, can be used to limit the number of points while
  retaining good accuracy.
* int = obj.GetIncrementMinValue () - Every "Increment"
  point is added to the list of points. This parameter, if
  set to a large value, can be used to limit the number of
  points while retaining good accuracy.
* int = obj.GetIncrementMaxValue () - Every "Increment"
  point is added to the list of points. This parameter, if
  set to a large value, can be used to limit the number of
  points while retaining good accuracy.
* int = obj.GetIncrement () - Every "Increment" point is
  added to the list of points. This parameter, if set to a
  large value, can be used to limit the number of points
  while retaining good accuracy.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

