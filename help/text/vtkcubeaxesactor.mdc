
 Usage

vtkCubeAxesActor is a composite actor that draws axes of the
bounding box of an input dataset. The axes include labels
and titles for the x-y-z axes. The algorithm selects which
axes to draw based on the user-defined 'fly' mode. (STATIC
is default). 'STATIC' constructs axes from all edges of the
bounding box. 'CLOSEST_TRIAD' consists of the three axes x-
y-z forming a triad that lies closest to the specified
camera. 'FURTHEST_TRIAD' consists of the three axes x-y-
z forming a triad that lies furthest from the specified
camera. 'OUTER_EDGES' is constructed from edges that are on
the "exterior" of the bounding box, exterior as determined
from examining outer edges of the bounding box in projection
(display) space.
To use this object you must define a bounding box and the
camera used to render the vtkCubeAxesActor. You can
optionally turn on/off labels, ticks, gridlines, and set
tick location, number of labels, and text to use for axis-
titles. A 'corner offset' can also be set. This allows the
axes to be set partially away from the actual bounding box
to perhaps prevent overlap of labels between the various
axes.
The Bounds instance variable (an array of six doubles) is
used to determine the bounding box.
To create an instance of class vtkCubeAxesActor, simply
invoke its constructor as follows

    obj = vtkCubeAxesActor



 Methods

The class vtkCubeAxesActor has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkCubeAxesActor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCubeAxesActor = obj.NewInstance ()
* vtkCubeAxesActor = obj.SafeDownCast (vtkObject o)
* int = obj.RenderOpaqueGeometry (vtkViewport ) - Draw the
  axes as per the vtkProp superclass' API.
* int = obj.RenderTranslucentGeometry (vtkViewport ) -
  Explicitly specify the region in space around which to
  draw the bounds. The bounds is used only when no Input or
  Prop is specified. The bounds are specified according to
  (xmin,xmax, ymin,ymax, zmin,zmax), making sure that the
  min's are less than the max's.
* obj.SetBounds (double , double , double , double , double
  , double ) - Explicitly specify the region in space around
  which to draw the bounds. The bounds is used only when no
  Input or Prop is specified. The bounds are specified
  according to (xmin,xmax, ymin,ymax, zmin,zmax), making
  sure that the min's are less than the max's.
* obj.SetBounds (double a[6]) - Explicitly specify the
  region in space around which to draw the bounds. The
  bounds is used only when no Input or Prop is specified.
  The bounds are specified according to (xmin,xmax,
  ymin,ymax, zmin,zmax), making sure that the min's are less
  than the max's.
* double = obj.GetBounds () - Explicitly specify the region
  in space around which to draw the bounds. The bounds is
  used only when no Input or Prop is specified. The bounds
  are specified according to (xmin,xmax, ymin,ymax,
  zmin,zmax), making sure that the min's are less than the
  max's.
* obj.GetBounds (double bounds[6]) - Explicitly specify the
  region in space around which to draw the bounds. The
  bounds is used only when no Input or Prop is specified.
  The bounds are specified according to (xmin,xmax,
  ymin,ymax, zmin,zmax), making sure that the min's are less
  than the max's.
* obj.SetCamera (vtkCamera ) - Set/Get the camera to perform
  scaling and translation of the vtkCubeAxesActor.
* vtkCamera = obj.GetCamera () - Set/Get the camera to
  perform scaling and translation of the vtkCubeAxesActor.
* obj.SetFlyMode (int ) - Specify a mode to control how the
  axes are drawn: either static, closest triad, furthest
  triad or outer edges in relation to the camera position.
* int = obj.GetFlyModeMinValue () - Specify a mode to
  control how the axes are drawn: either static, closest
  triad, furthest triad or outer edges in relation to the
  camera position.
* int = obj.GetFlyModeMaxValue () - Specify a mode to
  control how the axes are drawn: either static, closest
  triad, furthest triad or outer edges in relation to the
  camera position.
* int = obj.GetFlyMode () - Specify a mode to control how
  the axes are drawn: either static, closest triad, furthest
  triad or outer edges in relation to the camera position.
* obj.SetFlyModeToOuterEdges () - Specify a mode to control
  how the axes are drawn: either static, closest triad,
  furthest triad or outer edges in relation to the camera
  position.
* obj.SetFlyModeToClosestTriad () - Specify a mode to
  control how the axes are drawn: either static, closest
  triad, furthest triad or outer edges in relation to the
  camera position.
* obj.SetFlyModeToFurthestTriad () - Specify a mode to
  control how the axes are drawn: either static, closest
  triad, furthest triad or outer edges in relation to the
  camera position.
* obj.SetFlyModeToStaticTriad () - Specify a mode to control
  how the axes are drawn: either static, closest triad,
  furthest triad or outer edges in relation to the camera
  position.
* obj.SetFlyModeToStaticEdges () - Specify a mode to control
  how the axes are drawn: either static, closest triad,
  furthest triad or outer edges in relation to the camera
  position.
* obj.SetXTitle (string ) - Set/Get the labels for the x, y,
  and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* string = obj.GetXTitle () - Set/Get the labels for the x,
  y, and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* obj.SetXUnits (string ) - Set/Get the labels for the x, y,
  and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* string = obj.GetXUnits () - Set/Get the labels for the x,
  y, and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* obj.SetYTitle (string ) - Set/Get the labels for the x, y,
  and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* string = obj.GetYTitle () - Set/Get the labels for the x,
  y, and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* obj.SetYUnits (string ) - Set/Get the labels for the x, y,
  and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* string = obj.GetYUnits () - Set/Get the labels for the x,
  y, and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* obj.SetZTitle (string ) - Set/Get the labels for the x, y,
  and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* string = obj.GetZTitle () - Set/Get the labels for the x,
  y, and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* obj.SetZUnits (string ) - Set/Get the labels for the x, y,
  and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* string = obj.GetZUnits () - Set/Get the labels for the x,
  y, and z axes. By default, use "X-Axis", "Y-Axis" and "Z-
  Axis".
* obj.SetXLabelFormat (string ) - Set/Get the format with
  which to print the labels on each of the x-y-z axes.
* string = obj.GetXLabelFormat () - Set/Get the format with
  which to print the labels on each of the x-y-z axes.
* obj.SetYLabelFormat (string ) - Set/Get the format with
  which to print the labels on each of the x-y-z axes.
* string = obj.GetYLabelFormat () - Set/Get the format with
  which to print the labels on each of the x-y-z axes.
* obj.SetZLabelFormat (string ) - Set/Get the format with
  which to print the labels on each of the x-y-z axes.
* string = obj.GetZLabelFormat () - Set/Get the format with
  which to print the labels on each of the x-y-z axes.
* obj.SetInertia (int ) - Set/Get the inertial factor that
  controls how often (i.e, how many renders) the axes can
  switch position (jump from one axes to another).
* int = obj.GetInertiaMinValue () - Set/Get the inertial
  factor that controls how often (i.e, how many renders) the
  axes can switch position (jump from one axes to another).
* int = obj.GetInertiaMaxValue () - Set/Get the inertial
  factor that controls how often (i.e, how many renders) the
  axes can switch position (jump from one axes to another).
* int = obj.GetInertia () - Set/Get the inertial factor that
  controls how often (i.e, how many renders) the axes can
  switch position (jump from one axes to another).
* obj.SetCornerOffset (double ) - Specify an offset value to
  "pull back" the axes from the corner at which they are
  joined to avoid overlap of axes labels. The "CornerOffset"
  is the fraction of the axis length to pull back.
* double = obj.GetCornerOffset () - Specify an offset value
  to "pull back" the axes from the corner at which they are
  joined to avoid overlap of axes labels. The "CornerOffset"
  is the fraction of the axis length to pull back.
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.
* obj.SetXAxisVisibility (int ) - Turn on and off the
  visibility of each axis.
* int = obj.GetXAxisVisibility () - Turn on and off the
  visibility of each axis.
* obj.XAxisVisibilityOn () - Turn on and off the visibility
  of each axis.
* obj.XAxisVisibilityOff () - Turn on and off the visibility
  of each axis.
* obj.SetYAxisVisibility (int ) - Turn on and off the
  visibility of each axis.
* int = obj.GetYAxisVisibility () - Turn on and off the
  visibility of each axis.
* obj.YAxisVisibilityOn () - Turn on and off the visibility
  of each axis.
* obj.YAxisVisibilityOff () - Turn on and off the visibility
  of each axis.
* obj.SetZAxisVisibility (int ) - Turn on and off the
  visibility of each axis.
* int = obj.GetZAxisVisibility () - Turn on and off the
  visibility of each axis.
* obj.ZAxisVisibilityOn () - Turn on and off the visibility
  of each axis.
* obj.ZAxisVisibilityOff () - Turn on and off the visibility
  of each axis.
* obj.SetXAxisLabelVisibility (int ) - Turn on and off the
  visibility of labels for each axis.
* int = obj.GetXAxisLabelVisibility () - Turn on and off the
  visibility of labels for each axis.
* obj.XAxisLabelVisibilityOn () - Turn on and off the
  visibility of labels for each axis.
* obj.XAxisLabelVisibilityOff () - Turn on and off the
  visibility of labels for each axis.
* obj.SetYAxisLabelVisibility (int )
* int = obj.GetYAxisLabelVisibility ()
* obj.YAxisLabelVisibilityOn ()
* obj.YAxisLabelVisibilityOff ()
* obj.SetZAxisLabelVisibility (int )
* int = obj.GetZAxisLabelVisibility ()
* obj.ZAxisLabelVisibilityOn ()
* obj.ZAxisLabelVisibilityOff ()
* obj.SetXAxisTickVisibility (int ) - Turn on and off the
  visibility of ticks for each axis.
* int = obj.GetXAxisTickVisibility () - Turn on and off the
  visibility of ticks for each axis.
* obj.XAxisTickVisibilityOn () - Turn on and off the
  visibility of ticks for each axis.
* obj.XAxisTickVisibilityOff () - Turn on and off the
  visibility of ticks for each axis.
* obj.SetYAxisTickVisibility (int )
* int = obj.GetYAxisTickVisibility ()
* obj.YAxisTickVisibilityOn ()
* obj.YAxisTickVisibilityOff ()
* obj.SetZAxisTickVisibility (int )
* int = obj.GetZAxisTickVisibility ()
* obj.ZAxisTickVisibilityOn ()
* obj.ZAxisTickVisibilityOff ()
* obj.SetXAxisMinorTickVisibility (int ) - Turn on and off
  the visibility of minor ticks for each axis.
* int = obj.GetXAxisMinorTickVisibility () - Turn on and off
  the visibility of minor ticks for each axis.
* obj.XAxisMinorTickVisibilityOn () - Turn on and off the
  visibility of minor ticks for each axis.
* obj.XAxisMinorTickVisibilityOff () - Turn on and off the
  visibility of minor ticks for each axis.
* obj.SetYAxisMinorTickVisibility (int )
* int = obj.GetYAxisMinorTickVisibility ()
* obj.YAxisMinorTickVisibilityOn ()
* obj.YAxisMinorTickVisibilityOff ()
* obj.SetZAxisMinorTickVisibility (int )
* int = obj.GetZAxisMinorTickVisibility ()
* obj.ZAxisMinorTickVisibilityOn ()
* obj.ZAxisMinorTickVisibilityOff ()
* obj.SetDrawXGridlines (int )
* int = obj.GetDrawXGridlines ()
* obj.DrawXGridlinesOn ()
* obj.DrawXGridlinesOff ()
* obj.SetDrawYGridlines (int )
* int = obj.GetDrawYGridlines ()
* obj.DrawYGridlinesOn ()
* obj.DrawYGridlinesOff ()
* obj.SetDrawZGridlines (int )
* int = obj.GetDrawZGridlines ()
* obj.DrawZGridlinesOn ()
* obj.DrawZGridlinesOff ()
* obj.SetTickLocation (int ) - Set/Get the location of ticks
  marks.
* int = obj.GetTickLocationMinValue () - Set/Get the
  location of ticks marks.
* int = obj.GetTickLocationMaxValue () - Set/Get the
  location of ticks marks.
* int = obj.GetTickLocation () - Set/Get the location of
  ticks marks.
* obj.SetTickLocationToInside (void )
* obj.SetTickLocationToOutside (void )
* obj.SetTickLocationToBoth (void )
* obj.SetLabelScaling (bool , int , int , int )
* obj.ShallowCopy (vtkCubeAxesActor actor) - Shallow copy of
  a KatCubeAxesActor.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

