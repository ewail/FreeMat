
 Usage

This class is used to represent a contour drawn on the focal
plane (usually overlayed on top of an image or volume
widget). The class was written in order to be able to draw
contours on a volume widget and have the contours overlayed
on the focal plane in order to do contour segmentation.
To create an instance of class
vtkOrientedGlyphFocalPlaneContourRepresentation, simply
invoke its constructor as follows

    obj = vtkOrientedGlyphFocalPlaneContourRepresentation



 Methods

The class vtkOrientedGlyphFocalPlaneContourRepresentation
has several methods that can be used. They are listed below.
Note that the documentation is translated automatically from
the VTK sources, and may not be completely intelligible.
When in doubt, consult the VTK website. In the methods
listed below, obj is an instance of the
vtkOrientedGlyphFocalPlaneContourRepresentation class.

* string = obj.GetClassName () - Standard methods for
  instances of this class.
* int = obj.IsA (string name) - Standard methods for
  instances of this class.
* vtkOrientedGlyphFocalPlaneContourRepresentation =
  obj.NewInstance () - Standard methods for instances of
  this class.
* vtkOrientedGlyphFocalPlaneContourRepresentation =
  obj.SafeDownCast (vtkObject o) - Standard methods for
  instances of this class.
* obj.SetCursorShape (vtkPolyData cursorShape) - Specify the
  cursor shape. Keep in mind that the shape will be aligned
  with the constraining plane by orienting it such that the
  x axis of the geometry lies along the normal of the plane.
* vtkPolyData = obj.GetCursorShape () - Specify the cursor
  shape. Keep in mind that the shape will be aligned with
  the constraining plane by orienting it such that the x
  axis of the geometry lies along the normal of the plane.
* obj.SetActiveCursorShape (vtkPolyData activeShape) -
  Specify the shape of the cursor (handle) when it is
  active. This is the geometry that will be used when the
  mouse is close to the handle or if the user is
  manipulating the handle.
* vtkPolyData = obj.GetActiveCursorShape () - Specify the
  shape of the cursor (handle) when it is active. This is
  the geometry that will be used when the mouse is close to
  the handle or if the user is manipulating the handle.
* vtkProperty2D = obj.GetProperty () - This is the property
  used when the handle is not active (the mouse is not near
  the handle)
* vtkProperty2D = obj.GetActiveProperty () - This is the
  property used when the user is interacting with the
  handle.
* vtkProperty2D = obj.GetLinesProperty () - This is the
  property used by the lines.
* obj.SetRenderer (vtkRenderer ren) - Subclasses of
  vtkOrientedGlyphFocalPlaneContourRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* obj.BuildRepresentation () - Subclasses of
  vtkOrientedGlyphFocalPlaneContourRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* obj.StartWidgetInteraction (double eventPos[2]) -
  Subclasses of
  vtkOrientedGlyphFocalPlaneContourRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* obj.WidgetInteraction (double eventPos[2]) - Subclasses of
  vtkOrientedGlyphFocalPlaneContourRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* int = obj.ComputeInteractionState (int X, int Y, int
  modified) - Subclasses of
  vtkOrientedGlyphFocalPlaneContourRepresentation must
  implement these methods. These are the methods that the
  widget and its representation use to communicate with each
  other.
* obj.GetActors2D (vtkPropCollection ) - Methods to make
  this class behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - Methods to
  make this class behave as a vtkProp.
* int = obj.RenderOverlay (vtkViewport viewport) - Methods
  to make this class behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Methods to make this class behave as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Methods to make this class behave as a
  vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - Methods to
  make this class behave as a vtkProp.
* vtkPolyData = obj.GetContourRepresentationAsPolyData () -
  Get the points in this contour as a vtkPolyData.
* vtkMatrix4x4 = obj.GetContourPlaneDirectionCosines (double
  origin[3]) - Direction cosines of the plane on which the
  contour lies on in world co-ordinates. This would be the
  same matrix that would be set in vtkImageReslice or
  vtkImagePlaneWidget if there were a plane passing through
  the contour points. The origin must be the origin of the
  data under the contour.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

