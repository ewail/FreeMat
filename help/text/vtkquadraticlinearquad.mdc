
 Usage

vtkQuadraticQuad is a concrete implementation of
vtkNonLinearCell to represent a two-dimensional, 6-node
isoparametric quadratic-linear quadrilateral element. The
interpolation is the standard finite element, quadratic-
linear isoparametric shape function. The cell includes a
mid-edge node for two of the four edges. The ordering of the
six points defining the cell are point ids (0-3,4-5) where
ids 0-3 define the four corner vertices of the quad; ids 4-
7 define the midedge nodes (0,1) and (2,3) .
To create an instance of class vtkQuadraticLinearQuad,
simply invoke its constructor as follows

    obj = vtkQuadraticLinearQuad



 Methods

The class vtkQuadraticLinearQuad has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkQuadraticLinearQuad class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkQuadraticLinearQuad = obj.NewInstance ()
* vtkQuadraticLinearQuad = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetFace (int )
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray polys,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this quadratic linear quad using scalar value provided.
  Like contouring, except that it cuts the quad to produce
  linear triangles.
* int = obj.GetParametricCenter (double pcoords[3]) - Return
  the center of the pyramid in parametric coordinates.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[6]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [12]) - Return the ids of the vertices defining edge
  (edgeId). Ids are related to the cell, not to the dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

