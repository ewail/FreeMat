
 Usage

vtkBandedPolyDataContourFilter is a filter that takes as
input vtkPolyData and produces as output filled contours
(also represented as vtkPolyData). Filled contours are bands
of cells that all have the same cell scalar value, and can
therefore be colored the same. The method is also referred
to as filled contour generation.
To use this filter you must specify one or more contour
values. You can either use the method SetValue() to specify
each contour value, or use GenerateValues() to generate a
series of evenly spaced contours. Each contour value divides
(or clips) the data into two pieces, values below the
contour value, and values above it. The scalar values of
each band correspond to the specified contour value. Note
that if the first and last contour values are not the
minimum/maximum contour range, then two extra contour values
are added corresponding to the minimum and maximum range
values. These extra contour bands can be prevented from
being output by turning clipping on.
To create an instance of class
vtkBandedPolyDataContourFilter, simply invoke its
constructor as follows

    obj = vtkBandedPolyDataContourFilter



 Methods

The class vtkBandedPolyDataContourFilter has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkBandedPolyDataContourFilter
class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkBandedPolyDataContourFilter = obj.NewInstance ()
* vtkBandedPolyDataContourFilter = obj.SafeDownCast
  (vtkObject o)
* obj.SetValue (int i, double value) - Methods to set / get
  contour values. A single value at a time can be set with
  SetValue(). Multiple contour values can be set with
  GenerateValues(). Note that GenerateValues() generates n
  values inclusive of the start and end range values.
* double = obj.GetValue (int i) - Methods to set / get
  contour values. A single value at a time can be set with
  SetValue(). Multiple contour values can be set with
  GenerateValues(). Note that GenerateValues() generates n
  values inclusive of the start and end range values.
* obj.GetValues (double contourValues) - Methods to set /
  get contour values. A single value at a time can be set
  with SetValue(). Multiple contour values can be set with
  GenerateValues(). Note that GenerateValues() generates n
  values inclusive of the start and end range values.
* obj.SetNumberOfContours (int number) - Methods to set /
  get contour values. A single value at a time can be set
  with SetValue(). Multiple contour values can be set with
  GenerateValues(). Note that GenerateValues() generates n
  values inclusive of the start and end range values.
* int = obj.GetNumberOfContours () - Methods to set / get
  contour values. A single value at a time can be set with
  SetValue(). Multiple contour values can be set with
  GenerateValues(). Note that GenerateValues() generates n
  values inclusive of the start and end range values.
* obj.GenerateValues (int numContours, double range[2]) -
  Methods to set / get contour values. A single value at a
  time can be set with SetValue(). Multiple contour values
  can be set with GenerateValues(). Note that GenerateValues
  () generates n values inclusive of the start and end range
  values.
* obj.GenerateValues (int numContours, double rangeStart,
  double rangeEnd) - Methods to set / get contour values. A
  single value at a time can be set with SetValue().
  Multiple contour values can be set with GenerateValues().
  Note that GenerateValues() generates n values inclusive of
  the start and end range values.
* obj.SetClipping (int ) - Indicate whether to clip outside
  the range specified by the user. (The range is contour
  value[0] to contour value[numContours-1].) Clipping means
  all cells outside of the range specified are not sent to
  the output.
* int = obj.GetClipping () - Indicate whether to clip
  outside the range specified by the user. (The range is
  contour value[0] to contour value[numContours-1].)
  Clipping means all cells outside of the range specified
  are not sent to the output.
* obj.ClippingOn () - Indicate whether to clip outside the
  range specified by the user. (The range is contour value
  [0] to contour value[numContours-1].) Clipping means all
  cells outside of the range specified are not sent to the
  output.
* obj.ClippingOff () - Indicate whether to clip outside the
  range specified by the user. (The range is contour value
  [0] to contour value[numContours-1].) Clipping means all
  cells outside of the range specified are not sent to the
  output.
* obj.SetScalarMode (int ) - Control whether the cell
  scalars are output as an integer index or a scalar value.
  If an index, the index refers to the bands produced by the
  clipping range. If a value, then a scalar value which is a
  value between clip values is used.
* int = obj.GetScalarModeMinValue () - Control whether the
  cell scalars are output as an integer index or a scalar
  value. If an index, the index refers to the bands produced
  by the clipping range. If a value, then a scalar value
  which is a value between clip values is used.
* int = obj.GetScalarModeMaxValue () - Control whether the
  cell scalars are output as an integer index or a scalar
  value. If an index, the index refers to the bands produced
  by the clipping range. If a value, then a scalar value
  which is a value between clip values is used.
* int = obj.GetScalarMode () - Control whether the cell
  scalars are output as an integer index or a scalar value.
  If an index, the index refers to the bands produced by the
  clipping range. If a value, then a scalar value which is a
  value between clip values is used.
* obj.SetScalarModeToIndex () - Control whether the cell
  scalars are output as an integer index or a scalar value.
  If an index, the index refers to the bands produced by the
  clipping range. If a value, then a scalar value which is a
  value between clip values is used.
* obj.SetScalarModeToValue () - Turn on/off a flag to
  control whether contour edges are generated. Contour edges
  are the edges between bands. If enabled, they are
  generated from polygons/triangle strips and placed into
  the second output (the ContourEdgesOutput).
* obj.SetGenerateContourEdges (int ) - Turn on/off a flag to
  control whether contour edges are generated. Contour edges
  are the edges between bands. If enabled, they are
  generated from polygons/triangle strips and placed into
  the second output (the ContourEdgesOutput).
* int = obj.GetGenerateContourEdges () - Turn on/off a flag
  to control whether contour edges are generated. Contour
  edges are the edges between bands. If enabled, they are
  generated from polygons/triangle strips and placed into
  the second output (the ContourEdgesOutput).
* obj.GenerateContourEdgesOn () - Turn on/off a flag to
  control whether contour edges are generated. Contour edges
  are the edges between bands. If enabled, they are
  generated from polygons/triangle strips and placed into
  the second output (the ContourEdgesOutput).
* obj.GenerateContourEdgesOff () - Turn on/off a flag to
  control whether contour edges are generated. Contour edges
  are the edges between bands. If enabled, they are
  generated from polygons/triangle strips and placed into
  the second output (the ContourEdgesOutput).
* vtkPolyData = obj.GetContourEdgesOutput () - Get the
  second output which contains the edges dividing the
  contour bands. This output is empty unless
  GenerateContourEdges is enabled.
* long = obj.GetMTime () - Overload GetMTime because we
  delegate to vtkContourValues so its modified time must be
  taken into account.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

