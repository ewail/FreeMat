
 Usage

vtkCompositeDataProbeFilter supports probing into multi-
group datasets. It sequentially probes through each concrete
dataset within the composite probing at only those locations
at which there were no hits when probing earlier datasets.
For Hierarchical datasets, this traversal through leaf
datasets is done in reverse order of levels i.e. highest
level first.
When dealing with composite datasets, partial arrays are
common i.e. data-arrays that are not available in all of the
blocks. By default, this filter only passes those point and
cell data-arrays that are available in all the blocks i.e.
partial array are removed. When PassPartialArrays is turned
on, this behavior is changed to take a union of all arrays
present thus partial arrays are passed as well. However, for
composite dataset input, this filter still produces a non-
composite output. For all those locations in a block of
where a particular data array is missing, this filter uses
vtkMath::Nan() for double and float arrays, while 0 for all
other types of arrays i.e int, char etc.
To create an instance of class vtkCompositeDataProbeFilter,
simply invoke its constructor as follows

    obj = vtkCompositeDataProbeFilter



 Methods

The class vtkCompositeDataProbeFilter has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkCompositeDataProbeFilter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkCompositeDataProbeFilter = obj.NewInstance ()
* vtkCompositeDataProbeFilter = obj.SafeDownCast (vtkObject
  o)
* obj.SetPassPartialArrays (bool ) - When dealing with
  composite datasets, partial arrays are common i.e. data-
  arrays that are not available in all of the blocks. By
  default, this filter only passes those point and cell
  data-arrays that are available in all the blocks i.e.
  partial array are removed. When PassPartialArrays is
  turned on, this behavior is changed to take a union of all
  arrays present thus partial arrays are passed as well.
  However, for composite dataset input, this filter still
  produces a non-composite output. For all those locations
  in a block of where a particular data array is missing,
  this filter uses vtkMath::Nan() for double and float
  arrays, while 0 for all other types of arrays i.e int,
  char etc.
* bool = obj.GetPassPartialArrays () - When dealing with
  composite datasets, partial arrays are common i.e. data-
  arrays that are not available in all of the blocks. By
  default, this filter only passes those point and cell
  data-arrays that are available in all the blocks i.e.
  partial array are removed. When PassPartialArrays is
  turned on, this behavior is changed to take a union of all
  arrays present thus partial arrays are passed as well.
  However, for composite dataset input, this filter still
  produces a non-composite output. For all those locations
  in a block of where a particular data array is missing,
  this filter uses vtkMath::Nan() for double and float
  arrays, while 0 for all other types of arrays i.e int,
  char etc.
* obj.PassPartialArraysOn () - When dealing with composite
  datasets, partial arrays are common i.e. data-arrays that
  are not available in all of the blocks. By default, this
  filter only passes those point and cell data-arrays that
  are available in all the blocks i.e. partial array are
  removed. When PassPartialArrays is turned on, this
  behavior is changed to take a union of all arrays present
  thus partial arrays are passed as well. However, for
  composite dataset input, this filter still produces a non-
  composite output. For all those locations in a block of
  where a particular data array is missing, this filter uses
  vtkMath::Nan() for double and float arrays, while 0 for
  all other types of arrays i.e int, char etc.
* obj.PassPartialArraysOff () - When dealing with composite
  datasets, partial arrays are common i.e. data-arrays that
  are not available in all of the blocks. By default, this
  filter only passes those point and cell data-arrays that
  are available in all the blocks i.e. partial array are
  removed. When PassPartialArrays is turned on, this
  behavior is changed to take a union of all arrays present
  thus partial arrays are passed as well. However, for
  composite dataset input, this filter still produces a non-
  composite output. For all those locations in a block of
  where a particular data array is missing, this filter uses
  vtkMath::Nan() for double and float arrays, while 0 for
  all other types of arrays i.e int, char etc.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

