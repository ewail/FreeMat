
 Usage

vtkAxesActor is a hybrid 2D/3D actor used to represent 3D
axes in a scene. The user can define the geometry to use for
the shaft or the tip, and the user can set the text for the
three axes. The text will appear to follow the camera since
it is implemented by means of vtkCaptionActor2D. All of the
functionality of the underlying vtkCaptionActor2D objects
are accessable so that, for instance, the font attributes of
the axes text can be manipulated through vtkTextProperty.
Since this class inherits from vtkProp3D, one can apply a
user transform to the underlying geometry and the
positioning of the labels. For example, a rotation transform
could be used to generate a left-handed axes representation.
To create an instance of class vtkAxesActor, simply invoke
its constructor as follows

    obj = vtkAxesActor



 Methods

The class vtkAxesActor has several methods that can be used.
They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkAxesActor class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkAxesActor = obj.NewInstance ()
* vtkAxesActor = obj.SafeDownCast (vtkObject o)
* obj.GetActors (vtkPropCollection ) - For some exporters
  and other other operations we must be able to collect all
  the actors or volumes. These methods are used in that
  process.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Support the standard render methods.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Support the standard render methods.
* int = obj.RenderOverlay (vtkViewport viewport) - Support
  the standard render methods.
* int = obj.HasTranslucentPolygonalGeometry () - Does this
  prop have some translucent polygonal geometry?
* obj.ShallowCopy (vtkProp prop) - Shallow copy of an axes
  actor. Overloads the virtual vtkProp method.
* obj.ReleaseGraphicsResources (vtkWindow ) - Release any
  graphics resources that are being consumed by this actor.
  The parameter window could be used to determine which
  graphic resources to release.
* obj.GetBounds (double bounds[6]) - Get the bounds for this
  Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The method
  GetBounds(double bounds[6]) is available from the
  superclass.)
* double = obj.GetBounds () - Get the bounds for this Actor
  as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The method GetBounds
  (double bounds[6]) is available from the superclass.)
* long = obj.GetMTime () - Get the actors mtime plus
  consider its properties and texture if set.
* long = obj.GetRedrawMTime () - Return the mtime of
  anything that would cause the rendered image to appear
  differently. Usually this involves checking the mtime of
  the prop plus anything else it depends on such as
  properties, textures etc.
* obj.SetTotalLength (double v[3]) - Set the total length of
  the axes in 3 dimensions.
* obj.SetTotalLength (double x, double y, double z) - Set
  the total length of the axes in 3 dimensions.
* double = obj. GetTotalLength () - Set the total length of
  the axes in 3 dimensions.
* obj.SetNormalizedShaftLength (double v[3]) - Set the
  normalized (0-1) length of the shaft.
* obj.SetNormalizedShaftLength (double x, double y, double
  z) - Set the normalized (0-1) length of the shaft.
* double = obj. GetNormalizedShaftLength () - Set the
  normalized (0-1) length of the shaft.
* obj.SetNormalizedTipLength (double v[3]) - Set the
  normalized (0-1) length of the tip. Normally, this would
  be 1 - the normalized length of the shaft.
* obj.SetNormalizedTipLength (double x, double y, double z)
  - Set the normalized (0-1) length of the tip. Normally,
  this would be 1 - the normalized length of the shaft.
* double = obj. GetNormalizedTipLength () - Set the
  normalized (0-1) length of the tip. Normally, this would
  be 1 - the normalized length of the shaft.
* obj.SetNormalizedLabelPosition (double v[3]) - Set the
  normalized (0-1) position of the label along the length of
  the shaft. A value > 1 is permissible.
* obj.SetNormalizedLabelPosition (double x, double y, double
  z) - Set the normalized (0-1) position of the label along
  the length of the shaft. A value > 1 is permissible.
* double = obj. GetNormalizedLabelPosition () - Set the
  normalized (0-1) position of the label along the length of
  the shaft. A value > 1 is permissible.
* obj.SetConeResolution (int ) - Set/get the resolution of
  the pieces of the axes actor.
* int = obj.GetConeResolutionMinValue () - Set/get the
  resolution of the pieces of the axes actor.
* int = obj.GetConeResolutionMaxValue () - Set/get the
  resolution of the pieces of the axes actor.
* int = obj.GetConeResolution () - Set/get the resolution of
  the pieces of the axes actor.
* obj.SetSphereResolution (int ) - Set/get the resolution of
  the pieces of the axes actor.
* int = obj.GetSphereResolutionMinValue () - Set/get the
  resolution of the pieces of the axes actor.
* int = obj.GetSphereResolutionMaxValue () - Set/get the
  resolution of the pieces of the axes actor.
* int = obj.GetSphereResolution () - Set/get the resolution
  of the pieces of the axes actor.
* obj.SetCylinderResolution (int ) - Set/get the resolution
  of the pieces of the axes actor.
* int = obj.GetCylinderResolutionMinValue () - Set/get the
  resolution of the pieces of the axes actor.
* int = obj.GetCylinderResolutionMaxValue () - Set/get the
  resolution of the pieces of the axes actor.
* int = obj.GetCylinderResolution () - Set/get the
  resolution of the pieces of the axes actor.
* obj.SetConeRadius (double ) - Set/get the radius of the
  pieces of the axes actor.
* double = obj.GetConeRadiusMinValue () - Set/get the radius
  of the pieces of the axes actor.
* double = obj.GetConeRadiusMaxValue () - Set/get the radius
  of the pieces of the axes actor.
* double = obj.GetConeRadius () - Set/get the radius of the
  pieces of the axes actor.
* obj.SetSphereRadius (double ) - Set/get the radius of the
  pieces of the axes actor.
* double = obj.GetSphereRadiusMinValue () - Set/get the
  radius of the pieces of the axes actor.
* double = obj.GetSphereRadiusMaxValue () - Set/get the
  radius of the pieces of the axes actor.
* double = obj.GetSphereRadius () - Set/get the radius of
  the pieces of the axes actor.
* obj.SetCylinderRadius (double ) - Set/get the radius of
  the pieces of the axes actor.
* double = obj.GetCylinderRadiusMinValue () - Set/get the
  radius of the pieces of the axes actor.
* double = obj.GetCylinderRadiusMaxValue () - Set/get the
  radius of the pieces of the axes actor.
* double = obj.GetCylinderRadius () - Set/get the radius of
  the pieces of the axes actor.
* obj.SetShaftType (int type) - Set the type of the shaft to
  a cylinder, line, or user defined geometry.
* obj.SetShaftTypeToCylinder () - Set the type of the shaft
  to a cylinder, line, or user defined geometry.
* obj.SetShaftTypeToLine () - Set the type of the shaft to a
  cylinder, line, or user defined geometry.
* obj.SetShaftTypeToUserDefined () - Set the type of the
  shaft to a cylinder, line, or user defined geometry.
* int = obj.GetShaftType () - Set the type of the shaft to a
  cylinder, line, or user defined geometry.
* obj.SetTipType (int type) - Set the type of the tip to a
  cone, sphere, or user defined geometry.
* obj.SetTipTypeToCone () - Set the type of the tip to a
  cone, sphere, or user defined geometry.
* obj.SetTipTypeToSphere () - Set the type of the tip to a
  cone, sphere, or user defined geometry.
* obj.SetTipTypeToUserDefined () - Set the type of the tip
  to a cone, sphere, or user defined geometry.
* int = obj.GetTipType () - Set the type of the tip to a
  cone, sphere, or user defined geometry.
* obj.SetUserDefinedTip (vtkPolyData ) - Set the user
  defined tip polydata.
* vtkPolyData = obj.GetUserDefinedTip () - Set the user
  defined tip polydata.
* obj.SetUserDefinedShaft (vtkPolyData ) - Set the user
  defined shaft polydata.
* vtkPolyData = obj.GetUserDefinedShaft () - Set the user
  defined shaft polydata.
* vtkProperty = obj.GetXAxisTipProperty () - Get the tip
  properties.
* vtkProperty = obj.GetYAxisTipProperty () - Get the tip
  properties.
* vtkProperty = obj.GetZAxisTipProperty () - Get the tip
  properties.
* vtkProperty = obj.GetXAxisShaftProperty () - Get the shaft
  properties.
* vtkProperty = obj.GetYAxisShaftProperty () - Get the shaft
  properties.
* vtkProperty = obj.GetZAxisShaftProperty () - Get the shaft
  properties.
* vtkCaptionActor2D = obj.GetXAxisCaptionActor2D () -
  Retrieve handles to the X, Y and Z axis (so that you can
  set their text properties for example)
* vtkCaptionActor2D = obj.GetYAxisCaptionActor2D () -
  Retrieve handles to the X, Y and Z axis (so that you can
  set their text properties for example)
* vtkCaptionActor2D = obj.GetZAxisCaptionActor2D () - Set/
  get the label text.
* obj.SetXAxisLabelText (string ) - Set/get the label text.
* string = obj.GetXAxisLabelText () - Set/get the label
  text.
* obj.SetYAxisLabelText (string ) - Set/get the label text.
* string = obj.GetYAxisLabelText () - Set/get the label
  text.
* obj.SetZAxisLabelText (string ) - Set/get the label text.
* string = obj.GetZAxisLabelText () - Set/get the label
  text.
* obj.SetAxisLabels (int ) - Enable/disable drawing the axis
  labels.
* int = obj.GetAxisLabels () - Enable/disable drawing the
  axis labels.
* obj.AxisLabelsOn () - Enable/disable drawing the axis
  labels.
* obj.AxisLabelsOff () - Enable/disable drawing the axis
  labels.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

