
 Usage

vtkMCubesReader is a source object that reads binary
marching cubes files. (Marching cubes is an isosurfacing
technique that generates many triangles.) The binary format
is supported by W. Lorensen's marching cubes program (and
the vtkSliceCubes object). The format repeats point
coordinates, so this object will merge the points with a
vtkLocator object. You can choose to supply the vtkLocator
or use the default.
To create an instance of class vtkMCubesReader, simply
invoke its constructor as follows

    obj = vtkMCubesReader



 Methods

The class vtkMCubesReader has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkMCubesReader class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkMCubesReader = obj.NewInstance ()
* vtkMCubesReader = obj.SafeDownCast (vtkObject o)
* obj.SetFileName (string ) - Specify file name of marching
  cubes file.
* string = obj.GetFileName () - Specify file name of
  marching cubes file.
* obj.SetLimitsFileName (string ) - Set / get the file name
  of the marching cubes limits file.
* string = obj.GetLimitsFileName () - Set / get the file
  name of the marching cubes limits file.
* obj.SetHeaderSize (int ) - Specify a header size if one
  exists. The header is skipped and not used at this time.
* int = obj.GetHeaderSizeMinValue () - Specify a header size
  if one exists. The header is skipped and not used at this
  time.
* int = obj.GetHeaderSizeMaxValue () - Specify a header size
  if one exists. The header is skipped and not used at this
  time.
* int = obj.GetHeaderSize () - Specify a header size if one
  exists. The header is skipped and not used at this time.
* obj.SetFlipNormals (int ) - Specify whether to flip
  normals in opposite direction. Flipping ONLY changes the
  direction of the normal vector. Contrast this with
  flipping in vtkPolyDataNormals which flips both the normal
  and the cell point order.
* int = obj.GetFlipNormals () - Specify whether to flip
  normals in opposite direction. Flipping ONLY changes the
  direction of the normal vector. Contrast this with
  flipping in vtkPolyDataNormals which flips both the normal
  and the cell point order.
* obj.FlipNormalsOn () - Specify whether to flip normals in
  opposite direction. Flipping ONLY changes the direction of
  the normal vector. Contrast this with flipping in
  vtkPolyDataNormals which flips both the normal and the
  cell point order.
* obj.FlipNormalsOff () - Specify whether to flip normals in
  opposite direction. Flipping ONLY changes the direction of
  the normal vector. Contrast this with flipping in
  vtkPolyDataNormals which flips both the normal and the
  cell point order.
* obj.SetNormals (int ) - Specify whether to read normals.
* int = obj.GetNormals () - Specify whether to read normals.
* obj.NormalsOn () - Specify whether to read normals.
* obj.NormalsOff () - Specify whether to read normals.
* obj.SetDataByteOrderToBigEndian () - These methods should
  be used instead of the SwapBytes methods. They indicate
  the byte ordering of the file you are trying to read in.
  These methods will then either swap or not swap the bytes
  depending on the byte ordering of the machine it is being
  run on. For example, reading in a BigEndian file on a
  BigEndian machine will result in no swapping. Trying to
  read the same file on a LittleEndian machine will result
  in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian.
* obj.SetDataByteOrderToLittleEndian () - These methods
  should be used instead of the SwapBytes methods. They
  indicate the byte ordering of the file you are trying to
  read in. These methods will then either swap or not swap
  the bytes depending on the byte ordering of the machine it
  is being run on. For example, reading in a BigEndian file
  on a BigEndian machine will result in no swapping. Trying
  to read the same file on a LittleEndian machine will
  result in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian.
* int = obj.GetDataByteOrder () - These methods should be
  used instead of the SwapBytes methods. They indicate the
  byte ordering of the file you are trying to read in. These
  methods will then either swap or not swap the bytes
  depending on the byte ordering of the machine it is being
  run on. For example, reading in a BigEndian file on a
  BigEndian machine will result in no swapping. Trying to
  read the same file on a LittleEndian machine will result
  in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian.
* obj.SetDataByteOrder (int ) - These methods should be used
  instead of the SwapBytes methods. They indicate the byte
  ordering of the file you are trying to read in. These
  methods will then either swap or not swap the bytes
  depending on the byte ordering of the machine it is being
  run on. For example, reading in a BigEndian file on a
  BigEndian machine will result in no swapping. Trying to
  read the same file on a LittleEndian machine will result
  in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian.
* string = obj.GetDataByteOrderAsString () - These methods
  should be used instead of the SwapBytes methods. They
  indicate the byte ordering of the file you are trying to
  read in. These methods will then either swap or not swap
  the bytes depending on the byte ordering of the machine it
  is being run on. For example, reading in a BigEndian file
  on a BigEndian machine will result in no swapping. Trying
  to read the same file on a LittleEndian machine will
  result in swapping. As a quick note most UNIX machines are
  BigEndian while PC's and VAX tend to be LittleEndian. So
  if the file you are reading in was generated on a VAX or
  PC, SetDataByteOrderToLittleEndian otherwise
  SetDataByteOrderToBigEndian.
* obj.SetSwapBytes (int ) - Turn on/off byte swapping.
* int = obj.GetSwapBytes () - Turn on/off byte swapping.
* obj.SwapBytesOn () - Turn on/off byte swapping.
* obj.SwapBytesOff () - Turn on/off byte swapping.
* obj.SetLocator (vtkIncrementalPointLocator locator) - Set
  / get a spatial locator for merging points. By default, an
  instance of vtkMergePoints is used.
* vtkIncrementalPointLocator = obj.GetLocator () - Set / get
  a spatial locator for merging points. By default, an
  instance of vtkMergePoints is used.
* obj.CreateDefaultLocator () - Create default locator. Used
  to create one when none is specified.
* long = obj.GetMTime () - Return the mtime also considering
  the locator.


* FreeMat_Documentation
* Visualization_Toolkit_IO_Classes
* Generated on Thu Jul 25 2013 17:18:34 for FreeMat by
  doxygen_ 1.8.1.1

