
 Usage

vtkAreaLayout assigns sector regions to each vertex in the
tree, creating a tree ring. The data is added as a data
array with four components per tuple representing the
location and size of the sector using the format
(StartAngle, EndAngle, innerRadius, outerRadius).
This algorithm relies on a helper class to perform the
actual layout. This helper class is a subclass of
vtkAreaLayoutStrategy.
.SECTION Thanks Thanks to Jason Shepherd from Sandia
National Laboratories for help developing this class.
To create an instance of class vtkAreaLayout, simply invoke
its constructor as follows

    obj = vtkAreaLayout



 Methods

The class vtkAreaLayout has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkAreaLayout class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkAreaLayout = obj.NewInstance ()
* vtkAreaLayout = obj.SafeDownCast (vtkObject o)
* obj.SetSizeArrayName (string name) - The name for the
  array created for the area for each vertex. The rectangles
  are stored in a quadruple float array (startAngle,
  endAngle, innerRadius, outerRadius). For rectangular
  layouts, this is (minx, maxx, miny, maxy).
* string = obj.GetAreaArrayName () - The name for the array
  created for the area for each vertex. The rectangles are
  stored in a quadruple float array (startAngle, endAngle,
  innerRadius, outerRadius). For rectangular layouts, this
  is (minx, maxx, miny, maxy).
* obj.SetAreaArrayName (string ) - The name for the array
  created for the area for each vertex. The rectangles are
  stored in a quadruple float array (startAngle, endAngle,
  innerRadius, outerRadius). For rectangular layouts, this
  is (minx, maxx, miny, maxy).
* bool = obj.GetEdgeRoutingPoints () - Whether to output a
  second output tree with vertex locations appropriate for
  routing bundled edges. Default is on.
* obj.SetEdgeRoutingPoints (bool ) - Whether to output a
  second output tree with vertex locations appropriate for
  routing bundled edges. Default is on.
* obj.EdgeRoutingPointsOn () - Whether to output a second
  output tree with vertex locations appropriate for routing
  bundled edges. Default is on.
* obj.EdgeRoutingPointsOff () - Whether to output a second
  output tree with vertex locations appropriate for routing
  bundled edges. Default is on.
* vtkAreaLayoutStrategy = obj.GetLayoutStrategy () - The
  strategy to use when laying out the tree map.
* obj.SetLayoutStrategy (vtkAreaLayoutStrategy strategy) -
  The strategy to use when laying out the tree map.
* long = obj.GetMTime () - Get the modification time of the
  layout algorithm.
* vtkIdType = obj.FindVertex (float pnt[2]) - Get the vertex
  whose area contains the point, or return -1 if no vertex
  area covers the point.
* obj.GetBoundingArea (vtkIdType id, float sinfo) - The
  bounding area information for a certain vertex id.


* FreeMat_Documentation
* Visualization_Toolkit_Infovis_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

