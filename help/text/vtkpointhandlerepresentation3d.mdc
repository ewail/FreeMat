
 Usage

This class is used to represent a vtkHandleWidget. It
represents a position in 3D world coordinates using a x-y-
z cursor. The cursor can be configured to show a bounding
box and/or shadows.
To create an instance of class
vtkPointHandleRepresentation3D, simply invoke its
constructor as follows

    obj = vtkPointHandleRepresentation3D



 Methods

The class vtkPointHandleRepresentation3D has several methods
that can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkPointHandleRepresentation3D
class.

* string = obj.GetClassName () - Standard methods for
  instances of this class.
* int = obj.IsA (string name) - Standard methods for
  instances of this class.
* vtkPointHandleRepresentation3D = obj.NewInstance () -
  Standard methods for instances of this class.
* vtkPointHandleRepresentation3D = obj.SafeDownCast
  (vtkObject o) - Standard methods for instances of this
  class.
* obj.SetWorldPosition (double p[3]) - Set the position of
  the point in world and display coordinates. Note that if
  the position is set outside of the bounding box, it will
  be clamped to the boundary of the bounding box. This
  method overloads the superclasses' SetWorldPosition() and
  SetDisplayPosition() in order to set the focal point of
  the cursor properly.
* obj.SetDisplayPosition (double p[3]) - Set the position of
  the point in world and display coordinates. Note that if
  the position is set outside of the bounding box, it will
  be clamped to the boundary of the bounding box. This
  method overloads the superclasses' SetWorldPosition() and
  SetDisplayPosition() in order to set the focal point of
  the cursor properly.
* obj.SetOutline (int o) - Turn on/off the wireframe
  bounding box.
* int = obj.GetOutline () - Turn on/off the wireframe
  bounding box.
* obj.OutlineOn () - Turn on/off the wireframe bounding box.
* obj.OutlineOff () - Turn on/off the wireframe x-shadows.
* obj.SetXShadows (int o) - Turn on/off the wireframe x-
  shadows.
* int = obj.GetXShadows () - Turn on/off the wireframe x-
  shadows.
* obj.XShadowsOn () - Turn on/off the wireframe x-shadows.
* obj.XShadowsOff () - Turn on/off the wireframe y-shadows.
* obj.SetYShadows (int o) - Turn on/off the wireframe y-
  shadows.
* int = obj.GetYShadows () - Turn on/off the wireframe y-
  shadows.
* obj.YShadowsOn () - Turn on/off the wireframe y-shadows.
* obj.YShadowsOff () - Turn on/off the wireframe z-shadows.
* obj.SetZShadows (int o) - Turn on/off the wireframe z-
  shadows.
* int = obj.GetZShadows () - Turn on/off the wireframe z-
  shadows.
* obj.ZShadowsOn () - Turn on/off the wireframe z-shadows.
* obj.ZShadowsOff () - If translation mode is on, as the
  widget is moved the bounding box, shadows, and cursor are
  all translated and sized simultaneously as the point moves
  (i.e., the left and middle mouse buttons act the same). If
  translation mode is off, the cursor does not scale itself
  (based on the specified handle size), and the bounding box
  and shadows do not move or size themselves as the cursor
  focal point moves, which is constrained by the bounds of
  the point representation. (Note that the bounds can be
  scaled up using the right mouse button, and the bounds can
  be manually set with the SetBounds() method.)
* obj.SetTranslationMode (int ) - If translation mode is on,
  as the widget is moved the bounding box, shadows, and
  cursor are all translated and sized simultaneously as the
  point moves (i.e., the left and middle mouse buttons act
  the same). If translation mode is off, the cursor does not
  scale itself (based on the specified handle size), and the
  bounding box and shadows do not move or size themselves as
  the cursor focal point moves, which is constrained by the
  bounds of the point representation. (Note that the bounds
  can be scaled up using the right mouse button, and the
  bounds can be manually set with the SetBounds() method.)
* int = obj.GetTranslationMode () - If translation mode is
  on, as the widget is moved the bounding box, shadows, and
  cursor are all translated and sized simultaneously as the
  point moves (i.e., the left and middle mouse buttons act
  the same). If translation mode is off, the cursor does not
  scale itself (based on the specified handle size), and the
  bounding box and shadows do not move or size themselves as
  the cursor focal point moves, which is constrained by the
  bounds of the point representation. (Note that the bounds
  can be scaled up using the right mouse button, and the
  bounds can be manually set with the SetBounds() method.)
* obj.TranslationModeOn () - If translation mode is on, as
  the widget is moved the bounding box, shadows, and cursor
  are all translated and sized simultaneously as the point
  moves (i.e., the left and middle mouse buttons act the
  same). If translation mode is off, the cursor does not
  scale itself (based on the specified handle size), and the
  bounding box and shadows do not move or size themselves as
  the cursor focal point moves, which is constrained by the
  bounds of the point representation. (Note that the bounds
  can be scaled up using the right mouse button, and the
  bounds can be manually set with the SetBounds() method.)
* obj.TranslationModeOff () - If translation mode is on, as
  the widget is moved the bounding box, shadows, and cursor
  are all translated and sized simultaneously as the point
  moves (i.e., the left and middle mouse buttons act the
  same). If translation mode is off, the cursor does not
  scale itself (based on the specified handle size), and the
  bounding box and shadows do not move or size themselves as
  the cursor focal point moves, which is constrained by the
  bounds of the point representation. (Note that the bounds
  can be scaled up using the right mouse button, and the
  bounds can be manually set with the SetBounds() method.)
* obj.AllOn () - Convenience methods to turn outline and
  shadows on and off.
* obj.AllOff () - Set/Get the handle properties when
  unselected and selected.
* obj.SetProperty (vtkProperty ) - Set/Get the handle
  properties when unselected and selected.
* obj.SetSelectedProperty (vtkProperty ) - Set/Get the
  handle properties when unselected and selected.
* vtkProperty = obj.GetProperty () - Set/Get the handle
  properties when unselected and selected.
* vtkProperty = obj.GetSelectedProperty () - Set/Get the
  handle properties when unselected and selected.
* obj.SetHotSpotSize (double ) - Set the "hot spot" size;
  i.e., the region around the focus, in which the motion
  vector is used to control the constrained sliding action.
  Note the size is specified as a fraction of the length of
  the diagonal of the point widget's bounding box.
* double = obj.GetHotSpotSizeMinValue () - Set the "hot
  spot" size; i.e., the region around the focus, in which
  the motion vector is used to control the constrained
  sliding action. Note the size is specified as a fraction
  of the length of the diagonal of the point widget's
  bounding box.
* double = obj.GetHotSpotSizeMaxValue () - Set the "hot
  spot" size; i.e., the region around the focus, in which
  the motion vector is used to control the constrained
  sliding action. Note the size is specified as a fraction
  of the length of the diagonal of the point widget's
  bounding box.
* double = obj.GetHotSpotSize () - Set the "hot spot" size;
  i.e., the region around the focus, in which the motion
  vector is used to control the constrained sliding action.
  Note the size is specified as a fraction of the length of
  the diagonal of the point widget's bounding box.
* obj.SetHandleSize (double size) - Overload the
  superclasses SetHandleSize() method to update internal
  variables.
* double = obj.GetBounds () - Methods to make this class
  properly act like a vtkWidgetRepresentation.
* obj.BuildRepresentation () - Methods to make this class
  properly act like a vtkWidgetRepresentation.
* obj.StartWidgetInteraction (double eventPos[2]) - Methods
  to make this class properly act like a
  vtkWidgetRepresentation.
* obj.WidgetInteraction (double eventPos[2]) - Methods to
  make this class properly act like a
  vtkWidgetRepresentation.
* int = obj.ComputeInteractionState (int X, int Y, int
  modify) - Methods to make this class properly act like a
  vtkWidgetRepresentation.
* obj.PlaceWidget (double bounds[6]) - Methods to make this
  class properly act like a vtkWidgetRepresentation.
* obj.ShallowCopy (vtkProp prop) - Methods to make this
  class behave as a vtkProp.
* obj.GetActors (vtkPropCollection ) - Methods to make this
  class behave as a vtkProp.
* obj.ReleaseGraphicsResources (vtkWindow ) - Methods to
  make this class behave as a vtkProp.
* int = obj.RenderOpaqueGeometry (vtkViewport viewport) -
  Methods to make this class behave as a vtkProp.
* int = obj.RenderTranslucentPolygonalGeometry (vtkViewport
  viewport) - Methods to make this class behave as a
  vtkProp.
* int = obj.HasTranslucentPolygonalGeometry () - Methods to
  make this class behave as a vtkProp.


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

