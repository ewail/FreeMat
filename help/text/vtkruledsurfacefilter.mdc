
 Usage

vtkRuledSurfaceFilter is a filter that generates a surface
from a set of lines. The lines are assumed to be "parallel"
in the sense that they do not intersect and remain somewhat
close to one another. A surface is generated by connecting
the points defining each pair of lines with straight lines.
This creates a strip for each pair of lines (i.e., a
triangulation is created from two generating lines). The
filter can handle an arbitrary number of lines, with lines i
and i+1 assumed connected. Note that there are several
different approaches for creating the ruled surface, the
method for creating the surface can either use the input
points or resample from the polylines (using a user-
specified resolution).
This filter offers some other important features. A
DistanceFactor ivar is used to decide when two lines are too
far apart to connect. (The factor is a multiple of the
distance between the first two points of the two lines
defining the strip.) If the distance between the two
generating lines becomes too great, then the surface is not
generated in that region. (Note: if the lines separate and
then merge, then a hole can be generated in the surface.) In
addition, the Offset and OnRation ivars can be used to
create nifty striped surfaces. Closed surfaces (e.g., tubes)
can be created by setting the CloseSurface ivar. (The
surface can be closed in the other direction by repeating
the first and last point in the polylines defining the
surface.)
An important use of this filter is to combine it with
vtkStreamLine to generate stream surfaces. It can also be
used to create surfaces from contours.
To create an instance of class vtkRuledSurfaceFilter, simply
invoke its constructor as follows

    obj = vtkRuledSurfaceFilter



 Methods

The class vtkRuledSurfaceFilter has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkRuledSurfaceFilter class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRuledSurfaceFilter = obj.NewInstance ()
* vtkRuledSurfaceFilter = obj.SafeDownCast (vtkObject o)
* obj.SetDistanceFactor (double ) - Set/Get the factor that
  controls tearing of the surface.
* double = obj.GetDistanceFactorMinValue () - Set/Get the
  factor that controls tearing of the surface.
* double = obj.GetDistanceFactorMaxValue () - Set/Get the
  factor that controls tearing of the surface.
* double = obj.GetDistanceFactor () - Set/Get the factor
  that controls tearing of the surface.
* obj.SetOnRatio (int ) - Control the striping of the ruled
  surface. If OnRatio is greater than 1, then every nth
  strip is turned on, beginning with the Offset strip.
* int = obj.GetOnRatioMinValue () - Control the striping of
  the ruled surface. If OnRatio is greater than 1, then
  every nth strip is turned on, beginning with the Offset
  strip.
* int = obj.GetOnRatioMaxValue () - Control the striping of
  the ruled surface. If OnRatio is greater than 1, then
  every nth strip is turned on, beginning with the Offset
  strip.
* int = obj.GetOnRatio () - Control the striping of the
  ruled surface. If OnRatio is greater than 1, then every
  nth strip is turned on, beginning with the Offset strip.
* obj.SetOffset (int ) - Control the striping of the ruled
  surface. The offset sets the first stripe that is visible.
  Offset is generally used with OnRatio to create nifty
  striping effects.
* int = obj.GetOffsetMinValue () - Control the striping of
  the ruled surface. The offset sets the first stripe that
  is visible. Offset is generally used with OnRatio to
  create nifty striping effects.
* int = obj.GetOffsetMaxValue () - Control the striping of
  the ruled surface. The offset sets the first stripe that
  is visible. Offset is generally used with OnRatio to
  create nifty striping effects.
* int = obj.GetOffset () - Control the striping of the ruled
  surface. The offset sets the first stripe that is visible.
  Offset is generally used with OnRatio to create nifty
  striping effects.
* obj.SetCloseSurface (int ) - Indicate whether the surface
  is to be closed. If this boolean is on, then the first and
  last polyline are used to generate a stripe that closes
  the surface. (Note: to close the surface in the other
  direction, repeat the first point in the polyline as the
  last point in the polyline.)
* int = obj.GetCloseSurface () - Indicate whether the
  surface is to be closed. If this boolean is on, then the
  first and last polyline are used to generate a stripe that
  closes the surface. (Note: to close the surface in the
  other direction, repeat the first point in the polyline as
  the last point in the polyline.)
* obj.CloseSurfaceOn () - Indicate whether the surface is to
  be closed. If this boolean is on, then the first and last
  polyline are used to generate a stripe that closes the
  surface. (Note: to close the surface in the other
  direction, repeat the first point in the polyline as the
  last point in the polyline.)
* obj.CloseSurfaceOff () - Indicate whether the surface is
  to be closed. If this boolean is on, then the first and
  last polyline are used to generate a stripe that closes
  the surface. (Note: to close the surface in the other
  direction, repeat the first point in the polyline as the
  last point in the polyline.)
* obj.SetRuledMode (int ) - Set the mode by which to create
  the ruled surface. (Dramatically different results are
  possible depending on the chosen mode.) The resample mode
  evenly resamples the polylines (based on length) and
  generates triangle strips. The point walk mode uses the
  existing points and walks around the polyline using
  existing points.
* int = obj.GetRuledModeMinValue () - Set the mode by which
  to create the ruled surface. (Dramatically different
  results are possible depending on the chosen mode.) The
  resample mode evenly resamples the polylines (based on
  length) and generates triangle strips. The point walk mode
  uses the existing points and walks around the polyline
  using existing points.
* int = obj.GetRuledModeMaxValue () - Set the mode by which
  to create the ruled surface. (Dramatically different
  results are possible depending on the chosen mode.) The
  resample mode evenly resamples the polylines (based on
  length) and generates triangle strips. The point walk mode
  uses the existing points and walks around the polyline
  using existing points.
* int = obj.GetRuledMode () - Set the mode by which to
  create the ruled surface. (Dramatically different results
  are possible depending on the chosen mode.) The resample
  mode evenly resamples the polylines (based on length) and
  generates triangle strips. The point walk mode uses the
  existing points and walks around the polyline using
  existing points.
* obj.SetRuledModeToResample () - Set the mode by which to
  create the ruled surface. (Dramatically different results
  are possible depending on the chosen mode.) The resample
  mode evenly resamples the polylines (based on length) and
  generates triangle strips. The point walk mode uses the
  existing points and walks around the polyline using
  existing points.
* obj.SetRuledModeToPointWalk () - Set the mode by which to
  create the ruled surface. (Dramatically different results
  are possible depending on the chosen mode.) The resample
  mode evenly resamples the polylines (based on length) and
  generates triangle strips. The point walk mode uses the
  existing points and walks around the polyline using
  existing points.
* string = obj.GetRuledModeAsString () - Set the mode by
  which to create the ruled surface. (Dramatically different
  results are possible depending on the chosen mode.) The
  resample mode evenly resamples the polylines (based on
  length) and generates triangle strips. The point walk mode
  uses the existing points and walks around the polyline
  using existing points.
* obj.SetResolution (int , int ) - If the ruled surface
  generation mode is RESAMPLE, then these parameters are
  used to determine the resample rate. Resolution[0] defines
  the resolution in the direction of the polylines;
  Resolution[1] defines the resolution across the polylines
  (i.e., direction orthogonal to Resolution[0]).
* obj.SetResolution (int a[2]) - If the ruled surface
  generation mode is RESAMPLE, then these parameters are
  used to determine the resample rate. Resolution[0] defines
  the resolution in the direction of the polylines;
  Resolution[1] defines the resolution across the polylines
  (i.e., direction orthogonal to Resolution[0]).
* int = obj. GetResolution () - If the ruled surface
  generation mode is RESAMPLE, then these parameters are
  used to determine the resample rate. Resolution[0] defines
  the resolution in the direction of the polylines;
  Resolution[1] defines the resolution across the polylines
  (i.e., direction orthogonal to Resolution[0]).
* obj.SetPassLines (int ) - Indicate whether the generating
  lines are to be passed to the output. By defualt lines are
  not passed to the output.
* int = obj.GetPassLines () - Indicate whether the
  generating lines are to be passed to the output. By
  defualt lines are not passed to the output.
* obj.PassLinesOn () - Indicate whether the generating lines
  are to be passed to the output. By defualt lines are not
  passed to the output.
* obj.PassLinesOff () - Indicate whether the generating
  lines are to be passed to the output. By defualt lines are
  not passed to the output.
* obj.SetOrientLoops (int ) - Indicate whether the starting
  points of the loops need to be determined. If set to 0,
  then its assumes that the 0th point of each loop should be
  always connected By defualt the loops are not oriented.
* int = obj.GetOrientLoops () - Indicate whether the
  starting points of the loops need to be determined. If set
  to 0, then its assumes that the 0th point of each loop
  should be always connected By defualt the loops are not
  oriented.
* obj.OrientLoopsOn () - Indicate whether the starting
  points of the loops need to be determined. If set to 0,
  then its assumes that the 0th point of each loop should be
  always connected By defualt the loops are not oriented.
* obj.OrientLoopsOff () - Indicate whether the starting
  points of the loops need to be determined. If set to 0,
  then its assumes that the 0th point of each loop should be
  always connected By defualt the loops are not oriented.


* FreeMat_Documentation
* Visualization_Toolkit_Graphics_Classes
* Generated on Thu Jul 25 2013 17:18:32 for FreeMat by
  doxygen_ 1.8.1.1

