
 Usage

vtkImplicitModeller is a filter that computes the distance
from the input geometry to the points of an output
structured point set. This distance function can then be
"contoured" to generate new, offset surfaces from the
original geometry. An important feature of this object is
"capping". If capping is turned on, after the implicit model
is created, the values on the boundary of the structured
points dataset are set to the cap value. This is used to
force closure of the resulting contoured surface. Note,
however, that large cap values can generate weird surface
normals in those cells adjacent to the boundary of the
dataset. Using smaller cap value will reduce this effect.
Another important ivar is MaximumDistance. This controls how
far into the volume the distance function is computed from
the input geometry. Small values give significant increases
in performance. However, there can strange sampling effects
at the extreme range of the MaximumDistance.
In order to properly execute and sample the input data, a
rectangular region in space must be defined (this is the
ivar ModelBounds). If not explicitly defined, the model
bounds will be computed. Note that to avoid boundary
effects, it is possible to adjust the model bounds (i.e.,
using the AdjustBounds and AdjustDistance ivars) to strictly
contain the sampled data.
This filter has one other unusual capability: it is possible
to append data in a sequence of operations to generate a
single output. This is useful when you have multiple
datasets and want to create a conglomeration of all the
data. However, the user must be careful to either specify
the ModelBounds or specify the first item such that its
bounds completely contain all other items. This is because
the rectangular region of the output can not be changed
after the 1st Append.
The ProcessMode ivar controls the method used within the
Append function (where the actual work is done regardless if
the Append function is explicitly called) to compute the
implicit model. If set to work in voxel mode, each voxel is
visited once. If set to cell mode, each cell is visited
once. Tests have shown once per voxel to be faster when
there are a lot of cells (at least a thousand?); relative
performance improvement increases with addition cells.
Primitives should not be stripped for best performance of
the voxel mode. Also, if explicitly using the Append feature
many times, the cell mode will probably be better because
each voxel will be visited each Append. Append the data
before input if possible when using the voxel mode. Do not
switch between voxel and cell mode between execution of
StartAppend and EndAppend.
Further performance improvement is now possible using the
PerVoxel process mode on multi-processor machines (the mode
is now multithreaded). Each thread processes a different
"slab" of the output. Also, if the input is vtkPolyData, it
is appropriately clipped for each thread; that is, each
thread only considers the input which could affect its slab
of the output.
This filter can now produce output of any type supported by
vtkImageData. However to support this change, additional
sqrts must be executed during the Append step. Previously,
the output was initialized to the squared CapValue in
StartAppend, the output was updated with squared distance
values during the Append, and then the sqrt of the distances
was computed in EndAppend. To support different scalar types
in the output (largely to reduce memory requirements as an
vtkImageShiftScale and/or vtkImageCast could have achieved
the same result), we can't "afford" to save squared value in
the output, because then we could only represent up to the
sqrt of the scalar max for an integer type in the output; 1
(instead of 255) for an unsigned char; 11 for a char
(instead of 127). Thus this change may result in a minor
performance degradation. Non-float output types can be
scaled to the CapValue by turning ScaleToMaximumDistance On.
To create an instance of class vtkImplicitModeller, simply
invoke its constructor as follows

    obj = vtkImplicitModeller



 Methods

The class vtkImplicitModeller has several methods that can
be used. They are listed below. Note that the documentation
is translated automatically from the VTK sources, and may
not be completely intelligible. When in doubt, consult the
VTK website. In the methods listed below, obj is an instance
of the vtkImplicitModeller class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImplicitModeller = obj.NewInstance ()
* vtkImplicitModeller = obj.SafeDownCast (vtkObject o)
* double = obj.ComputeModelBounds (vtkDataSet inputNULL) -
  Compute ModelBounds from input geometry. If input is not
  specified, the input of the filter will be used.
* int = obj. GetSampleDimensions () - Set/Get the i-j-
  k dimensions on which to sample distance function.
* obj.SetSampleDimensions (int i, int j, int k) - Set/Get
  the i-j-k dimensions on which to sample distance function.
* obj.SetSampleDimensions (int dim[3]) - Set/Get the i-j-
  k dimensions on which to sample distance function.
* obj.SetMaximumDistance (double ) - Set / get the distance
  away from surface of input geometry to sample. Smaller
  values make large increases in performance.
* double = obj.GetMaximumDistanceMinValue () - Set / get the
  distance away from surface of input geometry to sample.
  Smaller values make large increases in performance.
* double = obj.GetMaximumDistanceMaxValue () - Set / get the
  distance away from surface of input geometry to sample.
  Smaller values make large increases in performance.
* double = obj.GetMaximumDistance () - Set / get the
  distance away from surface of input geometry to sample.
  Smaller values make large increases in performance.
* obj.SetModelBounds (double , double , double , double ,
  double , double ) - Set / get the region in space in which
  to perform the sampling. If not specified, it will be
  computed automatically.
* obj.SetModelBounds (double a[6]) - Set / get the region in
  space in which to perform the sampling. If not specified,
  it will be computed automatically.
* double = obj. GetModelBounds () - Set / get the region in
  space in which to perform the sampling. If not specified,
  it will be computed automatically.
* obj.SetAdjustBounds (int ) - Control how the model bounds
  are computed. If the ivar AdjustBounds is set, then the
  bounds specified (or computed automatically) is modified
  by the fraction given by AdjustDistance. This means that
  the model bounds is expanded in each of the x-y-
  z directions.
* int = obj.GetAdjustBounds () - Control how the model
  bounds are computed. If the ivar AdjustBounds is set, then
  the bounds specified (or computed automatically) is
  modified by the fraction given by AdjustDistance. This
  means that the model bounds is expanded in each of the x-
  y-z directions.
* obj.AdjustBoundsOn () - Control how the model bounds are
  computed. If the ivar AdjustBounds is set, then the bounds
  specified (or computed automatically) is modified by the
  fraction given by AdjustDistance. This means that the
  model bounds is expanded in each of the x-y-z directions.
* obj.AdjustBoundsOff () - Control how the model bounds are
  computed. If the ivar AdjustBounds is set, then the bounds
  specified (or computed automatically) is modified by the
  fraction given by AdjustDistance. This means that the
  model bounds is expanded in each of the x-y-z directions.
* obj.SetAdjustDistance (double ) - Specify the amount to
  grow the model bounds (if the ivar AdjustBounds is set).
  The value is a fraction of the maximum length of the sides
  of the box specified by the model bounds.
* double = obj.GetAdjustDistanceMinValue () - Specify the
  amount to grow the model bounds (if the ivar AdjustBounds
  is set). The value is a fraction of the maximum length of
  the sides of the box specified by the model bounds.
* double = obj.GetAdjustDistanceMaxValue () - Specify the
  amount to grow the model bounds (if the ivar AdjustBounds
  is set). The value is a fraction of the maximum length of
  the sides of the box specified by the model bounds.
* double = obj.GetAdjustDistance () - Specify the amount to
  grow the model bounds (if the ivar AdjustBounds is set).
  The value is a fraction of the maximum length of the sides
  of the box specified by the model bounds.
* obj.SetCapping (int ) - The outer boundary of the
  structured point set can be assigned a particular value.
  This can be used to close or "cap" all surfaces.
* int = obj.GetCapping () - The outer boundary of the
  structured point set can be assigned a particular value.
  This can be used to close or "cap" all surfaces.
* obj.CappingOn () - The outer boundary of the structured
  point set can be assigned a particular value. This can be
  used to close or "cap" all surfaces.
* obj.CappingOff () - The outer boundary of the structured
  point set can be assigned a particular value. This can be
  used to close or "cap" all surfaces.
* obj.SetCapValue (double value) - Specify the capping value
  to use. The CapValue is also used as an initial distance
  value at each point in the dataset.
* double = obj.GetCapValue () - Specify the capping value to
  use. The CapValue is also used as an initial distance
  value at each point in the dataset.
* obj.SetScaleToMaximumDistance (int ) - If a non-floating
  output type is specified, the output distances can be
  scaled to use the entire positive scalar range of the
  output type specified (up to the CapValue which is equal
  to the max for the type unless modified by the user). For
  example, if ScaleToMaximumDistance is On and the
  OutputScalarType is UnsignedChar the distances saved in
  the output would be linearly scaled between 0 (for
  distances "very close" to the surface) and 255 (at the
  specifed maximum distance)... assuming the CapValue is not
  changed from 255.
* int = obj.GetScaleToMaximumDistance () - If a non-floating
  output type is specified, the output distances can be
  scaled to use the entire positive scalar range of the
  output type specified (up to the CapValue which is equal
  to the max for the type unless modified by the user). For
  example, if ScaleToMaximumDistance is On and the
  OutputScalarType is UnsignedChar the distances saved in
  the output would be linearly scaled between 0 (for
  distances "very close" to the surface) and 255 (at the
  specifed maximum distance)... assuming the CapValue is not
  changed from 255.
* obj.ScaleToMaximumDistanceOn () - If a non-floating output
  type is specified, the output distances can be scaled to
  use the entire positive scalar range of the output type
  specified (up to the CapValue which is equal to the max
  for the type unless modified by the user). For example, if
  ScaleToMaximumDistance is On and the OutputScalarType is
  UnsignedChar the distances saved in the output would be
  linearly scaled between 0 (for distances "very close" to
  the surface) and 255 (at the specifed maximum distance)...
  assuming the CapValue is not changed from 255.
* obj.ScaleToMaximumDistanceOff () - If a non-floating
  output type is specified, the output distances can be
  scaled to use the entire positive scalar range of the
  output type specified (up to the CapValue which is equal
  to the max for the type unless modified by the user). For
  example, if ScaleToMaximumDistance is On and the
  OutputScalarType is UnsignedChar the distances saved in
  the output would be linearly scaled between 0 (for
  distances "very close" to the surface) and 255 (at the
  specifed maximum distance)... assuming the CapValue is not
  changed from 255.
* obj.SetProcessMode (int ) - Specify whether to visit each
  cell once per append or each voxel once per append. Some
  tests have shown once per voxel to be faster when there
  are a lot of cells (at least a thousand?); relative
  performance improvement increases with addition cells.
  Primitives should not be stripped for best performance of
  the voxel mode.
* int = obj.GetProcessModeMinValue () - Specify whether to
  visit each cell once per append or each voxel once per
  append. Some tests have shown once per voxel to be faster
  when there are a lot of cells (at least a thousand?);
  relative performance improvement increases with addition
  cells. Primitives should not be stripped for best
  performance of the voxel mode.
* int = obj.GetProcessModeMaxValue () - Specify whether to
  visit each cell once per append or each voxel once per
  append. Some tests have shown once per voxel to be faster
  when there are a lot of cells (at least a thousand?);
  relative performance improvement increases with addition
  cells. Primitives should not be stripped for best
  performance of the voxel mode.
* int = obj.GetProcessMode () - Specify whether to visit
  each cell once per append or each voxel once per append.
  Some tests have shown once per voxel to be faster when
  there are a lot of cells (at least a thousand?); relative
  performance improvement increases with addition cells.
  Primitives should not be stripped for best performance of
  the voxel mode.
* obj.SetProcessModeToPerVoxel () - Specify whether to visit
  each cell once per append or each voxel once per append.
  Some tests have shown once per voxel to be faster when
  there are a lot of cells (at least a thousand?); relative
  performance improvement increases with addition cells.
  Primitives should not be stripped for best performance of
  the voxel mode.
* obj.SetProcessModeToPerCell () - Specify whether to visit
  each cell once per append or each voxel once per append.
  Some tests have shown once per voxel to be faster when
  there are a lot of cells (at least a thousand?); relative
  performance improvement increases with addition cells.
  Primitives should not be stripped for best performance of
  the voxel mode.
* string = obj.GetProcessModeAsString (void ) - Specify
  whether to visit each cell once per append or each voxel
  once per append. Some tests have shown once per voxel to
  be faster when there are a lot of cells (at least a
  thousand?); relative performance improvement increases
  with addition cells. Primitives should not be stripped for
  best performance of the voxel mode.
* obj.SetLocatorMaxLevel (int ) - Specify the level of the
  locator to use when using the per voxel process mode.
* int = obj.GetLocatorMaxLevel () - Specify the level of the
  locator to use when using the per voxel process mode.
* obj.SetNumberOfThreads (int ) - Set / Get the number of
  threads used during Per-Voxel processing mode
* int = obj.GetNumberOfThreadsMinValue () - Set / Get the
  number of threads used during Per-Voxel processing mode
* int = obj.GetNumberOfThreadsMaxValue () - Set / Get the
  number of threads used during Per-Voxel processing mode
* int = obj.GetNumberOfThreads () - Set / Get the number of
  threads used during Per-Voxel processing mode
* obj.SetOutputScalarType (int type) - Set the desired
  output scalar type.
* int = obj.GetOutputScalarType () - Set the desired output
  scalar type.
* obj.SetOutputScalarTypeToFloat () - Set the desired output
  scalar type.
* obj.SetOutputScalarTypeToDouble () - Set the desired
  output scalar type.
* obj.SetOutputScalarTypeToInt () - Set the desired output
  scalar type.
* obj.SetOutputScalarTypeToUnsignedInt () - Set the desired
  output scalar type.
* obj.SetOutputScalarTypeToLong () - Set the desired output
  scalar type.
* obj.SetOutputScalarTypeToUnsignedLong () - Set the desired
  output scalar type.
* obj.SetOutputScalarTypeToShort () - Set the desired output
  scalar type.
* obj.SetOutputScalarTypeToUnsignedShort () - Set the
  desired output scalar type.
* obj.SetOutputScalarTypeToUnsignedChar () - Set the desired
  output scalar type.
* obj.SetOutputScalarTypeToChar () - Set the desired output
  scalar type.
* obj.StartAppend () - Initialize the filter for appending
  data. You must invoke the StartAppend() method before
  doing successive Appends(). It's also a good idea to
  manually specify the model bounds; otherwise the input
  bounds for the data will be used.
* obj.Append (vtkDataSet input) - Append a data set to the
  existing output. To use this function, you'll have to
  invoke the StartAppend() method before doing successive
  appends. It's also a good idea to specify the model
  bounds; otherwise the input model bounds is used. When
  you've finished appending, use the EndAppend() method.
* obj.EndAppend () - Method completes the append process.


* FreeMat_Documentation
* Visualization_Toolkit_Hybrid_Classes
* Generated on Thu Jul 25 2013 17:18:33 for FreeMat by
  doxygen_ 1.8.1.1

