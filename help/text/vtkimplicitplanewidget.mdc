
 Usage

This 3D widget defines an infinite plane that can be
interactively placed in a scene. The widget is represented
by a plane with a normal vector; the plane is contained by a
bounding box, and where the plane intersects the bounding
box the edges are shown (possibly tubed). The normal can be
selected and moved to rotate the plane; the plane itself can
be selected and translated in various directions. As the
plane is moved, the implicit plane function and polygon
(representing the plane cut against the bounding box) is
updated.
To use this object, just invoke SetInteractor() with the
argument of the method a vtkRenderWindowInteractor. You may
also wish to invoke "PlaceWidget()" to initially position
the widget. If the "i" key (for "interactor") is pressed,
the vtkImplicitPlaneWidget will appear. (See superclass
documentation for information about changing this behavior.)
If you select the normal vector, the plane can be
arbitrarily rotated. The plane can be translated along the
normal by selecting the plane and moving it. The plane (the
plane origin) can also be arbitrary moved by selecting the
plane with the middle mouse button. The right mouse button
can be used to uniformly scale the bounding box (moving "up"
the box scales larger; moving "down" the box scales
smaller). Events that occur outside of the widget (i.e., no
part of the widget is picked) are propagated to any other
registered obsevers (such as the interaction style). Turn
off the widget by pressing the "i" key again (or invoke the
Off() method).
The vtkImplicitPlaneWidget has several methods that can be
used in conjunction with other VTK objects. The GetPolyData
() method can be used to get a polygonal representation (the
single polygon clipped by the bounding box). Typical usage
of the widget is to make use of the StartInteractionEvent,
InteractionEvent, and EndInteractionEvent events. The
InteractionEvent is called on mouse motion; the other two
events are called on button down and button up (either left
or right button). (Note: there is also a PlaceWidgetEvent
that is invoked when the widget is placed with PlaceWidget
().)
Some additional features of this class include the ability
to control the properties of the widget. You do this by
setting property values on the normal vector (selected and
unselected properties); the plane (selected and unselected
properties); the outline (selected and unselected
properties); and the edges. The edges may also be tubed or
not.
To create an instance of class vtkImplicitPlaneWidget,
simply invoke its constructor as follows

    obj = vtkImplicitPlaneWidget



 Methods

The class vtkImplicitPlaneWidget has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkImplicitPlaneWidget class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkImplicitPlaneWidget = obj.NewInstance ()
* vtkImplicitPlaneWidget = obj.SafeDownCast (vtkObject o)
* obj.SetEnabled (int ) - Methods that satisfy the
  superclass' API.
* obj.PlaceWidget (double bounds[6]) - Methods that satisfy
  the superclass' API.
* obj.PlaceWidget () - Methods that satisfy the superclass'
  API.
* obj.PlaceWidget (double xmin, double xmax, double ymin,
  double ymax, double zmin, double zmax) - Get the origin of
  the plane.
* obj.SetOrigin (double x, double y, double z) - Get the
  origin of the plane.
* obj.SetOrigin (double x[3]) - Get the origin of the plane.
* double = obj.GetOrigin () - Get the origin of the plane.
* obj.GetOrigin (double xyz[3]) - Get the origin of the
  plane.
* obj.SetNormal (double x, double y, double z) - Get the
  normal to the plane.
* obj.SetNormal (double x[3]) - Get the normal to the plane.
* double = obj.GetNormal () - Get the normal to the plane.
* obj.GetNormal (double xyz[3]) - Get the normal to the
  plane.
* obj.SetNormalToXAxis (int ) - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* int = obj.GetNormalToXAxis () - Force the plane widget to
  be aligned with one of the x-y-z axes. If one axis is set
  on, the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToXAxisOn () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToXAxisOff () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.SetNormalToYAxis (int ) - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* int = obj.GetNormalToYAxis () - Force the plane widget to
  be aligned with one of the x-y-z axes. If one axis is set
  on, the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToYAxisOn () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToYAxisOff () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.SetNormalToZAxis (int ) - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* int = obj.GetNormalToZAxis () - Force the plane widget to
  be aligned with one of the x-y-z axes. If one axis is set
  on, the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToZAxisOn () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.NormalToZAxisOff () - Force the plane widget to be
  aligned with one of the x-y-z axes. If one axis is set on,
  the other two will be set off. Remember that when the
  state changes, a ModifiedEvent is invoked. This can be
  used to snap the plane to the axes if it is orginally not
  aligned.
* obj.SetTubing (int ) - Turn on/off tubing of the wire
  outline of the plane. The tube thickens the line by
  wrapping with a vtkTubeFilter.
* int = obj.GetTubing () - Turn on/off tubing of the wire
  outline of the plane. The tube thickens the line by
  wrapping with a vtkTubeFilter.
* obj.TubingOn () - Turn on/off tubing of the wire outline
  of the plane. The tube thickens the line by wrapping with
  a vtkTubeFilter.
* obj.TubingOff () - Turn on/off tubing of the wire outline
  of the plane. The tube thickens the line by wrapping with
  a vtkTubeFilter.
* obj.SetDrawPlane (int plane) - Enable/disable the drawing
  of the plane. In some cases the plane interferes with the
  object that it is operating on (i.e., the plane interferes
  with the cut surface it produces producing z-buffer
  artifacts.)
* int = obj.GetDrawPlane () - Enable/disable the drawing of
  the plane. In some cases the plane interferes with the
  object that it is operating on (i.e., the plane interferes
  with the cut surface it produces producing z-buffer
  artifacts.)
* obj.DrawPlaneOn () - Enable/disable the drawing of the
  plane. In some cases the plane interferes with the object
  that it is operating on (i.e., the plane interferes with
  the cut surface it produces producing z-buffer artifacts.)
* obj.DrawPlaneOff () - Enable/disable the drawing of the
  plane. In some cases the plane interferes with the object
  that it is operating on (i.e., the plane interferes with
  the cut surface it produces producing z-buffer artifacts.)
* obj.SetOutlineTranslation (int ) - Turn on/off the ability
  to translate the bounding box by grabbing it with the left
  mouse button.
* int = obj.GetOutlineTranslation () - Turn on/off the
  ability to translate the bounding box by grabbing it with
  the left mouse button.
* obj.OutlineTranslationOn () - Turn on/off the ability to
  translate the bounding box by grabbing it with the left
  mouse button.
* obj.OutlineTranslationOff () - Turn on/off the ability to
  translate the bounding box by grabbing it with the left
  mouse button.
* obj.SetOutsideBounds (int ) - Turn on/off the ability to
  move the widget outside of the input's bound
* int = obj.GetOutsideBounds () - Turn on/off the ability to
  move the widget outside of the input's bound
* obj.OutsideBoundsOn () - Turn on/off the ability to move
  the widget outside of the input's bound
* obj.OutsideBoundsOff () - Turn on/off the ability to move
  the widget outside of the input's bound
* obj.SetScaleEnabled (int ) - Turn on/off the ability to
  scale with the mouse
* int = obj.GetScaleEnabled () - Turn on/off the ability to
  scale with the mouse
* obj.ScaleEnabledOn () - Turn on/off the ability to scale
  with the mouse
* obj.ScaleEnabledOff () - Turn on/off the ability to scale
  with the mouse
* obj.SetOriginTranslation (int ) - Turn on/off the ability
  to translate the origin (sphere) with the left mouse
  button.
* int = obj.GetOriginTranslation () - Turn on/off the
  ability to translate the origin (sphere) with the left
  mouse button.
* obj.OriginTranslationOn () - Turn on/off the ability to
  translate the origin (sphere) with the left mouse button.
* obj.OriginTranslationOff () - Turn on/off the ability to
  translate the origin (sphere) with the left mouse button.
* obj.SetDiagonalRatio (double ) - By default the arrow is
  30% of the diagonal length. DiagonalRatio control this
  ratio in the interval [0-2]
* double = obj.GetDiagonalRatioMinValue () - By default the
  arrow is 30% of the diagonal length. DiagonalRatio control
  this ratio in the interval [0-2]
* double = obj.GetDiagonalRatioMaxValue () - By default the
  arrow is 30% of the diagonal length. DiagonalRatio control
  this ratio in the interval [0-2]
* double = obj.GetDiagonalRatio () - By default the arrow is
  30% of the diagonal length. DiagonalRatio control this
  ratio in the interval [0-2]
* obj.GetPolyData (vtkPolyData pd) - Grab the polydata that
  defines the plane. The polydata contains a single polygon
  that is clipped by the bounding box.
* vtkPolyDataAlgorithm = obj.GetPolyDataAlgorithm () -
  Satisfies superclass API. This returns a pointer to the
  underlying PolyData (which represents the plane).
* obj.GetPlane (vtkPlane plane) - Get the implicit function
  for the plane. The user must provide the instance of the
  class vtkPlane. Note that vtkPlane is a subclass of
  vtkImplicitFunction, meaning that it can be used by a
  variety of filters to perform clipping, cutting, and
  selection of data.
* obj.UpdatePlacement () - Satisfies the superclass API.
  This will change the state of the widget to match changes
  that have been made to the underlying PolyDataSource
* obj.SizeHandles () - Control widget appearance
* vtkProperty = obj.GetNormalProperty () - Get the
  properties on the normal (line and cone).
* vtkProperty = obj.GetSelectedNormalProperty () - Get the
  properties on the normal (line and cone).
* vtkProperty = obj.GetPlaneProperty () - Get the plane
  properties. The properties of the plane when selected and
  unselected can be manipulated.
* vtkProperty = obj.GetSelectedPlaneProperty () - Get the
  plane properties. The properties of the plane when
  selected and unselected can be manipulated.
* vtkProperty = obj.GetOutlineProperty () - Get the property
  of the outline.
* vtkProperty = obj.GetSelectedOutlineProperty () - Get the
  property of the outline.
* vtkProperty = obj.GetEdgesProperty () - Get the property
  of the intersection edges. (This property also applies to
  the edges when tubed.)


* FreeMat_Documentation
* Visualization_Toolkit_Widget_Classes
* Generated on Thu Jul 25 2013 17:18:36 for FreeMat by
  doxygen_ 1.8.1.1

