
 Usage

vtkRendererSource is a source object that gets its input
from a renderer and converts it to structured points. This
can then be used in a visualization pipeline. You must
explicitly send a Modify() to this object to get it to
reload its data from the renderer. Consider using
vtkWindowToImageFilter instead of this class.
The data placed into the output is the renderer's image rgb
values. Optionally, you can also grab the image depth (e.g.,
z-buffer) values, and place then into the output (point)
field data.
To create an instance of class vtkRendererSource, simply
invoke its constructor as follows

    obj = vtkRendererSource



 Methods

The class vtkRendererSource has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkRendererSource class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkRendererSource = obj.NewInstance ()
* vtkRendererSource = obj.SafeDownCast (vtkObject o)
* long = obj.GetMTime () - Return the MTime also considering
  the Renderer.
* obj.SetInput (vtkRenderer ) - Indicates what renderer to
  get the pixel data from.
* vtkRenderer = obj.GetInput () - Returns which renderer is
  being used as the source for the pixel data.
* obj.SetWholeWindow (int ) - Use the entire RenderWindow as
  a data source or just the Renderer. The default is zero,
  just the Renderer.
* int = obj.GetWholeWindow () - Use the entire RenderWindow
  as a data source or just the Renderer. The default is
  zero, just the Renderer.
* obj.WholeWindowOn () - Use the entire RenderWindow as a
  data source or just the Renderer. The default is zero,
  just the Renderer.
* obj.WholeWindowOff () - Use the entire RenderWindow as a
  data source or just the Renderer. The default is zero,
  just the Renderer.
* obj.SetRenderFlag (int ) - If this flag is on, the
  Executing causes a render first.
* int = obj.GetRenderFlag () - If this flag is on, the
  Executing causes a render first.
* obj.RenderFlagOn () - If this flag is on, the Executing
  causes a render first.
* obj.RenderFlagOff () - If this flag is on, the Executing
  causes a render first.
* obj.SetDepthValues (int ) - A boolean value to control
  whether to grab z-buffer (i.e., depth values) along with
  the image data. The z-buffer data is placed into a field
  data attributes named "ZBuffer" .
* int = obj.GetDepthValues () - A boolean value to control
  whether to grab z-buffer (i.e., depth values) along with
  the image data. The z-buffer data is placed into a field
  data attributes named "ZBuffer" .
* obj.DepthValuesOn () - A boolean value to control whether
  to grab z-buffer (i.e., depth values) along with the image
  data. The z-buffer data is placed into a field data
  attributes named "ZBuffer" .
* obj.DepthValuesOff () - A boolean value to control whether
  to grab z-buffer (i.e., depth values) along with the image
  data. The z-buffer data is placed into a field data
  attributes named "ZBuffer" .
* obj.SetDepthValuesInScalars (int ) - A boolean value to
  control whether to grab z-buffer (i.e., depth values)
  along with the image data. The z-buffer data is placed in
  the scalars as a fourth Z component (shift and scaled to
  map the full 0..255 range).
* int = obj.GetDepthValuesInScalars () - A boolean value to
  control whether to grab z-buffer (i.e., depth values)
  along with the image data. The z-buffer data is placed in
  the scalars as a fourth Z component (shift and scaled to
  map the full 0..255 range).
* obj.DepthValuesInScalarsOn () - A boolean value to control
  whether to grab z-buffer (i.e., depth values) along with
  the image data. The z-buffer data is placed in the scalars
  as a fourth Z component (shift and scaled to map the full
  0..255 range).
* obj.DepthValuesInScalarsOff () - A boolean value to
  control whether to grab z-buffer (i.e., depth values)
  along with the image data. The z-buffer data is placed in
  the scalars as a fourth Z component (shift and scaled to
  map the full 0..255 range).
* vtkImageData = obj.GetOutput () - Get the output data
  object for a port on this algorithm.


* FreeMat_Documentation
* Visualization_Toolkit_Rendering_Classes
* Generated on Thu Jul 25 2013 17:18:35 for FreeMat by
  doxygen_ 1.8.1.1

