
 Usage

vtkWarpTransform provides a generic interface for nonlinear
warp transformations.
To create an instance of class vtkWarpTransform, simply
invoke its constructor as follows

    obj = vtkWarpTransform



 Methods

The class vtkWarpTransform has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkWarpTransform class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkWarpTransform = obj.NewInstance ()
* vtkWarpTransform = obj.SafeDownCast (vtkObject o)
* obj.Inverse () - Invert the transformation. Warp
  transformations are usually inverted using an iterative
  technique such as Newton's method. The inverse transform
  is usually around five or six times as computationally
  expensive as the forward transform.
* int = obj.GetInverseFlag () - Get the inverse flag of the
  transformation. This flag is set to zero when the
  transformation is first created, and is flipped each time
  Inverse() is called.
* obj.SetInverseTolerance (double ) - Set the tolerance for
  inverse transformation. The default is 0.001.
* double = obj.GetInverseTolerance () - Set the tolerance
  for inverse transformation. The default is 0.001.
* obj.SetInverseIterations (int ) - Set the maximum number
  of iterations for the inverse transformation. The default
  is 500, but usually only 2 to 5 iterations are used. The
  inversion method is fairly robust, and it should converge
  for nearly all smooth transformations that do not fold
  back on themselves.
* int = obj.GetInverseIterations () - Set the maximum number
  of iterations for the inverse transformation. The default
  is 500, but usually only 2 to 5 iterations are used. The
  inversion method is fairly robust, and it should converge
  for nearly all smooth transformations that do not fold
  back on themselves.
* obj.InternalTransformPoint (float in[3], float out[3]) -
  This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.InternalTransformPoint (double in[3], double out[3]) -
  This will calculate the transformation without calling
  Update. Meant for use only within other VTK classes.
* obj.TemplateTransformPoint (float in[3], float out[3]) -
  Do not use these methods. They exists only as a work-
  around for internal templated functions (I really didn't
  want to make the Forward/Inverse methods public, is there
  a decent work around for this sort of thing?)
* obj.TemplateTransformPoint (double in[3], double out[3]) -
  Do not use these methods. They exists only as a work-
  around for internal templated functions (I really didn't
  want to make the Forward/Inverse methods public, is there
  a decent work around for this sort of thing?)
* obj.TemplateTransformInverse (float in[3], float out[3]) -
  Do not use these methods. They exists only as a work-
  around for internal templated functions (I really didn't
  want to make the Forward/Inverse methods public, is there
  a decent work around for this sort of thing?)
* obj.TemplateTransformInverse (double in[3], double out[3])
  - Do not use these methods. They exists only as a work-
  around for internal templated functions (I really didn't
  want to make the Forward/Inverse methods public, is there
  a decent work around for this sort of thing?)


* FreeMat_Documentation
* Visualization_Toolkit_Common_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

