
 Usage

vtkHexahedron is a concrete implementation of vtkCell to
represent a linear, 3D rectangular hexahedron (e.g., "brick"
topology). vtkHexahedron uses the standard isoparametric
shape functions for a linear hexahedron. The hexahedron is
defined by the eight points (0-7) where (0,1,2,3) is the
base of the hexahedron which, using the right hand rule,
forms a quadrilaterial whose normal points in the direction
of the opposite face (4,5,6,7).
To create an instance of class vtkHexahedron, simply invoke
its constructor as follows

    obj = vtkHexahedron



 Methods

The class vtkHexahedron has several methods that can be
used. They are listed below. Note that the documentation is
translated automatically from the VTK sources, and may not
be completely intelligible. When in doubt, consult the VTK
website. In the methods listed below, obj is an instance of
the vtkHexahedron class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkHexahedron = obj.NewInstance ()
* vtkHexahedron = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfEdges () - See the vtkCell API for
  descriptions of these methods.
* int = obj.GetNumberOfFaces () - See the vtkCell API for
  descriptions of these methods.
* vtkCell = obj.GetEdge (int edgeId) - See the vtkCell API
  for descriptions of these methods.
* vtkCell = obj.GetFace (int faceId) - See the vtkCell API
  for descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts) - See the vtkCell API for descriptions of
  these methods.
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd) - See the vtkCell API for descriptions
  of these methods.
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.InterpolateFunctions (double pcoords[3], double
  weights[8]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [24]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:30 for FreeMat by
  doxygen_ 1.8.1.1

