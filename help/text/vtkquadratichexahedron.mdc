
 Usage

vtkQuadraticHexahedron is a concrete implementation of
vtkNonLinearCell to represent a three-dimensional, 20-node
isoparametric parabolic hexahedron. The interpolation is the
standard finite element, quadratic isoparametric shape
function. The cell includes a mid-edge node. The ordering of
the twenty points defining the cell is point ids (0-7,8-19)
where point ids 0-7 are the eight corner vertices of the
cube; followed by twelve midedge nodes (8-19). Note that
these midedge nodes correspond lie on the edges defined by
(0,1), (1,2), (2,3), (3,0), (4,5), (5,6), (6,7), (7,4),
(0,4), (1,5), (2,6), (3,7).
To create an instance of class vtkQuadraticHexahedron,
simply invoke its constructor as follows

    obj = vtkQuadraticHexahedron



 Methods

The class vtkQuadraticHexahedron has several methods that
can be used. They are listed below. Note that the
documentation is translated automatically from the VTK
sources, and may not be completely intelligible. When in
doubt, consult the VTK website. In the methods listed below,
obj is an instance of the vtkQuadraticHexahedron class.

* string = obj.GetClassName ()
* int = obj.IsA (string name)
* vtkQuadraticHexahedron = obj.NewInstance ()
* vtkQuadraticHexahedron = obj.SafeDownCast (vtkObject o)
* int = obj.GetCellType () - Implement the vtkCell API. See
  the vtkCell API for descriptions of these methods.
* int = obj.GetCellDimension () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfEdges () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.GetNumberOfFaces () - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetEdge (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* vtkCell = obj.GetFace (int ) - Implement the vtkCell API.
  See the vtkCell API for descriptions of these methods.
* int = obj.CellBoundary (int subId, double pcoords[3],
  vtkIdList pts)
* obj.Contour (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray verts,
  vtkCellArray lines, vtkCellArray polys, vtkPointData inPd,
  vtkPointData outPd, vtkCellData inCd, vtkIdType cellId,
  vtkCellData outCd)
* int = obj.Triangulate (int index, vtkIdList ptIds,
  vtkPoints pts)
* obj.Derivatives (int subId, double pcoords[3], double
  values, int dim, double derivs)
* obj.Clip (double value, vtkDataArray cellScalars,
  vtkIncrementalPointLocator locator, vtkCellArray tetras,
  vtkPointData inPd, vtkPointData outPd, vtkCellData inCd,
  vtkIdType cellId, vtkCellData outCd, int insideOut) - Clip
  this quadratic hexahedron using scalar value provided.
  Like contouring, except that it cuts the hex to produce
  linear tetrahedron.
* obj.InterpolateFunctions (double pcoords[3], double
  weights[20]) - Compute the interpolation functions/
  derivatives (aka shape functions/derivatives)
* obj.InterpolateDerivs (double pcoords[3], double derivs
  [60]) - Return the ids of the vertices defining edge/face
  (edgeId/`faceId'). Ids are related to the cell, not to the
  dataset.


* FreeMat_Documentation
* Visualization_Toolkit_Filtering_Classes
* Generated on Thu Jul 25 2013 17:18:31 for FreeMat by
  doxygen_ 1.8.1.1

