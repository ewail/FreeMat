<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="io_csvwrite" kind="page">
    <compoundname>io_csvwrite</compoundname>
    <title>CSVWRITE Write Comma Separated Value (CSV) File</title>
    <detaileddescription>
<para>Section: <ref refid="sec_io_1sec_io" kindref="member">Input/Ouput Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>csvwrite</computeroutput> function writes a given matrix to a text file using comma separated value (CSV) notation. Note that you can create CSV files with arbitrary sized matrices, but that <computeroutput>csvread</computeroutput> has limits on line length. If you need to reliably read and write large matrices, use <computeroutput>rawwrite</computeroutput> and <computeroutput>rawread</computeroutput> respectively. The syntax for <computeroutput>csvwrite</computeroutput> is <verbatim>   csvwrite(&apos;filename&apos;,x)
</verbatim> where <computeroutput>x</computeroutput> is a numeric array. The contents of <computeroutput>x</computeroutput> are written to <computeroutput>filename</computeroutput> as comma-separated values. You can also specify a row and column offset to <computeroutput>csvwrite</computeroutput> to force <computeroutput>csvwrite</computeroutput> to write the matrix <computeroutput>x</computeroutput> starting at the specified location in the file. This syntax of the function is <verbatim>   csvwrite(&apos;filename&apos;,x,startrow,startcol)
</verbatim> where <computeroutput>startrow</computeroutput> and <computeroutput>startcol</computeroutput> are the offsets in zero-based indexing. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here we create a simple matrix, and write it to a CSV file</para><para><verbatim>--&gt; x = [1,2,3;5,6,7]

x = 
 1 2 3 
 5 6 7 

--&gt; csvwrite(&apos;csvwrite.csv&apos;,x)
--&gt; csvread(&apos;csvwrite.csv&apos;)

ans = 
 1 2 3 
 5 6 7 
</verbatim></para><para>Next, we do the same with an offset.</para><para><verbatim>--&gt; csvwrite(&apos;csvwrite.csv&apos;,x,1,2)
--&gt; csvread(&apos;csvwrite.csv&apos;)

ans = 
 0 0 0 0 
 0 1 2 3 
 0 5 6 7 
</verbatim></para><para>Note the extra zeros. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
