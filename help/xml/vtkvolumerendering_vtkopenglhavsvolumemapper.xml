<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkvolumerendering_vtkopenglhavsvolumemapper" kind="page">
    <compoundname>vtkvolumerendering_vtkopenglhavsvolumemapper</compoundname>
    <title>vtkOpenGLHAVSVolumeMapper</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkvolumerendering_1sec_vtkvolumerendering" kindref="member">Visualization Toolkit Volume Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkHAVSVolumeMapper is a class that renders polygonal data (represented as an unstructured grid) using the Hardware-Assisted Visibility Sorting (HAVS) algorithm. First the unique triangles are sorted in object space, then they are sorted in image space using a fixed size A-buffer implemented on the GPU called the k-buffer. The HAVS algorithm excels at rendering large datasets quickly. The trade-off is that the algorithm may produce some rendering artifacts due to an insufficient k size (currently 2 or 6 is supported) or read/write race conditions.</para><para>A built in level-of-detail (LOD) approach samples the geometry using one of two heuristics (field or area). If LOD is enabled, the amount of geometry that is sampled and rendered changes dynamically to stay within the target frame rate. The field sampling method generally works best for datasets with cell sizes that don&apos;t vary much in size. On the contrary, the area sampling approach gives better approximations when the volume has a lot of variation in cell size.</para><para>The HAVS algorithm uses several advanced features on graphics hardware. The k-buffer sorting network is implemented using framebuffer objects (FBOs) with multiple render targets (MRTs). Therefore, only cards that support these features can run the algorithm (at least an ATI 9500 or an NVidia NV40 (6600)).</para><para>.SECTION Notes</para><para>Several issues had to be addressed to get the HAVS algorithm working within the vtk framework. These additions forced the code to forsake speed for the sake of compliance and robustness.</para><para>The HAVS algorithm operates on the triangles that compose the mesh. Therefore, before rendering, the cells are decomposed into unique triangles and stored on the GPU for efficient rendering. The use of GPU data structures is only recommended if the entire geometry can fit in graphics memory. Otherwise this feature should be disabled.</para><para>Another new feature is the handling of mixed data types (eg., polygonal data with volume data). This is handled by reading the z-buffer from the current window and copying it into the framebuffer object for off-screen rendering. The depth test is then enabled so that the volume only appears over the opaque geometry. Finally, the results of the off-screen rendering are blended into the framebuffer as a transparent, view-aligned texture.</para><para>Instead of using a preintegrated 3D lookup table for storing the ray integral, this implementation uses partial pre-integration. This improves the performance of dynamic transfer function updates by avoiding a costly preprocess of the table.</para><para>A final change to the original algorithm is the handling of non-convexities in the mesh. Due to read/write hazards that may create undesired artifacts with non-convexities when using a inside/outside toggle in the fragment program, another approach was employed. To handle non-convexities, the fragment shader determines if a ray-gap is larger than the max cell size and kill the fragment if so. This approximation performs rather well in practice but may miss small non-convexities.</para><para>For more information on the HAVS algorithm see:</para><para>&quot;Hardware-Assisted Visibility Sorting for Unstructured Volume
 Rendering&quot; by S. P. Callahan, M. Ikits, J. L. D. Comba, and C. T. Silva, IEEE Transactions of Visualization and Computer Graphics; May/June 2005.</para><para>For more information on the Level-of-Detail algorithm, see:</para><para>&quot;Interactive Rendering of Large Unstructured Grids Using Dynamic
 Level-of-Detail&quot; by S. P. Callahan, J. L. D. Comba, P. Shirley, and C. T. Silva, Proceedings of IEEE Visualization &apos;05, Oct. 2005.</para><para>.SECTION Acknowledgments</para><para>This code was developed by Steven P. Callahan under the supervision of Prof. Claudio T. Silva. The code also contains contributions from Milan Ikits, Linh Ha, Huy T. Vo, Carlos E. Scheidegger, and Joao L. D. Comba.</para><para>The work was supported by grants, contracts, and gifts from the National Science Foundation, the Department of Energy, the Army Research Office, and IBM.</para><para>The port of HAVS to VTK and ParaView has been primarily supported by Sandia National Labs.</para><para>To create an instance of class vtkOpenGLHAVSVolumeMapper, simply invoke its constructor as follows <verbatim>  obj = vtkOpenGLHAVSVolumeMapper
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkOpenGLHAVSVolumeMapper has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkOpenGLHAVSVolumeMapper class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOpenGLHAVSVolumeMapper = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOpenGLHAVSVolumeMapper = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Render (vtkRenderer ren, vtkVolume vol)</computeroutput> - Render the volume  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGPUDataStructures (bool )</computeroutput> - Set/get whether or not the data structures should be stored on the GPU for better peformance.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.SupportedByHardware ()</computeroutput> - Check hardware support for the HAVS algorithm. Necessary features include off-screen rendering, 32-bit fp textures, multiple render targets, and framebuffer objects. Subclasses must override this method to indicate if supported by Hardware.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
