<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="typecast_cast" kind="page">
    <compoundname>typecast_cast</compoundname>
    <title>CAST Typecast Variable to Specified Type</title>
    <detaileddescription>
<para>Section: <ref refid="sec_typecast_1sec_typecast" kindref="member">Type Conversion Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>cast</computeroutput> function allows you to typecast a variable from one type to another. The syntax for its use is <verbatim>    y = cast(x,toclass)
</verbatim> where <computeroutput>toclass</computeroutput> is the name of the class to cast <computeroutput>x</computeroutput> to. Note that the typecast must make sense, and that <computeroutput>toclass</computeroutput> must be one of the builtin types. The current list of supported types is <itemizedlist>
<listitem>
<para><computeroutput>&apos;cell&apos;</computeroutput> for cell-arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;struct&apos;</computeroutput> for structure-arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;logical&apos;</computeroutput> for logical arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint8&apos;</computeroutput> for unsigned 8-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int8&apos;</computeroutput> for signed 8-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint16&apos;</computeroutput> for unsigned 16-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int16&apos;</computeroutput> for signed 16-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint32&apos;</computeroutput> for unsigned 32-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int32&apos;</computeroutput> for signed 32-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint64&apos;</computeroutput> for unsigned 64-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int64&apos;</computeroutput> for signed 64-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;float&apos;</computeroutput> for 32-bit floating point numbers  </para></listitem>
<listitem>
<para><computeroutput>&apos;single&apos;</computeroutput> is a synonym for <computeroutput>&apos;float&apos;</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>&apos;double&apos;</computeroutput> for 64-bit floating point numbers  </para></listitem>
<listitem>
<para><computeroutput>&apos;char&apos;</computeroutput> for string arrays  </para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is an example of a typecast from a float to an 8-bit integer</para><para><verbatim>--&gt; cast(pi,&apos;uint8&apos;)

ans = 
 3 
</verbatim></para><para>and here we cast an array of arbitrary integers to a logical array</para><para><verbatim>--&gt; cast([1 0 3 0],&apos;logical&apos;)

ans = 
 1 0 1 0 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
