<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimageimport" kind="page">
    <compoundname>vtkimaging_vtkimageimport</compoundname>
    <title>vtkImageImport</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageImport provides methods needed to import image data from a source independent of VTK, such as a simple C array or a third-party pipeline. Note that the VTK convention is for the image voxel index (0,0,0) to be the lower-left corner of the image, while most 2D image formats use the upper-left corner. You can use vtkImageFlip to correct the orientation after the image has been loaded into VTK. Note that is also possible to import the raw data from a Python string instead of from a C array. The array applies on scalar point data only, not on cell data.</para><para>To create an instance of class vtkImageImport, simply invoke its constructor as follows <verbatim>  obj = vtkImageImport
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageImport has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageImport class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageImport = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageImport = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarType (int )</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarTypeToDouble ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarTypeToFloat ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarTypeToInt ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarTypeToShort ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarTypeToUnsignedShort ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataScalarTypeToUnsignedChar ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataScalarType ()</computeroutput> - Set/Get the data type of pixels in the imported data. This is used as the scalar type of the Output. Default: Short.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetDataScalarTypeAsString ()</computeroutput> - Set/Get the number of scalar components, for RGB images this must be 3. Default: 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfScalarComponents (int )</computeroutput> - Set/Get the number of scalar components, for RGB images this must be 3. Default: 1.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfScalarComponents ()</computeroutput> - Set/Get the number of scalar components, for RGB images this must be 3. Default: 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataExtent (int , int , int , int , int , int )</computeroutput> - Get/Set the extent of the data buffer. The dimensions of your data must be equal to (extent[1]-extent[0]+1) * (extent[3]-extent[2]+1) * (extent[5]-DataExtent[4]+1). For example, for a 2D image use (0,width-1, 0,height-1, 0,0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataExtent (int a[6])</computeroutput> - Get/Set the extent of the data buffer. The dimensions of your data must be equal to (extent[1]-extent[0]+1) * (extent[3]-extent[2]+1) * (extent[5]-DataExtent[4]+1). For example, for a 2D image use (0,width-1, 0,height-1, 0,0).  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetDataExtent ()</computeroutput> - Get/Set the extent of the data buffer. The dimensions of your data must be equal to (extent[1]-extent[0]+1) * (extent[3]-extent[2]+1) * (extent[5]-DataExtent[4]+1). For example, for a 2D image use (0,width-1, 0,height-1, 0,0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataExtentToWholeExtent ()</computeroutput> - Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataSpacing (double , double , double )</computeroutput> - Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataSpacing (double a[3])</computeroutput> - Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetDataSpacing ()</computeroutput> - Set/Get the spacing (typically in mm) between image voxels. Default: (1.0, 1.0, 1.0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataOrigin (double , double , double )</computeroutput> - Set/Get the origin of the data, i.e. the coordinates (usually in mm) of voxel (0,0,0). Default: (0.0, 0.0, 0.0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataOrigin (double a[3])</computeroutput> - Set/Get the origin of the data, i.e. the coordinates (usually in mm) of voxel (0,0,0). Default: (0.0, 0.0, 0.0).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetDataOrigin ()</computeroutput> - Set/Get the origin of the data, i.e. the coordinates (usually in mm) of voxel (0,0,0). Default: (0.0, 0.0, 0.0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWholeExtent (int , int , int , int , int , int )</computeroutput> - Get/Set the whole extent of the image. This is the largest possible extent. Set the DataExtent to the extent of the image in the buffer pointed to by the ImportVoidPointer.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWholeExtent (int a[6])</computeroutput> - Get/Set the whole extent of the image. This is the largest possible extent. Set the DataExtent to the extent of the image in the buffer pointed to by the ImportVoidPointer.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetWholeExtent ()</computeroutput> - Get/Set the whole extent of the image. This is the largest possible extent. Set the DataExtent to the extent of the image in the buffer pointed to by the ImportVoidPointer.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarArrayName (string )</computeroutput> - Set/get the scalar array name for this data set. Initial value is &quot;scalars&quot;.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetScalarArrayName ()</computeroutput> - Set/get the scalar array name for this data set. Initial value is &quot;scalars&quot;.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.InvokePipelineModifiedCallbacks ()</computeroutput> - Invoke the appropriate callbacks  </para></listitem>
<listitem>
<para><computeroutput>obj.InvokeUpdateInformationCallbacks ()</computeroutput> - Invoke the appropriate callbacks  </para></listitem>
<listitem>
<para><computeroutput>obj.InvokeExecuteInformationCallbacks ()</computeroutput> - Invoke the appropriate callbacks  </para></listitem>
<listitem>
<para><computeroutput>obj.InvokeExecuteDataCallbacks ()</computeroutput> - Invoke the appropriate callbacks  </para></listitem>
<listitem>
<para><computeroutput>obj.LegacyCheckWholeExtent ()</computeroutput> - Invoke the appropriate callbacks  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
