<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtkxmlwriter" kind="page">
    <compoundname>vtkio_vtkxmlwriter</compoundname>
    <title>vtkXMLWriter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkXMLWriter provides methods implementing most of the functionality needed to write VTK XML file formats. Concrete subclasses provide actual writer implementations calling upon this functionality.</para><para>To create an instance of class vtkXMLWriter, simply invoke its constructor as follows <verbatim>  obj = vtkXMLWriter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkXMLWriter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkXMLWriter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXMLWriter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXMLWriter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetByteOrder (int )</computeroutput> - Get/Set the byte order of data written to the file. The default is the machine&apos;s hardware byte order.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetByteOrder ()</computeroutput> - Get/Set the byte order of data written to the file. The default is the machine&apos;s hardware byte order.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetByteOrderToBigEndian ()</computeroutput> - Get/Set the byte order of data written to the file. The default is the machine&apos;s hardware byte order.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetByteOrderToLittleEndian ()</computeroutput> - Get/Set the byte order of data written to the file. The default is the machine&apos;s hardware byte order.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIdType (int )</computeroutput> - Get/Set the size of the vtkIdType values stored in the file. The default is the real size of vtkIdType.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIdType ()</computeroutput> - Get/Set the size of the vtkIdType values stored in the file. The default is the real size of vtkIdType.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIdTypeToInt32 ()</computeroutput> - Get/Set the size of the vtkIdType values stored in the file. The default is the real size of vtkIdType.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIdTypeToInt64 ()</computeroutput> - Get/Set the size of the vtkIdType values stored in the file. The default is the real size of vtkIdType.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileName (string )</computeroutput> - Get/Set the name of the output file.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFileName ()</computeroutput> - Get/Set the name of the output file.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCompressor (vtkDataCompressor )</computeroutput> - Get/Set the compressor used to compress binary and appended data before writing to the file. Default is a vtkZLibDataCompressor.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataCompressor = obj.GetCompressor ()</computeroutput> - Get/Set the compressor used to compress binary and appended data before writing to the file. Default is a vtkZLibDataCompressor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCompressorType (int compressorType)</computeroutput> - Convenience functions to set the compressor to certain known types.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCompressorTypeToNone ()</computeroutput> - Convenience functions to set the compressor to certain known types.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCompressorTypeToZLib ()</computeroutput> - Get/Set the block size used in compression. When reading, this controls the granularity of how much extra information must be read when only part of the data are requested. The value should be a multiple of the largest scalar data type.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBlockSize (int blockSize)</computeroutput> - Get/Set the block size used in compression. When reading, this controls the granularity of how much extra information must be read when only part of the data are requested. The value should be a multiple of the largest scalar data type.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetBlockSize ()</computeroutput> - Get/Set the block size used in compression. When reading, this controls the granularity of how much extra information must be read when only part of the data are requested. The value should be a multiple of the largest scalar data type.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataMode (int )</computeroutput> - Get/Set the data mode used for the file&apos;s data. The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataMode ()</computeroutput> - Get/Set the data mode used for the file&apos;s data. The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataModeToAscii ()</computeroutput> - Get/Set the data mode used for the file&apos;s data. The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataModeToBinary ()</computeroutput> - Get/Set the data mode used for the file&apos;s data. The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataModeToAppended ()</computeroutput> - Get/Set the data mode used for the file&apos;s data. The options are vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and vtkXMLWriter::Appended.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEncodeAppendedData (int )</computeroutput> - Get/Set whether the appended data section is base64 encoded. If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only. If not encoded, the XML specification will be violated, but reading and writing will be fast. The default is to do the encoding.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetEncodeAppendedData ()</computeroutput> - Get/Set whether the appended data section is base64 encoded. If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only. If not encoded, the XML specification will be violated, but reading and writing will be fast. The default is to do the encoding.  </para></listitem>
<listitem>
<para><computeroutput>obj.EncodeAppendedDataOn ()</computeroutput> - Get/Set whether the appended data section is base64 encoded. If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only. If not encoded, the XML specification will be violated, but reading and writing will be fast. The default is to do the encoding.  </para></listitem>
<listitem>
<para><computeroutput>obj.EncodeAppendedDataOff ()</computeroutput> - Get/Set whether the appended data section is base64 encoded. If encoded, reading and writing will be slower, but the file will be fully valid XML and text-only. If not encoded, the XML specification will be violated, but reading and writing will be fast. The default is to do the encoding.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkDataObject )</computeroutput> - Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (int , vtkDataObject )</computeroutput> - Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetInput (int port)</computeroutput> - Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetInput ()</computeroutput> - Set/Get an input of this algorithm. You should not override these methods because they are not the only way to connect a pipeline  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetDefaultFileExtension ()</computeroutput> - Get the default file extension for files written by this writer.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Write ()</computeroutput> - Invoke the writer. Returns 1 for success, 0 for failure.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimeStep (int )</computeroutput> - Which TimeStep to write.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimeStep ()</computeroutput> - Which TimeStep to write.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetTimeStepRange ()</computeroutput> - Which TimeStepRange to write.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimeStepRange (int , int )</computeroutput> - Which TimeStepRange to write.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimeStepRange (int a[2])</computeroutput> - Which TimeStepRange to write.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfTimeSteps ()</computeroutput> - Set the number of time steps  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfTimeSteps (int )</computeroutput> - Set the number of time steps  </para></listitem>
<listitem>
<para><computeroutput>obj.Start ()</computeroutput> - API to interface an outside the VTK pipeline control  </para></listitem>
<listitem>
<para><computeroutput>obj.Stop ()</computeroutput> - API to interface an outside the VTK pipeline control  </para></listitem>
<listitem>
<para><computeroutput>obj.WriteNextTime (double time)</computeroutput> - API to interface an outside the VTK pipeline control  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
