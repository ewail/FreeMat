<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkopengllightingpainter" kind="page">
    <compoundname>vtkrendering_vtkopengllightingpainter</compoundname>
    <title>vtkOpenGLLightingPainter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This painter manages lighting. Ligting is disabled when rendering points/lines and no normals are present or rendering Polygons/TStrips and representation is points and no normals are present.</para><para>To create an instance of class vtkOpenGLLightingPainter, simply invoke its constructor as follows <verbatim>  obj = vtkOpenGLLightingPainter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkOpenGLLightingPainter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkOpenGLLightingPainter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOpenGLLightingPainter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOpenGLLightingPainter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetTimeToDraw ()</computeroutput> - This painter overrides GetTimeToDraw() to never pass the request to the delegate. This is done since this class may propagate a single render request multiple times to the delegate. In that case the time accumulation responsibility is borne by the painter causing the multiple rendering requests i.e. this painter itself.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
