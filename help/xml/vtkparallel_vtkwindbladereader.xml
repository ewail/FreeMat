<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkwindbladereader" kind="page">
    <compoundname>vtkparallel_vtkwindbladereader</compoundname>
    <title>vtkWindBladeReader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkWindBladeReader is a source object that reads WindBlade files which are block binary files with tags before and after each block giving the number of bytes within the block. The number of data variables dumped varies. The data is 3D rectilinear with irregular spacing on the Z dimension.</para><para>To create an instance of class vtkWindBladeReader, simply invoke its constructor as follows <verbatim>  obj = vtkWindBladeReader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkWindBladeReader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkWindBladeReader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWindBladeReader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWindBladeReader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilename (string )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilename ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWholeExtent (int , int , int , int , int , int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWholeExtent (int a[6])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetWholeExtent ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSubExtent (int , int , int , int , int , int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSubExtent (int a[6])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetSubExtent ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkStructuredGrid = obj.GetFieldOutput ()</computeroutput> - Get the reader&apos;s output  </para></listitem>
<listitem>
<para><computeroutput>vtkUnstructuredGrid = obj.GetBladeOutput ()</computeroutput> - Get the reader&apos;s output  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfPointArrays ()</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetPointArrayName (int index)</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPointArrayStatus (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPointArrayStatus (string name, int status)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.DisableAllPointArrays ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.EnableAllPointArrays ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
