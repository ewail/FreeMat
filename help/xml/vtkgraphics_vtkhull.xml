<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkhull" kind="page">
    <compoundname>vtkgraphics_vtkhull</compoundname>
    <title>vtkHull</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkHull is a filter which will produce an n-sided convex hull given a set of n planes. (The convex hull bounds the input polygonal data.) The hull is generated by squeezing the planes towards the input vtkPolyData, until the planes just touch the vtkPolyData. Then, the resulting planes are used to generate a polyhedron (i.e., hull) that is represented by triangles.</para><para>The n planes can be defined in a number of ways including 1) manually specifying each plane; 2) choosing the six face planes of the input&apos;s bounding box; 3) choosing the eight vertex planes of the input&apos;s bounding box; 4) choosing the twelve edge planes of the input&apos;s bounding box; and/or 5) using a recursively subdivided octahedron. Note that when specifying planes, the plane normals should point outside of the convex region.</para><para>The output of this filter can be used in combination with vtkLODActor to represent a levels-of-detail in the LOD hierarchy. Another use of this class is to manually specify the planes, and then generate the polyhedron from the planes (without squeezing the planes towards the input). The method GenerateHull() is used to do this.</para><para>To create an instance of class vtkHull, simply invoke its constructor as follows <verbatim>  obj = vtkHull
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkHull has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkHull class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHull = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHull = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllPlanes (void )</computeroutput> - Remove all planes from the current set of planes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddPlane (double A, double B, double C)</computeroutput> - Add a plane to the current set of planes. It will be added at the end of the list, and an index that can later be used to set this plane&apos;s normal will be returned. The values A, B, C are from the plane equation Ax + By + Cz + D = 0. This vector does not have to have unit length (but it must have a non-zero length!). If a value 0 &gt; i &gt;= -NumberOfPlanes is returned, then the plane is parallel with a previously inserted plane, and |-i-1| is the index of the plane that was previously inserted. If a value i &lt; -NumberOfPlanes is returned, then the plane normal is zero length.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddPlane (double plane[3])</computeroutput> - Add a plane to the current set of planes. It will be added at the end of the list, and an index that can later be used to set this plane&apos;s normal will be returned. The values A, B, C are from the plane equation Ax + By + Cz + D = 0. This vector does not have to have unit length (but it must have a non-zero length!). If a value 0 &gt; i &gt;= -NumberOfPlanes is returned, then the plane is parallel with a previously inserted plane, and |-i-1| is the index of the plane that was previously inserted. If a value i &lt; -NumberOfPlanes is returned, then the plane normal is zero length.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlane (int i, double A, double B, double C)</computeroutput> - Set the normal values for plane i. This is a plane that was already added to the current set of planes with AddPlane(), and is now being modified. The values A, B, C are from the plane equation Ax + By + Cz + D = 0. This vector does not have to have unit length. Note that D is set to zero, except in the case of the method taking a vtkPlanes* argument, where it is set to the D value defined there.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlane (int i, double plane[3])</computeroutput> - Set the normal values for plane i. This is a plane that was already added to the current set of planes with AddPlane(), and is now being modified. The values A, B, C are from the plane equation Ax + By + Cz + D = 0. This vector does not have to have unit length. Note that D is set to zero, except in the case of the method taking a vtkPlanes* argument, where it is set to the D value defined there.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddPlane (double A, double B, double C, double D)</computeroutput> - Variations of AddPlane()/SetPlane() that allow D to be set. These methods are used when GenerateHull() is used.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddPlane (double plane[3], double D)</computeroutput> - Variations of AddPlane()/SetPlane() that allow D to be set. These methods are used when GenerateHull() is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlane (int i, double A, double B, double C, double D)</computeroutput> - Variations of AddPlane()/SetPlane() that allow D to be set. These methods are used when GenerateHull() is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlane (int i, double plane[3], double D)</computeroutput> - Variations of AddPlane()/SetPlane() that allow D to be set. These methods are used when GenerateHull() is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlanes (vtkPlanes planes)</computeroutput> - Set all the planes at once using a vtkPlanes implicit function. This also sets the D value, so it can be used with GenerateHull().  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfPlanes ()</computeroutput> - Get the number of planes in the current set of planes.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddCubeVertexPlanes ()</computeroutput> - Add the 8 planes that represent the vertices of a cube - the combination of the three face planes connecting to a vertex - (1,1,1), (1,1,-1), (1,-1,1), (1,-1,1), (-1,1,1), (-1,1,-1), (-1,-1,1), (-1,-1-1).  </para></listitem>
<listitem>
<para><computeroutput>obj.AddCubeEdgePlanes ()</computeroutput> - Add the 12 planes that represent the edges of a cube - halfway between the two connecting face planes - (1,1,0), (-1,-1,0), (-1,1,0), (1,-1,0), (0,1,1), (0,-1,-1), (0,1,-1), (0,-1,1), (1,0,1), (-1,0,-1), (1,0,-1), (-1,0,1)  </para></listitem>
<listitem>
<para><computeroutput>obj.AddCubeFacePlanes ()</computeroutput> - Add the six planes that make up the faces of a cube - (1,0,0), (-1, 0, 0), (0,1,0), (0,-1,0), (0,0,1), (0,0,-1)  </para></listitem>
<listitem>
<para><computeroutput>obj.AddRecursiveSpherePlanes (int level)</computeroutput> - Add the planes that represent the normals of the vertices of a polygonal sphere formed by recursively subdividing the triangles in an octahedron. Each triangle is subdivided by connecting the midpoints of the edges thus forming 4 smaller triangles. The level indicates how many subdivisions to do with a level of 0 used to add the 6 planes from the original octahedron, level 1 will add 18 planes, and so on.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateHull (vtkPolyData pd, double bounds)</computeroutput> - A special method that is used to generate a polyhedron directly from a set of n planes. The planes that are supplied by the user are not squeezed towards the input data (in fact the user need not specify an input). To use this method, you must provide an instance of vtkPolyData into which the points and cells defining the polyhedron are placed. You must also provide a bounding box where you expect the resulting polyhedron to lie. This can be a very generous fit, it&apos;s only used to create the initial polygons that are eventually clipped.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateHull (vtkPolyData pd, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - A special method that is used to generate a polyhedron directly from a set of n planes. The planes that are supplied by the user are not squeezed towards the input data (in fact the user need not specify an input). To use this method, you must provide an instance of vtkPolyData into which the points and cells defining the polyhedron are placed. You must also provide a bounding box where you expect the resulting polyhedron to lie. This can be a very generous fit, it&apos;s only used to create the initial polygons that are eventually clipped.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
