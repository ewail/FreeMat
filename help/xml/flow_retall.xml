<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="flow_retall" kind="page">
    <compoundname>flow_retall</compoundname>
    <title>RETALL Return From All Keyboard Sessions</title>
    <detaileddescription>
<para>Section: <ref refid="sec_flow_1sec_flow" kindref="member">Flow Control</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>retall</computeroutput> statement is used to return to the base workspace from a nested <computeroutput>keyboard</computeroutput> session. It is equivalent to forcing execution to return to the main prompt, regardless of the level of nesting of <computeroutput>keyboard</computeroutput> sessions, or which functions are running. The syntax is simple <verbatim>   retall
</verbatim> The <computeroutput>retall</computeroutput> is a convenient way to stop debugging. In the process of debugging a complex program or set of functions, you may find yourself 5 function calls down into the program only to discover the problem. After fixing it, issueing a <computeroutput>retall</computeroutput> effectively forces FreeMat to exit your program and return to the interactive prompt. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here we demonstrate an extreme example of <computeroutput>retall</computeroutput>. We are debugging a recursive function <computeroutput>self</computeroutput> to calculate the sum of the first N integers. When the function is called, a <computeroutput>keyboard</computeroutput> session is initiated after the function has called itself N times. At this <computeroutput>keyboard</computeroutput> prompt, we issue another call to <computeroutput>self</computeroutput> and get another <computeroutput>keyboard</computeroutput> prompt, this time with a depth of 2. A <computeroutput>retall</computeroutput> statement returns us to the top level without executing the remainder of either the first or second call to <computeroutput>self</computeroutput>:</para><para><verbatim>     self.m
</verbatim></para><para><verbatim>function y = self(n)
  if (n&gt;1)
    y = n + self(n-1);
    printf(&apos;y is %d\n&apos;,y);
  else
    y = 1;
    printf(&apos;y is initialized to one\n&apos;);
    keyboard
  end
</verbatim></para><para><verbatim>--&gt; self(4)
y is initialized to one
[self,8]--&gt; self(6)
y is initialized to one
[self,8]--&gt; retall
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
