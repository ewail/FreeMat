<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtkgraphlayoutstrategy" kind="page">
    <compoundname>vtkinfovis_vtkgraphlayoutstrategy</compoundname>
    <title>vtkGraphLayoutStrategy</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>All graph layouts should subclass from this class. vtkGraphLayoutStrategy works as a plug-in to the vtkGraphLayout algorithm. The Layout() function should perform some reasonable &quot;chunk&quot; of the layout. This allows the user to be able to see the progress of the layout. Use IsLayoutComplete() to tell the user when there is no more layout to perform.</para><para>.SECTION Thanks Thanks to Brian Wylie from Sandia National Laboratories for adding incremental layout capabilities.</para><para>To create an instance of class vtkGraphLayoutStrategy, simply invoke its constructor as follows <verbatim>  obj = vtkGraphLayoutStrategy
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGraphLayoutStrategy has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGraphLayoutStrategy class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGraphLayoutStrategy = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGraphLayoutStrategy = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGraph (vtkGraph graph)</computeroutput> - Setting the graph for the layout strategy  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - This method allows the layout strategy to do initialization of data structures or whatever else it might want to do.  </para></listitem>
<listitem>
<para><computeroutput>obj.Layout ()</computeroutput> - This is the layout method where the graph that was set in SetGraph() is laid out. The method can either entirely layout the graph or iteratively lay out the graph. If you have an iterative layout please implement the IsLayoutComplete() method.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsLayoutComplete ()</computeroutput> - Whether to use edge weights in the layout or not.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWeightEdges (bool state)</computeroutput> - Whether to use edge weights in the layout or not.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetWeightEdges ()</computeroutput> - Whether to use edge weights in the layout or not.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEdgeWeightField (string field)</computeroutput> - Set/Get the field to use for the edge weights.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetEdgeWeightField ()</computeroutput> - Set/Get the field to use for the edge weights.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
