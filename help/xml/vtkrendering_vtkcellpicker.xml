<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkcellpicker" kind="page">
    <compoundname>vtkrendering_vtkcellpicker</compoundname>
    <title>vtkCellPicker</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCellPicker will shoot a ray into a 3D scene and return information about the first object that the ray hits. It works for all Prop3Ds. For vtkVolume objects, it shoots a ray into the volume and returns the point where the ray intersects an isosurface of a chosen opacity. For vtkImageActor objects, it intersects the ray with the displayed slice. For vtkActor objects, it intersects the actor&apos;s polygons. If the object&apos;s mapper has ClippingPlanes, then it takes the clipping into account, and will return the Id of the clipping plane that was intersected. For all prop types, it returns point and cell information, plus the normal of the surface that was intersected at the pick position. For volumes and images, it also returns (i,j,k) coordinates for the point and the cell that were picked.</para><para>To create an instance of class vtkCellPicker, simply invoke its constructor as follows <verbatim>  obj = vtkCellPicker
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCellPicker has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCellPicker class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCellPicker = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCellPicker = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Pick (double selectionX, double selectionY, double selectionZ, vtkRenderer renderer)</computeroutput> - Perform pick operation with selection point provided. Normally the first two values are the (x,y) pixel coordinates for the pick, and the third value is z=0. The return value will be non-zero if something was successfully picked.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddLocator (vtkAbstractCellLocator locator)</computeroutput> - Add a locator for one of the data sets that will be included in the scene. You must set up the locator with exactly the same data set that was input to the mapper of one or more of the actors in the scene. As well, you must either build the locator before doing the pick, or you must turn on LazyEvaluation in the locator to make it build itself on the first pick. Note that if you try to add the same locator to the picker twice, the second addition will be ignored.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveLocator (vtkAbstractCellLocator locator)</computeroutput> - Remove a locator that was previously added. If you try to remove a nonexistent locator, then nothing will happen and no errors will be raised.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllLocators ()</computeroutput> - Remove all locators associated with this picker.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetVolumeOpacityIsovalue (double )</computeroutput> - Set the opacity isovalue to use for defining volume surfaces. The pick will occur at the location along the pick ray where the opacity of the volume is equal to this isovalue. If you want to do the pick based on an actual data isovalue rather than the opacity, then pass the data value through the scalar opacity function before using this method.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetVolumeOpacityIsovalue ()</computeroutput> - Set the opacity isovalue to use for defining volume surfaces. The pick will occur at the location along the pick ray where the opacity of the volume is equal to this isovalue. If you want to do the pick based on an actual data isovalue rather than the opacity, then pass the data value through the scalar opacity function before using this method.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseVolumeGradientOpacity (int )</computeroutput> - Use the product of the scalar and gradient opacity functions when computing the opacity isovalue, instead of just using the scalar opacity. This parameter is only relevant to volume picking and is off by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseVolumeGradientOpacityOn ()</computeroutput> - Use the product of the scalar and gradient opacity functions when computing the opacity isovalue, instead of just using the scalar opacity. This parameter is only relevant to volume picking and is off by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseVolumeGradientOpacityOff ()</computeroutput> - Use the product of the scalar and gradient opacity functions when computing the opacity isovalue, instead of just using the scalar opacity. This parameter is only relevant to volume picking and is off by default.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseVolumeGradientOpacity ()</computeroutput> - Use the product of the scalar and gradient opacity functions when computing the opacity isovalue, instead of just using the scalar opacity. This parameter is only relevant to volume picking and is off by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPickClippingPlanes (int )</computeroutput> - The PickClippingPlanes setting controls how clipping planes are handled by the pick. If it is On, then the clipping planes become pickable objects, even though they are usually invisible. This means that if the pick ray intersects a clipping plane before it hits anything else, the pick will stop at that clipping plane. The GetProp3D() and GetMapper() methods will return the Prop3D and Mapper that the clipping plane belongs to. The GetClippingPlaneId() method will return the index of the clipping plane so that you can retrieve it from the mapper, or -1 if no clipping plane was picked. The picking of vtkImageActors is not influenced by this setting, since they have no clipping planes.  </para></listitem>
<listitem>
<para><computeroutput>obj.PickClippingPlanesOn ()</computeroutput> - The PickClippingPlanes setting controls how clipping planes are handled by the pick. If it is On, then the clipping planes become pickable objects, even though they are usually invisible. This means that if the pick ray intersects a clipping plane before it hits anything else, the pick will stop at that clipping plane. The GetProp3D() and GetMapper() methods will return the Prop3D and Mapper that the clipping plane belongs to. The GetClippingPlaneId() method will return the index of the clipping plane so that you can retrieve it from the mapper, or -1 if no clipping plane was picked. The picking of vtkImageActors is not influenced by this setting, since they have no clipping planes.  </para></listitem>
<listitem>
<para><computeroutput>obj.PickClippingPlanesOff ()</computeroutput> - The PickClippingPlanes setting controls how clipping planes are handled by the pick. If it is On, then the clipping planes become pickable objects, even though they are usually invisible. This means that if the pick ray intersects a clipping plane before it hits anything else, the pick will stop at that clipping plane. The GetProp3D() and GetMapper() methods will return the Prop3D and Mapper that the clipping plane belongs to. The GetClippingPlaneId() method will return the index of the clipping plane so that you can retrieve it from the mapper, or -1 if no clipping plane was picked. The picking of vtkImageActors is not influenced by this setting, since they have no clipping planes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPickClippingPlanes ()</computeroutput> - The PickClippingPlanes setting controls how clipping planes are handled by the pick. If it is On, then the clipping planes become pickable objects, even though they are usually invisible. This means that if the pick ray intersects a clipping plane before it hits anything else, the pick will stop at that clipping plane. The GetProp3D() and GetMapper() methods will return the Prop3D and Mapper that the clipping plane belongs to. The GetClippingPlaneId() method will return the index of the clipping plane so that you can retrieve it from the mapper, or -1 if no clipping plane was picked. The picking of vtkImageActors is not influenced by this setting, since they have no clipping planes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetClippingPlaneId ()</computeroutput> - Get the index of the clipping plane that was intersected during the pick. This will be set regardless of whether PickClippingPlanes is On, all that is required is that the pick intersected a clipping plane of the Prop3D that was picked. The result will be -1 if the Prop3D that was picked has no clipping planes, or if the ray didn&apos;t intersect the planes.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetPickNormal ()</computeroutput> - Return the normal of the picked surface at the PickPosition. If no surface was picked, then a vector pointing back at the camera is returned.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetMapperNormal ()</computeroutput> - Return the normal of the surface at the PickPosition in mapper coordinates. The result is undefined if no prop was picked.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetPointIJK ()</computeroutput> - Get the structured coordinates of the point at the PickPosition. Only valid for image actors and volumes with vtkImageData.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetCellIJK ()</computeroutput> - Get the structured coordinates of the cell at the PickPosition. Only valid for image actors and volumes with vtkImageData. Combine this with the PCoords to get the position within the cell.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetPointId ()</computeroutput> - Get the id of the picked point. If PointId = -1, nothing was picked. This point will be a member of any cell that is picked.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetCellId ()</computeroutput> - Get the id of the picked cell. If CellId = -1, nothing was picked.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSubId ()</computeroutput> - Get the subId of the picked cell. This is useful, for example, if the data is made of triangle strips. If SubId = -1, nothing was picked.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetPCoords ()</computeroutput> - Get the parametric coordinates of the picked cell. Only valid if a prop was picked. The PCoords can be used to compute the weights that are needed to interpolate data values within the cell.  </para></listitem>
<listitem>
<para><computeroutput>vtkTexture = obj.GetTexture ()</computeroutput> - Get the texture that was picked. This will always be set if the picked prop has a texture, and will always be null otherwise.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPickTextureData (int )</computeroutput> - If this is &quot;On&quot; and if the picked prop has a texture, then the data returned by GetDataSet() will be the texture&apos;s data instead of the mapper&apos;s data. The GetPointId(), GetCellId(), GetPCoords() etc. will all return information for use with the texture&apos;s data. If the picked prop does not have any texture, then GetDataSet() will return the mapper&apos;s data instead and GetPointId() etc. will return information related to the mapper&apos;s data. The default value of PickTextureData is &quot;Off&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.PickTextureDataOn ()</computeroutput> - If this is &quot;On&quot; and if the picked prop has a texture, then the data returned by GetDataSet() will be the texture&apos;s data instead of the mapper&apos;s data. The GetPointId(), GetCellId(), GetPCoords() etc. will all return information for use with the texture&apos;s data. If the picked prop does not have any texture, then GetDataSet() will return the mapper&apos;s data instead and GetPointId() etc. will return information related to the mapper&apos;s data. The default value of PickTextureData is &quot;Off&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.PickTextureDataOff ()</computeroutput> - If this is &quot;On&quot; and if the picked prop has a texture, then the data returned by GetDataSet() will be the texture&apos;s data instead of the mapper&apos;s data. The GetPointId(), GetCellId(), GetPCoords() etc. will all return information for use with the texture&apos;s data. If the picked prop does not have any texture, then GetDataSet() will return the mapper&apos;s data instead and GetPointId() etc. will return information related to the mapper&apos;s data. The default value of PickTextureData is &quot;Off&quot;.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPickTextureData ()</computeroutput> - If this is &quot;On&quot; and if the picked prop has a texture, then the data returned by GetDataSet() will be the texture&apos;s data instead of the mapper&apos;s data. The GetPointId(), GetCellId(), GetPCoords() etc. will all return information for use with the texture&apos;s data. If the picked prop does not have any texture, then GetDataSet() will return the mapper&apos;s data instead and GetPointId() etc. will return information related to the mapper&apos;s data. The default value of PickTextureData is &quot;Off&quot;.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
