<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="external_ctypedefine" kind="page">
    <compoundname>external_ctypedefine</compoundname>
    <title>CTYPEDEFINE Define C Type</title>
    <detaileddescription>
<para>Section: <ref refid="sec_external_1sec_external" kindref="member">FreeMat External Interface</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>ctypedefine</computeroutput> function allows you to define C types for use with FreeMat. Three variants of C types can be used. You can use structures, enumerations, and aliases (typedefs). All three are defined through a single function <computeroutput>ctypedefine</computeroutput>. The general syntax for its use is <verbatim>  ctypedefine(typeclass,typename,...)
</verbatim> where <computeroutput>typeclass</computeroutput> is the variant of the type (legal values are <computeroutput>&apos;struct&apos;</computeroutput>, <computeroutput>&apos;alias&apos;</computeroutput>, <computeroutput>&apos;enum&apos;</computeroutput>). The second argument is the name of the C type. The remaining arguments depend on what the class of the typedef is.</para><para>To define a C structure, use the <computeroutput>&apos;struct&apos;</computeroutput> type class. The usage in this case is: <verbatim>  ctypedefine(&apos;struct&apos;,typename,field1,type1,field2,type2,...)
</verbatim> The argument <computeroutput>typename</computeroutput> must be a valid identifier string. Each of of the <computeroutput>field</computeroutput> arguments is also a valid identifier string that describe in order, the elements of the C structure. The <computeroutput>type</computeroutput> arguments are <computeroutput>typespecs</computeroutput>. They can be of three types: <itemizedlist>
<listitem>
<para>Built in types, e.g. <computeroutput>&apos;uint8&apos;</computeroutput> or <computeroutput>&apos;double&apos;</computeroutput> to name a couple of examples.  </para></listitem>
<listitem>
<para>C types that have previously been defined with a call to <computeroutput>ctypedefine</computeroutput>, e.g. <computeroutput>&apos;mytype&apos;</computeroutput> where <computeroutput>&apos;mytype&apos;</computeroutput> has already been defined through a call to <computeroutput>ctypedefine</computeroutput>.  </para></listitem>
<listitem>
<para>Arrays of either built in types or previously defined C types with the length of the array coded as an integer in square brackets, for example: <computeroutput>&apos;uint8[10]&apos;</computeroutput> or <computeroutput>&apos;double[1000]&apos;</computeroutput>.  </para></listitem>
</itemizedlist>
</para><para>To define a C enumeration, use the <computeroutput>&apos;enum&apos;</computeroutput> type class. The usage in this case is: ctypedefine(&apos;enum&apos;,typename,name1,value1,name2,value2,...) @] The argument <computeroutput>typename</computeroutput> must be a valid identifier string. Each of the <computeroutput>name</computeroutput> arguments must also be valid identifier strings that describe the possible values that the enumeration can take an, and their corresponding integer values. Note that the names should be unique. The behavior of the various <computeroutput>cenum</computeroutput> functions is undefined if the names are not unique.</para><para>To define a C alias (or typedef), use the following form of <computeroutput>ctypedefine</computeroutput>: <verbatim>  ctypedefine(&apos;alias&apos;,typename,aliased_typename)
</verbatim> where <computeroutput>aliased_typename</computeroutput> is the type that is being aliased to. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
