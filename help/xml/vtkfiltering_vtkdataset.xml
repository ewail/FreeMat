<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkdataset" kind="page">
    <compoundname>vtkfiltering_vtkdataset</compoundname>
    <title>vtkDataSet</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkDataSet is an abstract class that specifies an interface for dataset objects. vtkDataSet also provides methods to provide informations about the data, such as center, bounding box, and representative length.</para><para>In vtk a dataset consists of a structure (geometry and topology) and attribute data. The structure is defined implicitly or explicitly as a collection of cells. The geometry of the structure is contained in point coordinates plus the cell interpolation functions. The topology of the dataset structure is defined by cell types and how the cells share their defining points.</para><para>Attribute data in vtk is either point data (data at points) or cell data (data at cells). Typically filters operate on point data, but some may operate on cell data, both cell and point data, either one, or none.</para><para>To create an instance of class vtkDataSet, simply invoke its constructor as follows <verbatim>  obj = vtkDataSet
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkDataSet has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkDataSet class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.CopyStructure (vtkDataSet ds)</computeroutput> - Copy the geometric and topological structure of an object. Note that the invoking object and the object pointed to by the parameter ds must be of the same type. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.CopyAttributes (vtkDataSet ds)</computeroutput> - Copy the attributes associated with the specified dataset to this instance of vtkDataSet. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfPoints ()</computeroutput> - Determine the number of points composing the dataset. THIS METHOD IS THREAD SAFE  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfCells ()</computeroutput> - Determine the number of cells composing the dataset. THIS METHOD IS THREAD SAFE  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPoint (vtkIdType ptId)</computeroutput> - Get point coordinates with ptId such that: 0 &lt;= ptId &lt; NumberOfPoints. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPoint (vtkIdType id, double x[3])</computeroutput> - Copy point coordinates into user provided array x[3] for specified point id. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetCell (vtkIdType cellId)</computeroutput> - Get cell with cellId such that: 0 &lt;= cellId &lt; NumberOfCells. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCell (vtkIdType cellId, vtkGenericCell cell)</computeroutput> - Get cell with cellId such that: 0 &lt;= cellId &lt; NumberOfCells. This is a thread-safe alternative to the previous GetCell() method. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCellBounds (vtkIdType cellId, double bounds[6])</computeroutput> - Get the bounds of the cell with cellId such that: 0 &lt;= cellId &lt; NumberOfCells. A subclass may be able to determine the bounds of cell without using an expensive GetCell() method. A default implementation is provided that actually uses a GetCell() call. This is to ensure the method is available to all datasets. Subclasses should override this method to provide an efficient implementation. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellType (vtkIdType cellId)</computeroutput> - Get type of cell with cellId such that: 0 &lt;= cellId &lt; NumberOfCells. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCellTypes (vtkCellTypes types)</computeroutput> - Get a list of types of cells in a dataset. The list consists of an array of types (not necessarily in any order), with a single entry per type. For example a dataset 5 triangles, 3 lines, and 100 hexahedra would result a list of three entries, corresponding to the types VTK_TRIANGLE, VTK_LINE, and VTK_HEXAHEDRON. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCellPoints (vtkIdType cellId, vtkIdList ptIds)</computeroutput> - Topological inquiry to get points defining cell. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPointCells (vtkIdType ptId, vtkIdList cellIds)</computeroutput> - Topological inquiry to get cells using point. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCellNeighbors (vtkIdType cellId, vtkIdList ptIds, vtkIdList cellIds)</computeroutput> - Topological inquiry to get all cells using list of points exclusive of cell specified (e.g., cellId). Note that the list consists of only cells that use ALL the points provided. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.FindPoint (double x, double y, double z)</computeroutput> - Locate the closest point to the global coordinate x. Return the point id. If point id &lt; 0; then no point found. (This may arise when point is outside of dataset.) THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.FindPoint (double x[3])</computeroutput> - Locate the closest point to the global coordinate x. Return the point id. If point id &lt; 0; then no point found. (This may arise when point is outside of dataset.) THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Datasets are composite objects and need to check each part for MTime THIS METHOD IS THREAD SAFE  </para></listitem>
<listitem>
<para><computeroutput>vtkCellData = obj.GetCellData ()</computeroutput> - Return a pointer to this dataset&apos;s cell data. THIS METHOD IS THREAD SAFE  </para></listitem>
<listitem>
<para><computeroutput>vtkPointData = obj.GetPointData ()</computeroutput> - Return a pointer to this dataset&apos;s point data. THIS METHOD IS THREAD SAFE  </para></listitem>
<listitem>
<para><computeroutput>obj.Squeeze ()</computeroutput> - Reclaim any extra memory used to store data. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeBounds ()</computeroutput> - Compute the data bounding box from data points. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBounds ()</computeroutput> - Return a pointer to the geometry bounding box in the form (xmin,xmax, ymin,ymax, zmin,zmax). THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetBounds (double bounds[6])</computeroutput> - Return a pointer to the geometry bounding box in the form (xmin,xmax, ymin,ymax, zmin,zmax). THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCenter ()</computeroutput> - Get the center of the bounding box. THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCenter (double center[3])</computeroutput> - Get the center of the bounding box. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetLength ()</computeroutput> - Return the length of the diagonal of the bounding box. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Restore data object to initial state, THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetScalarRange (double range[2])</computeroutput> - Convenience method to get the range of the scalar data (if there is any scalar data). Returns the (min/max) range of combined point and cell data. If there are no point or cell scalars the method will return (0,1). Note: Update needs to be called to create the scalars. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetScalarRange ()</computeroutput> - Convenience method to get the range of the scalar data (if there is any scalar data). THIS METHOD IS NOT THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaxCellSize ()</computeroutput> - Convenience method returns largest cell size in dataset. This is generally used to allocate memory for supporting data structures. THIS METHOD IS THREAD SAFE  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetActualMemorySize ()</computeroutput> - Return the actual size of the data in kilobytes. This number is valid only after the pipeline has updated. The memory size returned is guaranteed to be greater than or equal to the memory required to represent the data (e.g., extra space in arrays, etc. are not included in the return value). THIS METHOD IS THREAD SAFE.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataObjectType ()</computeroutput> - Shallow and Deep copy.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkDataObject src)</computeroutput> - Shallow and Deep copy.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkDataObject src)</computeroutput> - Shallow and Deep copy.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CheckAttributes ()</computeroutput> - This method checks to see if the cell and point attributes match the geometry. Many filters will crash if the number of tupples in an array is less than the number of points/cells. This method returns 1 if there is a mismatch, and 0 if everything is ok. It prints an error if an array is too short, and a warning if an array is too long.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateGhostLevelArray ()</computeroutput> - Normally called by pipeline executives or algoritgms only. This method computes the ghost arrays for a given dataset.  </para></listitem>
<listitem>
<para><computeroutput>vtkFieldData = obj.GetAttributesAsFieldData (int type)</computeroutput> - Returns the attributes of the data object as a vtkFieldData. This returns non-null values in all the same cases as GetAttributes, in addition to the case of FIELD, which will return the field data for any vtkDataObject subclass.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfElements (int type)</computeroutput> - Get the number of elements for a specific attribute type (POINT, CELL, etc.).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
