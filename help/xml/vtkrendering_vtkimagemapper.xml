<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkimagemapper" kind="page">
    <compoundname>vtkrendering_vtkimagemapper</compoundname>
    <title>vtkImageMapper</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageMapper provides 2D image display support for vtk. It is a Mapper2D subclass that can be associated with an Actor2D and placed within a RenderWindow or ImageWindow.</para><para>To create an instance of class vtkImageMapper, simply invoke its constructor as follows <verbatim>  obj = vtkImageMapper
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageMapper has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageMapper class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageMapper = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageMapper = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Override Modifiedtime as we have added a lookuptable  </para></listitem>
<listitem>
<para><computeroutput>obj.SetColorWindow (double )</computeroutput> - Set/Get the window value for window/level  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetColorWindow ()</computeroutput> - Set/Get the window value for window/level  </para></listitem>
<listitem>
<para><computeroutput>obj.SetColorLevel (double )</computeroutput> - Set/Get the level value for window/level  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetColorLevel ()</computeroutput> - Set/Get the level value for window/level  </para></listitem>
<listitem>
<para><computeroutput>obj.SetZSlice (int )</computeroutput> - Set/Get the current slice number. The axis Z in ZSlice does not necessarily have any relation to the z axis of the data on disk. It is simply the axis orthogonal to the x,y, display plane. GetWholeZMax and Min are convenience methods for obtaining the number of slices that can be displayed. Again the number of slices is in reference to the display z axis, which is not necessarily the z axis on disk. (due to reformatting etc)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetZSlice ()</computeroutput> - Set/Get the current slice number. The axis Z in ZSlice does not necessarily have any relation to the z axis of the data on disk. It is simply the axis orthogonal to the x,y, display plane. GetWholeZMax and Min are convenience methods for obtaining the number of slices that can be displayed. Again the number of slices is in reference to the display z axis, which is not necessarily the z axis on disk. (due to reformatting etc)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetWholeZMin ()</computeroutput> - Set/Get the current slice number. The axis Z in ZSlice does not necessarily have any relation to the z axis of the data on disk. It is simply the axis orthogonal to the x,y, display plane. GetWholeZMax and Min are convenience methods for obtaining the number of slices that can be displayed. Again the number of slices is in reference to the display z axis, which is not necessarily the z axis on disk. (due to reformatting etc)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetWholeZMax ()</computeroutput> - Set/Get the current slice number. The axis Z in ZSlice does not necessarily have any relation to the z axis of the data on disk. It is simply the axis orthogonal to the x,y, display plane. GetWholeZMax and Min are convenience methods for obtaining the number of slices that can be displayed. Again the number of slices is in reference to the display z axis, which is not necessarily the z axis on disk. (due to reformatting etc)  </para></listitem>
<listitem>
<para><computeroutput>obj.RenderStart (vtkViewport viewport, vtkActor2D actor)</computeroutput> - Draw the image to the screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.RenderData (vtkViewport , vtkImageData , vtkActor2D )</computeroutput> - Function called by Render to actually draw the image to to the screen  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetColorShift ()</computeroutput> - Methods used internally for performing the Window/Level mapping.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetColorScale ()</computeroutput> - Methods used internally for performing the Window/Level mapping.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkImageData input)</computeroutput> - Set the Input of a filter.  </para></listitem>
<listitem>
<para><computeroutput>vtkImageData = obj.GetInput ()</computeroutput> - Set the Input of a filter.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRenderToRectangle (int )</computeroutput> - If RenderToRectangle is set (by default not), then the imagemapper will render the image into the rectangle supplied by the Actor2D&apos;s PositionCoordinate and Position2Coordinate  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRenderToRectangle ()</computeroutput> - If RenderToRectangle is set (by default not), then the imagemapper will render the image into the rectangle supplied by the Actor2D&apos;s PositionCoordinate and Position2Coordinate  </para></listitem>
<listitem>
<para><computeroutput>obj.RenderToRectangleOn ()</computeroutput> - If RenderToRectangle is set (by default not), then the imagemapper will render the image into the rectangle supplied by the Actor2D&apos;s PositionCoordinate and Position2Coordinate  </para></listitem>
<listitem>
<para><computeroutput>obj.RenderToRectangleOff ()</computeroutput> - If RenderToRectangle is set (by default not), then the imagemapper will render the image into the rectangle supplied by the Actor2D&apos;s PositionCoordinate and Position2Coordinate  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseCustomExtents (int )</computeroutput> - Usually, the entire image is displayed, if UseCustomExtents is set (by default not), then the region supplied in the CustomDisplayExtents is used in preference. Note that the Custom extents are x,y only and the zslice is still applied  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseCustomExtents ()</computeroutput> - Usually, the entire image is displayed, if UseCustomExtents is set (by default not), then the region supplied in the CustomDisplayExtents is used in preference. Note that the Custom extents are x,y only and the zslice is still applied  </para></listitem>
<listitem>
<para><computeroutput>obj.UseCustomExtentsOn ()</computeroutput> - Usually, the entire image is displayed, if UseCustomExtents is set (by default not), then the region supplied in the CustomDisplayExtents is used in preference. Note that the Custom extents are x,y only and the zslice is still applied  </para></listitem>
<listitem>
<para><computeroutput>obj.UseCustomExtentsOff ()</computeroutput> - Usually, the entire image is displayed, if UseCustomExtents is set (by default not), then the region supplied in the CustomDisplayExtents is used in preference. Note that the Custom extents are x,y only and the zslice is still applied  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCustomDisplayExtents (int [4])</computeroutput> - The image extents which should be displayed with UseCustomExtents Note that the Custom extents are x,y only and the zslice is still applied  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetCustomDisplayExtents ()</computeroutput> - The image extents which should be displayed with UseCustomExtents Note that the Custom extents are x,y only and the zslice is still applied  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
