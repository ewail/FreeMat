<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkclosedsurfacepointplacer" kind="page">
    <compoundname>vtkwidgets_vtkclosedsurfacepointplacer</compoundname>
    <title>vtkClosedSurfacePointPlacer</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This placer takes a set of boudning planes and constraints the validity within the supplied convex planes. It is used by the ParallelopPipedRepresentation to place constraints on the motion the handles within the parallelopiped.</para><para>To create an instance of class vtkClosedSurfacePointPlacer, simply invoke its constructor as follows <verbatim>  obj = vtkClosedSurfacePointPlacer
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkClosedSurfacePointPlacer has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkClosedSurfacePointPlacer class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>vtkClosedSurfacePointPlacer = obj.NewInstance ()</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>vtkClosedSurfacePointPlacer = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddBoundingPlane (vtkPlane plane)</computeroutput> - A collection of plane equations used to bound the position of the point. This is in addition to confining the point to a plane - these contraints are meant to, for example, keep a point within the extent of an image. Using a set of plane equations allows for more complex bounds (such as bounding a point to an oblique reliced image that has hexagonal shape) than a simple extent.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveBoundingPlane (vtkPlane plane)</computeroutput> - A collection of plane equations used to bound the position of the point. This is in addition to confining the point to a plane - these contraints are meant to, for example, keep a point within the extent of an image. Using a set of plane equations allows for more complex bounds (such as bounding a point to an oblique reliced image that has hexagonal shape) than a simple extent.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllBoundingPlanes ()</computeroutput> - A collection of plane equations used to bound the position of the point. This is in addition to confining the point to a plane - these contraints are meant to, for example, keep a point within the extent of an image. Using a set of plane equations allows for more complex bounds (such as bounding a point to an oblique reliced image that has hexagonal shape) than a simple extent.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBoundingPlanes (vtkPlaneCollection )</computeroutput> - A collection of plane equations used to bound the position of the point. This is in addition to confining the point to a plane - these contraints are meant to, for example, keep a point within the extent of an image. Using a set of plane equations allows for more complex bounds (such as bounding a point to an oblique reliced image that has hexagonal shape) than a simple extent.  </para></listitem>
<listitem>
<para><computeroutput>vtkPlaneCollection = obj.GetBoundingPlanes ()</computeroutput> - A collection of plane equations used to bound the position of the point. This is in addition to confining the point to a plane - these contraints are meant to, for example, keep a point within the extent of an image. Using a set of plane equations allows for more complex bounds (such as bounding a point to an oblique reliced image that has hexagonal shape) than a simple extent.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBoundingPlanes (vtkPlanes planes)</computeroutput> - A collection of plane equations used to bound the position of the point. This is in addition to confining the point to a plane - these contraints are meant to, for example, keep a point within the extent of an image. Using a set of plane equations allows for more complex bounds (such as bounding a point to an oblique reliced image that has hexagonal shape) than a simple extent.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ComputeWorldPosition (vtkRenderer ren, double displayPos[2], double worldPos[3], double worldOrient[9])</computeroutput> - Given a renderer and a display position, compute the world position and world orientation for this point. A plane is defined by a combination of the ProjectionNormal, ProjectionOrigin, and ObliquePlane ivars. The display position is projected onto this plane to determine a world position, and the orientation is set to the normal of the plane. If the point cannot project onto the plane or if it falls outside the bounds imposed by the BoundingPlanes, then 0 is returned, otherwise 1 is returned to indicate a valid return position and orientation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ComputeWorldPosition (vtkRenderer ren, double displayPos[2], double refWorldPos[2], double worldPos[3], double worldOrient[9])</computeroutput> - Given a renderer, a display position and a reference position, &quot;worldPos&quot; is calculated as : Consider the line &quot;L&quot; that passes through the supplied &quot;displayPos&quot; and is parallel to the direction of projection of the camera. Clip this line segment with the parallelopiped, let&apos;s call it &quot;L_segment&quot;. The computed world position, &quot;worldPos&quot; will be the point on &quot;L_segment&quot; that is closest to refWorldPos. NOTE: Note that a set of bounding planes must be supplied. The Oblique plane, if supplied is ignored.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ValidateWorldPosition (double worldPos[3])</computeroutput> - Give a world position check if it is valid - does it lie on the plane and within the bounds? Returns 1 if it is valid, 0 otherwise.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ValidateWorldPosition (double worldPos[3], double worldOrient[9])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMinimumDistance (double )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMinimumDistanceMinValue ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMinimumDistanceMaxValue ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMinimumDistance ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
