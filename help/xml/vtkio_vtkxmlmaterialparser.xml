<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtkxmlmaterialparser" kind="page">
    <compoundname>vtkio_vtkxmlmaterialparser</compoundname>
    <title>vtkXMLMaterialParser</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkXMLMaterialParser parses a VTK Material file and provides that file&apos;s description of a number of vertex and fragment shaders along with data values specified for data members of vtkProperty. This material is to be applied to an actor through it&apos;s vtkProperty and augments VTK&apos;s concept of a vtkProperty to include explicitly include vertex and fragment shaders and parameter settings for those shaders. This effectively makes reflectance models and other shaders a material property. If no shaders are specified VTK should default to standard rendering.</para><para>.SECTION Design vtkXMLMaterialParser provides access to 3 distinct types of first-level vtkXMLDataElements that describe a VTK material. These elements are as follows:</para><para>vtkProperty - describe values for vtkProperty data members</para><para>vtkVertexShader - a vertex shader and enough information to install it into the hardware rendering pipeline including values for specific shader parameters and structures.</para><para>vtkFragmentShader - a fragment shader and enough information to install it into the hardware rendering pipeline including values for specific shader parameters and structures.</para><para>The design of the material file closely follows that of vtk&apos;s xml descriptions of it&apos;s data sets. This allows use of the very handy vtkXMLDataElement which provides easy access to an xml element&apos;s attribute values. Inlined data is currently not handled.</para><para>Ideally this class would be a Facade to a DOM parser, but VTK only provides access to expat, a SAX parser. Other vtk classes that parse xml files are tuned to read vtkDataSets and don&apos;t provide the functionality to handle generic xml data. As such they are of little use here.</para><para>This class may be extended for better data handling or may become a Facade to a DOM parser should on become part of the VTK code base. .SECTION Thanks Shader support in VTK includes key contributions by Gary Templet at Sandia National Labs.</para><para>To create an instance of class vtkXMLMaterialParser, simply invoke its constructor as follows <verbatim>  obj = vtkXMLMaterialParser
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkXMLMaterialParser has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkXMLMaterialParser class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXMLMaterialParser = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXMLMaterialParser = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXMLMaterial = obj.GetMaterial ()</computeroutput> - Set/Get the vtkXMLMaterial representation of the parsed material.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaterial (vtkXMLMaterial )</computeroutput> - Set/Get the vtkXMLMaterial representation of the parsed material.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Parse ()</computeroutput> - Overridden to initialize the internal structures before the parsing begins.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Parse (string inputString)</computeroutput> - Overridden to initialize the internal structures before the parsing begins.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Parse (string inputString, int length)</computeroutput> - Overridden to initialize the internal structures before the parsing begins.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.InitializeParser ()</computeroutput> - Overridden to clean up internal structures before the chunk-parsing begins.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
