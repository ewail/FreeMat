<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtksimple2dlayoutstrategy" kind="page">
    <compoundname>vtkinfovis_vtksimple2dlayoutstrategy</compoundname>
    <title>vtkSimple2DLayoutStrategy</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class is an implementation of the work presented in: Fruchterman &amp; Reingold &quot;Graph Drawing by Force-directed Placement&quot; Software-Practice and Experience 21(11) 1991). The class includes some optimizations but nothing too fancy.</para><para>.SECTION Thanks Thanks to Brian Wylie from Sandia National Laboratories for creating this class.</para><para>To create an instance of class vtkSimple2DLayoutStrategy, simply invoke its constructor as follows <verbatim>  obj = vtkSimple2DLayoutStrategy
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSimple2DLayoutStrategy has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSimple2DLayoutStrategy class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSimple2DLayoutStrategy = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSimple2DLayoutStrategy = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRandomSeed (int )</computeroutput> - Seed the random number generator used to jitter point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRandomSeedMinValue ()</computeroutput> - Seed the random number generator used to jitter point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRandomSeedMaxValue ()</computeroutput> - Seed the random number generator used to jitter point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRandomSeed ()</computeroutput> - Seed the random number generator used to jitter point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaxNumberOfIterations (int )</computeroutput> - Set/Get the maximum number of iterations to be used. The higher this number, the more iterations through the algorithm is possible, and thus, the more the graph gets modified. The default is &apos;100&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaxNumberOfIterationsMinValue ()</computeroutput> - Set/Get the maximum number of iterations to be used. The higher this number, the more iterations through the algorithm is possible, and thus, the more the graph gets modified. The default is &apos;100&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaxNumberOfIterationsMaxValue ()</computeroutput> - Set/Get the maximum number of iterations to be used. The higher this number, the more iterations through the algorithm is possible, and thus, the more the graph gets modified. The default is &apos;100&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaxNumberOfIterations ()</computeroutput> - Set/Get the maximum number of iterations to be used. The higher this number, the more iterations through the algorithm is possible, and thus, the more the graph gets modified. The default is &apos;100&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIterationsPerLayout (int )</computeroutput> - Set/Get the number of iterations per layout. The only use for this ivar is for the application to do visualizations of the layout before it&apos;s complete. The default is &apos;100&apos; to match the default &apos;MaxNumberOfIterations&apos; Note: Changing this parameter is just fine :)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIterationsPerLayoutMinValue ()</computeroutput> - Set/Get the number of iterations per layout. The only use for this ivar is for the application to do visualizations of the layout before it&apos;s complete. The default is &apos;100&apos; to match the default &apos;MaxNumberOfIterations&apos; Note: Changing this parameter is just fine :)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIterationsPerLayoutMaxValue ()</computeroutput> - Set/Get the number of iterations per layout. The only use for this ivar is for the application to do visualizations of the layout before it&apos;s complete. The default is &apos;100&apos; to match the default &apos;MaxNumberOfIterations&apos; Note: Changing this parameter is just fine :)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIterationsPerLayout ()</computeroutput> - Set/Get the number of iterations per layout. The only use for this ivar is for the application to do visualizations of the layout before it&apos;s complete. The default is &apos;100&apos; to match the default &apos;MaxNumberOfIterations&apos; Note: Changing this parameter is just fine :)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInitialTemperature (float )</computeroutput> - Set the initial temperature. The temperature default is &apos;5&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetInitialTemperatureMinValue ()</computeroutput> - Set the initial temperature. The temperature default is &apos;5&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetInitialTemperatureMaxValue ()</computeroutput> - Set the initial temperature. The temperature default is &apos;5&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetInitialTemperature ()</computeroutput> - Set the initial temperature. The temperature default is &apos;5&apos; for no particular reason Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCoolDownRate (double )</computeroutput> - Set/Get the Cool-down rate. The higher this number is, the longer it will take to &quot;cool-down&quot;, and thus, the more the graph will be modified. The default is &apos;10&apos; for no particular reason. Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCoolDownRateMinValue ()</computeroutput> - Set/Get the Cool-down rate. The higher this number is, the longer it will take to &quot;cool-down&quot;, and thus, the more the graph will be modified. The default is &apos;10&apos; for no particular reason. Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCoolDownRateMaxValue ()</computeroutput> - Set/Get the Cool-down rate. The higher this number is, the longer it will take to &quot;cool-down&quot;, and thus, the more the graph will be modified. The default is &apos;10&apos; for no particular reason. Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCoolDownRate ()</computeroutput> - Set/Get the Cool-down rate. The higher this number is, the longer it will take to &quot;cool-down&quot;, and thus, the more the graph will be modified. The default is &apos;10&apos; for no particular reason. Note: The strong recommendation is that you do not change this parameter. :)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetJitter (bool )</computeroutput> - Set Random jitter of the nodes at initialization to on or off. Note: It&apos;s strongly recommendation to have jitter ON even if you have initial coordinates in your graph. Default is ON  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetJitter ()</computeroutput> - Set Random jitter of the nodes at initialization to on or off. Note: It&apos;s strongly recommendation to have jitter ON even if you have initial coordinates in your graph. Default is ON  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRestDistance (float )</computeroutput> - Manually set the resting distance. Otherwise the distance is computed automatically.  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetRestDistance ()</computeroutput> - Manually set the resting distance. Otherwise the distance is computed automatically.  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - This strategy sets up some data structures for faster processing of each Layout() call  </para></listitem>
<listitem>
<para><computeroutput>obj.Layout ()</computeroutput> - This is the layout method where the graph that was set in SetGraph() is laid out. The method can either entirely layout the graph or iteratively lay out the graph. If you have an iterative layout please implement the IsLayoutComplete() method.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsLayoutComplete ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
