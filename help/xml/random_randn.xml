<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="random_randn" kind="page">
    <compoundname>random_randn</compoundname>
    <title>RANDN Gaussian (Normal) Random Number Generator</title>
    <detaileddescription>
<para>Section: <ref refid="sec_random_1sec_random" kindref="member">Random Number Generation</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Creates an array of pseudo-random numbers of the specified size. The numbers are normally distributed with zero mean and a unit standard deviation (i.e., <computeroutput>mu = 0, sigma = 1</computeroutput>). Two seperate syntaxes are possible. The first syntax specifies the array dimensions as a sequence of scalar dimensions: <verbatim>  y = randn(d1,d2,...,dn).
</verbatim> The resulting array has the given dimensions, and is filled with random numbers. The type of <computeroutput>y</computeroutput> is <computeroutput>double</computeroutput>, a 64-bit floating point array. To get arrays of other types, use the typecast functions.</para><para>The second syntax specifies the array dimensions as a vector, where each element in the vector specifies a dimension length: <verbatim>  y = randn([d1,d2,...,dn]).
</verbatim> This syntax is more convenient for calling <computeroutput>randn</computeroutput> using a variable for the argument.</para><para>Finally, <computeroutput>randn</computeroutput> supports two additional forms that allow you to manipulate the state of the random number generator. The first retrieves the state <verbatim>  y = randn(&apos;state&apos;)
</verbatim> which is a 625 length integer vector. The second form sets the state <verbatim>  randn(&apos;state&apos;,y)
</verbatim> or alternately, you can reset the random number generator with <verbatim>  randn(&apos;state&apos;,0)
</verbatim> </para></sect1>
<sect1 id="transforms_svd_1Function">
<title>Internals</title>
<para>Recall that the probability density function (PDF) of a normal random variable is <formula id="147">\[ f(x) = \frac{1}{\sqrt{2\pi \sigma^2}} e^{\frac{-(x-\mu)^2}{2\sigma^2}}. \]</formula> The Gaussian random numbers are generated from pairs of uniform random numbers using a transformation technique. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>The following example demonstrates an example of using the first form of the <computeroutput>randn</computeroutput> function.</para><para><verbatim>--&gt; randn(2,2,2)

ans = 

(:,:,1) = 
   -1.3838    0.9091 
   -1.1738    0.1705 

(:,:,2) = 
   -0.0336    0.4572 
    0.7566   -1.1720 
</verbatim></para><para>The second example demonstrates the second form of the <computeroutput>randn</computeroutput> function.</para><para><verbatim>--&gt; randn([2,2,2])

ans = 

(:,:,1) = 
    1.2183   -0.5558 
    0.1605    0.1819 

(:,:,2) = 
    0.5727   -0.5929 
   -0.3895   -0.2424 
</verbatim></para><para>In the next example, we create a large array of 10000 normally distributed pseudo-random numbers. We then shift the mean to 10, and the variance to 5. We then numerically calculate the mean and variance using <computeroutput>mean</computeroutput> and <computeroutput>var</computeroutput>, respectively.</para><para><verbatim>--&gt; x = 10+sqrt(5)*randn(1,10000);
--&gt; mean(x)

ans = 
   10.0370 

--&gt; var(x)

ans = 
    4.9402 
</verbatim></para><para>Now, we use the state manipulation functions of <computeroutput>randn</computeroutput> to exactly reproduce a random sequence. Note that unlike using <computeroutput>seed</computeroutput>, we can exactly control where the random number generator starts by saving the state.</para><para><verbatim>--&gt; randn(&apos;state&apos;,0)    % restores us to startup conditions
--&gt; a = randn(1,3)      % random sequence 1

a = 
   -0.0362   -0.1404    0.6934 

--&gt; b = randn(&apos;state&apos;); % capture the state vector
--&gt; c = randn(1,3)      % random sequence 2  

c = 
    0.5998    0.7086   -0.9394 

--&gt; randn(&apos;state&apos;,b);   % restart the random generator so...
--&gt; c = randn(1,3)      % we get random sequence 2 again

c = 
    0.5998    0.7086   -0.9394 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
