<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtksplinerepresentation" kind="page">
    <compoundname>vtkwidgets_vtksplinerepresentation</compoundname>
    <title>vtkSplineRepresentation</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkSplineRepresentation is a vtkWidgetRepresentation for a spline. This 3D widget defines a spline that can be interactively placed in a scene. The spline has handles, the number of which can be changed, plus it can be picked on the spline itself to translate or rotate it in the scene. This is based on vtkSplineWidget.</para><para>To create an instance of class vtkSplineRepresentation, simply invoke its constructor as follows <verbatim>  obj = vtkSplineRepresentation
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSplineRepresentation has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSplineRepresentation class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSplineRepresentation = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSplineRepresentation = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractionState (int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectToPlane (int )</computeroutput> - Force the spline widget to be projected onto one of the orthogonal planes. Remember that when the InteractionState changes, a ModifiedEvent is invoked. This can be used to snap the spline to the plane if it is orginally not aligned. The normal in SetProjectionNormal is 0,1,2 for YZ,XZ,XY planes respectively and 3 for arbitrary oblique planes when the widget is tied to a vtkPlaneSource.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProjectToPlane ()</computeroutput> - Force the spline widget to be projected onto one of the orthogonal planes. Remember that when the InteractionState changes, a ModifiedEvent is invoked. This can be used to snap the spline to the plane if it is orginally not aligned. The normal in SetProjectionNormal is 0,1,2 for YZ,XZ,XY planes respectively and 3 for arbitrary oblique planes when the widget is tied to a vtkPlaneSource.  </para></listitem>
<listitem>
<para><computeroutput>obj.ProjectToPlaneOn ()</computeroutput> - Force the spline widget to be projected onto one of the orthogonal planes. Remember that when the InteractionState changes, a ModifiedEvent is invoked. This can be used to snap the spline to the plane if it is orginally not aligned. The normal in SetProjectionNormal is 0,1,2 for YZ,XZ,XY planes respectively and 3 for arbitrary oblique planes when the widget is tied to a vtkPlaneSource.  </para></listitem>
<listitem>
<para><computeroutput>obj.ProjectToPlaneOff ()</computeroutput> - Force the spline widget to be projected onto one of the orthogonal planes. Remember that when the InteractionState changes, a ModifiedEvent is invoked. This can be used to snap the spline to the plane if it is orginally not aligned. The normal in SetProjectionNormal is 0,1,2 for YZ,XZ,XY planes respectively and 3 for arbitrary oblique planes when the widget is tied to a vtkPlaneSource.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlaneSource (vtkPlaneSource plane)</computeroutput> - Set up a reference to a vtkPlaneSource that could be from another widget object, e.g. a vtkPolyDataSourceWidget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionNormal (int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProjectionNormalMinValue ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProjectionNormalMaxValue ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProjectionNormal ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionNormalToXAxes ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionNormalToYAxes ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionNormalToZAxes ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionNormalToOblique ()</computeroutput> - Set the position of spline handles and points in terms of a plane&apos;s position. i.e., if ProjectionNormal is 0, all of the x-coordinate values of the points are set to position. Any value can be passed (and is ignored) to update the spline points when Projection normal is set to 3 for arbritrary plane orientations.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionPosition (double position)</computeroutput> - Set the position of spline handles and points in terms of a plane&apos;s position. i.e., if ProjectionNormal is 0, all of the x-coordinate values of the points are set to position. Any value can be passed (and is ignored) to update the spline points when Projection normal is set to 3 for arbritrary plane orientations.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetProjectionPosition ()</computeroutput> - Set the position of spline handles and points in terms of a plane&apos;s position. i.e., if ProjectionNormal is 0, all of the x-coordinate values of the points are set to position. Any value can be passed (and is ignored) to update the spline points when Projection normal is set to 3 for arbritrary plane orientations.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPolyData (vtkPolyData pd)</computeroutput> - Grab the polydata (including points) that defines the spline. The polydata consists of points and line segments numbering Resolution + 1 and Resoltuion, respectively. Points are guaranteed to be up-to-date when either the InteractionEvent or EndInteraction events are invoked. The user provides the vtkPolyData and the points and polyline are added to it.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetHandleProperty ()</computeroutput> - Set/Get the handle properties (the spheres are the handles). The properties of the handles when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedHandleProperty ()</computeroutput> - Set/Get the handle properties (the spheres are the handles). The properties of the handles when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetLineProperty ()</computeroutput> - Set/Get the line properties. The properties of the line when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedLineProperty ()</computeroutput> - Set/Get the line properties. The properties of the line when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfHandles (int npts)</computeroutput> - Set/Get the number of handles for this widget.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfHandles ()</computeroutput> - Set/Get the number of handles for this widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetResolution (int resolution)</computeroutput> - Set/Get the number of line segments representing the spline for this widget.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetResolution ()</computeroutput> - Set/Get the number of line segments representing the spline for this widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParametricSpline (vtkParametricSpline )</computeroutput> - Set the parametric spline object. Through vtkParametricSpline&apos;s API, the user can supply and configure one of currently two types of spline: vtkCardinalSpline, vtkKochanekSpline. The widget controls the open or closed configuration of the spline. WARNING: The widget does not enforce internal consistency so that all three are of the same type.  </para></listitem>
<listitem>
<para><computeroutput>vtkParametricSpline = obj.GetParametricSpline ()</computeroutput> - Set the parametric spline object. Through vtkParametricSpline&apos;s API, the user can supply and configure one of currently two types of spline: vtkCardinalSpline, vtkKochanekSpline. The widget controls the open or closed configuration of the spline. WARNING: The widget does not enforce internal consistency so that all three are of the same type.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandlePosition (int handle, double x, double y, double z)</computeroutput> - Set/Get the position of the spline handles. Call GetNumberOfHandles to determine the valid range of handle indices.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandlePosition (int handle, double xyz[3])</computeroutput> - Set/Get the position of the spline handles. Call GetNumberOfHandles to determine the valid range of handle indices.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetHandlePosition (int handle, double xyz[3])</computeroutput> - Set/Get the position of the spline handles. Call GetNumberOfHandles to determine the valid range of handle indices.  </para></listitem>
<listitem>
<para><computeroutput>vtkDoubleArray = obj.GetHandlePositions ()</computeroutput> - Set/Get the position of the spline handles. Call GetNumberOfHandles to determine the valid range of handle indices.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetClosed (int closed)</computeroutput> - Control whether the spline is open or closed. A closed spline forms a continuous loop: the first and last points are the same, and derivatives are continuous. A minimum of 3 handles are required to form a closed loop. This method enforces consistency with user supplied subclasses of vtkSpline.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetClosed ()</computeroutput> - Control whether the spline is open or closed. A closed spline forms a continuous loop: the first and last points are the same, and derivatives are continuous. A minimum of 3 handles are required to form a closed loop. This method enforces consistency with user supplied subclasses of vtkSpline.  </para></listitem>
<listitem>
<para><computeroutput>obj.ClosedOn ()</computeroutput> - Control whether the spline is open or closed. A closed spline forms a continuous loop: the first and last points are the same, and derivatives are continuous. A minimum of 3 handles are required to form a closed loop. This method enforces consistency with user supplied subclasses of vtkSpline.  </para></listitem>
<listitem>
<para><computeroutput>obj.ClosedOff ()</computeroutput> - Control whether the spline is open or closed. A closed spline forms a continuous loop: the first and last points are the same, and derivatives are continuous. A minimum of 3 handles are required to form a closed loop. This method enforces consistency with user supplied subclasses of vtkSpline.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsClosed ()</computeroutput> - Convenience method to determine whether the spline is closed in a geometric sense. The widget may be set &quot;closed&quot; but still be geometrically open (e.g., a straight line).  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSummedLength ()</computeroutput> - Get the approximate vs. the true arc length of the spline. Calculated as the summed lengths of the individual straight line segments. Use SetResolution to control the accuracy.  </para></listitem>
<listitem>
<para><computeroutput>obj.InitializeHandles (vtkPoints points)</computeroutput> - Convenience method to allocate and set the handles from a vtkPoints instance. If the first and last points are the same, the spline sets Closed to the on InteractionState and disregards the last point, otherwise Closed remains unchanged.  </para></listitem>
<listitem>
<para><computeroutput>obj.BuildRepresentation ()</computeroutput> - These are methods that satisfy vtkWidgetRepresentation&apos;s API. Note that a version of place widget is available where the center and handle position are specified.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ComputeInteractionState (int X, int Y, int modify)</computeroutput> - These are methods that satisfy vtkWidgetRepresentation&apos;s API. Note that a version of place widget is available where the center and handle position are specified.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartWidgetInteraction (double e[2])</computeroutput> - These are methods that satisfy vtkWidgetRepresentation&apos;s API. Note that a version of place widget is available where the center and handle position are specified.  </para></listitem>
<listitem>
<para><computeroutput>obj.WidgetInteraction (double e[2])</computeroutput> - These are methods that satisfy vtkWidgetRepresentation&apos;s API. Note that a version of place widget is available where the center and handle position are specified.  </para></listitem>
<listitem>
<para><computeroutput>obj.EndWidgetInteraction (double e[2])</computeroutput> - These are methods that satisfy vtkWidgetRepresentation&apos;s API. Note that a version of place widget is available where the center and handle position are specified.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - Methods supporting, and required by, the rendering process.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOpaqueGeometry (vtkViewport )</computeroutput> - Methods supporting, and required by, the rendering process.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport )</computeroutput> - Methods supporting, and required by, the rendering process.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOverlay (vtkViewport )</computeroutput> - Methods supporting, and required by, the rendering process.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasTranslucentPolygonalGeometry ()</computeroutput> - Methods supporting, and required by, the rendering process.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLineColor (double r, double g, double b)</computeroutput> - Convenience method to set the line color. Ideally one should use GetLineProperty()-&gt;SetColor().  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
