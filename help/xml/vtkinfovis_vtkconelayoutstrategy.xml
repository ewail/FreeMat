<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtkconelayoutstrategy" kind="page">
    <compoundname>vtkinfovis_vtkconelayoutstrategy</compoundname>
    <title>vtkConeLayoutStrategy</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkConeLayoutStrategy positions the nodes of a tree(forest) in 3D space based on the cone-tree approach first described by Robertson, Mackinlay and Card in Proc. CHI&apos;91. This implementation incorporates refinements to the layout developed by Carriere and Kazman, and by Auber.</para><para>The input graph must be a forest (i.e. a set of trees, or a single tree); in the case of a forest, the input will be converted to a single tree by introducing a new root node, and connecting each root in the input forest to the meta-root. The tree is then laid out, after which the meta-root is removed.</para><para>The cones are positioned so that children lie in planes parallel to the X-Y plane, with the axis of cones parallel to Z, and with Z coordinate increasing with distance of nodes from the root.</para><para>.SECTION Thanks Thanks to David Duke from the University of Leeds for providing this implementation.</para><para>To create an instance of class vtkConeLayoutStrategy, simply invoke its constructor as follows <verbatim>  obj = vtkConeLayoutStrategy
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkConeLayoutStrategy has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkConeLayoutStrategy class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkConeLayoutStrategy = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkConeLayoutStrategy = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCompactness (float )</computeroutput> - Determine the compactness, the ratio between the average width of a cone in the tree, and the height of the cone. The default setting is 0.75 which (empirically) seems reasonable, but this will need adapting depending on the data.  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetCompactness ()</computeroutput> - Determine the compactness, the ratio between the average width of a cone in the tree, and the height of the cone. The default setting is 0.75 which (empirically) seems reasonable, but this will need adapting depending on the data.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCompression (int )</computeroutput> - Determine if layout should be compressed, i.e. the layout puts children closer together, possibly allowing sub-trees to overlap. This is useful if the tree is actually the spanning tree of a graph. For &quot;real&quot; trees, non-compressed layout is best, and is the default.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCompression ()</computeroutput> - Determine if layout should be compressed, i.e. the layout puts children closer together, possibly allowing sub-trees to overlap. This is useful if the tree is actually the spanning tree of a graph. For &quot;real&quot; trees, non-compressed layout is best, and is the default.  </para></listitem>
<listitem>
<para><computeroutput>obj.CompressionOn ()</computeroutput> - Determine if layout should be compressed, i.e. the layout puts children closer together, possibly allowing sub-trees to overlap. This is useful if the tree is actually the spanning tree of a graph. For &quot;real&quot; trees, non-compressed layout is best, and is the default.  </para></listitem>
<listitem>
<para><computeroutput>obj.CompressionOff ()</computeroutput> - Determine if layout should be compressed, i.e. the layout puts children closer together, possibly allowing sub-trees to overlap. This is useful if the tree is actually the spanning tree of a graph. For &quot;real&quot; trees, non-compressed layout is best, and is the default.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSpacing (float )</computeroutput> - Set the spacing parameter that affects space between layers of the tree. If compression is on, Spacing is the actual distance between layers. If compression is off, actual distance also includes a factor of the compactness and maximum cone radius.  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetSpacing ()</computeroutput> - Set the spacing parameter that affects space between layers of the tree. If compression is on, Spacing is the actual distance between layers. If compression is off, actual distance also includes a factor of the compactness and maximum cone radius.  </para></listitem>
<listitem>
<para><computeroutput>obj.Layout ()</computeroutput> - Perform the layout.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
