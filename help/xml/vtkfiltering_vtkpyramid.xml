<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkpyramid" kind="page">
    <compoundname>vtkfiltering_vtkpyramid</compoundname>
    <title>vtkPyramid</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkPyramid is a concrete implementation of vtkCell to represent a 3D pyramid. A pyramid consists of a rectangular base with four triangular faces. vtkPyramid uses the standard isoparametric shape functions for a linear pyramid. The pyramid is defined by the five points (0-4) where (0,1,2,3) is the base of the pyramid which, using the right hand rule, forms a quadrilaterial whose normal points in the direction of the pyramid apex at vertex #4.</para><para>To create an instance of class vtkPyramid, simply invoke its constructor as follows <verbatim>  obj = vtkPyramid
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPyramid has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPyramid class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPyramid = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPyramid = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellType ()</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellDimension ()</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfEdges ()</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFaces ()</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetEdge (int edgeId)</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetFace (int faceId)</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</computeroutput> - See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetParametricCenter (double pcoords[3])</computeroutput> - Return the center of the pyramid in parametric coordinates.  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateFunctions (double pcoords[3], double weights[5])</computeroutput> - Compute the interpolation functions/derivatives (aka shape functions/derivatives)  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateDerivs (double pcoords[3], double derivs[15])</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
