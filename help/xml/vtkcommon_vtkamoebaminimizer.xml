<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkamoebaminimizer" kind="page">
    <compoundname>vtkcommon_vtkamoebaminimizer</compoundname>
    <title>vtkAmoebaMinimizer</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkAmoebaMinimizer will modify a set of parameters in order to find the minimum of a specified function. The method used is commonly known as the amoeba method, it constructs an n-dimensional simplex in parameter space (i.e. a tetrahedron if the number or parameters is 3) and moves the vertices around parameter space until a local minimum is found. The amoeba method is robust, reasonably efficient, but is not guaranteed to find the global minimum if several local minima exist.</para><para>To create an instance of class vtkAmoebaMinimizer, simply invoke its constructor as follows <verbatim>  obj = vtkAmoebaMinimizer
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkAmoebaMinimizer has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkAmoebaMinimizer class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAmoebaMinimizer = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAmoebaMinimizer = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParameterValue (string name, double value)</computeroutput> - Set the initial value for the specified parameter. Calling this function for any parameter will reset the Iterations and the FunctionEvaluations counts to zero. You must also use SetParameterScale() to specify the step size by which the parameter will be modified during the minimization. It is preferable to specify parameters by name, rather than by number.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParameterValue (int i, double value)</computeroutput> - Set the initial value for the specified parameter. Calling this function for any parameter will reset the Iterations and the FunctionEvaluations counts to zero. You must also use SetParameterScale() to specify the step size by which the parameter will be modified during the minimization. It is preferable to specify parameters by name, rather than by number.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParameterScale (string name, double scale)</computeroutput> - Set the scale to use when modifying a parameter, i.e. the initial amount by which the parameter will be modified during the search for the minimum. It is preferable to identify scalars by name rather than by number.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParameterScale (string name)</computeroutput> - Set the scale to use when modifying a parameter, i.e. the initial amount by which the parameter will be modified during the search for the minimum. It is preferable to identify scalars by name rather than by number.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParameterScale (int i, double scale)</computeroutput> - Set the scale to use when modifying a parameter, i.e. the initial amount by which the parameter will be modified during the search for the minimum. It is preferable to identify scalars by name rather than by number.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParameterScale (int i)</computeroutput> - Set the scale to use when modifying a parameter, i.e. the initial amount by which the parameter will be modified during the search for the minimum. It is preferable to identify scalars by name rather than by number.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParameterValue (string name)</computeroutput> - Get the value of a parameter at the current stage of the minimization. Call this method within the function that you are minimizing in order to get the current parameter values. It is preferable to specify parameters by name rather than by index.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParameterValue (int i)</computeroutput> - Get the value of a parameter at the current stage of the minimization. Call this method within the function that you are minimizing in order to get the current parameter values. It is preferable to specify parameters by name rather than by index.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetParameterName (int i)</computeroutput> - For completeness, an unchecked method to get the name for particular parameter (the result will be NULL if no name was set).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfParameters ()</computeroutput> - Get the number of parameters that have been set.  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Initialize the minimizer. This will reset the number of parameters to zero so that the minimizer can be reused.  </para></listitem>
<listitem>
<para><computeroutput>obj.Minimize ()</computeroutput> - Iterate until the minimum is found to within the specified tolerance, or until the MaxIterations has been reached.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Iterate ()</computeroutput> - Perform one iteration of minimization. Returns zero if the tolerance stopping criterion has been met.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFunctionValue (double )</computeroutput> - Get the function value resulting from the minimization.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFunctionValue ()</computeroutput> - Get the function value resulting from the minimization.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTolerance (double )</computeroutput> - Specify the fractional tolerance to aim for during the minimization.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetTolerance ()</computeroutput> - Specify the fractional tolerance to aim for during the minimization.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaxIterations (int )</computeroutput> - Specify the maximum number of iterations to try before giving up.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaxIterations ()</computeroutput> - Specify the maximum number of iterations to try before giving up.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIterations ()</computeroutput> - Return the number of interations that have been performed. This is not necessarily the same as the number of function evaluations.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFunctionEvaluations ()</computeroutput> - Return the number of times that the function has been evaluated.  </para></listitem>
<listitem>
<para><computeroutput>obj.EvaluateFunction ()</computeroutput> - Evaluate the function. This is usually called internally by the minimization code, but it is provided here as a public method.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
