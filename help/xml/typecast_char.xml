<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="typecast_char" kind="page">
    <compoundname>typecast_char</compoundname>
    <title>CHAR Convert to character array or string</title>
    <detaileddescription>
<para>Section: <ref refid="sec_typecast_1sec_typecast" kindref="member">Type Conversion Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>char</computeroutput> function can be used to convert an array into a string. It has several forms. The first form is <verbatim>   y = char(x)
</verbatim> where <computeroutput>x</computeroutput> is a numeric array containing character codes. FreeMat does not currently support Unicode, so the character codes must be in the range of <computeroutput>[0,255]</computeroutput>. The output is a string of the same size as <computeroutput>x</computeroutput>. A second form is <verbatim>   y = char(c)
</verbatim> where <computeroutput>c</computeroutput> is a cell array of strings, creates a matrix string where each row contains a string from the corresponding cell array. The third form is <verbatim>   y = char(s1, s2, s3, ...)
</verbatim> where <computeroutput>si</computeroutput> are a character arrays. The result is a matrix string where each row contains a string from the corresponding argument. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is an example of the first technique being used to generate a string containing some ASCII characters</para><para><verbatim>--&gt; char([32:64;65:97])

ans = 
 !&quot;#$%&amp;&apos;()*+,-./0123456789:;&lt;=&gt;?@
ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a
</verbatim></para><para>In the next example, we form a character array from a set of strings in a cell array. Note that the character array is padded with spaces to make the rows all have the same length.</para><para><verbatim>--&gt; char({&apos;hello&apos;,&apos;to&apos;,&apos;the&apos;,&apos;world&apos;})

ans = 
hello
to   
the  
world
</verbatim></para><para>In the last example, we pass the individual strings as explicit arguments to <computeroutput>char</computeroutput></para><para><verbatim>--&gt; char(&apos;hello&apos;,&apos;to&apos;,&apos;the&apos;,&apos;world&apos;)

ans = 
hello
to   
the  
world
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
