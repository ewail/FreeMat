<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkorientationmarkerwidget" kind="page">
    <compoundname>vtkwidgets_vtkorientationmarkerwidget</compoundname>
    <title>vtkOrientationMarkerWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class provides support for interactively manipulating the position, size, and apparent orientation of a prop that represents an orientation marker. This class works by adding its internal renderer to an external &quot;parent&quot; renderer on a different layer. The input orientation marker is rendered as an overlay on the parent renderer and, thus, appears superposed over all props in the parent&apos;s scene. The camera view of the orientation the marker is made to match that of the parent&apos;s by means of an observer mechanism, giving the illusion that the orientation of the marker reflects that of the prop(s) in the parent&apos;s scene.</para><para>The widget listens to left mouse button and mouse movement events. It will change the cursor shape based on its location. If the cursor is over the overlay renderer, it will change the cursor shape to a SIZEALL shape or to a resize corner shape (e.g., SIZENW) if the cursor is near a corner. If the left mouse button is pressed and held down while moving, the overlay renderer, and hence, the orientation marker, is resized or moved. I the case of a resize operation, releasing the left mouse button causes the widget to enforce its renderer to be square. The diagonally opposite corner to the one moved is repositioned such that all edges of the renderer have the same length: the minimum.</para><para>To use this object, there are two key steps: 1) invoke SetInteractor() with the argument of the method a vtkRenderWindowInteractor, and 2) invoke SetOrientationMarker with an instance of vtkProp (see caveats below). Specifically, vtkAxesActor and vtkAnnotatedCubeActor are two classes designed to work with this class. A composite orientation marker can be generated by adding instances of vtkAxesActor and vtkAnnotatedCubeActor to a vtkPropAssembly, which can then be set as the input orientation marker. The widget can be also be set up in a non-interactive fashion by setting Ineractive to Off and sizing/placing the overlay renderer in its parent renderer by calling the widget&apos;s SetViewport method.</para><para>To create an instance of class vtkOrientationMarkerWidget, simply invoke its constructor as follows <verbatim>  obj = vtkOrientationMarkerWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkOrientationMarkerWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkOrientationMarkerWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOrientationMarkerWidget = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOrientationMarkerWidget = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrientationMarker (vtkProp prop)</computeroutput> - Set/get the orientation marker to be displayed in this widget.  </para></listitem>
<listitem>
<para><computeroutput>vtkProp = obj.GetOrientationMarker ()</computeroutput> - Set/get the orientation marker to be displayed in this widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnabled (int )</computeroutput> - Enable/disable the widget. Default is 0 (disabled).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractive (int state)</computeroutput> - Set/get whether to allow this widget to be interactively moved/scaled. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInteractive ()</computeroutput> - Set/get whether to allow this widget to be interactively moved/scaled. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>obj.InteractiveOn ()</computeroutput> - Set/get whether to allow this widget to be interactively moved/scaled. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>obj.InteractiveOff ()</computeroutput> - Set/get whether to allow this widget to be interactively moved/scaled. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutlineColor (double r, double g, double b)</computeroutput> - Set/get the color of the outline of this widget. The outline is visible when (in interactive mode) the cursor is over this widget. Default is white (1,1,1).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetViewport (double minX, double minY, double maxX, double maxY)</computeroutput> - Set/get the viewport to position/size this widget. Default is bottom left corner (0,0,0.2,0.2).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTolerance (int )</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetToleranceMinValue ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetToleranceMaxValue ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTolerance ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
