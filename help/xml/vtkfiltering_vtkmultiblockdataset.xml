<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkmultiblockdataset" kind="page">
    <compoundname>vtkfiltering_vtkmultiblockdataset</compoundname>
    <title>vtkMultiBlockDataSet</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkMultiBlockDataSet is a vtkCompositeDataSet that stores a hierarchy of datasets. The dataset collection consists of multiple blocks. Each block can itself be a vtkMultiBlockDataSet, thus providing for a full tree structure. Sub-blocks are usually used to distribute blocks across processors. For example, a 1 block dataset can be distributed as following: <verbatim> proc 0:
 Block 0:
   * ds 0
   * (null)

 proc 1:
 Block 0:
   * (null)
   * ds 1</verbatim></para><para>To create an instance of class vtkMultiBlockDataSet, simply invoke its constructor as follows <verbatim>  obj = vtkMultiBlockDataSet
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkMultiBlockDataSet has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkMultiBlockDataSet class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMultiBlockDataSet = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMultiBlockDataSet = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataObjectType ()</computeroutput> - Set the number of blocks. This will cause allocation if the new number of blocks is greater than the current size. All new blocks are initialized to null.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfBlocks (int numBlocks)</computeroutput> - Set the number of blocks. This will cause allocation if the new number of blocks is greater than the current size. All new blocks are initialized to null.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfBlocks ()</computeroutput> - Returns the number of blocks.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetBlock (int blockno)</computeroutput> - Returns the block at the given index. It is recommended that one uses the iterators to iterate over composite datasets rather than using this API.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBlock (int blockno, vtkDataObject block)</computeroutput> - Sets the data object as the given block. The total number of blocks will be resized to fit the requested block no.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveBlock (int blockno)</computeroutput> - Remove the given block from the dataset.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasMetaData (int blockno)</computeroutput> - Returns the meta-data for the block. If none is already present, a new vtkInformation object will be allocated. Use HasMetaData to avoid allocating vtkInformation objects.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformation = obj.GetMetaData (int blockno)</computeroutput> - Unhiding superclass method.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformation = obj.GetMetaData (vtkCompositeDataIterator iter)</computeroutput> - Unhiding superclass method.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasMetaData (vtkCompositeDataIterator iter)</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
