<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkpolydatanormals" kind="page">
    <compoundname>vtkgraphics_vtkpolydatanormals</compoundname>
    <title>vtkPolyDataNormals</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkPolyDataNormals is a filter that computes point normals for a polygonal mesh. The filter can reorder polygons to insure consistent orientation across polygon neighbors. Sharp edges can be split and points duplicated with separate normals to give crisp (rendered) surface definition. It is also possible to globally flip the normal orientation.</para><para>The algorithm works by determining normals for each polygon and then averaging them at shared points. When sharp edges are present, the edges are split and new points generated to prevent blurry edges (due to Gouraud shading).</para><para>To create an instance of class vtkPolyDataNormals, simply invoke its constructor as follows <verbatim>  obj = vtkPolyDataNormals
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPolyDataNormals has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPolyDataNormals class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataNormals = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataNormals = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFeatureAngle (double )</computeroutput> - Specify the angle that defines a sharp edge. If the difference in angle across neighboring polygons is greater than this value, the shared edge is considered &quot;sharp&quot;.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFeatureAngleMinValue ()</computeroutput> - Specify the angle that defines a sharp edge. If the difference in angle across neighboring polygons is greater than this value, the shared edge is considered &quot;sharp&quot;.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFeatureAngleMaxValue ()</computeroutput> - Specify the angle that defines a sharp edge. If the difference in angle across neighboring polygons is greater than this value, the shared edge is considered &quot;sharp&quot;.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFeatureAngle ()</computeroutput> - Specify the angle that defines a sharp edge. If the difference in angle across neighboring polygons is greater than this value, the shared edge is considered &quot;sharp&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSplitting (int )</computeroutput> - Turn on/off the splitting of sharp edges.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSplitting ()</computeroutput> - Turn on/off the splitting of sharp edges.  </para></listitem>
<listitem>
<para><computeroutput>obj.SplittingOn ()</computeroutput> - Turn on/off the splitting of sharp edges.  </para></listitem>
<listitem>
<para><computeroutput>obj.SplittingOff ()</computeroutput> - Turn on/off the splitting of sharp edges.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetConsistency (int )</computeroutput> - Turn on/off the enforcement of consistent polygon ordering.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetConsistency ()</computeroutput> - Turn on/off the enforcement of consistent polygon ordering.  </para></listitem>
<listitem>
<para><computeroutput>obj.ConsistencyOn ()</computeroutput> - Turn on/off the enforcement of consistent polygon ordering.  </para></listitem>
<listitem>
<para><computeroutput>obj.ConsistencyOff ()</computeroutput> - Turn on/off the enforcement of consistent polygon ordering.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAutoOrientNormals (int )</computeroutput> - Turn on/off the automatic determination of correct normal orientation. NOTE: This assumes a completely closed surface (i.e. no boundary edges) and no non-manifold edges. If these constraints do not hold, all bets are off. This option adds some computational complexity, and is useful if you don&apos;t want to have to inspect the rendered image to determine whether to turn on the FlipNormals flag. However, this flag can work with the FlipNormals flag, and if both are set, all the normals in the output will point &quot;inward&quot;.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAutoOrientNormals ()</computeroutput> - Turn on/off the automatic determination of correct normal orientation. NOTE: This assumes a completely closed surface (i.e. no boundary edges) and no non-manifold edges. If these constraints do not hold, all bets are off. This option adds some computational complexity, and is useful if you don&apos;t want to have to inspect the rendered image to determine whether to turn on the FlipNormals flag. However, this flag can work with the FlipNormals flag, and if both are set, all the normals in the output will point &quot;inward&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.AutoOrientNormalsOn ()</computeroutput> - Turn on/off the automatic determination of correct normal orientation. NOTE: This assumes a completely closed surface (i.e. no boundary edges) and no non-manifold edges. If these constraints do not hold, all bets are off. This option adds some computational complexity, and is useful if you don&apos;t want to have to inspect the rendered image to determine whether to turn on the FlipNormals flag. However, this flag can work with the FlipNormals flag, and if both are set, all the normals in the output will point &quot;inward&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.AutoOrientNormalsOff ()</computeroutput> - Turn on/off the automatic determination of correct normal orientation. NOTE: This assumes a completely closed surface (i.e. no boundary edges) and no non-manifold edges. If these constraints do not hold, all bets are off. This option adds some computational complexity, and is useful if you don&apos;t want to have to inspect the rendered image to determine whether to turn on the FlipNormals flag. However, this flag can work with the FlipNormals flag, and if both are set, all the normals in the output will point &quot;inward&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputePointNormals (int )</computeroutput> - Turn on/off the computation of point normals.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputePointNormals ()</computeroutput> - Turn on/off the computation of point normals.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputePointNormalsOn ()</computeroutput> - Turn on/off the computation of point normals.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputePointNormalsOff ()</computeroutput> - Turn on/off the computation of point normals.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeCellNormals (int )</computeroutput> - Turn on/off the computation of cell normals.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeCellNormals ()</computeroutput> - Turn on/off the computation of cell normals.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeCellNormalsOn ()</computeroutput> - Turn on/off the computation of cell normals.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeCellNormalsOff ()</computeroutput> - Turn on/off the computation of cell normals.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFlipNormals (int )</computeroutput> - Turn on/off the global flipping of normal orientation. Flipping reverves the meaning of front and back for Frontface and Backface culling in vtkProperty. Flipping modifies both the normal direction and the order of a cell&apos;s points.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFlipNormals ()</computeroutput> - Turn on/off the global flipping of normal orientation. Flipping reverves the meaning of front and back for Frontface and Backface culling in vtkProperty. Flipping modifies both the normal direction and the order of a cell&apos;s points.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlipNormalsOn ()</computeroutput> - Turn on/off the global flipping of normal orientation. Flipping reverves the meaning of front and back for Frontface and Backface culling in vtkProperty. Flipping modifies both the normal direction and the order of a cell&apos;s points.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlipNormalsOff ()</computeroutput> - Turn on/off the global flipping of normal orientation. Flipping reverves the meaning of front and back for Frontface and Backface culling in vtkProperty. Flipping modifies both the normal direction and the order of a cell&apos;s points.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNonManifoldTraversal (int )</computeroutput> - Turn on/off traversal across non-manifold edges. This will prevent problems where the consistency of polygonal ordering is corrupted due to topological loops.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNonManifoldTraversal ()</computeroutput> - Turn on/off traversal across non-manifold edges. This will prevent problems where the consistency of polygonal ordering is corrupted due to topological loops.  </para></listitem>
<listitem>
<para><computeroutput>obj.NonManifoldTraversalOn ()</computeroutput> - Turn on/off traversal across non-manifold edges. This will prevent problems where the consistency of polygonal ordering is corrupted due to topological loops.  </para></listitem>
<listitem>
<para><computeroutput>obj.NonManifoldTraversalOff ()</computeroutput> - Turn on/off traversal across non-manifold edges. This will prevent problems where the consistency of polygonal ordering is corrupted due to topological loops.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
