<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkfielddata" kind="page">
    <compoundname>vtkfiltering_vtkfielddata</compoundname>
    <title>vtkFieldData</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkFieldData represents and manipulates fields of data. The model of a field is a m x n matrix of data values, where m is the number of tuples, and n is the number of components. (A tuple is a row of n components in the matrix.) The field is assumed to be composed of a set of one or more data arrays, where the data in the arrays are of different types (e.g., int, double, char, etc.), and there may be variable numbers of components in each array. Note that each data array is assumed to be &quot;m&quot; in length (i.e., number of tuples), which typically corresponds to the number of points or cells in a dataset. Also, each data array must have a character-string name. (This is used to manipulate data.)</para><para>There are two ways of manipulating and interfacing to fields. You can do it generically by manipulating components/tuples via a double-type data exchange, or you can do it by grabbing the arrays and manipulating them directly. The former is simpler but performs type conversion, which is bad if your data has non-castable types like (void) pointers, or you lose information as a result of the cast. The, more efficient method means managing each array in the field. Using this method you can create faster, more efficient algorithms that do not lose information.</para><para>To create an instance of class vtkFieldData, simply invoke its constructor as follows <verbatim>  obj = vtkFieldData
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkFieldData has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkFieldData class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFieldData = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFieldData = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Release all data but do not delete object. Also, clear the copy flags.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Allocate (vtkIdType sz, vtkIdType ext)</computeroutput> - Allocate data for each array. Note that ext is no longer used.  </para></listitem>
<listitem>
<para><computeroutput>obj.CopyStructure (vtkFieldData )</computeroutput> - Copy data array structure from a given field. The same arrays will exist with the same types, but will contain nothing in the copy.  </para></listitem>
<listitem>
<para><computeroutput>obj.AllocateArrays (int num)</computeroutput> - AllocateOfArrays actually sets the number of vtkAbstractArray pointers in the vtkFieldData object, not the number of used pointers (arrays). Adding more arrays will cause the object to dynamically adjust the number of pointers if it needs to extend. Although AllocateArrays can be used if the number of arrays which will be added is known, it can be omitted with a small computation cost.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfArrays ()</computeroutput> - Add an array to the array list. If an array with the same name already exists - then the added array will replace it.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddArray (vtkAbstractArray array)</computeroutput> - Add an array to the array list. If an array with the same name already exists - then the added array will replace it.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveArray (string name)</computeroutput> - Return the ith array in the field. A NULL is returned if the index i is out of range. A NULL is returned if the array at the given index is not a vtkDataArray.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataArray = obj.GetArray (int i)</computeroutput> - Return the ith array in the field. A NULL is returned if the index i is out of range. A NULL is returned if the array at the given index is not a vtkDataArray.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataArray = obj.GetArray (string arrayName)</computeroutput> - Returns the ith array in the field. Unlike GetArray(), this method returns a vtkAbstractArray. A NULL is returned only if the index i is out of range.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractArray = obj.GetAbstractArray (int i)</computeroutput> - Returns the ith array in the field. Unlike GetArray(), this method returns a vtkAbstractArray. A NULL is returned only if the index i is out of range.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractArray = obj.GetAbstractArray (string arrayName)</computeroutput> - Return 1 if an array with the given name could be found. 0 otherwise.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasArray (string name)</computeroutput> - Get the name of ith array. Note that this is equivalent to: GetAbstractArray(i)-&gt;GetName() if ith array pointer is not NULL  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetArrayName (int i)</computeroutput> - Pass entire arrays of input data through to output. Obey the &quot;copy&quot; flags.  </para></listitem>
<listitem>
<para><computeroutput>obj.PassData (vtkFieldData fd)</computeroutput> - Pass entire arrays of input data through to output. Obey the &quot;copy&quot; flags.  </para></listitem>
<listitem>
<para><computeroutput>obj.CopyFieldOn (string name)</computeroutput> - Turn on/off the copying of the field specified by name. During the copying/passing, the following rules are followed for each array:<orderedlist>
<listitem><para>If the copy flag for an array is set (on or off), it is applied This overrides rule 2.</para></listitem><listitem><para>If CopyAllOn is set, copy the array. If CopyAllOff is set, do not copy the array  </para></listitem></orderedlist>
</para></listitem>
<listitem>
<para><computeroutput>obj.CopyFieldOff (string name)</computeroutput> - Turn on copying of all data. During the copying/passing, the following rules are followed for each array:<orderedlist>
<listitem><para>If the copy flag for an array is set (on or off), it is applied This overrides rule 2.</para></listitem><listitem><para>If CopyAllOn is set, copy the array. If CopyAllOff is set, do not copy the array  </para></listitem></orderedlist>
</para></listitem>
<listitem>
<para><computeroutput>obj.CopyAllOn (int unused)</computeroutput> - Turn on copying of all data. During the copying/passing, the following rules are followed for each array:<orderedlist>
<listitem><para>If the copy flag for an array is set (on or off), it is applied This overrides rule 2.</para></listitem><listitem><para>If CopyAllOn is set, copy the array. If CopyAllOff is set, do not copy the array  </para></listitem></orderedlist>
</para></listitem>
<listitem>
<para><computeroutput>obj.CopyAllOff (int unused)</computeroutput> - Turn off copying of all data. During the copying/passing, the following rules are followed for each array:<orderedlist>
<listitem><para>If the copy flag for an array is set (on or off), it is applied This overrides rule 2.</para></listitem><listitem><para>If CopyAllOn is set, copy the array. If CopyAllOff is set, do not copy the array  </para></listitem></orderedlist>
</para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkFieldData da)</computeroutput> - Copy a field by creating new data arrays (i.e., duplicate storage).  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkFieldData da)</computeroutput> - Copy a field by reference counting the data arrays.  </para></listitem>
<listitem>
<para><computeroutput>obj.Squeeze ()</computeroutput> - Squeezes each data array in the field (Squeeze() reclaims unused memory.)  </para></listitem>
<listitem>
<para><computeroutput>obj.Reset ()</computeroutput> - Resets each data array in the field (Reset() does not release memory but it makes the arrays look like they are empty.)  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetActualMemorySize ()</computeroutput> - Return the memory in kilobytes consumed by this field data. Used to support streaming and reading/writing data. The value returned is guaranteed to be greater than or equal to the memory required to actually represent the data represented by this object.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Check object&apos;s components for modified times.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetField (vtkIdList ptId, vtkFieldData f)</computeroutput> - Get a field from a list of ids. Supplied field f should have same types and number of data arrays as this one (i.e., like CopyStructure() creates). This method should not be used if the instance is from a subclass of vtkFieldData (vtkPointData or vtkCellData). This is because in those cases, the attribute data is stored with the other fields and will cause the method to behave in an unexpected way.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfComponents ()</computeroutput> - Get the number of components in the field. This is determined by adding up the components in each non-NULL array. This method should not be used if the instance is from a subclass of vtkFieldData (vtkPointData or vtkCellData). This is because in those cases, the attribute data is stored with the other fields and will cause the method to behave in an unexpected way.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfTuples ()</computeroutput> - Get the number of tuples in the field. Note: some fields have arrays with different numbers of tuples; this method returns the number of tuples in the first array. Mixed-length arrays may have to be treated specially. This method should not be used if the instance is from a subclass of vtkFieldData (vtkPointData or vtkCellData). This is because in those cases, the attribute data is stored with the other fields and will cause the method to behave in an unexpected way.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfTuples (vtkIdType number)</computeroutput> - Set the number of tuples for each data array in the field. This method should not be used if the instance is from a subclass of vtkFieldData (vtkPointData or vtkCellData). This is because in those cases, the attribute data is stored with the other fields and will cause the method to behave in an unexpected way.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTuple (vtkIdType i, vtkIdType j, vtkFieldData source)</computeroutput> - Set the jth tuple in source field data at the ith location. Set operations mean that no range checking is performed, so they&apos;re faster.  </para></listitem>
<listitem>
<para><computeroutput>obj.InsertTuple (vtkIdType i, vtkIdType j, vtkFieldData source)</computeroutput> - Insert the jth tuple in source field data at the ith location. Range checking is performed and memory allocates as necessary.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.InsertNextTuple (vtkIdType j, vtkFieldData source)</computeroutput> - Insert the jth tuple in source field data at the end of the tuple matrix. Range checking is performed and memory is allocated as necessary.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetTuple (vtkIdType i, double tuple)</computeroutput> - Copy the ith tuple value into a user provided tuple array. Make sure that you&apos;ve allocated enough space for the copy.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
