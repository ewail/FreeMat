<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkperspectivetransform" kind="page">
    <compoundname>vtkcommon_vtkperspectivetransform</compoundname>
    <title>vtkPerspectiveTransform</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>A vtkPerspectiveTransform can be used to describe the full range of homogeneous transformations. It was designed in particular to describe a camera-view of a scene. </para><para>The order in which you set up the display coordinates (via AdjustZBuffer() and AdjustViewport()), the projection (via Perspective(), Frustum(), or Ortho()) and the camera view (via SetupCamera()) are important. If the transform is in PreMultiply mode, which is the default, set the Viewport and ZBuffer first, then the projection, and finally the camera view. Once the view is set up, the Translate and Rotate methods can be used to move the camera around in world coordinates. If the Oblique() or Stereo() methods are used, they should be called just before SetupCamera(). </para><para>In PostMultiply mode, you must perform all transformations in the opposite order. This is necessary, for example, if you already have a perspective transformation set up but must adjust the viewport. Another example is if you have a view transformation, and wish to perform translations and rotations in the camera&apos;s coordinate system rather than in world coordinates. </para><para>The SetInput and Concatenate methods can be used to create a transformation pipeline with vtkPerspectiveTransform. See vtkTransform for more information on the transformation pipeline.</para><para>To create an instance of class vtkPerspectiveTransform, simply invoke its constructor as follows <verbatim>  obj = vtkPerspectiveTransform
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPerspectiveTransform has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPerspectiveTransform class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPerspectiveTransform = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPerspectiveTransform = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Identity ()</computeroutput> - Set this transformation to the identity transformation. If the transform has an Input, then the transformation will be reset so that it is the same as the Input.  </para></listitem>
<listitem>
<para><computeroutput>obj.Inverse ()</computeroutput> - Invert the transformation. This will also set a flag so that the transformation will use the inverse of its Input, if an Input has been set.  </para></listitem>
<listitem>
<para><computeroutput>obj.AdjustViewport (double oldXMin, double oldXMax, double oldYMin, double oldYMax, double newXMin, double newXMax, double newYMin, double newYMax)</computeroutput> - Perform an adjustment to the viewport coordinates. By default Ortho, Frustum, and Perspective provide a window of ([-1,+1],[-1,+1]). In PreMultiply mode, you call this method before calling Ortho, Frustum, or Perspective. In PostMultiply mode you can call it after. Note that if you must apply both AdjustZBuffer and AdjustViewport, it makes no difference which order you apply them in.  </para></listitem>
<listitem>
<para><computeroutput>obj.AdjustZBuffer (double oldNearZ, double oldFarZ, double newNearZ, double newFarZ)</computeroutput> - Perform an adjustment to the Z-Buffer range that the near and far clipping planes map to. By default Ortho, Frustum, and Perspective map the near clipping plane to -1 and the far clipping plane to +1. In PreMultiply mode, you call this method before calling Ortho, Frustum, or Perspective. In PostMultiply mode you can call it after.  </para></listitem>
<listitem>
<para><computeroutput>obj.Ortho (double xmin, double xmax, double ymin, double ymax, double znear, double zfar)</computeroutput> - Create an orthogonal projection matrix and concatenate it by the current transformation. The matrix maps [xmin,xmax], [ymin,ymax], [-znear,-zfar] to [-1,+1], [-1,+1], [+1,-1].  </para></listitem>
<listitem>
<para><computeroutput>obj.Frustum (double xmin, double xmax, double ymin, double ymax, double znear, double zfar)</computeroutput> - Create an perspective projection matrix and concatenate it by the current transformation. The matrix maps a frustum with a back plane at -zfar and a front plane at -znear with extent [xmin,xmax],[ymin,ymax] to [-1,+1], [-1,+1], [+1,-1].  </para></listitem>
<listitem>
<para><computeroutput>obj.Perspective (double angle, double aspect, double znear, double zfar)</computeroutput> - Create a perspective projection matrix by specifying the view angle (this angle is in the y direction), the aspect ratio, and the near and far clipping range. The projection matrix is concatenated with the current transformation. This method works via Frustum.  </para></listitem>
<listitem>
<para><computeroutput>obj.Shear (double dxdz, double dydz, double zplane)</computeroutput> - Create a shear transformation about a plane at distance z from the camera. The values dxdz (i.e. dx/dz) and dydz specify the amount of shear in the x and y directions. The &apos;zplane&apos; specifies the distance from the camera to the plane at which the shear causes zero displacement. Generally you want this plane to be the focal plane. This transformation can be used in combination with Ortho to create an oblique projection. It can also be used in combination with Perspective to provide correct stereo views when the eye is at arbitrary but known positions relative to the center of a flat viewing screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.Stereo (double angle, double focaldistance)</computeroutput> - Create a stereo shear matrix and concatenate it with the current transformation. This can be applied in conjunction with either a perspective transformation (via Frustum or Projection) or an orthographic projection. You must specify the distance from the camera plane to the focal plane, and the angle between the distance vector and the eye. The angle should be negative for the left eye, and positive for the right. This method works via Oblique.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetupCamera (double position[3], double focalpoint[3], double viewup[3])</computeroutput> - Set a view transformation matrix for the camera (this matrix does not contain any perspective) and concatenate it with the current transformation.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetupCamera (double p0, double p1, double p2, double fp0, double fp1, double fp2, double vup0, double vup1, double vup2)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Translate (double x, double y, double z)</computeroutput> - Create a translation matrix and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.Translate (double x[3])</computeroutput> - Create a translation matrix and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.Translate (float x[3])</computeroutput> - Create a translation matrix and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.RotateWXYZ (double angle, double x, double y, double z)</computeroutput> - Create a rotation matrix and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics. The angle is in degrees, and (x,y,z) specifies the axis that the rotation will be performed around.  </para></listitem>
<listitem>
<para><computeroutput>obj.RotateWXYZ (double angle, double axis[3])</computeroutput> - Create a rotation matrix and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics. The angle is in degrees, and (x,y,z) specifies the axis that the rotation will be performed around.  </para></listitem>
<listitem>
<para><computeroutput>obj.RotateWXYZ (double angle, float axis[3])</computeroutput> - Create a rotation matrix and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics. The angle is in degrees, and (x,y,z) specifies the axis that the rotation will be performed around.  </para></listitem>
<listitem>
<para><computeroutput>obj.RotateX (double angle)</computeroutput> - Create a rotation matrix about the X, Y, or Z axis and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics. The angle is expressed in degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.RotateY (double angle)</computeroutput> - Create a rotation matrix about the X, Y, or Z axis and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics. The angle is expressed in degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.RotateZ (double angle)</computeroutput> - Create a rotation matrix about the X, Y, or Z axis and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics. The angle is expressed in degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.Scale (double x, double y, double z)</computeroutput> - Create a scale matrix (i.e. set the diagonal elements to x, y, z) and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.Scale (double s[3])</computeroutput> - Create a scale matrix (i.e. set the diagonal elements to x, y, z) and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.Scale (float s[3])</computeroutput> - Create a scale matrix (i.e. set the diagonal elements to x, y, z) and concatenate it with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMatrix (vtkMatrix4x4 matrix)</computeroutput> - Set the current matrix directly. This actually calls Identity(), followed by Concatenate(matrix).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMatrix (double elements[16])</computeroutput> - Set the current matrix directly. This actually calls Identity(), followed by Concatenate(matrix).  </para></listitem>
<listitem>
<para><computeroutput>obj.Concatenate (vtkMatrix4x4 matrix)</computeroutput> - Concatenates the matrix with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.Concatenate (double elements[16])</computeroutput> - Concatenates the matrix with the current transformation according to PreMultiply or PostMultiply semantics.  </para></listitem>
<listitem>
<para><computeroutput>obj.Concatenate (vtkHomogeneousTransform transform)</computeroutput> - Concatenate the specified transform with the current transformation according to PreMultiply or PostMultiply semantics. The concatenation is pipelined, meaning that if any of the transformations are changed, even after Concatenate() is called, those changes will be reflected when you call TransformPoint().  </para></listitem>
<listitem>
<para><computeroutput>obj.PreMultiply ()</computeroutput> - Sets the internal state of the transform to PreMultiply. All subsequent operations will occur before those already represented in the current transformation. In homogeneous matrix notation, M = M*A where M is the current transformation matrix and A is the applied matrix. The default is PreMultiply.  </para></listitem>
<listitem>
<para><computeroutput>obj.PostMultiply ()</computeroutput> - Sets the internal state of the transform to PostMultiply. All subsequent operations will occur after those already represented in the current transformation. In homogeneous matrix notation, M = A*M where M is the current transformation matrix and A is the applied matrix. The default is PreMultiply.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfConcatenatedTransforms ()</computeroutput> - Get the total number of transformations that are linked into this one via Concatenate() operations or via SetInput().  </para></listitem>
<listitem>
<para><computeroutput>vtkHomogeneousTransform = obj.GetConcatenatedTransform (int i)</computeroutput> - Set the input for this transformation. This will be used as the base transformation if it is set. This method allows you to build a transform pipeline: if the input is modified, then this transformation will automatically update accordingly. Note that the InverseFlag, controlled via Inverse(), determines whether this transformation will use the Input or the inverse of the Input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkHomogeneousTransform input)</computeroutput> - Set the input for this transformation. This will be used as the base transformation if it is set. This method allows you to build a transform pipeline: if the input is modified, then this transformation will automatically update accordingly. Note that the InverseFlag, controlled via Inverse(), determines whether this transformation will use the Input or the inverse of the Input.  </para></listitem>
<listitem>
<para><computeroutput>vtkHomogeneousTransform = obj.GetInput ()</computeroutput> - Set the input for this transformation. This will be used as the base transformation if it is set. This method allows you to build a transform pipeline: if the input is modified, then this transformation will automatically update accordingly. Note that the InverseFlag, controlled via Inverse(), determines whether this transformation will use the Input or the inverse of the Input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInverseFlag ()</computeroutput> - Get the inverse flag of the transformation. This controls whether it is the Input or the inverse of the Input that is used as the base transformation. The InverseFlag is flipped every time Inverse() is called. The InverseFlag is off when a transform is first created.  </para></listitem>
<listitem>
<para><computeroutput>obj.Push ()</computeroutput> - Pushes the current transformation onto the transformation stack.  </para></listitem>
<listitem>
<para><computeroutput>obj.Pop ()</computeroutput> - Deletes the transformation on the top of the stack and sets the top to the next transformation on the stack.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractTransform = obj.MakeTransform ()</computeroutput> - Make a new transform of the same type <ndash/> you are responsible for deleting the transform when you are done with it.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CircuitCheck (vtkAbstractTransform transform)</computeroutput> - Check for self-reference. Will return true if concatenating with the specified transform, setting it to be our inverse, or setting it to be our input will create a circular reference. CircuitCheck is automatically called by SetInput(), SetInverse(), and Concatenate(vtkXTransform *). Avoid using this function, it is experimental.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Override GetMTime to account for input and concatenation.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
