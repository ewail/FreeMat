<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkkdnode" kind="page">
    <compoundname>vtkfiltering_vtkkdnode</compoundname>
    <title>vtkKdNode</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>To create an instance of class vtkKdNode, simply invoke its constructor as follows <verbatim>  obj = vtkKdNode
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkKdNode has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkKdNode class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkKdNode = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkKdNode = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDim (int )</computeroutput> - Set/Get the dimension along which this region is divided. (0 - x, 1 - y, 2 - z, 3 - leaf node (default)).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDim ()</computeroutput> - Set/Get the dimension along which this region is divided. (0 - x, 1 - y, 2 - z, 3 - leaf node (default)).  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDivisionPosition ()</computeroutput> - Get the location of the division plane along the axis the region is divided. See also GetDim(). The result is undertermined if this node is not divided (a leaf node).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfPoints (int )</computeroutput> - Set/Get the number of points contained in this region.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfPoints ()</computeroutput> - Set/Get the number of points contained in this region.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBounds (double x1, double x2, double y1, double y2, double z1, double z2)</computeroutput> - Set/Get the bounds of the spatial region represented by this node. Caller allocates storage for 6-vector in GetBounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBounds (double b[6])</computeroutput> - Set/Get the bounds of the spatial region represented by this node. Caller allocates storage for 6-vector in GetBounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetBounds (double b) const</computeroutput> - Set/Get the bounds of the spatial region represented by this node. Caller allocates storage for 6-vector in GetBounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataBounds (double x1, double x2, double y1, double y2, double z1, double z2)</computeroutput> - Set/Get the bounds of the points contained in this spatial region. This may be smaller than the bounds of the region itself. Caller allocates storage for 6-vector in GetDataBounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetDataBounds (double b) const</computeroutput> - Set/Get the bounds of the points contained in this spatial region. This may be smaller than the bounds of the region itself. Caller allocates storage for 6-vector in GetDataBounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataBounds (float v)</computeroutput> - Given a pointer to NumberOfPoints points, set the DataBounds of this node to the bounds of these points.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMinBounds ()</computeroutput> - Get a pointer to the 3 bound minima (xmin, ymin and zmin) or the 3 bound maxima (xmax, ymax, zmax). Don&apos;t free this pointer.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMaxBounds ()</computeroutput> - Set the xmin, ymin and zmin value of the bounds of this region  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMinBounds (double mb)</computeroutput> - Set the xmin, ymin and zmin value of the bounds of this region  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaxBounds (double mb)</computeroutput> - Set the xmax, ymax and zmax value of the bounds of this region  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMinDataBounds ()</computeroutput> - Get a pointer to the 3 data bound minima (xmin, ymin and zmin) or the 3 data bound maxima (xmax, ymax, zmax). Don&apos;t free this pointer.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMaxDataBounds ()</computeroutput> - Set the xmin, ymin and zmin value of the bounds of this data within this region  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMinDataBounds (double mb)</computeroutput> - Set the xmin, ymin and zmin value of the bounds of this data within this region  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaxDataBounds (double mb)</computeroutput> - Set the xmax, ymax and zmax value of the bounds of this data within this region  </para></listitem>
<listitem>
<para><computeroutput>obj.SetID (int )</computeroutput> - Set/Get the ID associated with the region described by this node. If this is not a leaf node, this value should be -1.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetID ()</computeroutput> - Set/Get the ID associated with the region described by this node. If this is not a leaf node, this value should be -1.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMinID ()</computeroutput> - If this node is not a leaf node, there are leaf nodes below it whose regions represent a partitioning of this region. The IDs of these leaf nodes form a contigous set. Set/Get the range of the IDs of the leaf nodes below this node. If this is already a leaf node, these values should be the same as the ID.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaxID ()</computeroutput> - If this node is not a leaf node, there are leaf nodes below it whose regions represent a partitioning of this region. The IDs of these leaf nodes form a contigous set. Set/Get the range of the IDs of the leaf nodes below this node. If this is already a leaf node, these values should be the same as the ID.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMinID (int )</computeroutput> - If this node is not a leaf node, there are leaf nodes below it whose regions represent a partitioning of this region. The IDs of these leaf nodes form a contigous set. Set/Get the range of the IDs of the leaf nodes below this node. If this is already a leaf node, these values should be the same as the ID.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaxID (int )</computeroutput> - If this node is not a leaf node, there are leaf nodes below it whose regions represent a partitioning of this region. The IDs of these leaf nodes form a contigous set. Set/Get the range of the IDs of the leaf nodes below this node. If this is already a leaf node, these values should be the same as the ID.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddChildNodes (vtkKdNode left, vtkKdNode right)</computeroutput> - Add the left and right children.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeleteChildNodes ()</computeroutput> - Delete the left and right children.  </para></listitem>
<listitem>
<para><computeroutput>vtkKdNode = obj.GetLeft ()</computeroutput> - Set/Get a pointer to the left child of this node.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLeft (vtkKdNode left)</computeroutput> - Set/Get a pointer to the left child of this node.  </para></listitem>
<listitem>
<para><computeroutput>vtkKdNode = obj.GetRight ()</computeroutput> - Set/Get a pointer to the right child of this node.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRight (vtkKdNode right)</computeroutput> - Set/Get a pointer to the right child of this node.  </para></listitem>
<listitem>
<para><computeroutput>vtkKdNode = obj.GetUp ()</computeroutput> - Set/Get a pointer to the parent of this node.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUp (vtkKdNode up)</computeroutput> - Set/Get a pointer to the parent of this node.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IntersectsBox (double x1, double x2, double y1, double y2, double z1, double z2, int useDataBounds)</computeroutput> - Return 1 if this spatial region intersects the axis-aligned box given by the bounds passed in. Use the possibly smaller bounds of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IntersectsSphere2 (double x, double y, double z, double rSquared, int useDataBounds)</computeroutput> - Return 1 if this spatial region intersects a sphere described by it&apos;s center and the square of it&apos;s radius. Use the possibly smaller bounds of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IntersectsRegion (vtkPlanesIntersection pi, int useDataBounds)</computeroutput> - A vtkPlanesIntersection object represents a convex 3D region bounded by planes, and it is capable of computing intersections of boxes with itself. Return 1 if this spatial region intersects the spatial region described by the vtkPlanesIntersection object. Use the possibly smaller bounds of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IntersectsCell (vtkCell cell, int useDataBounds, int cellRegion, double cellBoundsNULL)</computeroutput> - Return 1 if the cell specified intersects this region. If you already know the ID of the region containing the cell&apos;s centroid, provide that as an argument. If you already know the bounds of the cell, provide that as well, in the form of xmin,xmax,ymin,ymax,zmin, zmax. Either of these may speed the calculation. Use the possibly smaller bounds of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ContainsBox (double x1, double x2, double y1, double y2, double z1, double z2, int useDataBounds)</computeroutput> - Return 1 if this spatial region entirely contains a box specified by it&apos;s bounds. Use the possibly smaller bounds of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ContainsPoint (double x, double y, double z, int useDataBounds)</computeroutput> - Return 1 if this spatial region entirely contains the given point. Use the possibly smaller bounds of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistance2ToBoundary (double x, double y, double z, int useDataBounds)</computeroutput> - Calculate the distance squared from any point to the boundary of this region. Use the boundary of the points within the region if useDataBounds is non-zero.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistance2ToBoundary (double x, double y, double z, double boundaryPt, int useDataBounds)</computeroutput> - Calculate the distance squared from any point to the boundary of this region. Use the boundary of the points within the region if useDataBounds is non-zero. Set boundaryPt to the point on the boundary.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistance2ToInnerBoundary (double x, double y, double z)</computeroutput> - Calculate the distance from the specified point (which is required to be inside this spatial region) to an interior boundary. An interior boundary is one that is not also an boundary of the entire space partitioned by the tree of vtkKdNode&apos;s.  </para></listitem>
<listitem>
<para><computeroutput>obj.PrintNode (int depth)</computeroutput> - For debugging purposes, print out this node.  </para></listitem>
<listitem>
<para><computeroutput>obj.PrintVerboseNode (int depth)</computeroutput> - For debugging purposes, print out this node.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
