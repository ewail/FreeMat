<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkuniformvariables" kind="page">
    <compoundname>vtkrendering_vtkuniformvariables</compoundname>
    <title>vtkUniformVariables</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkUniformVariables is a list of uniform variables attached to either a vtkShader2 object or to a vtkShaderProgram2. Uniform variables on a vtkShaderProgram2 override values of uniform variables on a vtkShader2.</para><para>To create an instance of class vtkUniformVariables, simply invoke its constructor as follows <verbatim>  obj = vtkUniformVariables
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkUniformVariables has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkUniformVariables class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkUniformVariables = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkUniformVariables = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUniformi (string name, int numberOfComponents, int value)</computeroutput> - Set an integer uniform variable. <simplesect kind="pre"><para>name_exists: name!=0 </para><simplesectsep/><para>value_exists: value!=0 </para><simplesectsep/><para>valid_numberOfComponents: numberOfComponents&gt;=1 &amp;&amp; numberOfComponents&lt;=4  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetUniformf (string name, int numberOfComponents, float value)</computeroutput> - Set an float uniform variable. <simplesect kind="pre"><para>name_exists: name!=0 </para><simplesectsep/><para>value_exists: value!=0 </para><simplesectsep/><para>valid_numberOfComponents: numberOfComponents&gt;=1 &amp;&amp; numberOfComponents&lt;=4  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetUniformiv (string name, int numberOfComponents, int numberOfElements, int value)</computeroutput> - Set an array of integer uniform variables. The array `value&apos; is of size `numberOfElements&apos;*`numberOfComponents.&apos;. <simplesect kind="pre"><para>name_exists: name!=0 </para><simplesectsep/><para>value_exists: value!=0 </para><simplesectsep/><para>valid_numberOfComponents: numberOfComponents&gt;=1 &amp;&amp; numberOfComponents&lt;=4 </para><simplesectsep/><para>valid_numberOfElements: numberOfElements&gt;=1  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetUniformfv (string name, int numberOfComponents, int numberOfElements, float value)</computeroutput> - Set an array of float uniform variables. The array `value&apos; is of size `numberOfElements&apos;*`numberOfComponents.&apos;. <simplesect kind="pre"><para>name_exists: name!=0 </para><simplesectsep/><para>value_exists: value!=0 </para><simplesectsep/><para>valid_numberOfComponents: numberOfComponents&gt;=1 &amp;&amp; numberOfComponents&lt;=4 </para><simplesectsep/><para>valid_numberOfElements: numberOfElements&gt;=1  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetUniformMatrix (string name, int rows, int columns, float value)</computeroutput> - Set a matrix uniform variable. <simplesect kind="pre"><para>name_exists: name!=0 </para><simplesectsep/><para>value_exists: value!=0 </para><simplesectsep/><para>valid_rows: rows&gt;=2 &amp;&amp; rows&lt;=4 </para><simplesectsep/><para>valid_columns: columns&gt;=2 &amp;&amp; columns&lt;=4  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.RemoveUniform (string name)</computeroutput> - Remove uniform `name&apos; from the list.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllUniforms ()</computeroutput> - Remove all uniforms from the list.  </para></listitem>
<listitem>
<para><computeroutput>obj.Send (string name, int uniformIndex)</computeroutput> - <simplesect kind="pre"><para>need a valid OpenGL context and a shader program in use.  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.Start ()</computeroutput> - Place the internal cursor on the first uniform.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.IsAtEnd ()</computeroutput> - Is the iteration done?  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetCurrentName ()</computeroutput> - Name of the uniform at the current cursor position. <simplesect kind="pre"><para>not_done: !this-&gt;IsAtEnd()  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SendCurrentUniform (int uniformIndex)</computeroutput> - <simplesect kind="pre"><para>need a valid OpenGL context and a shader program in use. </para><simplesectsep/><para>not_done: !this-&gt;IsAtEnd()  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.Next ()</computeroutput> - Move the cursor to the next uniform. <simplesect kind="pre"><para>not_done: !this-&gt;IsAtEnd()  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkUniformVariables other)</computeroutput> - Copy all the variables from `other&apos;. Any existing variable will be deleted first. <simplesect kind="pre"><para>other_exists: other!=0 </para><simplesectsep/><para>not_self: other!=this  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.Merge (vtkUniformVariables other)</computeroutput> - Copy all the variables from `other&apos;. Any existing variable will be overwritten. <simplesect kind="pre"><para>other_exists: other!=0 </para><simplesectsep/><para>not_self: other!=this  </para></simplesect>
</para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
