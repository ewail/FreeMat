<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkinteractorobserver" kind="page">
    <compoundname>vtkrendering_vtkinteractorobserver</compoundname>
    <title>vtkInteractorObserver</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkInteractorObserver is an abstract superclass for subclasses that observe events invoked by vtkRenderWindowInteractor. These subclasses are typically things like 3D widgets; objects that interact with actors in the scene, or interactively probe the scene for information.</para><para>vtkInteractorObserver defines the method SetInteractor() and enables and disables the processing of events by the vtkInteractorObserver. Use the methods EnabledOn() or SetEnabled(1) to turn on the interactor observer, and the methods EnabledOff() or SetEnabled(0) to turn off the interactor. Initial value is 0.</para><para>To support interactive manipulation of objects, this class (and subclasses) invoke the events StartInteractionEvent, InteractionEvent, and EndInteractionEvent. These events are invoked when the vtkInteractorObserver enters a state where rapid response is desired: mouse motion, etc. The events can be used, for example, to set the desired update frame rate (StartInteractionEvent), operate on data or update a pipeline (InteractionEvent), and set the desired frame rate back to normal values (EndInteractionEvent). Two other events, EnableEvent and DisableEvent, are invoked when the interactor observer is enabled or disabled.</para><para>To create an instance of class vtkInteractorObserver, simply invoke its constructor as follows <verbatim>  obj = vtkInteractorObserver
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkInteractorObserver has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkInteractorObserver class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorObserver = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorObserver = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnabled (int )</computeroutput> - Methods for turning the interactor observer on and off, and determining its state. All subclasses must provide the SetEnabled() method. Enabling a vtkInteractorObserver has the side effect of adding observers; disabling it removes the observers. Prior to enabling the vtkInteractorObserver you must set the render window interactor (via SetInteractor()). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetEnabled ()</computeroutput> - Methods for turning the interactor observer on and off, and determining its state. All subclasses must provide the SetEnabled() method. Enabling a vtkInteractorObserver has the side effect of adding observers; disabling it removes the observers. Prior to enabling the vtkInteractorObserver you must set the render window interactor (via SetInteractor()). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.EnabledOn ()</computeroutput> - Methods for turning the interactor observer on and off, and determining its state. All subclasses must provide the SetEnabled() method. Enabling a vtkInteractorObserver has the side effect of adding observers; disabling it removes the observers. Prior to enabling the vtkInteractorObserver you must set the render window interactor (via SetInteractor()). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.EnabledOff ()</computeroutput> - Methods for turning the interactor observer on and off, and determining its state. All subclasses must provide the SetEnabled() method. Enabling a vtkInteractorObserver has the side effect of adding observers; disabling it removes the observers. Prior to enabling the vtkInteractorObserver you must set the render window interactor (via SetInteractor()). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.On ()</computeroutput> - Methods for turning the interactor observer on and off, and determining its state. All subclasses must provide the SetEnabled() method. Enabling a vtkInteractorObserver has the side effect of adding observers; disabling it removes the observers. Prior to enabling the vtkInteractorObserver you must set the render window interactor (via SetInteractor()). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.Off ()</computeroutput> - This method is used to associate the widget with the render window interactor. Observers of the appropriate events invoked in the render window interactor are set up as a result of this method invocation. The SetInteractor() method must be invoked prior to enabling the vtkInteractorObserver.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractor (vtkRenderWindowInteractor iren)</computeroutput> - This method is used to associate the widget with the render window interactor. Observers of the appropriate events invoked in the render window interactor are set up as a result of this method invocation. The SetInteractor() method must be invoked prior to enabling the vtkInteractorObserver.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderWindowInteractor = obj.GetInteractor ()</computeroutput> - This method is used to associate the widget with the render window interactor. Observers of the appropriate events invoked in the render window interactor are set up as a result of this method invocation. The SetInteractor() method must be invoked prior to enabling the vtkInteractorObserver.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPriority (float )</computeroutput> - Set/Get the priority at which events are processed. This is used when multiple interactor observers are used simultaneously. The default value is 0.0 (lowest priority.) Note that when multiple interactor observer have the same priority, then the last observer added will process the event first. (Note: once the SetInteractor() method has been called, changing the priority does not effect event processing. You will have to SetInteractor(NULL), change priority, and then SetInteractor(iren) to have the priority take effect.)  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetPriorityMinValue ()</computeroutput> - Set/Get the priority at which events are processed. This is used when multiple interactor observers are used simultaneously. The default value is 0.0 (lowest priority.) Note that when multiple interactor observer have the same priority, then the last observer added will process the event first. (Note: once the SetInteractor() method has been called, changing the priority does not effect event processing. You will have to SetInteractor(NULL), change priority, and then SetInteractor(iren) to have the priority take effect.)  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetPriorityMaxValue ()</computeroutput> - Set/Get the priority at which events are processed. This is used when multiple interactor observers are used simultaneously. The default value is 0.0 (lowest priority.) Note that when multiple interactor observer have the same priority, then the last observer added will process the event first. (Note: once the SetInteractor() method has been called, changing the priority does not effect event processing. You will have to SetInteractor(NULL), change priority, and then SetInteractor(iren) to have the priority take effect.)  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetPriority ()</computeroutput> - Set/Get the priority at which events are processed. This is used when multiple interactor observers are used simultaneously. The default value is 0.0 (lowest priority.) Note that when multiple interactor observer have the same priority, then the last observer added will process the event first. (Note: once the SetInteractor() method has been called, changing the priority does not effect event processing. You will have to SetInteractor(NULL), change priority, and then SetInteractor(iren) to have the priority take effect.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyPressActivation (int )</computeroutput> - Enable/Disable of the use of a keypress to turn on and off the interactor observer. (By default, the keypress is &apos;i&apos; for &quot;interactor
 observer&quot;.) Set the KeyPressActivationValue to change which key activates the widget.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetKeyPressActivation ()</computeroutput> - Enable/Disable of the use of a keypress to turn on and off the interactor observer. (By default, the keypress is &apos;i&apos; for &quot;interactor
 observer&quot;.) Set the KeyPressActivationValue to change which key activates the widget.)  </para></listitem>
<listitem>
<para><computeroutput>obj.KeyPressActivationOn ()</computeroutput> - Enable/Disable of the use of a keypress to turn on and off the interactor observer. (By default, the keypress is &apos;i&apos; for &quot;interactor
 observer&quot;.) Set the KeyPressActivationValue to change which key activates the widget.)  </para></listitem>
<listitem>
<para><computeroutput>obj.KeyPressActivationOff ()</computeroutput> - Enable/Disable of the use of a keypress to turn on and off the interactor observer. (By default, the keypress is &apos;i&apos; for &quot;interactor
 observer&quot;.) Set the KeyPressActivationValue to change which key activates the widget.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyPressActivationValue (char )</computeroutput> - Specify which key press value to use to activate the interactor observer (if key press activation is enabled). By default, the key press activation value is &apos;i&apos;. Note: once the SetInteractor() method is invoked, changing the key press activation value will not affect the key press until SetInteractor(NULL)/SetInteractor(iren) is called.  </para></listitem>
<listitem>
<para><computeroutput>char = obj.GetKeyPressActivationValue ()</computeroutput> - Specify which key press value to use to activate the interactor observer (if key press activation is enabled). By default, the key press activation value is &apos;i&apos;. Note: once the SetInteractor() method is invoked, changing the key press activation value will not affect the key press until SetInteractor(NULL)/SetInteractor(iren) is called.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderer = obj.GetDefaultRenderer ()</computeroutput> - Set/Get the default renderer to use when activating the interactor observer. Normally when the widget is activated (SetEnabled(1) or when keypress activation takes place), the renderer over which the mouse pointer is positioned is used. Alternatively, you can specify the renderer to bind the interactor to when the interactor observer is activated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDefaultRenderer (vtkRenderer )</computeroutput> - Set/Get the default renderer to use when activating the interactor observer. Normally when the widget is activated (SetEnabled(1) or when keypress activation takes place), the renderer over which the mouse pointer is positioned is used. Alternatively, you can specify the renderer to bind the interactor to when the interactor observer is activated.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderer = obj.GetCurrentRenderer ()</computeroutput> - Set/Get the current renderer. Normally when the widget is activated (SetEnabled(1) or when keypress activation takes place), the renderer over which the mouse pointer is positioned is used and assigned to this Ivar. Alternatively, you might want to set the CurrentRenderer explicitly. WARNING: note that if the DefaultRenderer Ivar is set (see above), it will always override the parameter passed to SetCurrentRenderer, unless it is NULL. (i.e., SetCurrentRenderer(foo) = SetCurrentRenderer(DefaultRenderer).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCurrentRenderer (vtkRenderer )</computeroutput> - Set/Get the current renderer. Normally when the widget is activated (SetEnabled(1) or when keypress activation takes place), the renderer over which the mouse pointer is positioned is used and assigned to this Ivar. Alternatively, you might want to set the CurrentRenderer explicitly. WARNING: note that if the DefaultRenderer Ivar is set (see above), it will always override the parameter passed to SetCurrentRenderer, unless it is NULL. (i.e., SetCurrentRenderer(foo) = SetCurrentRenderer(DefaultRenderer).  </para></listitem>
<listitem>
<para><computeroutput>obj.OnChar ()</computeroutput> - Sets up the keypress-i event.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
