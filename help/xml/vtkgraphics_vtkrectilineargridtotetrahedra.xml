<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkrectilineargridtotetrahedra" kind="page">
    <compoundname>vtkgraphics_vtkrectilineargridtotetrahedra</compoundname>
    <title>vtkRectilinearGridToTetrahedra</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRectilinearGridToTetrahedra forms a mesh of Tetrahedra from a vtkRectilinearGrid. The tetrahedra can be 5 per cell, 6 per cell, or a mixture of 5 or 12 per cell. The resulting mesh is consistent, meaning that there are no edge crossings and that each tetrahedron face is shared by two tetrahedra, except those tetrahedra on the boundary. All tetrahedra are right handed.</para><para>Note that 12 tetrahedra per cell means adding a point in the center of the cell.</para><para>In order to subdivide some cells into 5 and some cells into 12 tetrahedra: SetTetraPerCellTo5And12(); Set the Scalars of the Input RectilinearGrid to be 5 or 12 depending on what you want per cell of the RectilinearGrid.</para><para>If you set RememberVoxelId, the scalars of the tetrahedron will be set to the Id of the Cell in the RectilinearGrid from which the tetrahedron came.</para><para>.SECTION Thanks This class was developed by Samson J. Timoner of the MIT Artificial Intelligence Laboratory</para><para>To create an instance of class vtkRectilinearGridToTetrahedra, simply invoke its constructor as follows <verbatim>  obj = vtkRectilinearGridToTetrahedra
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRectilinearGridToTetrahedra has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRectilinearGridToTetrahedra class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRectilinearGridToTetrahedra = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRectilinearGridToTetrahedra = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTetraPerCellTo5 ()</computeroutput> - Set the method to divide each cell (voxel) in the RectilinearGrid into tetrahedra.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTetraPerCellTo6 ()</computeroutput> - Set the method to divide each cell (voxel) in the RectilinearGrid into tetrahedra.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTetraPerCellTo12 ()</computeroutput> - Set the method to divide each cell (voxel) in the RectilinearGrid into tetrahedra.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTetraPerCellTo5And12 ()</computeroutput> - Set the method to divide each cell (voxel) in the RectilinearGrid into tetrahedra.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTetraPerCell (int )</computeroutput> - Set the method to divide each cell (voxel) in the RectilinearGrid into tetrahedra.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTetraPerCell ()</computeroutput> - Set the method to divide each cell (voxel) in the RectilinearGrid into tetrahedra.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRememberVoxelId (int )</computeroutput> - Should the tetrahedra have scalar data indicating which Voxel they came from in the vtkRectilinearGrid?  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRememberVoxelId ()</computeroutput> - Should the tetrahedra have scalar data indicating which Voxel they came from in the vtkRectilinearGrid?  </para></listitem>
<listitem>
<para><computeroutput>obj.RememberVoxelIdOn ()</computeroutput> - Should the tetrahedra have scalar data indicating which Voxel they came from in the vtkRectilinearGrid?  </para></listitem>
<listitem>
<para><computeroutput>obj.RememberVoxelIdOff ()</computeroutput> - Should the tetrahedra have scalar data indicating which Voxel they came from in the vtkRectilinearGrid?  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (double Extent[3], double Spacing[3], double tol)</computeroutput> - This function for convenience for creating a Rectilinear Grid If Spacing does not fit evenly into extent, the last cell will have a different width (or height or depth). If Extent[i]/Spacing[i] is within tol of an integer, then assume the programmer meant an integer for direction i.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (double ExtentX, double ExtentY, double ExtentZ, double SpacingX, double SpacingY, double SpacingZ, double tol)</computeroutput> - This version of the function for the wrappers  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
