<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="array_zeros" kind="page">
    <compoundname>array_zeros</compoundname>
    <title>ZEROS Array of Zeros</title>
    <detaileddescription>
<para>Section: <ref refid="sec_array_1sec_array" kindref="member">Array Generation and Manipulations</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Creates an array of zeros of the specified size. Two seperate syntaxes are possible. The first syntax specifies the array dimensions as a sequence of scalar dimensions: <verbatim>   y = zeros(d1,d2,...,dn).
</verbatim> The resulting array has the given dimensions, and is filled with all zeros. The type of <computeroutput>y</computeroutput> is <computeroutput>double</computeroutput>, a 64-bit floating point array. To get arrays of other types, use the typecast functions (e.g., <computeroutput>uint8</computeroutput>, <computeroutput>int8</computeroutput>, etc.). An alternative syntax is to use the following notation: <verbatim>   y = zeros(d1,d2,...,dn,classname)
</verbatim> where <computeroutput>classname</computeroutput> is one of &apos;double&apos;, &apos;single&apos;, &apos;int8&apos;, &apos;uint8&apos;, &apos;int16&apos;, &apos;uint16&apos;, &apos;int32&apos;, &apos;uint32&apos;, &apos;int64&apos;, &apos;uint64&apos;, &apos;float&apos;, &apos;logical&apos;.</para><para>The second syntax specifies the array dimensions as a vector, where each element in the vector specifies a dimension length: <verbatim>   y = zeros([d1,d2,...,dn]),
</verbatim> or <verbatim>   y = zeros([d1,d2,...,dn],classname).
</verbatim> This syntax is more convenient for calling <computeroutput>zeros</computeroutput> using a variable for the argument. In both cases, specifying only one dimension results in a square matrix output. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>The following examples demonstrate generation of some zero arrays using the first form.</para><para><verbatim>--&gt; zeros(2,3,2)

ans = 

(:,:,1) = 
 0 0 0 
 0 0 0 

(:,:,2) = 
 0 0 0 
 0 0 0 

--&gt; zeros(1,3)

ans = 
 0 0 0 
</verbatim></para><para>The same expressions, using the second form.</para><para><verbatim>--&gt; zeros([2,6])

ans = 
 0 0 0 0 0 0 
 0 0 0 0 0 0 

--&gt; zeros([1,3])

ans = 
 0 0 0 
</verbatim></para><para>Finally, an example of using the type casting function <computeroutput>uint16</computeroutput> to generate an array of 16-bit unsigned integers with zero values.</para><para><verbatim>--&gt; uint16(zeros(3))

ans = 
 0 0 0 
 0 0 0 
 0 0 0 
</verbatim></para><para>Here we use the second syntax where the class of the output is specified explicitly</para><para><verbatim>--&gt; zeros(3,&apos;int16&apos;)

ans = 
 0 0 0 
 0 0 0 
 0 0 0 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
