<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkxrenderwindowinteractor" kind="page">
    <compoundname>vtkrendering_vtkxrenderwindowinteractor</compoundname>
    <title>vtkXRenderWindowInteractor</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkXRenderWindowInteractor is a convenience object that provides event bindings to common graphics functions. For example, camera and actor functions such as zoom-in/zoom-out, azimuth, roll, and pan. IT is one of the window system specific subclasses of vtkRenderWindowInteractor. Please see vtkRenderWindowInteractor documentation for event bindings.</para><para>To create an instance of class vtkXRenderWindowInteractor, simply invoke its constructor as follows <verbatim>  obj = vtkXRenderWindowInteractor
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkXRenderWindowInteractor has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkXRenderWindowInteractor class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXRenderWindowInteractor = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkXRenderWindowInteractor = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Initializes the event handlers without an XtAppContext. This is good for when you don&apos;t have a user interface, but you still want to have mouse interaction.  </para></listitem>
<listitem>
<para><computeroutput>obj.TerminateApp ()</computeroutput> - Break the event loop on &apos;q&apos;,&apos;e&apos; keypress. Want more ???  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetBreakLoopFlag ()</computeroutput> - The BreakLoopFlag is checked in the Start() method. Setting it to anything other than zero will cause the interactor loop to terminate and return to the calling function.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBreakLoopFlag (int )</computeroutput> - The BreakLoopFlag is checked in the Start() method. Setting it to anything other than zero will cause the interactor loop to terminate and return to the calling function.  </para></listitem>
<listitem>
<para><computeroutput>obj.BreakLoopFlagOff ()</computeroutput> - The BreakLoopFlag is checked in the Start() method. Setting it to anything other than zero will cause the interactor loop to terminate and return to the calling function.  </para></listitem>
<listitem>
<para><computeroutput>obj.BreakLoopFlagOn ()</computeroutput> - The BreakLoopFlag is checked in the Start() method. Setting it to anything other than zero will cause the interactor loop to terminate and return to the calling function.  </para></listitem>
<listitem>
<para><computeroutput>obj.Enable ()</computeroutput> - Enable/Disable interactions. By default interactors are enabled when initialized. Initialize() must be called prior to enabling/disabling interaction. These methods are used when a window/widget is being shared by multiple renderers and interactors. This allows a &quot;modal&quot; display where one interactor is active when its data is to be displayed and all other interactors associated with the widget are disabled when their data is not displayed.  </para></listitem>
<listitem>
<para><computeroutput>obj.Disable ()</computeroutput> - Enable/Disable interactions. By default interactors are enabled when initialized. Initialize() must be called prior to enabling/disabling interaction. These methods are used when a window/widget is being shared by multiple renderers and interactors. This allows a &quot;modal&quot; display where one interactor is active when its data is to be displayed and all other interactors associated with the widget are disabled when their data is not displayed.  </para></listitem>
<listitem>
<para><computeroutput>obj.Start ()</computeroutput> - This will start up the X event loop and never return. If you call this method it will loop processing X events until the application is exited.  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdateSize (int , int )</computeroutput> - Update the Size data member and set the associated RenderWindow&apos;s size.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetMousePosition (int x, int y)</computeroutput> - Re-defines virtual function to get mouse position by querying X-server.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
