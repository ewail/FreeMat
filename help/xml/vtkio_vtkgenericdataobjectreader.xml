<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtkgenericdataobjectreader" kind="page">
    <compoundname>vtkio_vtkgenericdataobjectreader</compoundname>
    <title>vtkGenericDataObjectReader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkGenericDataObjectReader is a class that provides instance variables and methods to read any type of data object in Visualization Toolkit (vtk) format. The output type of this class will vary depending upon the type of data file. Convenience methods are provided to return the data as a particular type. (See text for format description details). The superclass of this class, vtkDataReader, provides many methods for controlling the reading of the data file, see vtkDataReader for more information.</para><para>To create an instance of class vtkGenericDataObjectReader, simply invoke its constructor as follows <verbatim>  obj = vtkGenericDataObjectReader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGenericDataObjectReader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGenericDataObjectReader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericDataObjectReader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericDataObjectReader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetOutput ()</computeroutput> - Get the output of this filter  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetOutput (int idx)</computeroutput> - Get the output of this filter  </para></listitem>
<listitem>
<para><computeroutput>vtkGraph = obj.GetGraphOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyData = obj.GetPolyDataOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkRectilinearGrid = obj.GetRectilinearGridOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkStructuredGrid = obj.GetStructuredGridOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkStructuredPoints = obj.GetStructuredPointsOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkTable = obj.GetTableOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkTree = obj.GetTreeOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>vtkUnstructuredGrid = obj.GetUnstructuredGridOutput ()</computeroutput> - Get the output as various concrete types. This method is typically used when you know exactly what type of data is being read. Otherwise, use the general GetOutput() method. If the wrong type is used NULL is returned. (You must also set the filename of the object prior to getting the output.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ReadOutputType ()</computeroutput> - This method can be used to find out the type of output expected without needing to read the whole file.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
