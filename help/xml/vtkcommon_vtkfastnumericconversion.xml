<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkfastnumericconversion" kind="page">
    <compoundname>vtkcommon_vtkfastnumericconversion</compoundname>
    <title>vtkFastNumericConversion</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkFastNumericConversion uses a portable (assuming IEEE format) method for converting single and double precision floating point values to a fixed point representation. This allows fast integer floor operations on platforms, such as Intel X86, in which CPU floating point conversion algorithms are very slow. It is based on the techniques described in Chris Hecker&apos;s article, &quot;Let&apos;s Get to the (Floating) Point&quot;, in Game Developer Magazine, Feb/Mar 1996, and the techniques described in Michael Herf&apos;s website, <ulink url="http://www.stereopsis.com/FPU.html">http://www.stereopsis.com/FPU.html</ulink>. The Hecker article can be found at <ulink url="http://www.d6.com/users/checker/pdfs/gdmfp.pdf">http://www.d6.com/users/checker/pdfs/gdmfp.pdf</ulink>. Unfortunately, each of these techniques is incomplete, and doesn&apos;t convert properly, in a way that depends on how many bits are reserved for fixed point fractional use, due to failing to properly account for the default round-towards-even rounding mode of the X86. Thus, my implementation incorporates some rounding correction that undoes the rounding that the FPU performs during denormalization of the floating point value. Note that the rounding affect I&apos;m talking about here is not the effect on the fistp instruction, but rather the effect that occurs during the denormalization of a value that occurs when adding it to a much larger value. The bits must be shifted to the right, and when a &quot;1&quot; bit falls off the edge, the rounding mode determines what happens next, in order to avoid completely &quot;losing&quot; the 1-bit. Furthermore, my implementation works on Linux, where the default precision mode is 64-bit extended precision.</para><para>To create an instance of class vtkFastNumericConversion, simply invoke its constructor as follows <verbatim>  obj = vtkFastNumericConversion
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkFastNumericConversion has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkFastNumericConversion class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFastNumericConversion = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFastNumericConversion = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.TestQuickFloor (double val)</computeroutput> - Wrappable method for script-testing of correct cross-platform functionality  </para></listitem>
<listitem>
<para><computeroutput>int = obj.TestSafeFloor (double val)</computeroutput> - Wrappable method for script-testing of correct cross-platform functionality  </para></listitem>
<listitem>
<para><computeroutput>int = obj.TestRound (double val)</computeroutput> - Wrappable method for script-testing of correct cross-platform functionality  </para></listitem>
<listitem>
<para><computeroutput>int = obj.TestConvertFixedPointIntPart (double val)</computeroutput> - Wrappable method for script-testing of correct cross-platform functionality  </para></listitem>
<listitem>
<para><computeroutput>int = obj.TestConvertFixedPointFracPart (double val)</computeroutput> - Wrappable method for script-testing of correct cross-platform functionality  </para></listitem>
<listitem>
<para><computeroutput>obj.SetReservedFracBits (int bits)</computeroutput> - Set the number of bits reserved for fractional precision that are maintained as part of the flooring process. This number affects the flooring arithmetic. It may be useful if the factional part is to be used to index into a lookup table of some sort. However, if you are only interested in knowing the fractional remainder after flooring, there doesn&apos;t appear to be any advantage to using these bits, either in terms of a lookup table, or by directly multiplying by some unit fraction, over simply subtracting the floored value from the original value. Note that since only 32 bits are used for the entire fixed point representation, increasing the number of reserved fractional bits reduces the range of integer values that can be floored to. Add one to the requested number of fractional bits, to make the conversion safe with respect to rounding mode. This is the same as the difference between QuickFloor and SafeFloor.  </para></listitem>
<listitem>
<para><computeroutput>obj.PerformanceTests (void )</computeroutput> - Conduct timing tests so that the usefulness of this class can be ascertained on whatever platform it is being used. Output can be retrieved via Print method.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
