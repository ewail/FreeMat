<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkquadratictriangle" kind="page">
    <compoundname>vtkfiltering_vtkquadratictriangle</compoundname>
    <title>vtkQuadraticTriangle</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkQuadraticTriangle is a concrete implementation of vtkNonLinearCell to represent a two-dimensional, 6-node, isoparametric parabolic triangle. The interpolation is the standard finite element, quadratic isoparametric shape function. The cell includes three mid-edge nodes besides the three triangle vertices. The ordering of the three points defining the cell is point ids (0-2,3-5) where id #3 is the midedge node between points (0,1); id #4 is the midedge node between points (1,2); and id #5 is the midedge node between points (2,0).</para><para>To create an instance of class vtkQuadraticTriangle, simply invoke its constructor as follows <verbatim>  obj = vtkQuadraticTriangle
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkQuadraticTriangle has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkQuadraticTriangle class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadraticTriangle = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadraticTriangle = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellType ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellDimension ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfEdges ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFaces ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetEdge (int edgeId)</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetFace (int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Clip (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int insideOut)</computeroutput> - Clip this quadratic triangle using scalar value provided. Like contouring, except that it cuts the triangle to produce linear triangles.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetParametricCenter (double pcoords[3])</computeroutput> - Return the center of the quadratic triangle in parametric coordinates.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParametricDistance (double pcoords[3])</computeroutput> - Return the distance of the parametric coordinate provided to the cell. If inside the cell, a distance of zero is returned.  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateFunctions (double pcoords[3], double weights[6])</computeroutput> - Compute the interpolation functions/derivatives (aka shape functions/derivatives)  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateDerivs (double pcoords[3], double derivs[12])</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
