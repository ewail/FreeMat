<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkvolumerendering_vtkvolumemapper" kind="page">
    <compoundname>vtkvolumerendering_vtkvolumemapper</compoundname>
    <title>vtkVolumeMapper</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkvolumerendering_1sec_vtkvolumerendering" kindref="member">Visualization Toolkit Volume Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkVolumeMapper is the abstract definition of a volume mapper for regular rectilinear data (vtkImageData). Several basic types of volume mappers are supported.</para><para>To create an instance of class vtkVolumeMapper, simply invoke its constructor as follows <verbatim>  obj = vtkVolumeMapper
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkVolumeMapper has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkVolumeMapper class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVolumeMapper = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVolumeMapper = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkImageData )</computeroutput> - Set/Get the input data  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkDataSet )</computeroutput> - Set/Get the input data  </para></listitem>
<listitem>
<para><computeroutput>vtkImageData = obj.GetInput ()</computeroutput> - Set/Get the input data  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBlendMode (int )</computeroutput> - Set/Get the blend mode. Currently this is only supported by the vtkFixedPointVolumeRayCastMapper - other mappers have different ways to set this (supplying a function to a vtkVolumeRayCastMapper) or don&apos;t have any options (vtkVolumeTextureMapper2D supports only compositing)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBlendModeToComposite ()</computeroutput> - Set/Get the blend mode. Currently this is only supported by the vtkFixedPointVolumeRayCastMapper - other mappers have different ways to set this (supplying a function to a vtkVolumeRayCastMapper) or don&apos;t have any options (vtkVolumeTextureMapper2D supports only compositing)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBlendModeToMaximumIntensity ()</computeroutput> - Set/Get the blend mode. Currently this is only supported by the vtkFixedPointVolumeRayCastMapper - other mappers have different ways to set this (supplying a function to a vtkVolumeRayCastMapper) or don&apos;t have any options (vtkVolumeTextureMapper2D supports only compositing)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBlendModeToMinimumIntensity ()</computeroutput> - Set/Get the blend mode. Currently this is only supported by the vtkFixedPointVolumeRayCastMapper - other mappers have different ways to set this (supplying a function to a vtkVolumeRayCastMapper) or don&apos;t have any options (vtkVolumeTextureMapper2D supports only compositing)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetBlendMode ()</computeroutput> - Set/Get the blend mode. Currently this is only supported by the vtkFixedPointVolumeRayCastMapper - other mappers have different ways to set this (supplying a function to a vtkVolumeRayCastMapper) or don&apos;t have any options (vtkVolumeTextureMapper2D supports only compositing)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCropping (int )</computeroutput> - Turn On/Off orthogonal cropping. (Clipping planes are perpendicular to the coordinate axes.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCroppingMinValue ()</computeroutput> - Turn On/Off orthogonal cropping. (Clipping planes are perpendicular to the coordinate axes.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCroppingMaxValue ()</computeroutput> - Turn On/Off orthogonal cropping. (Clipping planes are perpendicular to the coordinate axes.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCropping ()</computeroutput> - Turn On/Off orthogonal cropping. (Clipping planes are perpendicular to the coordinate axes.)  </para></listitem>
<listitem>
<para><computeroutput>obj.CroppingOn ()</computeroutput> - Turn On/Off orthogonal cropping. (Clipping planes are perpendicular to the coordinate axes.)  </para></listitem>
<listitem>
<para><computeroutput>obj.CroppingOff ()</computeroutput> - Turn On/Off orthogonal cropping. (Clipping planes are perpendicular to the coordinate axes.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionPlanes (double , double , double , double , double , double )</computeroutput> - Set/Get the Cropping Region Planes ( xmin, xmax, ymin, ymax, zmin, zmax ) These planes are defined in volume coordinates - spacing and origin are considered.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionPlanes (double a[6])</computeroutput> - Set/Get the Cropping Region Planes ( xmin, xmax, ymin, ymax, zmin, zmax ) These planes are defined in volume coordinates - spacing and origin are considered.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetCroppingRegionPlanes ()</computeroutput> - Set/Get the Cropping Region Planes ( xmin, xmax, ymin, ymax, zmin, zmax ) These planes are defined in volume coordinates - spacing and origin are considered.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetVoxelCroppingRegionPlanes ()</computeroutput> - Get the cropping region planes in voxels. Only valid during the rendering process  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionFlags (int )</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCroppingRegionFlagsMinValue ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCroppingRegionFlagsMaxValue ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCroppingRegionFlags ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionFlagsToSubVolume ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionFlagsToFence ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionFlagsToInvertedFence ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionFlagsToCross ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCroppingRegionFlagsToInvertedCross ()</computeroutput> - Set the flags for the cropping regions. The clipping planes divide the volume into 27 regions - there is one bit for each region. The regions start from the one containing voxel (0,0,0), moving along the x axis fastest, the y axis next, and the z axis slowest. These are represented from the lowest bit to bit number 27 in the integer containing the flags. There are several convenience functions to set some common configurations - subvolume (the default), fence (between any of the clip plane pairs), inverted fence, cross (between any two of the clip plane pairs) and inverted cross.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
