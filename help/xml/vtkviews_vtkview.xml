<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkviews_vtkview" kind="page">
    <compoundname>vtkviews_vtkview</compoundname>
    <title>vtkView</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkviews_1sec_vtkviews" kindref="member">Visualization Toolkit View Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkView is the superclass for views. A view is generally an area of an application&apos;s canvas devoted to displaying one or more VTK data objects. Associated representations (subclasses of vtkDataRepresentation) are responsible for converting the data into a displayable format. These representations are then added to the view.</para><para>For views which display only one data object at a time you may set a data object or pipeline connection directly on the view itself (e.g. vtkGraphLayoutView, vtkLandscapeView, vtkTreeMapView). The view will internally create a vtkDataRepresentation for the data.</para><para>A view has the concept of linked selection. If the same data is displayed in multiple views, their selections may be linked by setting the same vtkAnnotationLink on their representations (see vtkDataRepresentation).</para><para>To create an instance of class vtkView, simply invoke its constructor as follows <verbatim>  obj = vtkView
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkView has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkView class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkView = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkView = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.AddRepresentation (vtkDataRepresentation rep)</computeroutput> - Adds the representation to the view.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentation (vtkDataRepresentation rep)</computeroutput> - Set the representation to the view.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataRepresentation = obj.AddRepresentationFromInputConnection (vtkAlgorithmOutput conn)</computeroutput> - Convenience method which creates a simple representation with the connection and adds it to the view. Returns the representation internally created. NOTE: The returned representation pointer is not reference-counted, so you MUST call Register() on the representation if you want to keep a reference to it.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataRepresentation = obj.SetRepresentationFromInputConnection (vtkAlgorithmOutput conn)</computeroutput> - Convenience method which sets the representation with the connection and adds it to the view. Returns the representation internally created. NOTE: The returned representation pointer is not reference-counted, so you MUST call Register() on the representation if you want to keep a reference to it.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataRepresentation = obj.AddRepresentationFromInput (vtkDataObject input)</computeroutput> - Convenience method which creates a simple representation with the specified input and adds it to the view. NOTE: The returned representation pointer is not reference-counted, so you MUST call Register() on the representation if you want to keep a reference to it.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataRepresentation = obj.SetRepresentationFromInput (vtkDataObject input)</computeroutput> - Convenience method which sets the representation to the specified input and adds it to the view. NOTE: The returned representation pointer is not reference-counted, so you MUST call Register() on the representation if you want to keep a reference to it.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveRepresentation (vtkDataRepresentation rep)</computeroutput> - Removes the representation from the view.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveRepresentation (vtkAlgorithmOutput rep)</computeroutput> - Removes any representation with this connection from the view.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllRepresentations ()</computeroutput> - Removes all representations from the view.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfRepresentations ()</computeroutput> - Returns the number of representations from first port(0) in this view.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataRepresentation = obj.GetRepresentation (int index)</computeroutput> - The representation at a specified index.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.IsRepresentationPresent (vtkDataRepresentation rep)</computeroutput> - Check to see if a representation is present in the view.  </para></listitem>
<listitem>
<para><computeroutput>obj.Update ()</computeroutput> - Update the view.  </para></listitem>
<listitem>
<para><computeroutput>obj.ApplyViewTheme (vtkViewTheme )</computeroutput> - Meant for use by subclasses and vtkRepresentation subclasses. Call this method to register vtkObjects (generally vtkAlgorithm subclasses) which fire vtkCommand::ProgressEvent with the view. The view listens to vtkCommand::ProgressEvent and fires ViewProgressEvent with ViewProgressEventCallData containing the message and the progress amount. If message is not provided, then the class name for the algorithm is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.RegisterProgress (vtkObject algorithm, string messageNULL)</computeroutput> - Meant for use by subclasses and vtkRepresentation subclasses. Call this method to register vtkObjects (generally vtkAlgorithm subclasses) which fire vtkCommand::ProgressEvent with the view. The view listens to vtkCommand::ProgressEvent and fires ViewProgressEvent with ViewProgressEventCallData containing the message and the progress amount. If message is not provided, then the class name for the algorithm is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.UnRegisterProgress (vtkObject algorithm)</computeroutput> - Unregister objects previously registered with RegisterProgress.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
