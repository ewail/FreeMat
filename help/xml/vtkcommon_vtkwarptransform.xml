<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkwarptransform" kind="page">
    <compoundname>vtkcommon_vtkwarptransform</compoundname>
    <title>vtkWarpTransform</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkWarpTransform provides a generic interface for nonlinear warp transformations.</para><para>To create an instance of class vtkWarpTransform, simply invoke its constructor as follows <verbatim>  obj = vtkWarpTransform
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkWarpTransform has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkWarpTransform class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWarpTransform = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWarpTransform = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Inverse ()</computeroutput> - Invert the transformation. Warp transformations are usually inverted using an iterative technique such as Newton&apos;s method. The inverse transform is usually around five or six times as computationally expensive as the forward transform.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInverseFlag ()</computeroutput> - Get the inverse flag of the transformation. This flag is set to zero when the transformation is first created, and is flipped each time Inverse() is called.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInverseTolerance (double )</computeroutput> - Set the tolerance for inverse transformation. The default is 0.001.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetInverseTolerance ()</computeroutput> - Set the tolerance for inverse transformation. The default is 0.001.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInverseIterations (int )</computeroutput> - Set the maximum number of iterations for the inverse transformation. The default is 500, but usually only 2 to 5 iterations are used. The inversion method is fairly robust, and it should converge for nearly all smooth transformations that do not fold back on themselves.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInverseIterations ()</computeroutput> - Set the maximum number of iterations for the inverse transformation. The default is 500, but usually only 2 to 5 iterations are used. The inversion method is fairly robust, and it should converge for nearly all smooth transformations that do not fold back on themselves.  </para></listitem>
<listitem>
<para><computeroutput>obj.InternalTransformPoint (float in[3], float out[3])</computeroutput> - This will calculate the transformation without calling Update. Meant for use only within other VTK classes.  </para></listitem>
<listitem>
<para><computeroutput>obj.InternalTransformPoint (double in[3], double out[3])</computeroutput> - This will calculate the transformation without calling Update. Meant for use only within other VTK classes.  </para></listitem>
<listitem>
<para><computeroutput>obj.TemplateTransformPoint (float in[3], float out[3])</computeroutput> - Do not use these methods. They exists only as a work-around for internal templated functions (I really didn&apos;t want to make the Forward/Inverse methods public, is there a decent work around for this sort of thing?)  </para></listitem>
<listitem>
<para><computeroutput>obj.TemplateTransformPoint (double in[3], double out[3])</computeroutput> - Do not use these methods. They exists only as a work-around for internal templated functions (I really didn&apos;t want to make the Forward/Inverse methods public, is there a decent work around for this sort of thing?)  </para></listitem>
<listitem>
<para><computeroutput>obj.TemplateTransformInverse (float in[3], float out[3])</computeroutput> - Do not use these methods. They exists only as a work-around for internal templated functions (I really didn&apos;t want to make the Forward/Inverse methods public, is there a decent work around for this sort of thing?)  </para></listitem>
<listitem>
<para><computeroutput>obj.TemplateTransformInverse (double in[3], double out[3])</computeroutput> - Do not use these methods. They exists only as a work-around for internal templated functions (I really didn&apos;t want to make the Forward/Inverse methods public, is there a decent work around for this sort of thing?)  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
