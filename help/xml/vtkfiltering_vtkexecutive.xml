<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkexecutive" kind="page">
    <compoundname>vtkfiltering_vtkexecutive</compoundname>
    <title>vtkExecutive</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkExecutive is the superclass for all pipeline executives in VTK. A VTK executive is responsible for controlling one instance of vtkAlgorithm. A pipeline consists of one or more executives that control data flow. Every reader, source, writer, or data processing algorithm in the pipeline is implemented in an instance of vtkAlgorithm.</para><para>To create an instance of class vtkExecutive, simply invoke its constructor as follows <verbatim>  obj = vtkExecutive
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkExecutive has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkExecutive class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkExecutive = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkExecutive = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAlgorithm = obj.GetAlgorithm ()</computeroutput> - Get the algorithm to which this executive has been assigned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Update ()</computeroutput> - Bring the algorithm&apos;s outputs up-to-date. Returns 1 for success and 0 for failure.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Update (int port)</computeroutput> - Bring the algorithm&apos;s outputs up-to-date. Returns 1 for success and 0 for failure.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfInputPorts ()</computeroutput> - Get the number of input/output ports for the algorithm associated with this executive. Returns 0 if no algorithm is set.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfOutputPorts ()</computeroutput> - Get the number of input/output ports for the algorithm associated with this executive. Returns 0 if no algorithm is set.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfInputConnections (int port)</computeroutput> - Get the number of input connections on the given port.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformation = obj.GetOutputInformation (int port)</computeroutput> - Get the pipeline information object for the given output port.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformationVector = obj.GetOutputInformation ()</computeroutput> - Get the pipeline information object for all output ports.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformation = obj.GetInputInformation (int port, int connection)</computeroutput> - Get the pipeline information for the given input connection.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformationVector = obj.GetInputInformation (int port)</computeroutput> - Get the pipeline information vectors for the given input port.  </para></listitem>
<listitem>
<para><computeroutput>vtkExecutive = obj.GetInputExecutive (int port, int connection)</computeroutput> - Get the executive managing the given input connection.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetOutputData (int port)</computeroutput> - Get/Set the data object for an output port of the algorithm.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputData (int port, vtkDataObject , vtkInformation info)</computeroutput> - Get/Set the data object for an output port of the algorithm.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputData (int port, vtkDataObject )</computeroutput> - Get/Set the data object for an output port of the algorithm.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetInputData (int port, int connection)</computeroutput> - Get the data object for an input port of the algorithm.  </para></listitem>
<listitem>
<para><computeroutput>vtkAlgorithmOutput = obj.GetProducerPort (vtkDataObject )</computeroutput> - Get the output port that produces the given data object.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSharedOutputInformation (vtkInformationVector outInfoVec)</computeroutput> - Set a pointer to an outside instance of input or output information vectors. No references are held to the given vectors, and setting this does not change the executive object modification time. This is a preliminary interface to use in implementing filters with internal pipelines, and may change without notice when a future interface is created.  </para></listitem>
<listitem>
<para><computeroutput>obj.Register (vtkObjectBase o)</computeroutput> - Participate in garbage collection.  </para></listitem>
<listitem>
<para><computeroutput>obj.UnRegister (vtkObjectBase o)</computeroutput> - Participate in garbage collection.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
