<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="flow_continue" kind="page">
    <compoundname>flow_continue</compoundname>
    <title>CONTINUE Continue Execution In Loop</title>
    <detaileddescription>
<para>Section: <ref refid="sec_flow_1sec_flow" kindref="member">Flow Control</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>continue</computeroutput> statement is used to change the order of execution within a loop. The <computeroutput>continue</computeroutput> statement can be used inside a <computeroutput>for</computeroutput> loop or a <computeroutput>while</computeroutput> loop. The syntax for its use is <verbatim>   continue
</verbatim> inside the body of the loop. The <computeroutput>continue</computeroutput> statement forces execution to start at the top of the loop with the next iteration. The examples section shows how the <computeroutput>continue</computeroutput> statement works. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is a simple example of using a <computeroutput>continue</computeroutput> statement. We want to sum the integers from <computeroutput>1</computeroutput> to <computeroutput>10</computeroutput>, but not the number <computeroutput>5</computeroutput>. We will use a <computeroutput>for</computeroutput> loop and a continue statement.</para><para><verbatim>     continue_ex.m
</verbatim></para><para><verbatim>function accum = continue_ex
  accum = 0;
  for i=1:10
    if (i==5)
      continue;
    end
    accum = accum + 1; %skipped if i == 5!
  end
</verbatim></para><para>The function is exercised here:</para><para><verbatim>--&gt; continue_ex

ans = 
 9 

--&gt; sum([1:4,6:10])

ans = 
 50 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
