<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimageflip" kind="page">
    <compoundname>vtkimaging_vtkimageflip</compoundname>
    <title>vtkImageFlip</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageFlip will reflect the data along the filtered axis. This filter is actually a thin wrapper around vtkImageReslice.</para><para>To create an instance of class vtkImageFlip, simply invoke its constructor as follows <verbatim>  obj = vtkImageFlip
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageFlip has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageFlip class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageFlip = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageFlip = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilteredAxis (int )</computeroutput> - Specify which axis will be flipped. This must be an integer between 0 (for x) and 2 (for z). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFilteredAxis ()</computeroutput> - Specify which axis will be flipped. This must be an integer between 0 (for x) and 2 (for z). Initial value is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFlipAboutOrigin (int )</computeroutput> - By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input. However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image. This method will adjust the Origin of the output such that the flip occurs about (0,0,0). Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used. Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a vtkImageData.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFlipAboutOrigin ()</computeroutput> - By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input. However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image. This method will adjust the Origin of the output such that the flip occurs about (0,0,0). Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used. Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a vtkImageData.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlipAboutOriginOn ()</computeroutput> - By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input. However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image. This method will adjust the Origin of the output such that the flip occurs about (0,0,0). Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used. Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a vtkImageData.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlipAboutOriginOff ()</computeroutput> - By default the image will be flipped about its center, and the Origin, Spacing and Extent of the output will be identical to the input. However, if you have a coordinate system associated with the image and you want to use the flip to convert +ve values along one axis to -ve values (and vice versa) then you actually want to flip the image about coordinate (0,0,0) instead of about the center of the image. This method will adjust the Origin of the output such that the flip occurs about (0,0,0). Note that this method only changes the Origin (and hence the coordinate system) the output data: the actual pixel values are the same whether or not this method is used. Also note that the Origin in this method name refers to (0,0,0) in the coordinate system associated with the image, it does not refer to the Origin ivar that is associated with a vtkImageData.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilteredAxes (int axis)</computeroutput> - Keep the mis-named Axes variations around for compatibility with old scripts. Axis is singular, not plural...  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFilteredAxes ()</computeroutput> - PreserveImageExtentOff wasn&apos;t covered by test scripts and its implementation was broken. It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPreserveImageExtent (int )</computeroutput> - PreserveImageExtentOff wasn&apos;t covered by test scripts and its implementation was broken. It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPreserveImageExtent ()</computeroutput> - PreserveImageExtentOff wasn&apos;t covered by test scripts and its implementation was broken. It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).  </para></listitem>
<listitem>
<para><computeroutput>obj.PreserveImageExtentOn ()</computeroutput> - PreserveImageExtentOff wasn&apos;t covered by test scripts and its implementation was broken. It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).  </para></listitem>
<listitem>
<para><computeroutput>obj.PreserveImageExtentOff ()</computeroutput> - PreserveImageExtentOff wasn&apos;t covered by test scripts and its implementation was broken. It is deprecated now and it has no effect (i.e. the ImageExtent is always preserved).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
