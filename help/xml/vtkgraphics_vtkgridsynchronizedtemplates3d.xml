<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkgridsynchronizedtemplates3d" kind="page">
    <compoundname>vtkgraphics_vtkgridsynchronizedtemplates3d</compoundname>
    <title>vtkGridSynchronizedTemplates3D</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkGridSynchronizedTemplates3D is a 3D implementation of the synchronized template algorithm.</para><para>To create an instance of class vtkGridSynchronizedTemplates3D, simply invoke its constructor as follows <verbatim>  obj = vtkGridSynchronizedTemplates3D
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGridSynchronizedTemplates3D has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGridSynchronizedTemplates3D class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGridSynchronizedTemplates3D = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGridSynchronizedTemplates3D = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Because we delegate to vtkContourValues  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeNormals (int )</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeNormals ()</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeNormalsOn ()</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeNormalsOff ()</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeGradients (int )</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeGradients ()</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeGradientsOn ()</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeGradientsOff ()</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeScalars (int )</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeScalars ()</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeScalarsOn ()</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeScalarsOff ()</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetValue (int i, double value)</computeroutput> - Get the ith contour value.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetValue (int i)</computeroutput> - Get a pointer to an array of contour values. There will be GetNumberOfContours() values in the list.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetValues (double contourValues)</computeroutput> - Set the number of contours to place into the list. You only really need to use this method to reduce list size. The method SetValue() will automatically increase list size as needed.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfContours (int number)</computeroutput> - Get the number of contours in the list of contour values.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfContours ()</computeroutput> - Generate numContours equally spaced contour values between specified range. Contour values will include min/max range values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateValues (int numContours, double range[2])</computeroutput> - Generate numContours equally spaced contour values between specified range. Contour values will include min/max range values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateValues (int numContours, double rangeStart, double rangeEnd)</computeroutput> - Needed by templated functions.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetExecuteExtent ()</computeroutput> - Needed by templated functions.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInputMemoryLimit (long limit)</computeroutput> - This filter will initiate streaming so that no piece requested from the input will be larger than this value (KiloBytes).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
