<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtk3dwidget" kind="page">
    <compoundname>vtkwidgets_vtk3dwidget</compoundname>
    <title>vtk3DWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtk3DWidget is an abstract superclass for 3D interactor observers. These 3D widgets represent themselves in the scene, and have special callbacks associated with them that allows interactive manipulation of the widget. Inparticular, the difference between a vtk3DWidget and its abstract superclass vtkInteractorObserver is that vtk3DWidgets are &quot;placed&quot; in 3D space. vtkInteractorObservers have no notion of where they are placed, and may not exist in 3D space at all. 3D widgets also provide auxiliary functions like producing a transformation, creating polydata (for seeding streamlines, probes, etc.) or creating implicit functions. See the concrete subclasses for particulars.</para><para>Typically the widget is used by specifying a vtkProp3D or VTK dataset as input, and then invoking the &quot;On&quot; method to activate it. (You can also specify a bounding box to help position the widget.) Prior to invoking the On() method, the user may also wish to use the PlaceWidget() to initially position it. The &apos;i&apos; (for &quot;interactor&quot;) keypresses also can be used to turn the widgets on and off (methods exist to change the key value and enable keypress activiation).</para><para>To support interactive manipulation of objects, this class (and subclasses) invoke the events StartInteractionEvent, InteractionEvent, and EndInteractionEvent. These events are invoked when the vtk3DWidget enters a state where rapid response is desired: mouse motion, etc. The events can be used, for example, to set the desired update frame rate (StartInteractionEvent), operate on the vtkProp3D or other object (InteractionEvent), and set the desired frame rate back to normal values (EndInteractionEvent).</para><para>Note that the Priority attribute inherited from vtkInteractorObserver has a new default value which is now 0.5 so that all 3D widgets have a higher priority than the usual interactor styles.</para><para>To create an instance of class vtk3DWidget, simply invoke its constructor as follows <verbatim>  obj = vtk3DWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtk3DWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtk3DWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtk3DWidget = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtk3DWidget = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double bounds[6])</computeroutput> - This method is used to initially place the widget. The placement of the widget depends on whether a Prop3D or input dataset is provided. If one of these two is provided, they will be used to obtain a bounding box, around which the widget is placed. Otherwise, you can manually specify a bounds with the PlaceWidget(bounds) method. Note: PlaceWidget(bounds) is required by all subclasses; the other methods are provided as convenience methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget ()</computeroutput> - This method is used to initially place the widget. The placement of the widget depends on whether a Prop3D or input dataset is provided. If one of these two is provided, they will be used to obtain a bounding box, around which the widget is placed. Otherwise, you can manually specify a bounds with the PlaceWidget(bounds) method. Note: PlaceWidget(bounds) is required by all subclasses; the other methods are provided as convenience methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - This method is used to initially place the widget. The placement of the widget depends on whether a Prop3D or input dataset is provided. If one of these two is provided, they will be used to obtain a bounding box, around which the widget is placed. Otherwise, you can manually specify a bounds with the PlaceWidget(bounds) method. Note: PlaceWidget(bounds) is required by all subclasses; the other methods are provided as convenience methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProp3D (vtkProp3D )</computeroutput> - Specify a vtkProp3D around which to place the widget. This is not required, but if supplied, it is used to initially position the widget.  </para></listitem>
<listitem>
<para><computeroutput>vtkProp3D = obj.GetProp3D ()</computeroutput> - Specify a vtkProp3D around which to place the widget. This is not required, but if supplied, it is used to initially position the widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkDataSet )</computeroutput> - Specify the input dataset. This is not required, but if supplied, and no vtkProp3D is specified, it is used to initially position the widget.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.GetInput ()</computeroutput> - Specify the input dataset. This is not required, but if supplied, and no vtkProp3D is specified, it is used to initially position the widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlaceFactor (double )</computeroutput> - Set/Get a factor representing the scaling of the widget upon placement (via the PlaceWidget() method). Normally the widget is placed so that it just fits within the bounding box defined in PlaceWidget(bounds). The PlaceFactor will make the widget larger (PlaceFactor &gt; 1) or smaller (PlaceFactor &lt; 1). By default, PlaceFactor is set to 0.5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPlaceFactorMinValue ()</computeroutput> - Set/Get a factor representing the scaling of the widget upon placement (via the PlaceWidget() method). Normally the widget is placed so that it just fits within the bounding box defined in PlaceWidget(bounds). The PlaceFactor will make the widget larger (PlaceFactor &gt; 1) or smaller (PlaceFactor &lt; 1). By default, PlaceFactor is set to 0.5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPlaceFactorMaxValue ()</computeroutput> - Set/Get a factor representing the scaling of the widget upon placement (via the PlaceWidget() method). Normally the widget is placed so that it just fits within the bounding box defined in PlaceWidget(bounds). The PlaceFactor will make the widget larger (PlaceFactor &gt; 1) or smaller (PlaceFactor &lt; 1). By default, PlaceFactor is set to 0.5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPlaceFactor ()</computeroutput> - Set/Get a factor representing the scaling of the widget upon placement (via the PlaceWidget() method). Normally the widget is placed so that it just fits within the bounding box defined in PlaceWidget(bounds). The PlaceFactor will make the widget larger (PlaceFactor &gt; 1) or smaller (PlaceFactor &lt; 1). By default, PlaceFactor is set to 0.5.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleSize (double )</computeroutput> - Set/Get the factor that controls the size of the handles that appear as part of the widget. These handles (like spheres, etc.) are used to manipulate the widget, and are sized as a fraction of the screen diagonal.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHandleSizeMinValue ()</computeroutput> - Set/Get the factor that controls the size of the handles that appear as part of the widget. These handles (like spheres, etc.) are used to manipulate the widget, and are sized as a fraction of the screen diagonal.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHandleSizeMaxValue ()</computeroutput> - Set/Get the factor that controls the size of the handles that appear as part of the widget. These handles (like spheres, etc.) are used to manipulate the widget, and are sized as a fraction of the screen diagonal.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHandleSize ()</computeroutput> - Set/Get the factor that controls the size of the handles that appear as part of the widget. These handles (like spheres, etc.) are used to manipulate the widget, and are sized as a fraction of the screen diagonal.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
