<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkdummycontroller" kind="page">
    <compoundname>vtkparallel_vtkdummycontroller</compoundname>
    <title>vtkDummyController</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This is a dummy controller which can be used by applications which always require a controller but are also compile on systems without threads or mpi.</para><para>To create an instance of class vtkDummyController, simply invoke its constructor as follows <verbatim>  obj = vtkDummyController
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkDummyController has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkDummyController class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDummyController = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDummyController = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Finalize ()</computeroutput> - This method is for setting up the processes.  </para></listitem>
<listitem>
<para><computeroutput>obj.Finalize (int )</computeroutput> - This method always returns 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLocalProcessId ()</computeroutput> - Directly calls the single method.  </para></listitem>
<listitem>
<para><computeroutput>obj.SingleMethodExecute ()</computeroutput> - Directly calls the single method.  </para></listitem>
<listitem>
<para><computeroutput>obj.MultipleMethodExecute ()</computeroutput> - Directly calls multiple method 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.CreateOutputWindow ()</computeroutput> - If you don&apos;t need any special functionality from the controller, you can swap out the dummy communicator for another one.  </para></listitem>
<listitem>
<para><computeroutput>vtkCommunicator = obj.GetCommunicator ()</computeroutput> - If you don&apos;t need any special functionality from the controller, you can swap out the dummy communicator for another one.  </para></listitem>
<listitem>
<para><computeroutput>vtkCommunicator = obj.GetRMICommunicator ()</computeroutput> - If you don&apos;t need any special functionality from the controller, you can swap out the dummy communicator for another one.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCommunicator (vtkCommunicator )</computeroutput> - If you don&apos;t need any special functionality from the controller, you can swap out the dummy communicator for another one.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRMICommunicator (vtkCommunicator )</computeroutput> - If you don&apos;t need any special functionality from the controller, you can swap out the dummy communicator for another one.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
