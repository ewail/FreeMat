<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimageappend" kind="page">
    <compoundname>vtkimaging_vtkimageappend</compoundname>
    <title>vtkImageAppend</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageAppend takes the components from multiple inputs and merges them into one output. The output images are append along the &quot;AppendAxis&quot;. Except for the append axis, all inputs must have the same extent. All inputs must have the same number of scalar components. A future extension might be to pad or clip inputs to have the same extent. The output has the same origin and spacing as the first input. The origin and spacing of all other inputs are ignored. All inputs must have the same scalar type.</para><para>To create an instance of class vtkImageAppend, simply invoke its constructor as follows <verbatim>  obj = vtkImageAppend
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageAppend has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageAppend class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageAppend = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageAppend = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.ReplaceNthInputConnection (int idx, vtkAlgorithmOutput input)</computeroutput> - Replace one of the input connections with a new input. You can only replace input connections that you previously created with AddInputConnection() or, in the case of the first input, with SetInputConnection().  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (int num, vtkDataObject input)</computeroutput> - Set an Input of this filter. This method is only for support of old-style pipeline connections. When writing new code you should use SetInputConnection(), AddInputConnection(), and ReplaceNthInputConnection() instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkDataObject input)</computeroutput> - Set an Input of this filter. This method is only for support of old-style pipeline connections. When writing new code you should use SetInputConnection(), AddInputConnection(), and ReplaceNthInputConnection() instead.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetInput (int num)</computeroutput> - Get one input to this filter. This method is only for support of old-style pipeline connections. When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetInput ()</computeroutput> - Get one input to this filter. This method is only for support of old-style pipeline connections. When writing new code you should use vtkAlgorithm::GetInputConnection(0, num).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfInputs ()</computeroutput> - Get the number of inputs to this filter. This method is only for support of old-style pipeline connections. When writing new code you should use vtkAlgorithm::GetNumberOfInputConnections(0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAppendAxis (int )</computeroutput> - This axis is expanded to hold the multiple images. The default AppendAxis is the X axis. If you want to create a volue from a series of XY images, then you should set the AppendAxis to 2 (Z axis).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAppendAxis ()</computeroutput> - This axis is expanded to hold the multiple images. The default AppendAxis is the X axis. If you want to create a volue from a series of XY images, then you should set the AppendAxis to 2 (Z axis).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPreserveExtents (int )</computeroutput> - By default &quot;PreserveExtents&quot; is off and the append axis is used. When &quot;PreseveExtents&quot; is on, the extent of the inputs is used to place the image in the output. The whole extent of the output is the union of the input whole extents. Any portion of the output not covered by the inputs is set to zero. The origin and spacing is taken from the first input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPreserveExtents ()</computeroutput> - By default &quot;PreserveExtents&quot; is off and the append axis is used. When &quot;PreseveExtents&quot; is on, the extent of the inputs is used to place the image in the output. The whole extent of the output is the union of the input whole extents. Any portion of the output not covered by the inputs is set to zero. The origin and spacing is taken from the first input.  </para></listitem>
<listitem>
<para><computeroutput>obj.PreserveExtentsOn ()</computeroutput> - By default &quot;PreserveExtents&quot; is off and the append axis is used. When &quot;PreseveExtents&quot; is on, the extent of the inputs is used to place the image in the output. The whole extent of the output is the union of the input whole extents. Any portion of the output not covered by the inputs is set to zero. The origin and spacing is taken from the first input.  </para></listitem>
<listitem>
<para><computeroutput>obj.PreserveExtentsOff ()</computeroutput> - By default &quot;PreserveExtents&quot; is off and the append axis is used. When &quot;PreseveExtents&quot; is on, the extent of the inputs is used to place the image in the output. The whole extent of the output is the union of the input whole extents. Any portion of the output not covered by the inputs is set to zero. The origin and spacing is taken from the first input.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
