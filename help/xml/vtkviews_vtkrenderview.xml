<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkviews_vtkrenderview" kind="page">
    <compoundname>vtkviews_vtkrenderview</compoundname>
    <title>vtkRenderView</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkviews_1sec_vtkviews" kindref="member">Visualization Toolkit View Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRenderView is a view which contains a vtkRenderer. You may add vtkActors directly to the renderer, or add certain vtkDataRepresentation subclasses to the renderer. The render view supports drag selection with the mouse to select cells.</para><para>This class is also the parent class for any more specialized view which uses a renderer.</para><para>To create an instance of class vtkRenderView, simply invoke its constructor as follows <verbatim>  obj = vtkRenderView
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRenderView has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRenderView class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderView = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderView = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderer = obj.GetRenderer ()</computeroutput> - Gets the renderer for this view.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderWindow = obj.GetRenderWindow ()</computeroutput> - Get a handle to the render window.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderWindowInteractor = obj.GetInteractor ()</computeroutput> - The render window interactor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractor (vtkRenderWindowInteractor interactor)</computeroutput> - The render window interactor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractorStyle (vtkInteractorObserver style)</computeroutput> - The interactor style associated with the render view.  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorObserver = obj.GetInteractorStyle ()</computeroutput> - The interactor style associated with the render view.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractionMode (int mode)</computeroutput> - Set the interaction mode for the view. Choices are: vtkRenderView::INTERACTION_MODE_2D - 2D interactor vtkRenderView::INTERACTION_MODE_3D - 3D interactor  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInteractionMode ()</computeroutput> - Set the interaction mode for the view. Choices are: vtkRenderView::INTERACTION_MODE_2D - 2D interactor vtkRenderView::INTERACTION_MODE_3D - 3D interactor  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractionModeTo2D ()</computeroutput> - Set the interaction mode for the view. Choices are: vtkRenderView::INTERACTION_MODE_2D - 2D interactor vtkRenderView::INTERACTION_MODE_3D - 3D interactor  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractionModeTo3D ()</computeroutput> - Applies a view theme to this view.  </para></listitem>
<listitem>
<para><computeroutput>obj.ApplyViewTheme (vtkViewTheme theme)</computeroutput> - Applies a view theme to this view.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTransform (vtkAbstractTransform transform)</computeroutput> - Set the view&apos;s transform. All vtkRenderedRepresentations added to this view should use this transform.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractTransform = obj.GetTransform ()</computeroutput> - Set the view&apos;s transform. All vtkRenderedRepresentations added to this view should use this transform.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDisplayHoverText (bool b)</computeroutput> - Whether the view should display hover text.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetDisplayHoverText ()</computeroutput> - Whether the view should display hover text.  </para></listitem>
<listitem>
<para><computeroutput>obj.DisplayHoverTextOn ()</computeroutput> - Whether the view should display hover text.  </para></listitem>
<listitem>
<para><computeroutput>obj.DisplayHoverTextOff ()</computeroutput> - Whether the view should display hover text.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSelectionMode (int )</computeroutput> - Sets the selection mode for the render view. SURFACE selection uses vtkHardwareSelector to perform a selection of visible cells. FRUSTUM selection just creates a view frustum selection, which will select everything in the frustum.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSelectionModeMinValue ()</computeroutput> - Sets the selection mode for the render view. SURFACE selection uses vtkHardwareSelector to perform a selection of visible cells. FRUSTUM selection just creates a view frustum selection, which will select everything in the frustum.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSelectionModeMaxValue ()</computeroutput> - Sets the selection mode for the render view. SURFACE selection uses vtkHardwareSelector to perform a selection of visible cells. FRUSTUM selection just creates a view frustum selection, which will select everything in the frustum.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSelectionMode ()</computeroutput> - Sets the selection mode for the render view. SURFACE selection uses vtkHardwareSelector to perform a selection of visible cells. FRUSTUM selection just creates a view frustum selection, which will select everything in the frustum.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSelectionModeToSurface ()</computeroutput> - Sets the selection mode for the render view. SURFACE selection uses vtkHardwareSelector to perform a selection of visible cells. FRUSTUM selection just creates a view frustum selection, which will select everything in the frustum.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSelectionModeToFrustum ()</computeroutput> - Updates the representations, then calls Render() on the render window associated with this view.  </para></listitem>
<listitem>
<para><computeroutput>obj.Render ()</computeroutput> - Updates the representations, then calls Render() on the render window associated with this view.  </para></listitem>
<listitem>
<para><computeroutput>obj.ResetCamera ()</computeroutput> - Updates the representations, then calls ResetCamera() on the renderer associated with this view.  </para></listitem>
<listitem>
<para><computeroutput>obj.ResetCameraClippingRange ()</computeroutput> - Updates the representations, then calls ResetCameraClippingRange() on the renderer associated with this view.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddLabels (vtkAlgorithmOutput conn)</computeroutput> - Add labels from an input connection with an associated text property. The output must be a vtkLabelHierarchy (normally the output of vtkPointSetToLabelHierarchy).  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveLabels (vtkAlgorithmOutput conn)</computeroutput> - Remove labels from an input connection.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIconTexture (vtkTexture texture)</computeroutput> - Set the icon sheet to use for rendering icons.  </para></listitem>
<listitem>
<para><computeroutput>vtkTexture = obj.GetIconTexture ()</computeroutput> - Set the icon sheet to use for rendering icons.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIconSize (int , int )</computeroutput> - Set the size of each icon in the icon texture.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIconSize (int a[2])</computeroutput> - Set the size of each icon in the icon texture.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetIconSize ()</computeroutput> - Set the size of each icon in the icon texture.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLabelPlacementMode (int mode)</computeroutput> - Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper, which has a faster startup time and works with 2D or 3D labels. ALL displays all labels (Warning: This may cause incredibly slow render times on datasets with more than a few hundred labels).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLabelPlacementMode ()</computeroutput> - Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper, which has a faster startup time and works with 2D or 3D labels. ALL displays all labels (Warning: This may cause incredibly slow render times on datasets with more than a few hundred labels).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLabelPlacementModeToNoOverlap ()</computeroutput> - Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper, which has a faster startup time and works with 2D or 3D labels. ALL displays all labels (Warning: This may cause incredibly slow render times on datasets with more than a few hundred labels).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLabelPlacementModeToAll ()</computeroutput> - Label render mode. FREETYPE uses the freetype label rendering. QT uses more advanced Qt-based label rendering.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLabelRenderMode (int mode)</computeroutput> - Label render mode. FREETYPE uses the freetype label rendering. QT uses more advanced Qt-based label rendering.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLabelRenderMode ()</computeroutput> - Label render mode. FREETYPE uses the freetype label rendering. QT uses more advanced Qt-based label rendering.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLabelRenderModeToFreetype ()</computeroutput> - Label render mode. FREETYPE uses the freetype label rendering. QT uses more advanced Qt-based label rendering.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLabelRenderModeToQt ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
