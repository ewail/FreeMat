<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtksphericaltransform" kind="page">
    <compoundname>vtkcommon_vtksphericaltransform</compoundname>
    <title>vtkSphericalTransform</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkSphericalTransform will convert (r,phi,theta) coordinates to (x,y,z) coordinates and back again. The angles are given in radians. By default, it converts spherical coordinates to rectangular, but GetInverse() returns a transform that will do the opposite. The equation that is used is x = r*sin(phi)*cos(theta), y = r*sin(phi)*sin(theta), z = r*cos(phi).</para><para>To create an instance of class vtkSphericalTransform, simply invoke its constructor as follows <verbatim>  obj = vtkSphericalTransform
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSphericalTransform has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSphericalTransform class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphericalTransform = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphericalTransform = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractTransform = obj.MakeTransform ()</computeroutput> - Make another transform of the same type.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
