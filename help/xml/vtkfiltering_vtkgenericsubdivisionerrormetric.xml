<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkgenericsubdivisionerrormetric" kind="page">
    <compoundname>vtkfiltering_vtkgenericsubdivisionerrormetric</compoundname>
    <title>vtkGenericSubdivisionErrorMetric</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Objects of that class answer the following question during the cell subdivision: &quot;does the edge need to be subdivided?&quot; through RequiresEdgeSubdivision(). The answer depends on the criterium actually used in the subclass of this abstract class: a geometric-based error metric (variation of edge from a straight line), an attribute-based error metric (variation of the active attribute/component value from a linear ramp) , a view-depend error metric, ... Cell subdivision is performed in the context of the adaptor framework: higher-order, or complex cells, are automatically tessellated into simplices so that they can be processed with conventional visualization algorithms.</para><para>To create an instance of class vtkGenericSubdivisionErrorMetric, simply invoke its constructor as follows <verbatim>  obj = vtkGenericSubdivisionErrorMetric
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGenericSubdivisionErrorMetric has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGenericSubdivisionErrorMetric class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard VTK type and error macros.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard VTK type and error macros.  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericSubdivisionErrorMetric = obj.NewInstance ()</computeroutput> - Standard VTK type and error macros.  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericSubdivisionErrorMetric = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard VTK type and error macros.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RequiresEdgeSubdivision (double leftPoint, double midPoint, double rightPoint, double alpha)</computeroutput> - Does the edge need to be subdivided according to the implemented computation? The edge is defined by its `leftPoint&apos; and its `rightPoint&apos;. `leftPoint&apos;, `midPoint&apos; and `rightPoint&apos; have to be initialized before calling RequiresEdgeSubdivision(). Their format is global coordinates, parametric coordinates and point centered attributes: xyx rst abc de... `alpha&apos; is the normalized abscissa of the midpoint along the edge. (close to 0 means close to the left point, close to 1 means close to the right point) <simplesect kind="pre"><para>leftPoint_exists: leftPoint!=0 </para><simplesectsep/><para>midPoint_exists: midPoint!=0 </para><simplesectsep/><para>rightPoint_exists: rightPoint!=0 </para><simplesectsep/><para>clamped_alpha: alpha&gt;0 &amp;&amp; alpha&lt;1 </para><simplesectsep/><para>valid_size: sizeof(leftPoint)=sizeof(midPoint)=sizeof(rightPoint) =GetAttributeCollection()-&gt;GetNumberOfPointCenteredComponents()+6  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>double = obj.GetError (double leftPoint, double midPoint, double rightPoint, double alpha)</computeroutput> - Return the error at the mid-point. The type of error depends on the state of the concrete error metric. For instance, it can return an absolute or relative error metric. See RequiresEdgeSubdivision() for a description of the arguments. <simplesect kind="pre"><para>leftPoint_exists: leftPoint!=0 </para><simplesectsep/><para>midPoint_exists: midPoint!=0 </para><simplesectsep/><para>rightPoint_exists: rightPoint!=0 </para><simplesectsep/><para>clamped_alpha: alpha&gt;0 &amp;&amp; alpha&lt;1 </para><simplesectsep/><para>valid_size: sizeof(leftPoint)=sizeof(midPoint)=sizeof(rightPoint) =GetAttributeCollection()-&gt;GetNumberOfPointCenteredComponents()+6 </para></simplesect>
<simplesect kind="post"><para>positive_result: result&gt;=0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetGenericCell (vtkGenericAdaptorCell cell)</computeroutput> - The cell that the edge belongs to.  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericAdaptorCell = obj.GetGenericCell ()</computeroutput> - The cell that the edge belongs to.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataSet (vtkGenericDataSet ds)</computeroutput> - Set/Get the dataset to be tessellated.  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericDataSet = obj.GetDataSet ()</computeroutput> - Set/Get the dataset to be tessellated.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
