<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkhybrid_vtkweightedtransformfilter" kind="page">
    <compoundname>vtkhybrid_vtkweightedtransformfilter</compoundname>
    <title>vtkWeightedTransformFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkhybrid_1sec_vtkhybrid" kindref="member">Visualization Toolkit Hybrid Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>To create an instance of class vtkWeightedTransformFilter, simply invoke its constructor as follows <verbatim>  obj = vtkWeightedTransformFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkWeightedTransformFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkWeightedTransformFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWeightedTransformFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWeightedTransformFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Return the MTime also considering the filter&apos;s transforms.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWeightArray (string )</computeroutput> - WeightArray is the string name of the DataArray in the input&apos;s FieldData that holds the weighting coefficients for each point. The filter will first look for the array in the input&apos;s PointData FieldData. If the array isn&apos;t there, the filter looks in the input&apos;s FieldData. The WeightArray can have tuples of any length, but must have a tuple for every point in the input data set. This array transforms points, normals, and vectors.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetWeightArray ()</computeroutput> - WeightArray is the string name of the DataArray in the input&apos;s FieldData that holds the weighting coefficients for each point. The filter will first look for the array in the input&apos;s PointData FieldData. If the array isn&apos;t there, the filter looks in the input&apos;s FieldData. The WeightArray can have tuples of any length, but must have a tuple for every point in the input data set. This array transforms points, normals, and vectors.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTransformIndexArray (string )</computeroutput> - TransformIndexArray is the string name of the DataArray in the input&apos;s FieldData that holds the indices for the transforms for each point. These indices are used to select which transforms each weight of the DataArray refers. If the TransformIndexArray is not specified, the weights of each point are assumed to map directly to a transform. This DataArray must be of type UnsignedShort, which effectively limits the number of transforms to 65536 if a transform index array is used.</para><para>The filter will first look for the array in the input&apos;s PointData FieldData. If the array isn&apos;t there, the filter looks in the input&apos;s FieldData. The TransformIndexArray can have tuples of any length, but must have a tuple for every point in the input data set. This array transforms points, normals, and vectors.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetTransformIndexArray ()</computeroutput> - TransformIndexArray is the string name of the DataArray in the input&apos;s FieldData that holds the indices for the transforms for each point. These indices are used to select which transforms each weight of the DataArray refers. If the TransformIndexArray is not specified, the weights of each point are assumed to map directly to a transform. This DataArray must be of type UnsignedShort, which effectively limits the number of transforms to 65536 if a transform index array is used.</para><para>The filter will first look for the array in the input&apos;s PointData FieldData. If the array isn&apos;t there, the filter looks in the input&apos;s FieldData. The TransformIndexArray can have tuples of any length, but must have a tuple for every point in the input data set. This array transforms points, normals, and vectors.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCellDataWeightArray (string )</computeroutput> - The CellDataWeightArray is analogous to the WeightArray, except for CellData. The array is searched for first in the CellData FieldData, then in the input&apos;s FieldData. The data array must have a tuple for each cell. This array is used to transform only normals and vectors.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetCellDataWeightArray ()</computeroutput> - The CellDataWeightArray is analogous to the WeightArray, except for CellData. The array is searched for first in the CellData FieldData, then in the input&apos;s FieldData. The data array must have a tuple for each cell. This array is used to transform only normals and vectors.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCellDataTransformIndexArray (string )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetCellDataTransformIndexArray ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTransform (vtkAbstractTransform transform, int num)</computeroutput> - Set or Get one of the filter&apos;s transforms. The transform number must be less than the number of transforms allocated for the object. Setting a transform slot to NULL is equivalent to assigning an overriding weight of zero to that filter slot.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractTransform = obj.GetTransform (int num)</computeroutput> - Set or Get one of the filter&apos;s transforms. The transform number must be less than the number of transforms allocated for the object. Setting a transform slot to NULL is equivalent to assigning an overriding weight of zero to that filter slot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfTransforms (int num)</computeroutput> - Set the number of transforms for the filter. References to non-existent filter numbers in the data array is equivalent to a weight of zero (i.e., no contribution of that filter or weight). The maximum number of transforms is limited to 65536 if transform index arrays are used.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfTransforms ()</computeroutput> - Set the number of transforms for the filter. References to non-existent filter numbers in the data array is equivalent to a weight of zero (i.e., no contribution of that filter or weight). The maximum number of transforms is limited to 65536 if transform index arrays are used.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddInputValuesOn ()</computeroutput> - If AddInputValues is true, the output values of this filter will be offset from the input values. The effect is exactly equivalent to having an identity transform of weight 1 added into each output point.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddInputValuesOff ()</computeroutput> - If AddInputValues is true, the output values of this filter will be offset from the input values. The effect is exactly equivalent to having an identity transform of weight 1 added into each output point.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAddInputValues (int )</computeroutput> - If AddInputValues is true, the output values of this filter will be offset from the input values. The effect is exactly equivalent to having an identity transform of weight 1 added into each output point.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAddInputValues ()</computeroutput> - If AddInputValues is true, the output values of this filter will be offset from the input values. The effect is exactly equivalent to having an identity transform of weight 1 added into each output point.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
