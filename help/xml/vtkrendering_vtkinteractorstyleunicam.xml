<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkinteractorstyleunicam" kind="page">
    <compoundname>vtkrendering_vtkinteractorstyleunicam</compoundname>
    <title>vtkInteractorStyleUnicam</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>UniCam is a camera interactor. Here, just the primary features of the UniCam technique are implemented. UniCam requires just one mouse button and supports context sensitive dollying, panning, and rotation. (In this implementation, it uses the right mouse button, leaving the middle and left available for other functions.) For more information, see the paper at:</para><para><ulink url="ftp://ftp.cs.brown.edu/pub/papers/graphics/research/unicam.pdf">ftp://ftp.cs.brown.edu/pub/papers/graphics/research/unicam.pdf</ulink></para><para>The following is a brief description of the UniCam Camera Controls. You can perform 3 operations on the camera: rotate, pan, and dolly the camera. All operations are reached through the right mouse button &amp; mouse movements.</para><para>IMPORTANT: UniCam assumes there is an axis that makes sense as a &quot;up&quot; vector for the world. By default, this axis is defined to be the vector &lt;0,0,1&gt;. You can set it explicitly for the data you are viewing with the &apos;SetWorldUpVector(..)&apos; method in C++, or similarly in Tcl/Tk (or other interpreted languages).</para><para><orderedlist>
<listitem><para>ROTATE:</para></listitem></orderedlist>
</para><para>Position the cursor over the point you wish to rotate around and press and release the left mouse button. A &apos;focus dot&apos; appears indicating the point that will be the center of rotation. To rotate, press and hold the left mouse button and drag the mouse.. release the button to complete the rotation.</para><para>Rotations can be done without placing a focus dot first by moving the mouse cursor to within 10% of the window border &amp; pressing and holding the left button followed by dragging the mouse. The last focus dot position will be re-used.</para><para><orderedlist>
<listitem><para>PAN:</para></listitem></orderedlist>
</para><para>Click and hold the left mouse button, and initially move the mouse left or right. The point under the initial pick will pick correlate w/ the mouse tip<ndash/> (i.e., direct manipulation).</para><para><orderedlist>
<listitem><para>DOLLY (+ PAN):</para></listitem></orderedlist>
</para><para>Click and hold the left mouse button, and initially move the mouse up or down. Moving the mouse down will dolly towards the picked point, and moving the mouse up will dolly away from it. Dollying occurs relative to the picked point which simplifies the task of dollying towards a region of interest. Left and right mouse movements will pan the camera left and right.</para><para>To create an instance of class vtkInteractorStyleUnicam, simply invoke its constructor as follows <verbatim>  obj = vtkInteractorStyleUnicam
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkInteractorStyleUnicam has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkInteractorStyleUnicam class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorStyleUnicam = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorStyleUnicam = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWorldUpVector (double a[3])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWorldUpVector (double x, double y, double z)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetWorldUpVector ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.OnMouseMove ()</computeroutput> - Concrete implementation of event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnLeftButtonDown ()</computeroutput> - Concrete implementation of event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnLeftButtonUp ()</computeroutput> - Concrete implementation of event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnLeftButtonMove ()</computeroutput> - Concrete implementation of event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnTimer ()</computeroutput> - OnTimer calls RotateCamera, RotateActor etc which should be overridden by style subclasses.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
