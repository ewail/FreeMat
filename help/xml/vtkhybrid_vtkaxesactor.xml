<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkhybrid_vtkaxesactor" kind="page">
    <compoundname>vtkhybrid_vtkaxesactor</compoundname>
    <title>vtkAxesActor</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkhybrid_1sec_vtkhybrid" kindref="member">Visualization Toolkit Hybrid Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkAxesActor is a hybrid 2D/3D actor used to represent 3D axes in a scene. The user can define the geometry to use for the shaft or the tip, and the user can set the text for the three axes. The text will appear to follow the camera since it is implemented by means of vtkCaptionActor2D. All of the functionality of the underlying vtkCaptionActor2D objects are accessable so that, for instance, the font attributes of the axes text can be manipulated through vtkTextProperty. Since this class inherits from vtkProp3D, one can apply a user transform to the underlying geometry and the positioning of the labels. For example, a rotation transform could be used to generate a left-handed axes representation.</para><para>To create an instance of class vtkAxesActor, simply invoke its constructor as follows <verbatim>  obj = vtkAxesActor
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkAxesActor has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkAxesActor class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAxesActor = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAxesActor = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.GetActors (vtkPropCollection )</computeroutput> - For some exporters and other other operations we must be able to collect all the actors or volumes. These methods are used in that process.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOpaqueGeometry (vtkViewport viewport)</computeroutput> - Support the standard render methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport viewport)</computeroutput> - Support the standard render methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOverlay (vtkViewport viewport)</computeroutput> - Support the standard render methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasTranslucentPolygonalGeometry ()</computeroutput> - Does this prop have some translucent polygonal geometry?  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkProp prop)</computeroutput> - Shallow copy of an axes actor. Overloads the virtual vtkProp method.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - Release any graphics resources that are being consumed by this actor. The parameter window could be used to determine which graphic resources to release.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetBounds (double bounds[6])</computeroutput> - Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The method GetBounds(double bounds[6]) is available from the superclass.)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBounds ()</computeroutput> - Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax). (The method GetBounds(double bounds[6]) is available from the superclass.)  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Get the actors mtime plus consider its properties and texture if set.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetRedrawMTime ()</computeroutput> - Return the mtime of anything that would cause the rendered image to appear differently. Usually this involves checking the mtime of the prop plus anything else it depends on such as properties, textures etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTotalLength (double v[3])</computeroutput> - Set the total length of the axes in 3 dimensions.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTotalLength (double x, double y, double z)</computeroutput> - Set the total length of the axes in 3 dimensions.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetTotalLength ()</computeroutput> - Set the total length of the axes in 3 dimensions.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalizedShaftLength (double v[3])</computeroutput> - Set the normalized (0-1) length of the shaft.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalizedShaftLength (double x, double y, double z)</computeroutput> - Set the normalized (0-1) length of the shaft.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetNormalizedShaftLength ()</computeroutput> - Set the normalized (0-1) length of the shaft.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalizedTipLength (double v[3])</computeroutput> - Set the normalized (0-1) length of the tip. Normally, this would be 1 - the normalized length of the shaft.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalizedTipLength (double x, double y, double z)</computeroutput> - Set the normalized (0-1) length of the tip. Normally, this would be 1 - the normalized length of the shaft.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetNormalizedTipLength ()</computeroutput> - Set the normalized (0-1) length of the tip. Normally, this would be 1 - the normalized length of the shaft.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalizedLabelPosition (double v[3])</computeroutput> - Set the normalized (0-1) position of the label along the length of the shaft. A value &gt; 1 is permissible.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalizedLabelPosition (double x, double y, double z)</computeroutput> - Set the normalized (0-1) position of the label along the length of the shaft. A value &gt; 1 is permissible.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetNormalizedLabelPosition ()</computeroutput> - Set the normalized (0-1) position of the label along the length of the shaft. A value &gt; 1 is permissible.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetConeResolution (int )</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetConeResolutionMinValue ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetConeResolutionMaxValue ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetConeResolution ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSphereResolution (int )</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSphereResolutionMinValue ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSphereResolutionMaxValue ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSphereResolution ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCylinderResolution (int )</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCylinderResolutionMinValue ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCylinderResolutionMaxValue ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCylinderResolution ()</computeroutput> - Set/get the resolution of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetConeRadius (double )</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetConeRadiusMinValue ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetConeRadiusMaxValue ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetConeRadius ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSphereRadius (double )</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSphereRadiusMinValue ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSphereRadiusMaxValue ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSphereRadius ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCylinderRadius (double )</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCylinderRadiusMinValue ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCylinderRadiusMaxValue ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCylinderRadius ()</computeroutput> - Set/get the radius of the pieces of the axes actor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShaftType (int type)</computeroutput> - Set the type of the shaft to a cylinder, line, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShaftTypeToCylinder ()</computeroutput> - Set the type of the shaft to a cylinder, line, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShaftTypeToLine ()</computeroutput> - Set the type of the shaft to a cylinder, line, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShaftTypeToUserDefined ()</computeroutput> - Set the type of the shaft to a cylinder, line, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShaftType ()</computeroutput> - Set the type of the shaft to a cylinder, line, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTipType (int type)</computeroutput> - Set the type of the tip to a cone, sphere, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTipTypeToCone ()</computeroutput> - Set the type of the tip to a cone, sphere, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTipTypeToSphere ()</computeroutput> - Set the type of the tip to a cone, sphere, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTipTypeToUserDefined ()</computeroutput> - Set the type of the tip to a cone, sphere, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTipType ()</computeroutput> - Set the type of the tip to a cone, sphere, or user defined geometry.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUserDefinedTip (vtkPolyData )</computeroutput> - Set the user defined tip polydata.  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyData = obj.GetUserDefinedTip ()</computeroutput> - Set the user defined tip polydata.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUserDefinedShaft (vtkPolyData )</computeroutput> - Set the user defined shaft polydata.  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyData = obj.GetUserDefinedShaft ()</computeroutput> - Set the user defined shaft polydata.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetXAxisTipProperty ()</computeroutput> - Get the tip properties.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetYAxisTipProperty ()</computeroutput> - Get the tip properties.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetZAxisTipProperty ()</computeroutput> - Get the tip properties.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetXAxisShaftProperty ()</computeroutput> - Get the shaft properties.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetYAxisShaftProperty ()</computeroutput> - Get the shaft properties.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetZAxisShaftProperty ()</computeroutput> - Get the shaft properties.  </para></listitem>
<listitem>
<para><computeroutput>vtkCaptionActor2D = obj.GetXAxisCaptionActor2D ()</computeroutput> - Retrieve handles to the X, Y and Z axis (so that you can set their text properties for example)  </para></listitem>
<listitem>
<para><computeroutput>vtkCaptionActor2D = obj.GetYAxisCaptionActor2D ()</computeroutput> - Retrieve handles to the X, Y and Z axis (so that you can set their text properties for example)  </para></listitem>
<listitem>
<para><computeroutput>vtkCaptionActor2D = obj.GetZAxisCaptionActor2D ()</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXAxisLabelText (string )</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetXAxisLabelText ()</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetYAxisLabelText (string )</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetYAxisLabelText ()</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetZAxisLabelText (string )</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetZAxisLabelText ()</computeroutput> - Set/get the label text.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAxisLabels (int )</computeroutput> - Enable/disable drawing the axis labels.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAxisLabels ()</computeroutput> - Enable/disable drawing the axis labels.  </para></listitem>
<listitem>
<para><computeroutput>obj.AxisLabelsOn ()</computeroutput> - Enable/disable drawing the axis labels.  </para></listitem>
<listitem>
<para><computeroutput>obj.AxisLabelsOff ()</computeroutput> - Enable/disable drawing the axis labels.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
