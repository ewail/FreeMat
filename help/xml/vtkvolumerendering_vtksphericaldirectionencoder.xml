<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkvolumerendering_vtksphericaldirectionencoder" kind="page">
    <compoundname>vtkvolumerendering_vtksphericaldirectionencoder</compoundname>
    <title>vtkSphericalDirectionEncoder</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkvolumerendering_1sec_vtkvolumerendering" kindref="member">Visualization Toolkit Volume Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkSphericalDirectionEncoder is a direction encoder which uses spherical coordinates for mapping (nx, ny, nz) into an azimuth, elevation pair.</para><para>To create an instance of class vtkSphericalDirectionEncoder, simply invoke its constructor as follows <verbatim>  obj = vtkSphericalDirectionEncoder
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSphericalDirectionEncoder has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSphericalDirectionEncoder class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphericalDirectionEncoder = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphericalDirectionEncoder = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetEncodedDirection (float n[3])</computeroutput> - Given a normal vector n, return the encoded direction  </para></listitem>
<listitem>
<para><computeroutput>float = obj.GetDecodedGradient (int value)</computeroutput> - / Given an encoded value, return a pointer to the normal vector  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfEncodedDirections (void )</computeroutput> - Get the decoded gradient table. There are this-&gt;GetNumberOfEncodedDirections() entries in the table, each containing a normal (direction) vector. This is a flat structure - 3 times the number of directions floats in an array.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
