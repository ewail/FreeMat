<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtkstackedtreelayoutstrategy" kind="page">
    <compoundname>vtkinfovis_vtkstackedtreelayoutstrategy</compoundname>
    <title>vtkStackedTreeLayoutStrategy</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Performs a tree ring layout or &quot;icicle&quot; layout on a tree. This involves assigning a sector region to each vertex in the tree, and placing that information in a data array with four components per tuple representing (innerRadius, outerRadius, startAngle, endAngle).</para><para>This class may be assigned as the layout strategy to vtkAreaLayout.</para><para>.SECTION Thanks Thanks to Jason Shepherd from Sandia National Laboratories for help developing this class.</para><para>To create an instance of class vtkStackedTreeLayoutStrategy, simply invoke its constructor as follows <verbatim>  obj = vtkStackedTreeLayoutStrategy
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkStackedTreeLayoutStrategy has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkStackedTreeLayoutStrategy class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkStackedTreeLayoutStrategy = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkStackedTreeLayoutStrategy = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Layout (vtkTree inputTree, vtkDataArray sectorArray, vtkDataArray sizeArray)</computeroutput> - Perform the layout of the input tree, and store the sector bounds of each vertex as a tuple (innerRadius, outerRadius, startAngle, endAngle) in a data array.  </para></listitem>
<listitem>
<para><computeroutput>obj.LayoutEdgePoints (vtkTree inputTree, vtkDataArray sectorArray, vtkDataArray sizeArray, vtkTree edgeRoutingTree)</computeroutput> - Fill edgeRoutingTree with points suitable for routing edges of an overlaid graph.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteriorRadius (double )</computeroutput> - Define the tree ring&apos;s interior radius.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetInteriorRadius ()</computeroutput> - Define the tree ring&apos;s interior radius.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRingThickness (double )</computeroutput> - Define the thickness of each of the tree rings.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRingThickness ()</computeroutput> - Define the thickness of each of the tree rings.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRootStartAngle (double )</computeroutput> - Define the start angle for the root node. NOTE: It is assumed that the root end angle is greater than the root start angle and subtends no more than 360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRootStartAngle ()</computeroutput> - Define the start angle for the root node. NOTE: It is assumed that the root end angle is greater than the root start angle and subtends no more than 360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRootEndAngle (double )</computeroutput> - Define the end angle for the root node. NOTE: It is assumed that the root end angle is greater than the root start angle and subtends no more than 360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRootEndAngle ()</computeroutput> - Define the end angle for the root node. NOTE: It is assumed that the root end angle is greater than the root start angle and subtends no more than 360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseRectangularCoordinates (bool )</computeroutput> - Define whether or not rectangular coordinates are being used (as opposed to polar coordinates).  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetUseRectangularCoordinates ()</computeroutput> - Define whether or not rectangular coordinates are being used (as opposed to polar coordinates).  </para></listitem>
<listitem>
<para><computeroutput>obj.UseRectangularCoordinatesOn ()</computeroutput> - Define whether or not rectangular coordinates are being used (as opposed to polar coordinates).  </para></listitem>
<listitem>
<para><computeroutput>obj.UseRectangularCoordinatesOff ()</computeroutput> - Define whether or not rectangular coordinates are being used (as opposed to polar coordinates).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetReverse (bool )</computeroutput> - Define whether to reverse the order of the tree stacks from low to high.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetReverse ()</computeroutput> - Define whether to reverse the order of the tree stacks from low to high.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReverseOn ()</computeroutput> - Define whether to reverse the order of the tree stacks from low to high.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReverseOff ()</computeroutput> - Define whether to reverse the order of the tree stacks from low to high.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteriorLogSpacingValue (double )</computeroutput> - The spacing of tree levels in the edge routing tree. Levels near zero give more space to levels near the root, while levels near one (the default) create evenly-spaced levels. Levels above one give more space to levels near the leaves.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetInteriorLogSpacingValue ()</computeroutput> - The spacing of tree levels in the edge routing tree. Levels near zero give more space to levels near the root, while levels near one (the default) create evenly-spaced levels. Levels above one give more space to levels near the leaves.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.FindVertex (vtkTree tree, vtkDataArray array, float pnt[2])</computeroutput> - Returns the vertex id that contains pnt (or -1 if no one contains it).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
