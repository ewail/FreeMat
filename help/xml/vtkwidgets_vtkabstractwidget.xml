<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkabstractwidget" kind="page">
    <compoundname>vtkwidgets_vtkabstractwidget</compoundname>
    <title>vtkAbstractWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The vtkAbstractWidget defines an API and implements methods common to all widgets using the interaction/representation design. In this design, the term interaction means that part of the widget that performs event handling, while the representation corresponds to a vtkProp (or the subclass vtkWidgetRepresentation) used to represent the widget. vtkAbstractWidget also implements some methods common to all subclasses.</para><para>Note that vtkAbstractWidget provides access to the vtkWidgetEventTranslator. This class is responsible for translating VTK events (defined in vtkCommand.h) into widget events (defined in vtkWidgetEvent.h). This class can be manipulated so that different VTK events can be mapped into widget events, thereby allowing the modification of event bindings. Each subclass of vtkAbstractWidget defines the events to which it responds.</para><para>To create an instance of class vtkAbstractWidget, simply invoke its constructor as follows <verbatim>  obj = vtkAbstractWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkAbstractWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkAbstractWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard macros implementing standard VTK methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard macros implementing standard VTK methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractWidget = obj.NewInstance ()</computeroutput> - Standard macros implementing standard VTK methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractWidget = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard macros implementing standard VTK methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnabled (int )</computeroutput> - Methods for activating this widget. Note that the widget representation must be specified or the widget will not appear. ProcessEvents (On by default) must be On for Enabled widget to respond to interaction. If ProcessEvents is Off, enabling/disabling a widget merely affects the visibility of the representation.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProcessEvents (int )</computeroutput> - Methods to change the whether the widget responds to interaction. Set this to Off to disable interaction. On by default. Subclasses must overide SetProcessEvents() to make sure that they pass on the flag to all component widgets.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProcessEventsMinValue ()</computeroutput> - Methods to change the whether the widget responds to interaction. Set this to Off to disable interaction. On by default. Subclasses must overide SetProcessEvents() to make sure that they pass on the flag to all component widgets.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProcessEventsMaxValue ()</computeroutput> - Methods to change the whether the widget responds to interaction. Set this to Off to disable interaction. On by default. Subclasses must overide SetProcessEvents() to make sure that they pass on the flag to all component widgets.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProcessEvents ()</computeroutput> - Methods to change the whether the widget responds to interaction. Set this to Off to disable interaction. On by default. Subclasses must overide SetProcessEvents() to make sure that they pass on the flag to all component widgets.  </para></listitem>
<listitem>
<para><computeroutput>obj.ProcessEventsOn ()</computeroutput> - Methods to change the whether the widget responds to interaction. Set this to Off to disable interaction. On by default. Subclasses must overide SetProcessEvents() to make sure that they pass on the flag to all component widgets.  </para></listitem>
<listitem>
<para><computeroutput>obj.ProcessEventsOff ()</computeroutput> - Methods to change the whether the widget responds to interaction. Set this to Off to disable interaction. On by default. Subclasses must overide SetProcessEvents() to make sure that they pass on the flag to all component widgets.  </para></listitem>
<listitem>
<para><computeroutput>vtkWidgetEventTranslator = obj.GetEventTranslator ()</computeroutput> - Create the default widget representation if one is not set. The representation defines the geometry of the widget (i.e., how it appears) as well as providing special methods for manipulting the state and appearance of the widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.CreateDefaultRepresentation ()</computeroutput> - Create the default widget representation if one is not set. The representation defines the geometry of the widget (i.e., how it appears) as well as providing special methods for manipulting the state and appearance of the widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.Render ()</computeroutput> - This method is called by subclasses when a render method is to be invoked on the vtkRenderWindowInteractor. This method should be called (instead of vtkRenderWindow::Render() because it has built into it optimizations for minimizing renders and/or speeding renders.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParent (vtkAbstractWidget parent)</computeroutput> - Specifying a parent to this widget is used when creating composite widgets. It is an internal method not meant to be used by the public. When a widget has a parent, it defers the rendering to the parent. It may also defer managing the cursor (see ManagesCursor ivar).  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractWidget = obj.GetParent ()</computeroutput> - Specifying a parent to this widget is used when creating composite widgets. It is an internal method not meant to be used by the public. When a widget has a parent, it defers the rendering to the parent. It may also defer managing the cursor (see ManagesCursor ivar).  </para></listitem>
<listitem>
<para><computeroutput>vtkWidgetRepresentation = obj.GetRepresentation ()</computeroutput> - Turn on or off the management of the cursor. Cursor management is typically disabled for subclasses when composite widgets are created. For example, vtkHandleWidgets are often used to create composite widgets, and the parent widget takes over the cursor management.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetManagesCursor (int )</computeroutput> - Turn on or off the management of the cursor. Cursor management is typically disabled for subclasses when composite widgets are created. For example, vtkHandleWidgets are often used to create composite widgets, and the parent widget takes over the cursor management.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetManagesCursor ()</computeroutput> - Turn on or off the management of the cursor. Cursor management is typically disabled for subclasses when composite widgets are created. For example, vtkHandleWidgets are often used to create composite widgets, and the parent widget takes over the cursor management.  </para></listitem>
<listitem>
<para><computeroutput>obj.ManagesCursorOn ()</computeroutput> - Turn on or off the management of the cursor. Cursor management is typically disabled for subclasses when composite widgets are created. For example, vtkHandleWidgets are often used to create composite widgets, and the parent widget takes over the cursor management.  </para></listitem>
<listitem>
<para><computeroutput>obj.ManagesCursorOff ()</computeroutput> - Turn on or off the management of the cursor. Cursor management is typically disabled for subclasses when composite widgets are created. For example, vtkHandleWidgets are often used to create composite widgets, and the parent widget takes over the cursor management.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPriority (float )</computeroutput> - Override the superclass method. This will automatically change the priority of the widget. Unlike the superclass documentation, no methods such as SetInteractor to null and reset it etc. are necessary  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
