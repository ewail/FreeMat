<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkhybrid_vtkribexporter" kind="page">
    <compoundname>vtkhybrid_vtkribexporter</compoundname>
    <title>vtkRIBExporter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkhybrid_1sec_vtkhybrid" kindref="member">Visualization Toolkit Hybrid Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRIBExporter is a concrete subclass of vtkExporter that writes a Renderman .RIB files. The input specifies a vtkRenderWindow. All visible actors and lights will be included in the rib file. The following file naming conventions apply: rib file - FilePrefix.rib image file created by RenderMan - FilePrefix.tif texture files - TexturePrefix_0xADDR_MTIME.tif This object does NOT generate an image file. The user must run either RenderMan or a RenderMan emulator like Blue Moon Ray Tracer (BMRT). vtk properties are convert to Renderman shaders as follows: Normal property, no texture map - plastic.sl Normal property with texture map - txtplastic.sl These two shaders must be compiled by the rendering package being used. vtkRIBExporter also supports custom shaders. The shaders are written using the Renderman Shading Language. See &quot;The Renderman
 Companion&quot;, ISBN 0-201-50868, 1989 for details on writing shaders. vtkRIBProperty specifies the declarations and parameter settings for custom shaders. Tcl Example: generate a rib file for the current rendering. vtkRIBExporter myRIB myRIB SetInput $renWin myRIB SetFIlePrefix mine myRIB Write This will create a file mine.rib. After running this file through a Renderman renderer a file mine.tif will contain the rendered image.</para><para>To create an instance of class vtkRIBExporter, simply invoke its constructor as follows <verbatim>  obj = vtkRIBExporter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRIBExporter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRIBExporter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRIBExporter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRIBExporter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (int , int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (int a[2])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetSize ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPixelSamples (int , int )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPixelSamples (int a[2])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetPixelSamples ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilePrefix (string )</computeroutput> - Specify the prefix of the files to write out. The resulting file names will have .RIB appended to them.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilePrefix ()</computeroutput> - Specify the prefix of the files to write out. The resulting file names will have .RIB appended to them.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTexturePrefix (string )</computeroutput> - Specify the prefix of any generated texture files.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetTexturePrefix ()</computeroutput> - Specify the prefix of any generated texture files.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBackground (int )</computeroutput> - Set/Get the background flag. Default is 0 (off). If set, the rib file will contain an image shader that will use the renderer window&apos;s background color. Normally, RenderMan does generate backgrounds. Backgrounds are composited into the scene with the tiffcomp program that comes with Pixar&apos;s RenderMan Toolkit. In fact, Pixar&apos;s Renderman will accept an image shader but only sets the alpha of the background. Images created this way will still have a black background but contain an alpha of 1 at all pixels and CANNOT be subsequently composited with other images using tiffcomp. However, other RenderMan compliant renderers like Blue Moon Ray Tracing (BMRT) do allow image shaders and properly set the background color. If this sounds too confusing, use the following rules: If you are using Pixar&apos;s Renderman, leave the Background off. Otherwise, try setting BackGroundOn and see if you get the desired results.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetBackground ()</computeroutput> - Set/Get the background flag. Default is 0 (off). If set, the rib file will contain an image shader that will use the renderer window&apos;s background color. Normally, RenderMan does generate backgrounds. Backgrounds are composited into the scene with the tiffcomp program that comes with Pixar&apos;s RenderMan Toolkit. In fact, Pixar&apos;s Renderman will accept an image shader but only sets the alpha of the background. Images created this way will still have a black background but contain an alpha of 1 at all pixels and CANNOT be subsequently composited with other images using tiffcomp. However, other RenderMan compliant renderers like Blue Moon Ray Tracing (BMRT) do allow image shaders and properly set the background color. If this sounds too confusing, use the following rules: If you are using Pixar&apos;s Renderman, leave the Background off. Otherwise, try setting BackGroundOn and see if you get the desired results.  </para></listitem>
<listitem>
<para><computeroutput>obj.BackgroundOn ()</computeroutput> - Set/Get the background flag. Default is 0 (off). If set, the rib file will contain an image shader that will use the renderer window&apos;s background color. Normally, RenderMan does generate backgrounds. Backgrounds are composited into the scene with the tiffcomp program that comes with Pixar&apos;s RenderMan Toolkit. In fact, Pixar&apos;s Renderman will accept an image shader but only sets the alpha of the background. Images created this way will still have a black background but contain an alpha of 1 at all pixels and CANNOT be subsequently composited with other images using tiffcomp. However, other RenderMan compliant renderers like Blue Moon Ray Tracing (BMRT) do allow image shaders and properly set the background color. If this sounds too confusing, use the following rules: If you are using Pixar&apos;s Renderman, leave the Background off. Otherwise, try setting BackGroundOn and see if you get the desired results.  </para></listitem>
<listitem>
<para><computeroutput>obj.BackgroundOff ()</computeroutput> - Set/Get the background flag. Default is 0 (off). If set, the rib file will contain an image shader that will use the renderer window&apos;s background color. Normally, RenderMan does generate backgrounds. Backgrounds are composited into the scene with the tiffcomp program that comes with Pixar&apos;s RenderMan Toolkit. In fact, Pixar&apos;s Renderman will accept an image shader but only sets the alpha of the background. Images created this way will still have a black background but contain an alpha of 1 at all pixels and CANNOT be subsequently composited with other images using tiffcomp. However, other RenderMan compliant renderers like Blue Moon Ray Tracing (BMRT) do allow image shaders and properly set the background color. If this sounds too confusing, use the following rules: If you are using Pixar&apos;s Renderman, leave the Background off. Otherwise, try setting BackGroundOn and see if you get the desired results.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetExportArrays (int )</computeroutput> - Set or get the ExportArrays. If ExportArrays is set, then all point data, field data, and cell data arrays will get exported together with polygons.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetExportArraysMinValue ()</computeroutput> - Set or get the ExportArrays. If ExportArrays is set, then all point data, field data, and cell data arrays will get exported together with polygons.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetExportArraysMaxValue ()</computeroutput> - Set or get the ExportArrays. If ExportArrays is set, then all point data, field data, and cell data arrays will get exported together with polygons.  </para></listitem>
<listitem>
<para><computeroutput>obj.ExportArraysOn ()</computeroutput> - Set or get the ExportArrays. If ExportArrays is set, then all point data, field data, and cell data arrays will get exported together with polygons.  </para></listitem>
<listitem>
<para><computeroutput>obj.ExportArraysOff ()</computeroutput> - Set or get the ExportArrays. If ExportArrays is set, then all point data, field data, and cell data arrays will get exported together with polygons.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetExportArrays ()</computeroutput> - Set or get the ExportArrays. If ExportArrays is set, then all point data, field data, and cell data arrays will get exported together with polygons.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
