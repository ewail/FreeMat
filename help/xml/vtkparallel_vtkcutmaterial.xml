<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkcutmaterial" kind="page">
    <compoundname>vtkparallel_vtkcutmaterial</compoundname>
    <title>vtkCutMaterial</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCutMaterial computes a cut plane based on an up vector, center of the bounding box and the location of the maximum variable value. These computed values are available so that they can be used to set the camera for the best view of the plane.</para><para>To create an instance of class vtkCutMaterial, simply invoke its constructor as follows <verbatim>  obj = vtkCutMaterial
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCutMaterial has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCutMaterial class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCutMaterial = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCutMaterial = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaterialArrayName (string )</computeroutput> - Cell array that contains the material values.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetMaterialArrayName ()</computeroutput> - Cell array that contains the material values.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaterial (int )</computeroutput> - Material to probe.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaterial ()</computeroutput> - Material to probe.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetArrayName (string )</computeroutput> - For now, we just use the cell values. The array name to cut.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetArrayName ()</computeroutput> - For now, we just use the cell values. The array name to cut.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUpVector (double , double , double )</computeroutput> - The last piece of information that specifies the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUpVector (double a[3])</computeroutput> - The last piece of information that specifies the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetUpVector ()</computeroutput> - The last piece of information that specifies the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetMaximumPoint ()</computeroutput> - Accesses to the values computed during the execute method. They could be used to get a good camera view for the resulting plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetCenterPoint ()</computeroutput> - Accesses to the values computed during the execute method. They could be used to get a good camera view for the resulting plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetNormal ()</computeroutput> - Accesses to the values computed during the execute method. They could be used to get a good camera view for the resulting plane.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
