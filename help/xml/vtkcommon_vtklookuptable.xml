<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtklookuptable" kind="page">
    <compoundname>vtkcommon_vtklookuptable</compoundname>
    <title>vtkLookupTable</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkLookupTable is an object that is used by mapper objects to map scalar values into rgba (red-green-blue-alpha transparency) color specification, or rgba into scalar values. The color table can be created by direct insertion of color values, or by specifying hue, saturation, value, and alpha range and generating a table.</para><para>To create an instance of class vtkLookupTable, simply invoke its constructor as follows <verbatim>  obj = vtkLookupTable
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkLookupTable has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkLookupTable class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkLookupTable = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkLookupTable = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsOpaque ()</computeroutput> - Return true if all of the values defining the mapping have an opacity equal to 1. Default implementation return true.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Allocate (int sz, int ext)</computeroutput> - Allocate a color table of specified size.  </para></listitem>
<listitem>
<para><computeroutput>obj.Build ()</computeroutput> - Generate lookup table from hue, saturation, value, alpha min/max values. Table is built from linear ramp of each value.  </para></listitem>
<listitem>
<para><computeroutput>obj.ForceBuild ()</computeroutput> - Force the lookup table to regenerate from hue, saturation, value, and alpha min/max values. Table is built from a linear ramp of each value. ForceBuild() is useful if a lookup table has been defined manually (using SetTableValue) and then an application decides to rebuild the lookup table using the implicit process.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRamp (int )</computeroutput> - Set the shape of the table ramp to either linear or S-curve. The default is S-curve, which tails off gradually at either end. The equation used for the S-curve is y = (sin((x - 1/2)*pi) + 1)/2, while the equation for the linear ramp is simply y = x. For an S-curve greyscale ramp, you should set NumberOfTableValues to 402 (which is 256*pi/2) to provide room for the tails of the ramp. The equation for the SQRT is y = sqrt(x).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRampToLinear ()</computeroutput> - Set the shape of the table ramp to either linear or S-curve. The default is S-curve, which tails off gradually at either end. The equation used for the S-curve is y = (sin((x - 1/2)*pi) + 1)/2, while the equation for the linear ramp is simply y = x. For an S-curve greyscale ramp, you should set NumberOfTableValues to 402 (which is 256*pi/2) to provide room for the tails of the ramp. The equation for the SQRT is y = sqrt(x).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRampToSCurve ()</computeroutput> - Set the shape of the table ramp to either linear or S-curve. The default is S-curve, which tails off gradually at either end. The equation used for the S-curve is y = (sin((x - 1/2)*pi) + 1)/2, while the equation for the linear ramp is simply y = x. For an S-curve greyscale ramp, you should set NumberOfTableValues to 402 (which is 256*pi/2) to provide room for the tails of the ramp. The equation for the SQRT is y = sqrt(x).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRampToSQRT ()</computeroutput> - Set the shape of the table ramp to either linear or S-curve. The default is S-curve, which tails off gradually at either end. The equation used for the S-curve is y = (sin((x - 1/2)*pi) + 1)/2, while the equation for the linear ramp is simply y = x. For an S-curve greyscale ramp, you should set NumberOfTableValues to 402 (which is 256*pi/2) to provide room for the tails of the ramp. The equation for the SQRT is y = sqrt(x).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRamp ()</computeroutput> - Set the shape of the table ramp to either linear or S-curve. The default is S-curve, which tails off gradually at either end. The equation used for the S-curve is y = (sin((x - 1/2)*pi) + 1)/2, while the equation for the linear ramp is simply y = x. For an S-curve greyscale ramp, you should set NumberOfTableValues to 402 (which is 256*pi/2) to provide room for the tails of the ramp. The equation for the SQRT is y = sqrt(x).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScale (int scale)</computeroutput> - Set the type of scale to use, linear or logarithmic. The default is linear. If the scale is logarithmic, then the TableRange must not cross the value zero.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScaleToLinear ()</computeroutput> - Set the type of scale to use, linear or logarithmic. The default is linear. If the scale is logarithmic, then the TableRange must not cross the value zero.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScaleToLog10 ()</computeroutput> - Set the type of scale to use, linear or logarithmic. The default is linear. If the scale is logarithmic, then the TableRange must not cross the value zero.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetScale ()</computeroutput> - Set the type of scale to use, linear or logarithmic. The default is linear. If the scale is logarithmic, then the TableRange must not cross the value zero.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTableRange (double r[2])</computeroutput> - Set/Get the minimum/maximum scalar values for scalar mapping. Scalar values less than minimum range value are clamped to minimum range value. Scalar values greater than maximum range value are clamped to maximum range value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTableRange (double min, double max)</computeroutput> - Set/Get the minimum/maximum scalar values for scalar mapping. Scalar values less than minimum range value are clamped to minimum range value. Scalar values greater than maximum range value are clamped to maximum range value.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetTableRange ()</computeroutput> - Set/Get the minimum/maximum scalar values for scalar mapping. Scalar values less than minimum range value are clamped to minimum range value. Scalar values greater than maximum range value are clamped to maximum range value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHueRange (double , double )</computeroutput> - Set the range in hue (using automatic generation). Hue ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHueRange (double a[2])</computeroutput> - Set the range in hue (using automatic generation). Hue ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetHueRange ()</computeroutput> - Set the range in hue (using automatic generation). Hue ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSaturationRange (double , double )</computeroutput> - Set the range in saturation (using automatic generation). Saturation ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSaturationRange (double a[2])</computeroutput> - Set the range in saturation (using automatic generation). Saturation ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetSaturationRange ()</computeroutput> - Set the range in saturation (using automatic generation). Saturation ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetValueRange (double , double )</computeroutput> - Set the range in value (using automatic generation). Value ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetValueRange (double a[2])</computeroutput> - Set the range in value (using automatic generation). Value ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetValueRange ()</computeroutput> - Set the range in value (using automatic generation). Value ranges between [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAlphaRange (double , double )</computeroutput> - Set the range in alpha (using automatic generation). Alpha ranges from [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAlphaRange (double a[2])</computeroutput> - Set the range in alpha (using automatic generation). Alpha ranges from [0,1].  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetAlphaRange ()</computeroutput> - Set the range in alpha (using automatic generation). Alpha ranges from [0,1].  </para></listitem>
<listitem>
<para><computeroutput>obj.GetColor (double x, double rgb[3])</computeroutput> - Map one value through the lookup table and return the color as an RGB array of doubles between 0 and 1.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetOpacity (double v)</computeroutput> - Map one value through the lookup table and return the alpha value (the opacity) as a double between 0 and 1.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetIndex (double v)</computeroutput> - Return the table index associated with a particular value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfTableValues (vtkIdType number)</computeroutput> - Specify the number of values (i.e., colors) in the lookup table.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfTableValues ()</computeroutput> - Specify the number of values (i.e., colors) in the lookup table.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTableValue (vtkIdType indx, double rgba[4])</computeroutput> - Directly load color into lookup table. Use [0,1] double values for color component specification. Make sure that you&apos;ve either used the Build() method or used SetNumberOfTableValues() prior to using this method.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTableValue (vtkIdType indx, double r, double g, double b, double a)</computeroutput> - Directly load color into lookup table. Use [0,1] double values for color component specification.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetTableValue (vtkIdType id)</computeroutput> - Return a rgba color value for the given index into the lookup table. Color components are expressed as [0,1] double values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetTableValue (vtkIdType id, double rgba[4])</computeroutput> - Return a rgba color value for the given index into the lookup table. Color components are expressed as [0,1] double values.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRange ()</computeroutput> - Sets/Gets the range of scalars which will be mapped. This is a duplicate of Get/SetTableRange.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRange (double min, double max)</computeroutput> - Sets/Gets the range of scalars which will be mapped. This is a duplicate of Get/SetTableRange.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRange (double rng[2])</computeroutput> - Sets/Gets the range of scalars which will be mapped. This is a duplicate of Get/SetTableRange.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfColors (vtkIdType )</computeroutput> - Set the number of colors in the lookup table. Use SetNumberOfTableValues() instead, it can be used both before and after the table has been built whereas SetNumberOfColors() has no effect after the table has been built.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfColorsMinValue ()</computeroutput> - Set the number of colors in the lookup table. Use SetNumberOfTableValues() instead, it can be used both before and after the table has been built whereas SetNumberOfColors() has no effect after the table has been built.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfColorsMaxValue ()</computeroutput> - Set the number of colors in the lookup table. Use SetNumberOfTableValues() instead, it can be used both before and after the table has been built whereas SetNumberOfColors() has no effect after the table has been built.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfColors ()</computeroutput> - Set the number of colors in the lookup table. Use SetNumberOfTableValues() instead, it can be used both before and after the table has been built whereas SetNumberOfColors() has no effect after the table has been built.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTable (vtkUnsignedCharArray )</computeroutput> - Set/Get the internal table array that is used to map the scalars to colors. The table array is an unsigned char array with 4 components representing RGBA.  </para></listitem>
<listitem>
<para><computeroutput>vtkUnsignedCharArray = obj.GetTable ()</computeroutput> - Set/Get the internal table array that is used to map the scalars to colors. The table array is an unsigned char array with 4 components representing RGBA.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkLookupTable lut)</computeroutput> - Copy the contents from another LookupTable  </para></listitem>
<listitem>
<para><computeroutput>int = obj.UsingLogScale ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
