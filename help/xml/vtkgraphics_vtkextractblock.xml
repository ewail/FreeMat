<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkextractblock" kind="page">
    <compoundname>vtkgraphics_vtkextractblock</compoundname>
    <title>vtkExtractBlock</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkExtractBlock is a filter that extracts blocks from a multiblock dataset. Each node in the multi-block tree is identified by an <computeroutput>index</computeroutput>. The index can be obtained by performing a preorder traversal of the tree (including empty nodes). eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B, D, E, C, F, G Index of A is 0, while index of C is 4.</para><para>To create an instance of class vtkExtractBlock, simply invoke its constructor as follows <verbatim>  obj = vtkExtractBlock
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkExtractBlock has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkExtractBlock class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkExtractBlock = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkExtractBlock = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.AddIndex (int index)</computeroutput> - Select the block indices to extract. Each node in the multi-block tree is identified by an <computeroutput>index</computeroutput>. The index can be obtained by performing a preorder traversal of the tree (including empty nodes). eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B, D, E, C, F, G Index of A is 0, while index of C is 4.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveIndex (int index)</computeroutput> - Select the block indices to extract. Each node in the multi-block tree is identified by an <computeroutput>index</computeroutput>. The index can be obtained by performing a preorder traversal of the tree (including empty nodes). eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B, D, E, C, F, G Index of A is 0, while index of C is 4.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllIndices ()</computeroutput> - Select the block indices to extract. Each node in the multi-block tree is identified by an <computeroutput>index</computeroutput>. The index can be obtained by performing a preorder traversal of the tree (including empty nodes). eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B, D, E, C, F, G Index of A is 0, while index of C is 4.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPruneOutput (int )</computeroutput> - When set, the output mutliblock dataset will be pruned to remove empty nodes. On by default.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPruneOutput ()</computeroutput> - When set, the output mutliblock dataset will be pruned to remove empty nodes. On by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.PruneOutputOn ()</computeroutput> - When set, the output mutliblock dataset will be pruned to remove empty nodes. On by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.PruneOutputOff ()</computeroutput> - When set, the output mutliblock dataset will be pruned to remove empty nodes. On by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaintainStructure (int )</computeroutput> - This is used only when PruneOutput is ON. By default, when pruning the output i.e. remove empty blocks, if node has only 1 non-null child block, then that node is removed. To preserve these parent nodes, set this flag to true. Off by default.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaintainStructure ()</computeroutput> - This is used only when PruneOutput is ON. By default, when pruning the output i.e. remove empty blocks, if node has only 1 non-null child block, then that node is removed. To preserve these parent nodes, set this flag to true. Off by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.MaintainStructureOn ()</computeroutput> - This is used only when PruneOutput is ON. By default, when pruning the output i.e. remove empty blocks, if node has only 1 non-null child block, then that node is removed. To preserve these parent nodes, set this flag to true. Off by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.MaintainStructureOff ()</computeroutput> - This is used only when PruneOutput is ON. By default, when pruning the output i.e. remove empty blocks, if node has only 1 non-null child block, then that node is removed. To preserve these parent nodes, set this flag to true. Off by default.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
