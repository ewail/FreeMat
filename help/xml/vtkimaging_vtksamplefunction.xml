<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtksamplefunction" kind="page">
    <compoundname>vtkimaging_vtksamplefunction</compoundname>
    <title>vtkSampleFunction</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkSampleFunction is a source object that evaluates an implicit function and normals at each point in a vtkStructuredPoints. The user can specify the sample dimensions and location in space to perform the sampling. To create closed surfaces (in conjunction with the vtkContourFilter), capping can be turned on to set a particular value on the boundaries of the sample space.</para><para>To create an instance of class vtkSampleFunction, simply invoke its constructor as follows <verbatim>  obj = vtkSampleFunction
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSampleFunction has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSampleFunction class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSampleFunction = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSampleFunction = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetImplicitFunction (vtkImplicitFunction )</computeroutput> - Specify the implicit function to use to generate data.  </para></listitem>
<listitem>
<para><computeroutput>vtkImplicitFunction = obj.GetImplicitFunction ()</computeroutput> - Specify the implicit function to use to generate data.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarType (int )</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOutputScalarType ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToDouble ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToFloat ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToLong ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedLong ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToInt ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedInt ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToShort ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedShort ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToChar ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedChar ()</computeroutput> - Control the type of the scalars object by explicitly providing a scalar object. THIS IS DEPRECATED, although it still works!!! Please use SetOutputScalarType instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalars (vtkDataArray da)</computeroutput> - Control the type of the scalars object by explicitly providing a scalar object. THIS IS DEPRECATED, although it still works!!! Please use SetOutputScalarType instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSampleDimensions (int i, int j, int k)</computeroutput> - Specify the dimensions of the data on which to sample.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSampleDimensions (int dim[3])</computeroutput> - Specify the dimensions of the data on which to sample.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetSampleDimensions ()</computeroutput> - Specify the dimensions of the data on which to sample.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetModelBounds (double , double , double , double , double , double )</computeroutput> - Specify the region in space over which the sampling occurs. The bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetModelBounds (double a[6])</computeroutput> - Specify the region in space over which the sampling occurs. The bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetModelBounds ()</computeroutput> - Specify the region in space over which the sampling occurs. The bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCapping (int )</computeroutput> - Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCapping ()</computeroutput> - Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.  </para></listitem>
<listitem>
<para><computeroutput>obj.CappingOn ()</computeroutput> - Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.  </para></listitem>
<listitem>
<para><computeroutput>obj.CappingOff ()</computeroutput> - Turn on/off capping. If capping is on, then the outer boundaries of the structured point set are set to cap value. This can be used to insure surfaces are closed.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCapValue (double )</computeroutput> - Set the cap value.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCapValue ()</computeroutput> - Set the cap value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeNormals (int )</computeroutput> - Turn on/off the computation of normals (normals are float values).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeNormals ()</computeroutput> - Turn on/off the computation of normals (normals are float values).  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeNormalsOn ()</computeroutput> - Turn on/off the computation of normals (normals are float values).  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeNormalsOff ()</computeroutput> - Turn on/off the computation of normals (normals are float values).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarArrayName (string )</computeroutput> - Set/get the scalar array name for this data set. Initial value is &quot;scalars&quot;.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetScalarArrayName ()</computeroutput> - Set/get the scalar array name for this data set. Initial value is &quot;scalars&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalArrayName (string )</computeroutput> - Set/get the normal array name for this data set. Initial value is &quot;normals&quot;.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetNormalArrayName ()</computeroutput> - Set/get the normal array name for this data set. Initial value is &quot;normals&quot;.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Return the MTime also considering the implicit function.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
