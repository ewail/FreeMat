<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkstreamingtessellator" kind="page">
    <compoundname>vtkgraphics_vtkstreamingtessellator</compoundname>
    <title>vtkStreamingTessellator</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class is a simple algorithm that takes a single starting simplex <ndash/> a tetrahedron, triangle, or line segment <ndash/> and calls a function you pass it with (possibly many times) tetrahedra, triangles, or lines adaptively sampled from the one you specified. It uses an algorithm you specify to control the level of adaptivity.</para><para>This class does not create vtkUnstructuredGrid output because it is intended for use in mappers as well as filters. Instead, it calls the registered function with simplices as they are created.</para><para>The subdivision algorithm should change the vertex coordinates (it must change both geometric and, if desired, parametric coordinates) of the midpoint. These coordinates need not be changed unless the EvaluateEdge() member returns true. The vtkStreamingTessellator itself has no way of creating a more accurate midpoint vertex.</para><para>Here&apos;s how to use this class:<itemizedlist>
<listitem><para>Call AdaptivelySample1Facet, AdaptivelySample2Facet, or AdaptivelySample3Facet, with an edge, triangle, or tetrahedron you want tessellated.</para></listitem><listitem><para>The adaptive tessellator classifies each edge by passing the midpoint values to the vtkEdgeSubdivisionCriterion.</para></listitem><listitem><para>After each edge is classified, the tessellator subdivides edges as required until the subdivision criterion is satisfied or the maximum subdivision depth has been reached.</para></listitem><listitem><para>Edges, triangles, or tetrahedra connecting the vertices generated by the subdivision algorithm are processed by calling the user-defined callback functions (set with SetTetrahedronCallback(), SetTriangleCallback(), or SetEdgeCallback() ).</para></listitem></itemizedlist>
</para><para>.SECTION Warning Note that the vertices passed to AdaptivelySample3Facet, AdaptivelySample2Facet, or AdaptivelySample1Facet must be at least 6, 5, or 4 entries long, respectively! This is because the &lt;r,s,t&gt;, &lt;r,s&gt;, or &lt;r&gt; parametric coordinates of the vertices are maintained as the facet is subdivided. This information is often required by the subdivision algorithm in order to compute an error metric. You may change the number of parametric coordinates associated with each vertex using vtkStreamingTessellator::SetEmbeddingDimension().</para><para>.SECTION Interpolating Field Values If you wish, you may also use <computeroutput>vtkStreamingTessellator</computeroutput> to interpolate field values at newly created vertices. Interpolated field values are stored just beyond the parametric coordinates associated with a vertex. They will always be <computeroutput>double</computeroutput> values; it does not make sense to interpolate a boolean or string value and your output and subdivision subroutines may always cast to a <computeroutput>float</computeroutput> or use <computeroutput>floor()</computeroutput> to truncate an interpolated value to an integer.</para><para>To create an instance of class vtkStreamingTessellator, simply invoke its constructor as follows <verbatim>  obj = vtkStreamingTessellator
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkStreamingTessellator has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkStreamingTessellator class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkStreamingTessellator = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkStreamingTessellator = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSubdivisionAlgorithm (vtkEdgeSubdivisionCriterion )</computeroutput> - Get/Set the algorithm used to determine whether an edge should be subdivided or left as-is. This is used once for each call to AdaptivelySample1Facet (which is recursive and will call itself resulting in additional edges to be checked) or three times for each call to AdaptivelySample2Facet (also recursive).  </para></listitem>
<listitem>
<para><computeroutput>vtkEdgeSubdivisionCriterion = obj.GetSubdivisionAlgorithm ()</computeroutput> - Get/Set the algorithm used to determine whether an edge should be subdivided or left as-is. This is used once for each call to AdaptivelySample1Facet (which is recursive and will call itself resulting in additional edges to be checked) or three times for each call to AdaptivelySample2Facet (also recursive).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEmbeddingDimension (int k, int d)</computeroutput> - Get/Set the number of parameter-space coordinates associated with each input and output point. The default is <emphasis>k</emphasis> for <emphasis>k</emphasis> -facets. You may specify a different dimension, <emphasis>d</emphasis>, for each type of <emphasis>k</emphasis> -facet to be processed. For example, <computeroutput>SetEmbeddingDimension</computeroutput>( <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput> ) would associate <emphasis>r</emphasis>, <emphasis>s</emphasis>, and <emphasis>t</emphasis> coordinates with each input and output point generated by <computeroutput>AdaptivelySample2Facet</computeroutput> but does not say anything about input or output points generated by <computeroutput>AdaptivelySample1Facet</computeroutput>. Call <computeroutput>SetEmbeddingDimension</computeroutput>( <computeroutput>-1</computeroutput>, <emphasis>d</emphasis> ) to specify the same dimension for all possible <emphasis>k</emphasis> values. <emphasis>d</emphasis> may not exceed 8, as that would be plain silly.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetEmbeddingDimension (int k) const</computeroutput> - Get/Set the number of parameter-space coordinates associated with each input and output point. The default is <emphasis>k</emphasis> for <emphasis>k</emphasis> -facets. You may specify a different dimension, <emphasis>d</emphasis>, for each type of <emphasis>k</emphasis> -facet to be processed. For example, <computeroutput>SetEmbeddingDimension</computeroutput>( <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput> ) would associate <emphasis>r</emphasis>, <emphasis>s</emphasis>, and <emphasis>t</emphasis> coordinates with each input and output point generated by <computeroutput>AdaptivelySample2Facet</computeroutput> but does not say anything about input or output points generated by <computeroutput>AdaptivelySample1Facet</computeroutput>. Call <computeroutput>SetEmbeddingDimension</computeroutput>( <computeroutput>-1</computeroutput>, <emphasis>d</emphasis> ) to specify the same dimension for all possible <emphasis>k</emphasis> values. <emphasis>d</emphasis> may not exceed 8, as that would be plain silly.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFieldSize (int k, int s)</computeroutput> - Get/Set the number of field value coordinates associated with each input and output point. The default is 0; no field values are interpolated. You may specify a different size, <emphasis>s</emphasis>, for each type of <emphasis>k</emphasis> -facet to be processed. For example, <computeroutput>SetFieldSize</computeroutput>( <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput> ) would associate 3 field value coordinates with each input and output point of an <computeroutput>AdaptivelySample2Facet</computeroutput> call, but does not say anything about input or output points of <computeroutput>AdaptivelySample1Facet</computeroutput>. Call <computeroutput>SetFieldSize</computeroutput>( <computeroutput>-1</computeroutput>, <emphasis>s</emphasis> ) to specify the same dimension for all possible <emphasis>k</emphasis> values. <emphasis>s</emphasis> may not exceed vtkStreamingTessellator::MaxFieldSize. This is a compile-time constant that defaults to 18, which is large enough for a scalar, vector, tensor, normal, and texture coordinate to be included at each point.</para><para>Normally, you will not call <emphasis>SetFieldSize()</emphasis> directly; instead, subclasses of vtkEdgeSubdivisionCriterion, such as vtkShoeMeshSubdivisionAlgorithm, will call it for you.</para><para>In any event, setting <emphasis>FieldSize</emphasis> to a non-zero value means you must pass field values to the <computeroutput>AdaptivelySamplekFacet</computeroutput> routines; For example, <verbatim>    vtkStreamingTessellator* t = vtkStreamingTessellator::New();
    t-&gt;SetFieldSize( 1, 3 );
    t-&gt;SetEmbeddingDimension( 1, 1 ); // not really required, this is the default
    double p0[3+1+3] = { x0, y0, z0, r0, fx0, fy0, fz0 };
    double p1[3+1+3] = { x1, y1, z1, r1, fx1, fy1, fz1 };
    t-&gt;AdaptivelySample1Facet( p0, p1 );</verbatim> This would adaptively sample an curve (1-facet) with geometry and a vector field at every output point on the curve.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFieldSize (int k) const</computeroutput> - Get/Set the number of field value coordinates associated with each input and output point. The default is 0; no field values are interpolated. You may specify a different size, <emphasis>s</emphasis>, for each type of <emphasis>k</emphasis> -facet to be processed. For example, <computeroutput>SetFieldSize</computeroutput>( <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput> ) would associate 3 field value coordinates with each input and output point of an <computeroutput>AdaptivelySample2Facet</computeroutput> call, but does not say anything about input or output points of <computeroutput>AdaptivelySample1Facet</computeroutput>. Call <computeroutput>SetFieldSize</computeroutput>( <computeroutput>-1</computeroutput>, <emphasis>s</emphasis> ) to specify the same dimension for all possible <emphasis>k</emphasis> values. <emphasis>s</emphasis> may not exceed vtkStreamingTessellator::MaxFieldSize. This is a compile-time constant that defaults to 18, which is large enough for a scalar, vector, tensor, normal, and texture coordinate to be included at each point.</para><para>Normally, you will not call <emphasis>SetFieldSize()</emphasis> directly; instead, subclasses of vtkEdgeSubdivisionCriterion, such as vtkShoeMeshSubdivisionAlgorithm, will call it for you.</para><para>In any event, setting <emphasis>FieldSize</emphasis> to a non-zero value means you must pass field values to the <computeroutput>AdaptivelySamplekFacet</computeroutput> routines; For example, <verbatim>    vtkStreamingTessellator* t = vtkStreamingTessellator::New();
    t-&gt;SetFieldSize( 1, 3 );
    t-&gt;SetEmbeddingDimension( 1, 1 ); // not really required, this is the default
    double p0[3+1+3] = { x0, y0, z0, r0, fx0, fy0, fz0 };
    double p1[3+1+3] = { x1, y1, z1, r1, fx1, fy1, fz1 };
    t-&gt;AdaptivelySample1Facet( p0, p1 );</verbatim> This would adaptively sample an curve (1-facet) with geometry and a vector field at every output point on the curve.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumNumberOfSubdivisions (int num_subdiv_in)</computeroutput> - Get/Set the maximum number of subdivisions that may occur.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumNumberOfSubdivisions ()</computeroutput> - Get/Set the maximum number of subdivisions that may occur.  </para></listitem>
<listitem>
<para><computeroutput>obj.AdaptivelySample3Facet (double v1, double v2, double v3, double v4) const</computeroutput> - This will adaptively subdivide the tetrahedron (3-facet), triangle (2-facet), or edge (1-facet) until the subdivision algorithm returns false for every edge or the maximum recursion depth is reached.</para><para>Use <computeroutput>SetMaximumNumberOfSubdivisions</computeroutput> to change the maximum recursion depth.</para><para>The AdaptivelySample0Facet method is provided as a convenience. Obviously, there is no way to adaptively subdivide a vertex. Instead the input vertex is passed unchanged to the output via a call to the registered VertexProcessorFunction callback.</para><para>.SECTION Warning This assumes that you have called SetSubdivisionAlgorithm(), SetEdgeCallback(), SetTriangleCallback(), and SetTetrahedronCallback() with valid values!  </para></listitem>
<listitem>
<para><computeroutput>obj.AdaptivelySample2Facet (double v1, double v2, double v3) const</computeroutput> - This will adaptively subdivide the tetrahedron (3-facet), triangle (2-facet), or edge (1-facet) until the subdivision algorithm returns false for every edge or the maximum recursion depth is reached.</para><para>Use <computeroutput>SetMaximumNumberOfSubdivisions</computeroutput> to change the maximum recursion depth.</para><para>The AdaptivelySample0Facet method is provided as a convenience. Obviously, there is no way to adaptively subdivide a vertex. Instead the input vertex is passed unchanged to the output via a call to the registered VertexProcessorFunction callback.</para><para>.SECTION Warning This assumes that you have called SetSubdivisionAlgorithm(), SetEdgeCallback(), SetTriangleCallback(), and SetTetrahedronCallback() with valid values!  </para></listitem>
<listitem>
<para><computeroutput>obj.AdaptivelySample1Facet (double v1, double v2) const</computeroutput> - This will adaptively subdivide the tetrahedron (3-facet), triangle (2-facet), or edge (1-facet) until the subdivision algorithm returns false for every edge or the maximum recursion depth is reached.</para><para>Use <computeroutput>SetMaximumNumberOfSubdivisions</computeroutput> to change the maximum recursion depth.</para><para>The AdaptivelySample0Facet method is provided as a convenience. Obviously, there is no way to adaptively subdivide a vertex. Instead the input vertex is passed unchanged to the output via a call to the registered VertexProcessorFunction callback.</para><para>.SECTION Warning This assumes that you have called SetSubdivisionAlgorithm(), SetEdgeCallback(), SetTriangleCallback(), and SetTetrahedronCallback() with valid values!  </para></listitem>
<listitem>
<para><computeroutput>obj.AdaptivelySample0Facet (double v1) const</computeroutput> - This will adaptively subdivide the tetrahedron (3-facet), triangle (2-facet), or edge (1-facet) until the subdivision algorithm returns false for every edge or the maximum recursion depth is reached.</para><para>Use <computeroutput>SetMaximumNumberOfSubdivisions</computeroutput> to change the maximum recursion depth.</para><para>The AdaptivelySample0Facet method is provided as a convenience. Obviously, there is no way to adaptively subdivide a vertex. Instead the input vertex is passed unchanged to the output via a call to the registered VertexProcessorFunction callback.</para><para>.SECTION Warning This assumes that you have called SetSubdivisionAlgorithm(), SetEdgeCallback(), SetTriangleCallback(), and SetTetrahedronCallback() with valid values!  </para></listitem>
<listitem>
<para><computeroutput>obj.ResetCounts ()</computeroutput> - Reset/access the histogram of subdivision cases encountered. The histogram may be used to examine coverage during testing as well as characterizing the tessellation algorithm&apos;s performance. You should call ResetCounts() once, at the beginning of a stream of tetrahedra. It must be called before AdaptivelySample3Facet() to prevent uninitialized memory reads.</para><para>These functions have no effect (and return 0) when PARAVIEW_DEBUG_TESSELLATOR has not been defined. By default, PARAVIEW_DEBUG_TESSELLATOR is not defined, and your code will be fast and efficient. Really!  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetCaseCount (int c)</computeroutput> - Reset/access the histogram of subdivision cases encountered. The histogram may be used to examine coverage during testing as well as characterizing the tessellation algorithm&apos;s performance. You should call ResetCounts() once, at the beginning of a stream of tetrahedra. It must be called before AdaptivelySample3Facet() to prevent uninitialized memory reads.</para><para>These functions have no effect (and return 0) when PARAVIEW_DEBUG_TESSELLATOR has not been defined. By default, PARAVIEW_DEBUG_TESSELLATOR is not defined, and your code will be fast and efficient. Really!  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetSubcaseCount (int casenum, int sub)</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
