<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkelevationfilter" kind="page">
    <compoundname>vtkgraphics_vtkelevationfilter</compoundname>
    <title>vtkElevationFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkElevationFilter is a filter to generate scalar values from a dataset. The scalar values lie within a user specified range, and are generated by computing a projection of each dataset point onto a line. The line can be oriented arbitrarily. A typical example is to generate scalars based on elevation or height above a plane.</para><para>To create an instance of class vtkElevationFilter, simply invoke its constructor as follows <verbatim>  obj = vtkElevationFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkElevationFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkElevationFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkElevationFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkElevationFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLowPoint (double , double , double )</computeroutput> - Define one end of the line (small scalar values). Default is (0,0,0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLowPoint (double a[3])</computeroutput> - Define one end of the line (small scalar values). Default is (0,0,0).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetLowPoint ()</computeroutput> - Define one end of the line (small scalar values). Default is (0,0,0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHighPoint (double , double , double )</computeroutput> - Define other end of the line (large scalar values). Default is (0,0,1).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHighPoint (double a[3])</computeroutput> - Define other end of the line (large scalar values). Default is (0,0,1).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetHighPoint ()</computeroutput> - Define other end of the line (large scalar values). Default is (0,0,1).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarRange (double , double )</computeroutput> - Specify range to map scalars into. Default is [0, 1].  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarRange (double a[2])</computeroutput> - Specify range to map scalars into. Default is [0, 1].  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetScalarRange ()</computeroutput> - Specify range to map scalars into. Default is [0, 1].  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
