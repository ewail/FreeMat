<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkhyperoctreefractalsource" kind="page">
    <compoundname>vtkgraphics_vtkhyperoctreefractalsource</compoundname>
    <title>vtkHyperOctreeFractalSource</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>To create an instance of class vtkHyperOctreeFractalSource, simply invoke its constructor as follows <verbatim>  obj = vtkHyperOctreeFractalSource
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkHyperOctreeFractalSource has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkHyperOctreeFractalSource class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHyperOctreeFractalSource = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHyperOctreeFractalSource = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumLevel ()</computeroutput> - Return the maximum number of levels of the hyperoctree. <simplesect kind="post"><para>positive_result: result&gt;=1  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumLevel (int levels)</computeroutput> - Set the maximum number of levels of the hyperoctree. If GetMinLevels()&gt;=levels, GetMinLevels() is changed to levels-1. <simplesect kind="pre"><para>positive_levels: levels&gt;=1 </para></simplesect>
<simplesect kind="post"><para>is_set: this-&gt;GetLevels()==levels </para><simplesectsep/><para>min_is_valid: this-&gt;GetMinLevels()&lt;this-&gt;GetLevels()  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetMinimumLevel (int level)</computeroutput> - Return the minimal number of levels of systematic subdivision. <simplesect kind="post"><para>positive_result: result&gt;=0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMinimumLevel ()</computeroutput> - Return the minimal number of levels of systematic subdivision. <simplesect kind="post"><para>positive_result: result&gt;=0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionAxes (int x, int y, int z)</computeroutput> - Set the projection from the 4D space (4 parameters / 2 imaginary numbers) to the axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProjectionAxes (int a[3])</computeroutput> - Set the projection from the 4D space (4 parameters / 2 imaginary numbers) to the axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetProjectionAxes ()</computeroutput> - Set the projection from the 4D space (4 parameters / 2 imaginary numbers) to the axes of the 3D Volume. 0=C_Real, 1=C_Imaginary, 2=X_Real, 4=X_Imaginary  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOriginCX (double , double , double , double )</computeroutput> - Imaginary and real value for C (constant in equation) and X (initial value).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOriginCX (double a[4])</computeroutput> - Imaginary and real value for C (constant in equation) and X (initial value).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetOriginCX ()</computeroutput> - Imaginary and real value for C (constant in equation) and X (initial value).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSizeCX (double , double , double , double )</computeroutput> - Just a different way of setting the sample. This sets the size of the 4D volume. SampleCX is computed from size and extent. Size is ignored when a dimension i 0 (collapsed).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSizeCX (double a[4])</computeroutput> - Just a different way of setting the sample. This sets the size of the 4D volume. SampleCX is computed from size and extent. Size is ignored when a dimension i 0 (collapsed).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetSizeCX ()</computeroutput> - Just a different way of setting the sample. This sets the size of the 4D volume. SampleCX is computed from size and extent. Size is ignored when a dimension i 0 (collapsed).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumNumberOfIterations (short )</computeroutput> - The maximum number of cycles run to see if the value goes over 2  </para></listitem>
<listitem>
<para><computeroutput>GetMaximumNumberOfIterationsMinValue = obj.()</computeroutput> - The maximum number of cycles run to see if the value goes over 2  </para></listitem>
<listitem>
<para><computeroutput>GetMaximumNumberOfIterationsMaxValue = obj.()</computeroutput> - The maximum number of cycles run to see if the value goes over 2  </para></listitem>
<listitem>
<para><computeroutput>char = obj.GetMaximumNumberOfIterations ()</computeroutput> - The maximum number of cycles run to see if the value goes over 2  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDimension (int )</computeroutput> - Create a 2D or 3D fractal.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionMinValue ()</computeroutput> - Create a 2D or 3D fractal.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionMaxValue ()</computeroutput> - Create a 2D or 3D fractal.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimension ()</computeroutput> - Create a 2D or 3D fractal.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSpanThreshold (double )</computeroutput> - Controls when a leaf gets subdivided. If the corner values span a larger range than this value, the leaf is subdivided. This defaults to 2.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSpanThreshold ()</computeroutput> - Controls when a leaf gets subdivided. If the corner values span a larger range than this value, the leaf is subdivided. This defaults to 2.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
