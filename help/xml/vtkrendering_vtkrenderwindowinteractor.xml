<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkrenderwindowinteractor" kind="page">
    <compoundname>vtkrendering_vtkrenderwindowinteractor</compoundname>
    <title>vtkRenderWindowInteractor</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRenderWindowInteractor provides a platform-independent interaction mechanism for mouse/key/time events. It serves as a base class for platform-dependent implementations that handle routing of mouse/key/timer messages to vtkInteractorObserver and its subclasses. vtkRenderWindowInteractor also provides controls for picking, rendering frame rate, and headlights.</para><para>vtkRenderWindowInteractor has changed from previous implementations and now serves only as a shell to hold user preferences and route messages to vtkInteractorStyle. Callbacks are available for many events. Platform specific subclasses should provide methods for manipulating timers, TerminateApp, and an event loop if required via Initialize/Start/Enable/Disable.</para><para>To create an instance of class vtkRenderWindowInteractor, simply invoke its constructor as follows <verbatim>  obj = vtkRenderWindowInteractor
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRenderWindowInteractor has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRenderWindowInteractor class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderWindowInteractor = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderWindowInteractor = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Prepare for handling events. This must be called before the interactor will work.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReInitialize ()</computeroutput> - This Method detects loops of RenderWindow-Interactor, so objects are freed properly.  </para></listitem>
<listitem>
<para><computeroutput>obj.UnRegister (vtkObjectBase o)</computeroutput> - This Method detects loops of RenderWindow-Interactor, so objects are freed properly.  </para></listitem>
<listitem>
<para><computeroutput>obj.Start ()</computeroutput> - Enable/Disable interactions. By default interactors are enabled when initialized. Initialize() must be called prior to enabling/disabling interaction. These methods are used when a window/widget is being shared by multiple renderers and interactors. This allows a &quot;modal&quot; display where one interactor is active when its data is to be displayed and all other interactors associated with the widget are disabled when their data is not displayed.  </para></listitem>
<listitem>
<para><computeroutput>obj.Enable ()</computeroutput> - Enable/Disable interactions. By default interactors are enabled when initialized. Initialize() must be called prior to enabling/disabling interaction. These methods are used when a window/widget is being shared by multiple renderers and interactors. This allows a &quot;modal&quot; display where one interactor is active when its data is to be displayed and all other interactors associated with the widget are disabled when their data is not displayed.  </para></listitem>
<listitem>
<para><computeroutput>obj.Disable ()</computeroutput> - Enable/Disable interactions. By default interactors are enabled when initialized. Initialize() must be called prior to enabling/disabling interaction. These methods are used when a window/widget is being shared by multiple renderers and interactors. This allows a &quot;modal&quot; display where one interactor is active when its data is to be displayed and all other interactors associated with the widget are disabled when their data is not displayed.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetEnabled ()</computeroutput> - Enable/Disable interactions. By default interactors are enabled when initialized. Initialize() must be called prior to enabling/disabling interaction. These methods are used when a window/widget is being shared by multiple renderers and interactors. This allows a &quot;modal&quot; display where one interactor is active when its data is to be displayed and all other interactors associated with the widget are disabled when their data is not displayed.  </para></listitem>
<listitem>
<para><computeroutput>obj.EnableRenderOn ()</computeroutput> - Enable/Disable whether vtkRenderWindowInteractor::Render() calls this-&gt;RenderWindow-&gt;Render().  </para></listitem>
<listitem>
<para><computeroutput>obj.EnableRenderOff ()</computeroutput> - Enable/Disable whether vtkRenderWindowInteractor::Render() calls this-&gt;RenderWindow-&gt;Render().  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnableRender (bool )</computeroutput> - Enable/Disable whether vtkRenderWindowInteractor::Render() calls this-&gt;RenderWindow-&gt;Render().  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetEnableRender ()</computeroutput> - Enable/Disable whether vtkRenderWindowInteractor::Render() calls this-&gt;RenderWindow-&gt;Render().  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRenderWindow (vtkRenderWindow aren)</computeroutput> - Set/Get the rendering window being controlled by this object.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderWindow = obj.GetRenderWindow ()</computeroutput> - Set/Get the rendering window being controlled by this object.  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdateSize (int x, int y)</computeroutput> - Event loop notification member for window size change. Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CreateTimer (int timerType)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.DestroyTimer ()</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CreateRepeatingTimer (long duration)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CreateOneShotTimer (long duration)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsOneShotTimer (int timerId)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetTimerDuration (int timerId)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ResetTimer (int timerId)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.DestroyTimer (int timerId)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetVTKTimerId (int platformTimerId)</computeroutput> - This class provides two groups of methods for manipulating timers. The first group (CreateTimer(timerType) and DestroyTimer()) implicitly use an internal timer id (and are present for backward compatibility). The second group (CreateRepeatingTimer(long),CreateOneShotTimer(long), ResetTimer(int),DestroyTimer(int)) use timer ids so multiple timers can be independently managed. In the first group, the CreateTimer() method takes an argument indicating whether the timer is created the first time (timerType==VTKI_TIMER_FIRST) or whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In initial implementations of VTK this was how one shot and repeating timers were managed.) In the second group, the create methods take a timer duration argument (in milliseconds) and return a timer id. Thus the ResetTimer(timerId) and DestroyTimer(timerId) methods take this timer id and operate on the timer as appropriate. Methods are also available for determining  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimerDuration (long )</computeroutput> - Specify the default timer interval (in milliseconds). (This is used in conjunction with the timer methods described previously, e.g., CreateTimer() uses this value; and CreateRepeatingTimer(duration) and CreateOneShotTimer(duration) use the default value if the parameter &quot;duration&quot; is less than or equal to zero.) Care must be taken when adjusting the timer interval from the default value of 10 milliseconds<ndash/>it may adversely affect the interactors.  </para></listitem>
<listitem>
<para><computeroutput>GetTimerDurationMinValue = obj.()</computeroutput> - Specify the default timer interval (in milliseconds). (This is used in conjunction with the timer methods described previously, e.g., CreateTimer() uses this value; and CreateRepeatingTimer(duration) and CreateOneShotTimer(duration) use the default value if the parameter &quot;duration&quot; is less than or equal to zero.) Care must be taken when adjusting the timer interval from the default value of 10 milliseconds<ndash/>it may adversely affect the interactors.  </para></listitem>
<listitem>
<para><computeroutput>GetTimerDurationMaxValue = obj.()</computeroutput> - Specify the default timer interval (in milliseconds). (This is used in conjunction with the timer methods described previously, e.g., CreateTimer() uses this value; and CreateRepeatingTimer(duration) and CreateOneShotTimer(duration) use the default value if the parameter &quot;duration&quot; is less than or equal to zero.) Care must be taken when adjusting the timer interval from the default value of 10 milliseconds<ndash/>it may adversely affect the interactors.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetTimerDuration ()</computeroutput> - Specify the default timer interval (in milliseconds). (This is used in conjunction with the timer methods described previously, e.g., CreateTimer() uses this value; and CreateRepeatingTimer(duration) and CreateOneShotTimer(duration) use the default value if the parameter &quot;duration&quot; is less than or equal to zero.) Care must be taken when adjusting the timer interval from the default value of 10 milliseconds<ndash/>it may adversely affect the interactors.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimerEventId (int )</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimerEventId ()</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimerEventType (int )</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimerEventType ()</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimerEventDuration (int )</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimerEventDuration ()</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimerEventPlatformId (int )</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimerEventPlatformId ()</computeroutput> - These methods are used to communicate information about the currently firing CreateTimerEvent or DestroyTimerEvent. The caller of CreateTimerEvent sets up TimerEventId, TimerEventType and TimerEventDuration. The observer of CreateTimerEvent should set up an appropriate platform specific timer based on those values and set the TimerEventPlatformId before returning. The caller of DestroyTimerEvent sets up TimerEventPlatformId. The observer of DestroyTimerEvent should simply destroy the platform specific timer created by CreateTimerEvent. See vtkGenericRenderWindowInteractor&apos;s InternalCreateTimer and InternalDestroyTimer for an example.  </para></listitem>
<listitem>
<para><computeroutput>obj.TerminateApp (void )</computeroutput> - External switching between joystick/trackball/new? modes. Initial value is a vtkInteractorStyleSwitch object.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractorStyle (vtkInteractorObserver )</computeroutput> - External switching between joystick/trackball/new? modes. Initial value is a vtkInteractorStyleSwitch object.  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorObserver = obj.GetInteractorStyle ()</computeroutput> - External switching between joystick/trackball/new? modes. Initial value is a vtkInteractorStyleSwitch object.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLightFollowCamera (int )</computeroutput> - Turn on/off the automatic repositioning of lights as the camera moves. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLightFollowCamera ()</computeroutput> - Turn on/off the automatic repositioning of lights as the camera moves. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>obj.LightFollowCameraOn ()</computeroutput> - Turn on/off the automatic repositioning of lights as the camera moves. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>obj.LightFollowCameraOff ()</computeroutput> - Turn on/off the automatic repositioning of lights as the camera moves. Default is On.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDesiredUpdateRate (double )</computeroutput> - Set/Get the desired update rate. This is used by vtkLODActor&apos;s to tell them how quickly they need to render. This update is in effect only when the camera is being rotated, or zoomed. When the interactor is still, the StillUpdateRate is used instead. The default is 15.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDesiredUpdateRateMinValue ()</computeroutput> - Set/Get the desired update rate. This is used by vtkLODActor&apos;s to tell them how quickly they need to render. This update is in effect only when the camera is being rotated, or zoomed. When the interactor is still, the StillUpdateRate is used instead. The default is 15.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDesiredUpdateRateMaxValue ()</computeroutput> - Set/Get the desired update rate. This is used by vtkLODActor&apos;s to tell them how quickly they need to render. This update is in effect only when the camera is being rotated, or zoomed. When the interactor is still, the StillUpdateRate is used instead. The default is 15.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDesiredUpdateRate ()</computeroutput> - Set/Get the desired update rate. This is used by vtkLODActor&apos;s to tell them how quickly they need to render. This update is in effect only when the camera is being rotated, or zoomed. When the interactor is still, the StillUpdateRate is used instead. The default is 15.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStillUpdateRate (double )</computeroutput> - Set/Get the desired update rate when movement has stopped. For the non-still update rate, see the SetDesiredUpdateRate method. The default is 0.0001  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStillUpdateRateMinValue ()</computeroutput> - Set/Get the desired update rate when movement has stopped. For the non-still update rate, see the SetDesiredUpdateRate method. The default is 0.0001  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStillUpdateRateMaxValue ()</computeroutput> - Set/Get the desired update rate when movement has stopped. For the non-still update rate, see the SetDesiredUpdateRate method. The default is 0.0001  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStillUpdateRate ()</computeroutput> - Set/Get the desired update rate when movement has stopped. For the non-still update rate, see the SetDesiredUpdateRate method. The default is 0.0001  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInitialized ()</computeroutput> - See whether interactor has been initialized yet. Default is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPicker (vtkAbstractPicker )</computeroutput> - Set/Get the object used to perform pick operations. In order to pick instances of vtkProp, the picker must be a subclass of vtkAbstractPropPicker, meaning that it can identify a particular instance of vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractPicker = obj.GetPicker ()</computeroutput> - Set/Get the object used to perform pick operations. In order to pick instances of vtkProp, the picker must be a subclass of vtkAbstractPropPicker, meaning that it can identify a particular instance of vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractPropPicker = obj.CreateDefaultPicker ()</computeroutput> - Create default picker. Used to create one when none is specified. Default is an instance of vtkPropPicker.  </para></listitem>
<listitem>
<para><computeroutput>obj.ExitCallback ()</computeroutput> - These methods correspond to the the Exit, User and Pick callbacks. They allow for the Style to invoke them.  </para></listitem>
<listitem>
<para><computeroutput>obj.UserCallback ()</computeroutput> - These methods correspond to the the Exit, User and Pick callbacks. They allow for the Style to invoke them.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartPickCallback ()</computeroutput> - These methods correspond to the the Exit, User and Pick callbacks. They allow for the Style to invoke them.  </para></listitem>
<listitem>
<para><computeroutput>obj.EndPickCallback ()</computeroutput> - These methods correspond to the the Exit, User and Pick callbacks. They allow for the Style to invoke them.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetMousePosition (int x, int y)</computeroutput> - Hide or show the mouse cursor, it is nice to be able to hide the default cursor if you want VTK to display a 3D cursor instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.HideCursor ()</computeroutput> - Hide or show the mouse cursor, it is nice to be able to hide the default cursor if you want VTK to display a 3D cursor instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShowCursor ()</computeroutput> - Hide or show the mouse cursor, it is nice to be able to hide the default cursor if you want VTK to display a 3D cursor instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.Render ()</computeroutput> - Render the scene. Just pass the render call on to the associated vtkRenderWindow.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlyTo (vtkRenderer ren, double x, double y, double z)</computeroutput> - Given a position x, move the current camera&apos;s focal point to x. The movement is animated over the number of frames specified in NumberOfFlyFrames. The LOD desired frame rate is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlyTo (vtkRenderer ren, double x)</computeroutput> - Given a position x, move the current camera&apos;s focal point to x. The movement is animated over the number of frames specified in NumberOfFlyFrames. The LOD desired frame rate is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlyToImage (vtkRenderer ren, double x, double y)</computeroutput> - Given a position x, move the current camera&apos;s focal point to x. The movement is animated over the number of frames specified in NumberOfFlyFrames. The LOD desired frame rate is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlyToImage (vtkRenderer ren, double x)</computeroutput> - Set the number of frames to fly to when FlyTo is invoked.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfFlyFrames (int )</computeroutput> - Set the number of frames to fly to when FlyTo is invoked.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFlyFramesMinValue ()</computeroutput> - Set the number of frames to fly to when FlyTo is invoked.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFlyFramesMaxValue ()</computeroutput> - Set the number of frames to fly to when FlyTo is invoked.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFlyFrames ()</computeroutput> - Set the number of frames to fly to when FlyTo is invoked.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDolly (double )</computeroutput> - Set the total Dolly value to use when flying to (FlyTo()) a specified point. Negative values fly away from the point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDolly ()</computeroutput> - Set the total Dolly value to use when flying to (FlyTo()) a specified point. Negative values fly away from the point.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetEventPosition ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetLastEventPosition ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLastEventPosition (int , int )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLastEventPosition (int a[2])</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventPosition (int x, int y)</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventPosition (int pos[2])</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventPositionFlipY (int x, int y)</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventPositionFlipY (int pos[2])</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAltKey (int )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAltKey ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetControlKey (int )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetControlKey ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShiftKey (int )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShiftKey ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyCode (char )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>char = obj.GetKeyCode ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepeatCount (int )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepeatCount ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeySym (string )</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetKeySym ()</computeroutput> - Set/Get information about the current event. The current x,y position is in the EventPosition, and the previous event position is in LastEventPosition, updated automatically each time EventPosition is set using its Set() method. Mouse positions are measured in pixels. The other information is about key board input.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventInformation (int x, int y, int ctrl, int shift, char keycode, int repeatcount, string keysym)</computeroutput> - Calls SetEventInformation, but flips the Y based on the current Size[1] value (i.e. y = this-&gt;Size[1] - y - 1).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventInformationFlipY (int x, int y, int ctrl, int shift, char keycode, int repeatcount, string keysym)</computeroutput> - Set all the keyboard-related event information in one call.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyEventInformation (int ctrl, int shift, char keycode, int repeatcount, string keysym)</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (int , int )</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (int a[2])</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetSize ()</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventSize (int , int )</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEventSize (int a[2])</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetEventSize ()</computeroutput> - This methods sets the Size ivar of the interactor without actually changing the size of the window. Normally application programmers would use UpdateSize if anything. This is useful for letting someone else change the size of the rendering window and just letting the interactor know about the change. The current event width/height (if any) is in EventSize (Expose event, for example). Window size is measured in pixels.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderer = obj.FindPokedRenderer (int , int )</computeroutput> - When an event occurs, we must determine which Renderer the event occurred within, since one RenderWindow may contain multiple renderers.  </para></listitem>
<listitem>
<para><computeroutput>vtkObserverMediator = obj.GetObserverMediator ()</computeroutput> - Return the object used to mediate between vtkInteractorObservers contending for resources. Multiple interactor observers will often request different resources (e.g., cursor shape); the mediator uses a strategy to provide the resource based on priority of the observer plus the particular request (default versus non-default cursor shape).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseTDx (bool )</computeroutput> - Use a 3DConnexion device. Initial value is false. If VTK is not build with the TDx option, this is no-op. If VTK is build with the TDx option, and a device is not connected, a warning is emitted. It is must be called before the first Render to be effective, otherwise it is ignored.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetUseTDx ()</computeroutput> - Use a 3DConnexion device. Initial value is false. If VTK is not build with the TDx option, this is no-op. If VTK is build with the TDx option, and a device is not connected, a warning is emitted. It is must be called before the first Render to be effective, otherwise it is ignored.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
