<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkgarbagecollector" kind="page">
    <compoundname>vtkcommon_vtkgarbagecollector</compoundname>
    <title>vtkGarbageCollector</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkGarbageCollector is used by VTK classes that may be involved in reference counting loops (such as Algorithm &lt;-&gt; Executive). It detects strongly connected components of the reference graph that have been leaked deletes them. The garbage collector uses the ReportReferences method to search the reference graph and construct a net reference count for each connected component. If the net reference count is zero the entire set of objects is deleted. Deleting each component may leak other components, which are then collected recursively.</para><para>To enable garbage collection for a class, add these members:</para><para><verbatim>  public:
   virtual void Register(vtkObjectBase* o)
     {
     this-&gt;RegisterInternal(o, 1);
     }
   virtual void UnRegister(vtkObjectBase* o)
     {
     this-&gt;UnRegisterInternal(o, 1);
     }

  protected:

   virtual void ReportReferences(vtkGarbageCollector* collector)
     {
     // Report references held by this object that may be in a loop.
     this-&gt;Superclass::ReportReferences(collector);
     vtkGarbageCollectorReport(collector, this-&gt;OtherObject, &quot;Other Object&quot;);
     }</verbatim></para><para>The implementations should be in the .cxx file in practice. It is important that the reference be reported using the real pointer or smart pointer instance that holds the reference. When collecting the garbage collector will actually set this pointer to NULL. The destructor of the class should be written to deal with this. It is also expected that an invariant is maintained for any reference that is reported. The variable holding the reference must always either be NULL or refer to a fully constructed valid object. Therefore code like &quot;this-&gt;Object-&gt;UnRegister(this)&quot; must be avoided if &quot;this-&gt;Object&quot; is a reported reference because it is possible that the object is deleted before UnRegister returns but then &quot;this-&gt;Object&quot; will be left as a dangling pointer. Instead use code like</para><para><verbatim>   vtkObjectBase* obj = this-&gt;Object;
   this-&gt;Object = 0;
   obj-&gt;UnRegister(this);</verbatim></para><para>so that the reported reference maintains the invariant.</para><para>If subclassing from a class that already supports garbage collection, one need only provide the ReportReferences method.</para><para>To create an instance of class vtkGarbageCollector, simply invoke its constructor as follows <verbatim>  obj = vtkGarbageCollector
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGarbageCollector has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGarbageCollector class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGarbageCollector = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGarbageCollector = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
