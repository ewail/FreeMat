<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkhandlerepresentation" kind="page">
    <compoundname>vtkwidgets_vtkhandlerepresentation</compoundname>
    <title>vtkHandleRepresentation</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class defines an API for widget handle representations. These representations interact with vtkHandleWidget. Various representations can be used depending on the nature of the handle. The basic functionality of the handle representation is to maintain a position. The position is represented via a vtkCoordinate, meaning that the position can be easily obtained in a variety of coordinate systems.</para><para>Optional features for this representation include an active mode (the widget appears only when the mouse pointer is close to it). The active distance is expressed in pixels and represents a circle in display space.</para><para>The class may be subclassed so that alternative representations can be created. The class defines an API and a default implementation that the vtkHandleWidget interacts with to render itself in the scene.</para><para>To create an instance of class vtkHandleRepresentation, simply invoke its constructor as follows <verbatim>  obj = vtkHandleRepresentation
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkHandleRepresentation has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkHandleRepresentation class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>vtkHandleRepresentation = obj.NewInstance ()</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>vtkHandleRepresentation = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDisplayPosition (double pos[3])</computeroutput> - Handles usually have their coordinates set in display coordinates (generally by an associated widget) and internally maintain the position in world coordinates. (Using world coordinates insures that handles are rendered in the right position when the camera view changes.) These methods are often subclassed because special constraint operations can be used to control the actual positioning.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetDisplayPosition (double pos[3])</computeroutput> - Handles usually have their coordinates set in display coordinates (generally by an associated widget) and internally maintain the position in world coordinates. (Using world coordinates insures that handles are rendered in the right position when the camera view changes.) These methods are often subclassed because special constraint operations can be used to control the actual positioning.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDisplayPosition ()</computeroutput> - Handles usually have their coordinates set in display coordinates (generally by an associated widget) and internally maintain the position in world coordinates. (Using world coordinates insures that handles are rendered in the right position when the camera view changes.) These methods are often subclassed because special constraint operations can be used to control the actual positioning.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWorldPosition (double pos[3])</computeroutput> - Handles usually have their coordinates set in display coordinates (generally by an associated widget) and internally maintain the position in world coordinates. (Using world coordinates insures that handles are rendered in the right position when the camera view changes.) These methods are often subclassed because special constraint operations can be used to control the actual positioning.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetWorldPosition (double pos[3])</computeroutput> - Handles usually have their coordinates set in display coordinates (generally by an associated widget) and internally maintain the position in world coordinates. (Using world coordinates insures that handles are rendered in the right position when the camera view changes.) These methods are often subclassed because special constraint operations can be used to control the actual positioning.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetWorldPosition ()</computeroutput> - Handles usually have their coordinates set in display coordinates (generally by an associated widget) and internally maintain the position in world coordinates. (Using world coordinates insures that handles are rendered in the right position when the camera view changes.) These methods are often subclassed because special constraint operations can be used to control the actual positioning.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTolerance (int )</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered near enough to the widget to be active.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetToleranceMinValue ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered near enough to the widget to be active.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetToleranceMaxValue ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered near enough to the widget to be active.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTolerance ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered near enough to the widget to be active.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetActiveRepresentation (int )</computeroutput> - Flag controls whether the widget becomes visible when the mouse pointer moves close to it (i.e., the widget becomes active). By default, ActiveRepresentation is off and the representation is always visible.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetActiveRepresentation ()</computeroutput> - Flag controls whether the widget becomes visible when the mouse pointer moves close to it (i.e., the widget becomes active). By default, ActiveRepresentation is off and the representation is always visible.  </para></listitem>
<listitem>
<para><computeroutput>obj.ActiveRepresentationOn ()</computeroutput> - Flag controls whether the widget becomes visible when the mouse pointer moves close to it (i.e., the widget becomes active). By default, ActiveRepresentation is off and the representation is always visible.  </para></listitem>
<listitem>
<para><computeroutput>obj.ActiveRepresentationOff ()</computeroutput> - Flag controls whether the widget becomes visible when the mouse pointer moves close to it (i.e., the widget becomes active). By default, ActiveRepresentation is off and the representation is always visible.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInteractionState (int )</computeroutput> - The interaction state may be set from a widget (e.g., HandleWidget) or other object. This controls how the interaction with the widget proceeds. Normally this method is used as part of a handshaking processwith the widget: First ComputeInteractionState() is invoked that returns a state based on geometric considerations (i.e., cursor near a widget feature), then based on events, the widget may modify this further.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInteractionStateMinValue ()</computeroutput> - The interaction state may be set from a widget (e.g., HandleWidget) or other object. This controls how the interaction with the widget proceeds. Normally this method is used as part of a handshaking processwith the widget: First ComputeInteractionState() is invoked that returns a state based on geometric considerations (i.e., cursor near a widget feature), then based on events, the widget may modify this further.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInteractionStateMaxValue ()</computeroutput> - The interaction state may be set from a widget (e.g., HandleWidget) or other object. This controls how the interaction with the widget proceeds. Normally this method is used as part of a handshaking processwith the widget: First ComputeInteractionState() is invoked that returns a state based on geometric considerations (i.e., cursor near a widget feature), then based on events, the widget may modify this further.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetConstrained (int )</computeroutput> - Specify whether any motions (such as scale, translate, etc.) are constrained in some way (along an axis, etc.) Widgets can use this to control the resulting motion.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetConstrained ()</computeroutput> - Specify whether any motions (such as scale, translate, etc.) are constrained in some way (along an axis, etc.) Widgets can use this to control the resulting motion.  </para></listitem>
<listitem>
<para><computeroutput>obj.ConstrainedOn ()</computeroutput> - Specify whether any motions (such as scale, translate, etc.) are constrained in some way (along an axis, etc.) Widgets can use this to control the resulting motion.  </para></listitem>
<listitem>
<para><computeroutput>obj.ConstrainedOff ()</computeroutput> - Specify whether any motions (such as scale, translate, etc.) are constrained in some way (along an axis, etc.) Widgets can use this to control the resulting motion.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CheckConstraint (vtkRenderer renderer, double pos[2])</computeroutput> - Method has to be overridden in the subclasses which has constraints on placing the handle (Ex. vtkConstrainedPointHandleRepresentation). It should return 1 if the position is within the constraint, else it should return 0. By default it returns 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkProp prop)</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkProp prop)</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRenderer (vtkRenderer ren)</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Overload the superclasses&apos; GetMTime() because the internal vtkCoordinates are used to keep the state of the representation.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPointPlacer (vtkPointPlacer )</computeroutput> - Set/Get the point placer. Point placers can be used to dictate constraints on the placement of handles. As an example, see vtkBoundedPlanePointPlacer (constrains the placement of handles to a set of bounded planes) vtkFocalPlanePointPlacer (constrains placement on the focal plane) etc. The default point placer is vtkPointPlacer (which does not apply any constraints, so the handles are free to move anywhere).  </para></listitem>
<listitem>
<para><computeroutput>vtkPointPlacer = obj.GetPointPlacer ()</computeroutput> - Set/Get the point placer. Point placers can be used to dictate constraints on the placement of handles. As an example, see vtkBoundedPlanePointPlacer (constrains the placement of handles to a set of bounded planes) vtkFocalPlanePointPlacer (constrains placement on the focal plane) etc. The default point placer is vtkPointPlacer (which does not apply any constraints, so the handles are free to move anywhere).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
