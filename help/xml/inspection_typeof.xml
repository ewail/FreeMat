<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="inspection_typeof" kind="page">
    <compoundname>inspection_typeof</compoundname>
    <title>TYPEOF Determine the Type of an Argument</title>
    <detaileddescription>
<para>Section: <ref refid="sec_inspection_1sec_inspection" kindref="member">Inspection Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Returns a string describing the type of an array. The syntax for its use is <verbatim>   y = typeof(x),
</verbatim> The returned string is one of <itemizedlist>
<listitem>
<para><computeroutput>&apos;cell&apos;</computeroutput> for cell-arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;struct&apos;</computeroutput> for structure-arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;logical&apos;</computeroutput> for logical arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint8&apos;</computeroutput> for unsigned 8-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int8&apos;</computeroutput> for signed 8-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint16&apos;</computeroutput> for unsigned 16-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int16&apos;</computeroutput> for signed 16-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint32&apos;</computeroutput> for unsigned 32-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int32&apos;</computeroutput> for signed 32-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;float&apos;</computeroutput> for 32-bit floating point numbers  </para></listitem>
<listitem>
<para><computeroutput>&apos;double&apos;</computeroutput> for 64-bit floating point numbers  </para></listitem>
<listitem>
<para><computeroutput>&apos;string&apos;</computeroutput> for string arrays  </para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>The following piece of code demonstrates the output of the <computeroutput>typeof</computeroutput> command for each possible type. The first example is with a simple cell array.</para><para><verbatim>--&gt; typeof({1})

ans = 
cell
</verbatim></para><para>The next example uses the <computeroutput>struct</computeroutput> constructor to make a simple scalar struct.</para><para><verbatim>--&gt; typeof(struct(&apos;foo&apos;,3))

ans = 
struct
</verbatim></para><para>The next example uses a comparison between two scalar integers to generate a scalar logical type.</para><para><verbatim>--&gt; typeof(3&gt;5)

ans = 
logical
</verbatim></para><para>For the integers, the typecast operations are used to generate the arguments.</para><para><verbatim>--&gt; typeof(uint8(3))

ans = 
uint8
--&gt; typeof(int8(8))

ans = 
int8
--&gt; typeof(uint16(3))

ans = 
uint16
--&gt; typeof(int16(8))

ans = 
int16
--&gt; typeof(uint32(3))

ans = 
uint32
--&gt; typeof(int32(3))

ans = 
int32
--&gt; typeof(uint64(3))

ans = 
uint64
--&gt; typeof(int64(3))

ans = 
int64
</verbatim></para><para>Float, and double can be created using the suffixes.</para><para><verbatim>--&gt; typeof(1.0f)

ans = 
single
--&gt; typeof(1.0D)

ans = 
double
--&gt; typeof(1.0f+i)

ans = 
single
--&gt; typeof(1.0D+2.0D*i)

ans = 
double
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
