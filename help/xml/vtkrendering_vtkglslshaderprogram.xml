<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkglslshaderprogram" kind="page">
    <compoundname>vtkrendering_vtkglslshaderprogram</compoundname>
    <title>vtkGLSLShaderProgram</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkGLSLShaderProgram is a concerete implementation of vtkShaderProgram. It&apos;s main function is to &apos;Link&apos; a vertex and a fragment shader together and install them into the rendering pipeline by calling OpenGL2.0.</para><para>Initialization of shader parameters is delegated to instances of vtkShader (vtkGLSLShader in this case). .SECTION Thanks Shader support in VTK includes key contributions by Gary Templet at Sandia National Labs.</para><para>To create an instance of class vtkGLSLShaderProgram, simply invoke its constructor as follows <verbatim>  obj = vtkGLSLShaderProgram
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGLSLShaderProgram has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGLSLShaderProgram class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGLSLShaderProgram = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGLSLShaderProgram = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Render (vtkActor actor, vtkRenderer renderer)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.PostRender (vtkActor , vtkRenderer )</computeroutput> - Called to unload the shaders after the actor has been rendered.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - Release any graphics resources that are being consumed by this actor. The parameter window could be used to determine which graphic resources to release.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProgram ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
