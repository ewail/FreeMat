<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtksqldatabaseschema" kind="page">
    <compoundname>vtkio_vtksqldatabaseschema</compoundname>
    <title>vtkSQLDatabaseSchema</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>A class to create a SQL database schema</para><para>.SECTION Thanks Thanks to Philippe Pebay and David Thompson from Sandia National Laboratories for implementing this class.</para><para>To create an instance of class vtkSQLDatabaseSchema, simply invoke its constructor as follows <verbatim>  obj = vtkSQLDatabaseSchema
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSQLDatabaseSchema has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSQLDatabaseSchema class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSQLDatabaseSchema = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSQLDatabaseSchema = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddPreamble (string preName, string preAction, string preBackendVTK_SQL_ALLBACKENDS)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddTable (string tblName)</computeroutput> - Add a table to the schema  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddColumnToTable (int tblHandle, int colType, string colName, int colSize, string colAttribs)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddColumnToTable (string tblName, int colType, string colName, int colSize, string colAttribs)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddIndexToTable (int tblHandle, int idxType, string idxName)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddIndexToTable (string tblName, int idxType, string idxName)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddColumnToIndex (int tblHandle, int idxHandle, int colHandle)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddColumnToIndex (string tblName, string idxName, string colName)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddTriggerToTable (int tblHandle, int trgType, string trgName, string trgAction, string trgBackendVTK_SQL_ALLBACKENDS)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AddTriggerToTable (string tblName, int trgType, string trgName, string trgAction, string trgBackendVTK_SQL_ALLBACKENDS)</computeroutput> - Given a preamble name, get its handle.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPreambleHandleFromName (string preName)</computeroutput> - Given a preamble name, get its handle.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetPreambleNameFromHandle (int preHandle)</computeroutput> - Given a preamble handle, get its name.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetPreambleActionFromHandle (int preHandle)</computeroutput> - Given a preamble handle, get its action.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetPreambleBackendFromHandle (int preHandle)</computeroutput> - Given a preamble handle, get its backend.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTableHandleFromName (string tblName)</computeroutput> - Given a table name, get its handle.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetTableNameFromHandle (int tblHandle)</computeroutput> - Given a table hanlde, get its name.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIndexHandleFromName (string tblName, string idxName)</computeroutput> - Given the names of a table and an index, get the handle of the index in this table.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetIndexNameFromHandle (int tblHandle, int idxHandle)</computeroutput> - Given the handles of a table and an index, get the name of the index.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIndexTypeFromHandle (int tblHandle, int idxHandle)</computeroutput> - Given the handles of a table and an index, get the type of the index.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetIndexColumnNameFromHandle (int tblHandle, int idxHandle, int cnmHandle)</computeroutput> - Given the handles of a table, an index, and a column name, get the column name.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetColumnHandleFromName (string tblName, string colName)</computeroutput> - Given the names of a table and a column, get the handle of the column in this table.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetColumnNameFromHandle (int tblHandle, int colHandle)</computeroutput> - Given the handles of a table and a column, get the name of the column.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetColumnTypeFromHandle (int tblHandle, int colHandle)</computeroutput> - Given the handles of a table and a column, get the type of the column.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetColumnSizeFromHandle (int tblHandle, int colHandle)</computeroutput> - Given the handles of a table and a column, get the size of the column.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetColumnAttributesFromHandle (int tblHandle, int colHandle)</computeroutput> - Given the handles of a table and a column, get the attributes of the column.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTriggerHandleFromName (string tblName, string trgName)</computeroutput> - Given the names of a trigger and a table, get the handle of the trigger in this table.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetTriggerNameFromHandle (int tblHandle, int trgHandle)</computeroutput> - Given the handles of a table and a trigger, get the name of the trigger.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTriggerTypeFromHandle (int tblHandle, int trgHandle)</computeroutput> - Given the handles of a table and a trigger, get the type of the trigger.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetTriggerActionFromHandle (int tblHandle, int trgHandle)</computeroutput> - Given the handles of a table and a trigger, get the action of the trigger.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetTriggerBackendFromHandle (int tblHandle, int trgHandle)</computeroutput> - Given the handles of a table and a trigger, get the backend of the trigger.  </para></listitem>
<listitem>
<para><computeroutput>obj.Reset ()</computeroutput> - Reset the schema to its initial, empty state.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfPreambles ()</computeroutput> - Get the number of preambles.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfTables ()</computeroutput> - Get the number of tables.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfColumnsInTable (int tblHandle)</computeroutput> - Get the number of columns in a particular table .  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfIndicesInTable (int tblHandle)</computeroutput> - Get the number of indices in a particular table .  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfColumnNamesInIndex (int tblHandle, int idxHandle)</computeroutput> - Get the number of column names associated to a particular index in a particular table .  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfTriggersInTable (int tblHandle)</computeroutput> - Get the number of trigger in a particular table .  </para></listitem>
<listitem>
<para><computeroutput>obj.SetName (string )</computeroutput> - Set/Get the name of the schema.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetName ()</computeroutput> - Set/Get the name of the schema.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
