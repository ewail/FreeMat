<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkcompositedataprobefilter" kind="page">
    <compoundname>vtkgraphics_vtkcompositedataprobefilter</compoundname>
    <title>vtkCompositeDataProbeFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCompositeDataProbeFilter supports probing into multi-group datasets. It sequentially probes through each concrete dataset within the composite probing at only those locations at which there were no hits when probing earlier datasets. For Hierarchical datasets, this traversal through leaf datasets is done in reverse order of levels i.e. highest level first.</para><para>When dealing with composite datasets, partial arrays are common i.e. data-arrays that are not available in all of the blocks. By default, this filter only passes those point and cell data-arrays that are available in all the blocks i.e. partial array are removed. When PassPartialArrays is turned on, this behavior is changed to take a union of all arrays present thus partial arrays are passed as well. However, for composite dataset input, this filter still produces a non-composite output. For all those locations in a block of where a particular data array is missing, this filter uses vtkMath::Nan() for double and float arrays, while 0 for all other types of arrays i.e int, char etc.</para><para>To create an instance of class vtkCompositeDataProbeFilter, simply invoke its constructor as follows <verbatim>  obj = vtkCompositeDataProbeFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCompositeDataProbeFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCompositeDataProbeFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCompositeDataProbeFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCompositeDataProbeFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPassPartialArrays (bool )</computeroutput> - When dealing with composite datasets, partial arrays are common i.e. data-arrays that are not available in all of the blocks. By default, this filter only passes those point and cell data-arrays that are available in all the blocks i.e. partial array are removed. When PassPartialArrays is turned on, this behavior is changed to take a union of all arrays present thus partial arrays are passed as well. However, for composite dataset input, this filter still produces a non-composite output. For all those locations in a block of where a particular data array is missing, this filter uses vtkMath::Nan() for double and float arrays, while 0 for all other types of arrays i.e int, char etc.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetPassPartialArrays ()</computeroutput> - When dealing with composite datasets, partial arrays are common i.e. data-arrays that are not available in all of the blocks. By default, this filter only passes those point and cell data-arrays that are available in all the blocks i.e. partial array are removed. When PassPartialArrays is turned on, this behavior is changed to take a union of all arrays present thus partial arrays are passed as well. However, for composite dataset input, this filter still produces a non-composite output. For all those locations in a block of where a particular data array is missing, this filter uses vtkMath::Nan() for double and float arrays, while 0 for all other types of arrays i.e int, char etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.PassPartialArraysOn ()</computeroutput> - When dealing with composite datasets, partial arrays are common i.e. data-arrays that are not available in all of the blocks. By default, this filter only passes those point and cell data-arrays that are available in all the blocks i.e. partial array are removed. When PassPartialArrays is turned on, this behavior is changed to take a union of all arrays present thus partial arrays are passed as well. However, for composite dataset input, this filter still produces a non-composite output. For all those locations in a block of where a particular data array is missing, this filter uses vtkMath::Nan() for double and float arrays, while 0 for all other types of arrays i.e int, char etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.PassPartialArraysOff ()</computeroutput> - When dealing with composite datasets, partial arrays are common i.e. data-arrays that are not available in all of the blocks. By default, this filter only passes those point and cell data-arrays that are available in all the blocks i.e. partial array are removed. When PassPartialArrays is turned on, this behavior is changed to take a union of all arrays present thus partial arrays are passed as well. However, for composite dataset input, this filter still produces a non-composite output. For all those locations in a block of where a particular data array is missing, this filter uses vtkMath::Nan() for double and float arrays, while 0 for all other types of arrays i.e int, char etc.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
