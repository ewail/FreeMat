<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkopenglrenderer" kind="page">
    <compoundname>vtkrendering_vtkopenglrenderer</compoundname>
    <title>vtkOpenGLRenderer</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkOpenGLRenderer is a concrete implementation of the abstract class vtkRenderer. vtkOpenGLRenderer interfaces to the OpenGL graphics library.</para><para>To create an instance of class vtkOpenGLRenderer, simply invoke its constructor as follows <verbatim>  obj = vtkOpenGLRenderer
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkOpenGLRenderer has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkOpenGLRenderer class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOpenGLRenderer = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkOpenGLRenderer = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.DeviceRender (void )</computeroutput> - Concrete open gl render method.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeviceRenderTranslucentPolygonalGeometry ()</computeroutput> - Render translucent polygonal geometry. Default implementation just call UpdateTranslucentPolygonalGeometry(). Subclasses of vtkRenderer that can deal with depth peeling must override this method.  </para></listitem>
<listitem>
<para><computeroutput>obj.ClearLights (void )</computeroutput> - Internal method temporarily removes lights before reloading them into graphics pipeline.  </para></listitem>
<listitem>
<para><computeroutput>obj.Clear (void )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.UpdateLights (void )</computeroutput> - Ask lights to load themselves into graphics pipeline.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDepthPeelingHigherLayer ()</computeroutput> - Is rendering at translucent geometry stage using depth peeling and rendering a layer other than the first one? (Boolean value) If so, the uniform variables UseTexture and Texture can be set. (Used by vtkOpenGLProperty or vtkOpenGLTexture)  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
