<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkquadratictetra" kind="page">
    <compoundname>vtkfiltering_vtkquadratictetra</compoundname>
    <title>vtkQuadraticTetra</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkQuadraticTetra is a concrete implementation of vtkNonLinearCell to represent a three-dimensional, 10-node, isoparametric parabolic tetrahedron. The interpolation is the standard finite element, quadratic isoparametric shape function. The cell includes a mid-edge node on each of the size edges of the tetrahedron. The ordering of the ten points defining the cell is point ids (0-3,4-9) where ids 0-3 are the four tetra vertices; and point ids 4-9 are the midedge nodes between (0,1), (1,2), (2,0), (0,3), (1,3), and (2,3).</para><para>To create an instance of class vtkQuadraticTetra, simply invoke its constructor as follows <verbatim>  obj = vtkQuadraticTetra
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkQuadraticTetra has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkQuadraticTetra class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadraticTetra = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadraticTetra = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellType ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCellDimension ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfEdges ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFaces ()</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetEdge (int )</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCell = obj.GetFace (int )</computeroutput> - Implement the vtkCell API. See the vtkCell API for descriptions of these methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.CellBoundary (int subId, double pcoords[3], vtkIdList pts)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Contour (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray verts, vtkCellArray lines, vtkCellArray polys, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Triangulate (int index, vtkIdList ptIds, vtkPoints pts)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Derivatives (int subId, double pcoords[3], double values, int dim, double derivs)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Clip (double value, vtkDataArray cellScalars, vtkIncrementalPointLocator locator, vtkCellArray tetras, vtkPointData inPd, vtkPointData outPd, vtkCellData inCd, vtkIdType cellId, vtkCellData outCd, int insideOut)</computeroutput> - Clip this edge using scalar value provided. Like contouring, except that it cuts the tetra to produce new tetras.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetParametricCenter (double pcoords[3])</computeroutput> - Return the center of the quadratic tetra in parametric coordinates.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParametricDistance (double pcoords[3])</computeroutput> - Return the distance of the parametric coordinate provided to the cell. If inside the cell, a distance of zero is returned.  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateFunctions (double pcoords[3], double weights[10])</computeroutput> - Compute the interpolation functions/derivatives (aka shape functions/derivatives)  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateDerivs (double pcoords[3], double derivs[30])</computeroutput> - Return the ids of the vertices defining edge/face (<computeroutput>edgeId</computeroutput>/`faceId&apos;). Ids are related to the cell, not to the dataset.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
