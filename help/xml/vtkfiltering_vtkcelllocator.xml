<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkcelllocator" kind="page">
    <compoundname>vtkfiltering_vtkcelllocator</compoundname>
    <title>vtkCellLocator</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCellLocator is a spatial search object to quickly locate cells in 3D. vtkCellLocator uses a uniform-level octree subdivision, where each octant (an octant is also referred to as a bucket) carries an indication of whether it is empty or not, and each leaf octant carries a list of the cells inside of it. (An octant is not empty if it has one or more cells inside of it.) Typical operations are intersection with a line to return candidate cells, or intersection with another vtkCellLocator to return candidate cells.</para><para>To create an instance of class vtkCellLocator, simply invoke its constructor as follows <verbatim>  obj = vtkCellLocator
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCellLocator has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCellLocator class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCellLocator = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCellLocator = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfCellsPerBucket (int N)</computeroutput> - Specify the average number of cells in each octant.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfCellsPerBucket ()</computeroutput> - reimplemented from vtkAbstractCellLocator to support bad compilers  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IntersectWithLine (double a0[3], double a1[3], vtkPoints points, vtkIdList cellIds)</computeroutput> - Return intersection point (if any) AND the cell which was intersected by the finite line. The cell is returned as a cell id and as a generic cell. For other IntersectWithLine signatures, see vtkAbstractCellLocator  </para></listitem>
<listitem>
<para><computeroutput>vtkIdList = obj.GetCells (int bucket)</computeroutput> - Get the cells in a particular bucket.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfBuckets (void )</computeroutput> - Return number of buckets available. Insure that the locator has been built before attempting to access buckets (octants).  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.FindCell (double x[3])</computeroutput> - Find the cell containing a given point. returns -1 if no cell found the cell parameters are copied into the supplied variables, a cell must be provided to store the information.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.FindCell (double x[3], double tol2, vtkGenericCell GenCell, double pcoords[3], double weights)</computeroutput> - Find the cell containing a given point. returns -1 if no cell found the cell parameters are copied into the supplied variables, a cell must be provided to store the information.  </para></listitem>
<listitem>
<para><computeroutput>obj.FindCellsWithinBounds (double bbox, vtkIdList cells)</computeroutput> - Return a list of unique cell ids inside of a given bounding box. The user must provide the vtkIdList to populate. This method returns data only after the locator has been built.  </para></listitem>
<listitem>
<para><computeroutput>obj.FindCellsAlongLine (double p1[3], double p2[3], double tolerance, vtkIdList cells)</computeroutput> - Given a finite line defined by the two points (p1,p2), return the list of unique cell ids in the buckets containing the line. It is possible that an empty cell list is returned. The user must provide the vtkIdList to populate. This method returns data only after the locator has been built.  </para></listitem>
<listitem>
<para><computeroutput>obj.FreeSearchStructure ()</computeroutput> - Satisfy vtkLocator abstract interface.  </para></listitem>
<listitem>
<para><computeroutput>obj.BuildLocator ()</computeroutput> - Satisfy vtkLocator abstract interface.  </para></listitem>
<listitem>
<para><computeroutput>obj.BuildLocatorIfNeeded ()</computeroutput> - Satisfy vtkLocator abstract interface.  </para></listitem>
<listitem>
<para><computeroutput>obj.ForceBuildLocator ()</computeroutput> - Satisfy vtkLocator abstract interface.  </para></listitem>
<listitem>
<para><computeroutput>obj.BuildLocatorInternal ()</computeroutput> - Satisfy vtkLocator abstract interface.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateRepresentation (int level, vtkPolyData pd)</computeroutput> - Satisfy vtkLocator abstract interface.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
