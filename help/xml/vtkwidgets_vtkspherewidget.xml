<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkspherewidget" kind="page">
    <compoundname>vtkwidgets_vtkspherewidget</compoundname>
    <title>vtkSphereWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This 3D widget defines a sphere that can be interactively placed in a scene.</para><para>To use this object, just invoke SetInteractor() with the argument of the method a vtkRenderWindowInteractor. You may also wish to invoke &quot;PlaceWidget()&quot; to initially position the widget. The interactor will act normally until the &quot;i&quot; key (for &quot;interactor&quot;) is pressed, at which point the vtkSphereWidget will appear. (See superclass documentation for information about changing this behavior.) Events that occur outside of the widget (i.e., no part of the widget is picked) are propagated to any other registered obsevers (such as the interaction style). Turn off the widget by pressing the &quot;i&quot; key again (or invoke the Off() method).</para><para>The vtkSphereWidget has several methods that can be used in conjunction with other VTK objects. The Set/GetThetaResolution() and Set/GetPhiResolution() methods control the number of subdivisions of the sphere in the theta and phi directions; the GetPolyData() method can be used to get the polygonal representation and can be used for things like seeding streamlines. The GetSphere() method returns a sphere implicit function that can be used for cutting and clipping. Typical usage of the widget is to make use of the StartInteractionEvent, InteractionEvent, and EndInteractionEvent events. The InteractionEvent is called on mouse motion; the other two events are called on button down and button up (any mouse button).</para><para>Some additional features of this class include the ability to control the properties of the widget. You can set the properties of the selected and unselected representations of the sphere.</para><para>To create an instance of class vtkSphereWidget, simply invoke its constructor as follows <verbatim>  obj = vtkSphereWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSphereWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSphereWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphereWidget = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphereWidget = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnabled (int )</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double bounds[6])</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget ()</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentation (int )</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepresentationMinValue ()</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepresentationMaxValue ()</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepresentation ()</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToOff ()</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToWireframe ()</computeroutput> - Set the representation of the sphere. Different representations are useful depending on the application. The default is VTK_SPHERE_WIREFRAME.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToSurface ()</computeroutput> - Set/Get the resolution of the sphere in the Theta direction. The default is 16.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetThetaResolution (int r)</computeroutput> - Set/Get the resolution of the sphere in the Theta direction. The default is 16.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetThetaResolution ()</computeroutput> - Set/Get the resolution of the sphere in the Phi direction. The default is 8.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPhiResolution (int r)</computeroutput> - Set/Get the resolution of the sphere in the Phi direction. The default is 8.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPhiResolution ()</computeroutput> - Set/Get the radius of sphere. Default is .5.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRadius (double r)</computeroutput> - Set/Get the radius of sphere. Default is .5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadius ()</computeroutput> - Set/Get the center of the sphere.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double x, double y, double z)</computeroutput> - Set/Get the center of the sphere.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double x[3])</computeroutput> - Set/Get the center of the sphere.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCenter ()</computeroutput> - Set/Get the center of the sphere.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCenter (double xyz[3])</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTranslation (int )</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTranslation ()</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.TranslationOn ()</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.TranslationOff ()</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScale (int )</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetScale ()</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.ScaleOn ()</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.ScaleOff ()</computeroutput> - Enable translation and scaling of the widget. By default, the widget can be translated and rotated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleVisibility (int )</computeroutput> - The handle sits on the surface of the sphere and may be moved around the surface by picking (left mouse) and then moving. The position of the handle can be retrieved, this is useful for positioning cameras and lights. By default, the handle is turned off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetHandleVisibility ()</computeroutput> - The handle sits on the surface of the sphere and may be moved around the surface by picking (left mouse) and then moving. The position of the handle can be retrieved, this is useful for positioning cameras and lights. By default, the handle is turned off.  </para></listitem>
<listitem>
<para><computeroutput>obj.HandleVisibilityOn ()</computeroutput> - The handle sits on the surface of the sphere and may be moved around the surface by picking (left mouse) and then moving. The position of the handle can be retrieved, this is useful for positioning cameras and lights. By default, the handle is turned off.  </para></listitem>
<listitem>
<para><computeroutput>obj.HandleVisibilityOff ()</computeroutput> - The handle sits on the surface of the sphere and may be moved around the surface by picking (left mouse) and then moving. The position of the handle can be retrieved, this is useful for positioning cameras and lights. By default, the handle is turned off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleDirection (double , double , double )</computeroutput> - Set/Get the direction vector of the handle relative to the center of the sphere. The direction of the handle is from the sphere center to the handle position.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleDirection (double a[3])</computeroutput> - Set/Get the direction vector of the handle relative to the center of the sphere. The direction of the handle is from the sphere center to the handle position.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetHandleDirection ()</computeroutput> - Set/Get the direction vector of the handle relative to the center of the sphere. The direction of the handle is from the sphere center to the handle position.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetHandlePosition ()</computeroutput> - Get the position of the handle.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPolyData (vtkPolyData pd)</computeroutput> - Grab the polydata (including points) that defines the sphere. The polydata consists of n+1 points, where n is the resolution of the sphere. These point values are guaranteed to be up-to-date when either the InteractionEvent or EndInteraction events are invoked. The user provides the vtkPolyData and the points and polysphere are added to it.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetSphere (vtkSphere sphere)</computeroutput> - Get the spherical implicit function defined by this widget. Note that vtkSphere is a subclass of vtkImplicitFunction, meaning that it can be used by a variety of filters to perform clipping, cutting, and selection of data.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSphereProperty ()</computeroutput> - Get the sphere properties. The properties of the sphere when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedSphereProperty ()</computeroutput> - Get the sphere properties. The properties of the sphere when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetHandleProperty ()</computeroutput> - Get the handle properties (the little ball on the sphere is the handle). The properties of the handle when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedHandleProperty ()</computeroutput> - Get the handle properties (the little ball on the sphere is the handle). The properties of the handle when selected and unselected can be manipulated.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
