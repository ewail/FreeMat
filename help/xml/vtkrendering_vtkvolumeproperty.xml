<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkvolumeproperty" kind="page">
    <compoundname>vtkrendering_vtkvolumeproperty</compoundname>
    <title>vtkVolumeProperty</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkVolumeProperty is used to represent common properties associated with volume rendering. This includes properties for determining the type of interpolation to use when sampling a volume, the color of a volume, the scalar opacity of a volume, the gradient opacity of a volume, and the shading parameters of a volume.</para><para>When the scalar opacity or the gradient opacity of a volume is not set, then the function is defined to be a constant value of 1.0. When a scalar and gradient opacity are both set simultaneously, then the opacity is defined to be the product of the scalar opacity and gradient opacity transfer functions.</para><para>Most properties can be set per &quot;component&quot; for volume mappers that support multiple independent components. If you are using 2 component data as LV or 4 component data as RGBV (as specified in the mapper) only the first scalar opacity and gradient opacity transfer functions will be used (and all color functions will be ignored). Omitting the index parameter on the Set/Get methods will access index = 0.</para><para>To create an instance of class vtkVolumeProperty, simply invoke its constructor as follows <verbatim>  obj = vtkVolumeProperty
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkVolumeProperty has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkVolumeProperty class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVolumeProperty = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVolumeProperty = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkVolumeProperty p)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Get the modified time for this object (or the properties registered with this object).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIndependentComponents (int )</computeroutput> - Does the data have independent components, or do some define color only? If IndependentComponents is On (the default) then each component will be independently passed through a lookup table to determine RGBA, shaded. Some volume Mappers can handle 1 to 4 component unsigned char or unsigned short data (see each mapper header file to determine functionality). If IndependentComponents is Off, then you must have either 2 or 4 component data. For 2 component data, the first is passed through the first color transfer function and the second component is passed through the first opacity transfer function. Normals will be generated off of the second component. For 4 component data, the first three will directly represent RGB (no lookup table). The fourth component will be passed through the first scalar opacity transfer function for opacity. Normals will be generated from the fourth component.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIndependentComponentsMinValue ()</computeroutput> - Does the data have independent components, or do some define color only? If IndependentComponents is On (the default) then each component will be independently passed through a lookup table to determine RGBA, shaded. Some volume Mappers can handle 1 to 4 component unsigned char or unsigned short data (see each mapper header file to determine functionality). If IndependentComponents is Off, then you must have either 2 or 4 component data. For 2 component data, the first is passed through the first color transfer function and the second component is passed through the first opacity transfer function. Normals will be generated off of the second component. For 4 component data, the first three will directly represent RGB (no lookup table). The fourth component will be passed through the first scalar opacity transfer function for opacity. Normals will be generated from the fourth component.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIndependentComponentsMaxValue ()</computeroutput> - Does the data have independent components, or do some define color only? If IndependentComponents is On (the default) then each component will be independently passed through a lookup table to determine RGBA, shaded. Some volume Mappers can handle 1 to 4 component unsigned char or unsigned short data (see each mapper header file to determine functionality). If IndependentComponents is Off, then you must have either 2 or 4 component data. For 2 component data, the first is passed through the first color transfer function and the second component is passed through the first opacity transfer function. Normals will be generated off of the second component. For 4 component data, the first three will directly represent RGB (no lookup table). The fourth component will be passed through the first scalar opacity transfer function for opacity. Normals will be generated from the fourth component.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIndependentComponents ()</computeroutput> - Does the data have independent components, or do some define color only? If IndependentComponents is On (the default) then each component will be independently passed through a lookup table to determine RGBA, shaded. Some volume Mappers can handle 1 to 4 component unsigned char or unsigned short data (see each mapper header file to determine functionality). If IndependentComponents is Off, then you must have either 2 or 4 component data. For 2 component data, the first is passed through the first color transfer function and the second component is passed through the first opacity transfer function. Normals will be generated off of the second component. For 4 component data, the first three will directly represent RGB (no lookup table). The fourth component will be passed through the first scalar opacity transfer function for opacity. Normals will be generated from the fourth component.  </para></listitem>
<listitem>
<para><computeroutput>obj.IndependentComponentsOn ()</computeroutput> - Does the data have independent components, or do some define color only? If IndependentComponents is On (the default) then each component will be independently passed through a lookup table to determine RGBA, shaded. Some volume Mappers can handle 1 to 4 component unsigned char or unsigned short data (see each mapper header file to determine functionality). If IndependentComponents is Off, then you must have either 2 or 4 component data. For 2 component data, the first is passed through the first color transfer function and the second component is passed through the first opacity transfer function. Normals will be generated off of the second component. For 4 component data, the first three will directly represent RGB (no lookup table). The fourth component will be passed through the first scalar opacity transfer function for opacity. Normals will be generated from the fourth component.  </para></listitem>
<listitem>
<para><computeroutput>obj.IndependentComponentsOff ()</computeroutput> - Does the data have independent components, or do some define color only? If IndependentComponents is On (the default) then each component will be independently passed through a lookup table to determine RGBA, shaded. Some volume Mappers can handle 1 to 4 component unsigned char or unsigned short data (see each mapper header file to determine functionality). If IndependentComponents is Off, then you must have either 2 or 4 component data. For 2 component data, the first is passed through the first color transfer function and the second component is passed through the first opacity transfer function. Normals will be generated off of the second component. For 4 component data, the first three will directly represent RGB (no lookup table). The fourth component will be passed through the first scalar opacity transfer function for opacity. Normals will be generated from the fourth component.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInterpolationType (int )</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInterpolationTypeMinValue ()</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInterpolationTypeMaxValue ()</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInterpolationType ()</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInterpolationTypeToNearest ()</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInterpolationTypeToLinear ()</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetInterpolationTypeAsString (void )</computeroutput> - Set the interpolation type for sampling a volume. Initial value is VTK_NEAREST_INTERPOLATION.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComponentWeight (int index, double value)</computeroutput> - Set/Get the scalar component weights  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetComponentWeight (int index)</computeroutput> - Set/Get the scalar component weights  </para></listitem>
<listitem>
<para><computeroutput>obj.SetColor (int index, vtkPiecewiseFunction function)</computeroutput> - Set the color of a volume to a gray level transfer function for the component indicated by index. This will set the color channels for this component to 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetColor (vtkPiecewiseFunction f)</computeroutput> - Set the color of a volume to a gray level transfer function for the component indicated by index. This will set the color channels for this component to 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetColor (int index, vtkColorTransferFunction function)</computeroutput> - Set the color of a volume to an RGB transfer function for the component indicated by index. This will set the color channels for this component to 3. This will also recompute the color channels  </para></listitem>
<listitem>
<para><computeroutput>obj.SetColor (vtkColorTransferFunction f)</computeroutput> - Set the color of a volume to an RGB transfer function for the component indicated by index. This will set the color channels for this component to 3. This will also recompute the color channels  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetColorChannels (int index)</computeroutput> - Get the number of color channels in the transfer function for the given component.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetColorChannels ()</computeroutput> - Get the number of color channels in the transfer function for the given component.  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetGrayTransferFunction (int index)</computeroutput> - Get the gray transfer function. If no transfer function has been set for this component, a default one is created and returned.  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetGrayTransferFunction ()</computeroutput> - Get the gray transfer function. If no transfer function has been set for this component, a default one is created and returned.  </para></listitem>
<listitem>
<para><computeroutput>vtkColorTransferFunction = obj.GetRGBTransferFunction (int index)</computeroutput> - Get the RGB transfer function for the given component. If no transfer function has been set for this component, a default one is created and returned.  </para></listitem>
<listitem>
<para><computeroutput>vtkColorTransferFunction = obj.GetRGBTransferFunction ()</computeroutput> - Get the RGB transfer function for the given component. If no transfer function has been set for this component, a default one is created and returned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarOpacity (int index, vtkPiecewiseFunction function)</computeroutput> - Set the opacity of a volume to an opacity transfer function based on scalar value for the component indicated by index.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarOpacity (vtkPiecewiseFunction f)</computeroutput> - Set the opacity of a volume to an opacity transfer function based on scalar value for the component indicated by index.  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetScalarOpacity (int index)</computeroutput> - Get the scalar opacity transfer function for the given component. If no transfer function has been set for this component, a default one is created and returned.  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetScalarOpacity ()</computeroutput> - Get the scalar opacity transfer function for the given component. If no transfer function has been set for this component, a default one is created and returned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarOpacityUnitDistance (int index, double distance)</computeroutput> - Set/Get the unit distance on which the scalar opacity transfer function is defined. By default this is 1.0, meaning that over a distance of 1.0 units, a given opacity (from the transfer function) is accumulated. This is adjusted for the actual sampling distance during rendering.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarOpacityUnitDistance (double distance)</computeroutput> - Set/Get the unit distance on which the scalar opacity transfer function is defined. By default this is 1.0, meaning that over a distance of 1.0 units, a given opacity (from the transfer function) is accumulated. This is adjusted for the actual sampling distance during rendering.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetScalarOpacityUnitDistance (int index)</computeroutput> - Set/Get the unit distance on which the scalar opacity transfer function is defined. By default this is 1.0, meaning that over a distance of 1.0 units, a given opacity (from the transfer function) is accumulated. This is adjusted for the actual sampling distance during rendering.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetScalarOpacityUnitDistance ()</computeroutput> - Set the opacity of a volume to an opacity transfer function based on gradient magnitude for the given component.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGradientOpacity (int index, vtkPiecewiseFunction function)</computeroutput> - Set the opacity of a volume to an opacity transfer function based on gradient magnitude for the given component.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGradientOpacity (vtkPiecewiseFunction function)</computeroutput> - Get the gradient magnitude opacity transfer function for the given component. If no transfer function has been set for this component, a default one is created and returned. This default function is always returned if DisableGradientOpacity is On for that component.  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetGradientOpacity (int index)</computeroutput> - Get the gradient magnitude opacity transfer function for the given component. If no transfer function has been set for this component, a default one is created and returned. This default function is always returned if DisableGradientOpacity is On for that component.  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetGradientOpacity ()</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDisableGradientOpacity (int index, int value)</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDisableGradientOpacity (int value)</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>obj.DisableGradientOpacityOn (int index)</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>obj.DisableGradientOpacityOn ()</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>obj.DisableGradientOpacityOff (int index)</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>obj.DisableGradientOpacityOff ()</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDisableGradientOpacity (int index)</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDisableGradientOpacity ()</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetStoredGradientOpacity (int index)</computeroutput> - Enable/Disable the gradient opacity function for the given component. If set to true, any call to GetGradientOpacity() will return a default function for this component. Note that the gradient opacity function is still stored, it is not set or reset and can be retrieved using GetStoredGradientOpacity().  </para></listitem>
<listitem>
<para><computeroutput>vtkPiecewiseFunction = obj.GetStoredGradientOpacity ()</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShade (int index, int value)</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShade (int value)</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShade (int index)</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShade ()</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShadeOn (int index)</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShadeOn ()</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShadeOff (int index)</computeroutput> - Set/Get the shading of a volume. If shading is turned off, then the mapper for the volume will not perform shading calculations. If shading is turned on, the mapper may perform shading calculations - in some cases shading does not apply (for example, in a maximum intensity projection) and therefore shading will not be performed even if this flag is on. For a compositing type of mapper, turning shading off is generally the same as setting ambient=1, diffuse=0, specular=0. Shading can be independently turned on/off per component.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShadeOff ()</computeroutput> - Set/Get the ambient lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAmbient (int index, double value)</computeroutput> - Set/Get the ambient lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAmbient (double value)</computeroutput> - Set/Get the ambient lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetAmbient (int index)</computeroutput> - Set/Get the ambient lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetAmbient ()</computeroutput> - Set/Get the diffuse lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDiffuse (int index, double value)</computeroutput> - Set/Get the diffuse lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDiffuse (double value)</computeroutput> - Set/Get the diffuse lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDiffuse (int index)</computeroutput> - Set/Get the diffuse lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDiffuse ()</computeroutput> - Set/Get the specular lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSpecular (int index, double value)</computeroutput> - Set/Get the specular lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSpecular (double value)</computeroutput> - Set/Get the specular lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSpecular (int index)</computeroutput> - Set/Get the specular lighting coefficient.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSpecular ()</computeroutput> - Set/Get the specular power.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSpecularPower (int index, double value)</computeroutput> - Set/Get the specular power.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSpecularPower (double value)</computeroutput> - Set/Get the specular power.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSpecularPower (int index)</computeroutput> - Set/Get the specular power.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetSpecularPower ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
