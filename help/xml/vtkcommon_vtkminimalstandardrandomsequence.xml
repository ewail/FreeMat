<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkminimalstandardrandomsequence" kind="page">
    <compoundname>vtkcommon_vtkminimalstandardrandomsequence</compoundname>
    <title>vtkMinimalStandardRandomSequence</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkMinimalStandardRandomSequence is a sequence of statistically independent pseudo random numbers uniformly distributed between 0.0 and 1.0.</para><para>The sequence is generated by a prime modulus multiplicative linear congruential generator (PMMLCG) or &quot;Lehmer generator&quot; with multiplier 16807 and prime modulus 2^(31)-1. The authors calls it &quot;minimal standard random number generator&quot;</para><para>ref: &quot;Random Number Generators: Good Ones are Hard to Find,&quot; by Stephen K. Park and Keith W. Miller in Communications of the ACM, 31, 10 (Oct. 1988) pp. 1192-1201. Code is at page 1195, &quot;Integer version 2&quot;</para><para>Correctness test is described in first column, page 1195: A seed of 1 at step 1 should give a seed of 1043618065 at step 10001.</para><para>To create an instance of class vtkMinimalStandardRandomSequence, simply invoke its constructor as follows <verbatim>  obj = vtkMinimalStandardRandomSequence
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkMinimalStandardRandomSequence has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkMinimalStandardRandomSequence class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMinimalStandardRandomSequence = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMinimalStandardRandomSequence = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSeed (int value)</computeroutput> - Set the seed of the random sequence. The following pre-condition is stated page 1197, second column: valid_seed: value&gt;=1 &amp;&amp; value&lt;=2147483646 2147483646=(2^31)-2 This method does not have this criterium as a pre-condition (ie it will not fail if an incorrect seed value is passed) but the value is silently changed to fit in the valid range [1,2147483646]. 2147483646 is added to a null or negative value. 2147483647 is changed to be 1 (ie 2147483646 is substracted). Implementation note: it also performs 3 calls to Next() to avoid the bad property that the first random number is proportional to the seed value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSeedOnly (int value)</computeroutput> - Set the seed of the random sequence. There is no extra internal ajustment. Only useful for writing correctness test. The following pre-condition is stated page 1197, second column 2147483646=(2^31)-2 This method does not have this criterium as a pre-condition (ie it will not fail if an incorrect seed value is passed) but the value is silently changed to fit in the valid range [1,2147483646]. 2147483646 is added to a null or negative value. 2147483647 is changed to be 1 (ie 2147483646 is substracted).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSeed ()</computeroutput> - Get the seed of the random sequence. Only useful for writing correctness test.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetValue ()</computeroutput> - Current value <simplesect kind="post"><para>unit_range: result&gt;=0.0 &amp;&amp; result&lt;=1.0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.Next ()</computeroutput> - Move to the next number in the random sequence.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRangeValue (double rangeMin, double rangeMax)</computeroutput> - Convenient method to return a value in a specific range from the range [0,1. There is an initial implementation that can be overridden by a subclass. There is no pre-condition on the range:<itemizedlist>
<listitem><para>it can be in increasing order: rangeMin&lt;rangeMax</para></listitem><listitem><para>it can be empty: rangeMin=rangeMax</para></listitem><listitem><para>it can be in decreasing order: rangeMin&gt;rangeMax <simplesect kind="post"><para>result_in_range: (rangeMin&lt;=rangeMax &amp;&amp; result&gt;=rangeMin &amp;&amp; result&lt;=rangeMax) || (rangeMax&lt;=rangeMin &amp;&amp; result&gt;=rangeMax &amp;&amp; result&lt;=rangeMin)  </para></simplesect>
</para></listitem></itemizedlist>
</para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
