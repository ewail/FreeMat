<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="import_8doc" kind="file">
    <compoundname>import.doc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*strfunc)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>name<sp/>we<sp/>want<sp/>to<sp/>use<sp/>for<sp/>the<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>strfunc<sp/>FreeMatText;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>name<sp/>is<sp/>case<sp/>sensitive<sp/>and<sp/>must<sp/>not<sp/>be<sp/>mangled<sp/>(i.e.,<sp/>use<sp/>extern<sp/>&quot;C&quot;)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freemat_io_handler(strfunc<sp/>printFunc)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>FreeMatText<sp/>=<sp/>printFunc;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SomeImportedFunction(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>FreeMatText(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>going<sp/>to<sp/>double<sp/>that<sp/>argument!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t*2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">\endverbatim</highlight></codeline>
<codeline lineno="158"><highlight class="normal">In<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal">,<sp/>once<sp/>&lt;tt&gt;SomeImportedFunction&lt;/tt&gt;<sp/>is<sp/>called<sp/>from<sp/>within<sp/>FreeMat,<sp/>the</highlight></codeline>
<codeline lineno="159"><highlight class="normal">text<sp/>&lt;tt&gt;</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>going<sp/>to<sp/>double<sp/>that<sp/>argument&quot;</highlight><highlight class="normal">&lt;/tt&gt;<sp/>will<sp/>appear<sp/>in<sp/>the<sp/>FreeMat<sp/>console.</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">Your<sp/>&lt;tt&gt;freemat_io_handler&lt;/tt&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>is<sp/>automatically<sp/>called<sp/>when<sp/>your<sp/>library<sp/>is</highlight></codeline>
<codeline lineno="162"><highlight class="normal">loaded<sp/>by<sp/>FreeMat,<sp/>which<sp/>happens<sp/>with<sp/>the<sp/>first<sp/>&lt;tt&gt;</highlight><highlight class="keyword">import</highlight><highlight class="normal">&lt;/tt&gt;<sp/>statement<sp/>that<sp/>references</highlight></codeline>
<codeline lineno="163"><highlight class="normal">it.</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">Repeating<sp/>&lt;tt&gt;</highlight><highlight class="keyword">import</highlight><highlight class="normal">&lt;/tt&gt;<sp/>calls<sp/>to<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>the<sp/>same<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>name<sp/>will<sp/>be<sp/>ignored,<sp/>except</highlight></codeline>
<codeline lineno="166"><highlight class="normal">the<sp/>first<sp/>call.<sp/>In<sp/>order<sp/>to<sp/>refresh<sp/>the<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>without<sp/>restarting<sp/>FreeMat,</highlight></codeline>
<codeline lineno="167"><highlight class="normal">you<sp/>have<sp/>to<sp/>first<sp/>clear<sp/>all<sp/>imported<sp/>libraries<sp/>via:</highlight></codeline>
<codeline lineno="168"><highlight class="normal">\verbatim</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>clear<sp/></highlight><highlight class="stringliteral">&apos;libs&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">\endverbatim</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">\section<sp/>Example</highlight></codeline>
<codeline lineno="173"><highlight class="normal">Here<sp/>is<sp/>a<sp/>complete<sp/>example.<sp/><sp/>We<sp/>have<sp/>a<sp/>&lt;tt&gt;C&lt;/tt&gt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>that<sp/>adds</highlight></codeline>
<codeline lineno="174"><highlight class="normal">two<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vectors<sp/>of<sp/>the<sp/>same<sp/>length,<sp/>and<sp/>stores<sp/>the<sp/>result<sp/>in<sp/>a<sp/>third<sp/>array<sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal">that<sp/>is<sp/>modified<sp/>by<sp/>the<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">.<sp/><sp/>First,<sp/>the<sp/>&lt;tt&gt;C&lt;/tt&gt;<sp/>code:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">\if<sp/>FILE</highlight></codeline>
<codeline lineno="178"><highlight class="normal">addArrays.c</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addArrays(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*c)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;N;i++)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>c[i]<sp/>=<sp/>a[i]<sp/>+<sp/>b[i];</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">\endif</highlight></codeline>
<codeline lineno="186"><highlight class="normal">\verbatim</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>addArrays.c
\endverbatim

\verbinclude<sp/>addArrays.c</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">We<sp/>then<sp/>compile<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>into<sp/>a<sp/>dynamic<sp/>library,<sp/>say,<sp/>&lt;tt&gt;add.so&lt;/tt&gt;.<sp/><sp/>The<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal">command<sp/>would<sp/>then<sp/>be:</highlight></codeline>
<codeline lineno="191"><highlight class="normal">\verbatim</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&apos;add.so&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;addArrays&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;addArrays&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;void&apos;</highlight><highlight class="normal">,<sp/>...</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;int32<sp/>N,<sp/>float[N]<sp/>a,<sp/>float[N]<sp/>b,<sp/>float[N]<sp/>&amp;c&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">\endverbatim</highlight></codeline>
<codeline lineno="195"><highlight class="normal">We<sp/>could<sp/>then<sp/>exercise<sp/>the<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>exactly<sp/>as<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>it<sp/>had<sp/>been<sp/>written</highlight></codeline>
<codeline lineno="196"><highlight class="normal">in<sp/>FreeMat.<sp/><sp/>The<sp/>following<sp/>only<sp/>works<sp/>on<sp/>systems<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="197"><highlight class="normal">C<sp/>Compiler:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">\if<sp/>FRAGMENT</highlight></codeline>
<codeline lineno="200"><highlight class="normal">frag_external_import_000.m</highlight></codeline>
<codeline lineno="201"><highlight class="normal">0</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(computer,</highlight><highlight class="stringliteral">&apos;MAC&apos;</highlight><highlight class="normal">))<sp/>system(</highlight><highlight class="stringliteral">&apos;gcc<sp/>-bundle<sp/>-flat_namespace<sp/>-undefined<sp/>suppress<sp/>-o<sp/>add.so<sp/>addArrays.c&apos;</highlight><highlight class="normal">);<sp/>end;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~strcmp(computer,</highlight><highlight class="stringliteral">&apos;MAC&apos;</highlight><highlight class="normal">))<sp/>system(</highlight><highlight class="stringliteral">&apos;gcc<sp/>-shared<sp/>-fPIC<sp/>-o<sp/>add.so<sp/>addArrays.c&apos;</highlight><highlight class="normal">);<sp/>end;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&apos;add.so&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;addArrays&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;addArrays&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;void&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;int32<sp/>N,<sp/>float[N]<sp/>a,<sp/>float[N]<sp/>b,<sp/>float[N]<sp/>&amp;c&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">a<sp/>=<sp/>[3,2,3,1];</highlight></codeline>
<codeline lineno="206"><highlight class="normal">b<sp/>=<sp/>[5,6,0,2];<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal">c<sp/>=<sp/>[0,0,0,0];</highlight></codeline>
<codeline lineno="208"><highlight class="normal">addArrays(length(a),a,b,c)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">c</highlight></codeline>
<codeline lineno="210"><highlight class="normal">\endif</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">\verbinclude<sp/>frag_external_import_000.m.out<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">*/</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/sbasu/Devel/FreeMat/doc/external/import.doc"/>
  </compounddef>
</doxygen>
