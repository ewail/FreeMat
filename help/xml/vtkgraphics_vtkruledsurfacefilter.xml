<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkruledsurfacefilter" kind="page">
    <compoundname>vtkgraphics_vtkruledsurfacefilter</compoundname>
    <title>vtkRuledSurfaceFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRuledSurfaceFilter is a filter that generates a surface from a set of lines. The lines are assumed to be &quot;parallel&quot; in the sense that they do not intersect and remain somewhat close to one another. A surface is generated by connecting the points defining each pair of lines with straight lines. This creates a strip for each pair of lines (i.e., a triangulation is created from two generating lines). The filter can handle an arbitrary number of lines, with lines i and i+1 assumed connected. Note that there are several different approaches for creating the ruled surface, the method for creating the surface can either use the input points or resample from the polylines (using a user-specified resolution).</para><para>This filter offers some other important features. A DistanceFactor ivar is used to decide when two lines are too far apart to connect. (The factor is a multiple of the distance between the first two points of the two lines defining the strip.) If the distance between the two generating lines becomes too great, then the surface is not generated in that region. (Note: if the lines separate and then merge, then a hole can be generated in the surface.) In addition, the Offset and OnRation ivars can be used to create nifty striped surfaces. Closed surfaces (e.g., tubes) can be created by setting the CloseSurface ivar. (The surface can be closed in the other direction by repeating the first and last point in the polylines defining the surface.)</para><para>An important use of this filter is to combine it with vtkStreamLine to generate stream surfaces. It can also be used to create surfaces from contours.</para><para>To create an instance of class vtkRuledSurfaceFilter, simply invoke its constructor as follows <verbatim>  obj = vtkRuledSurfaceFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRuledSurfaceFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRuledSurfaceFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRuledSurfaceFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRuledSurfaceFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDistanceFactor (double )</computeroutput> - Set/Get the factor that controls tearing of the surface.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistanceFactorMinValue ()</computeroutput> - Set/Get the factor that controls tearing of the surface.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistanceFactorMaxValue ()</computeroutput> - Set/Get the factor that controls tearing of the surface.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistanceFactor ()</computeroutput> - Set/Get the factor that controls tearing of the surface.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOnRatio (int )</computeroutput> - Control the striping of the ruled surface. If OnRatio is greater than 1, then every nth strip is turned on, beginning with the Offset strip.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOnRatioMinValue ()</computeroutput> - Control the striping of the ruled surface. If OnRatio is greater than 1, then every nth strip is turned on, beginning with the Offset strip.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOnRatioMaxValue ()</computeroutput> - Control the striping of the ruled surface. If OnRatio is greater than 1, then every nth strip is turned on, beginning with the Offset strip.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOnRatio ()</computeroutput> - Control the striping of the ruled surface. If OnRatio is greater than 1, then every nth strip is turned on, beginning with the Offset strip.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOffset (int )</computeroutput> - Control the striping of the ruled surface. The offset sets the first stripe that is visible. Offset is generally used with OnRatio to create nifty striping effects.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOffsetMinValue ()</computeroutput> - Control the striping of the ruled surface. The offset sets the first stripe that is visible. Offset is generally used with OnRatio to create nifty striping effects.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOffsetMaxValue ()</computeroutput> - Control the striping of the ruled surface. The offset sets the first stripe that is visible. Offset is generally used with OnRatio to create nifty striping effects.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOffset ()</computeroutput> - Control the striping of the ruled surface. The offset sets the first stripe that is visible. Offset is generally used with OnRatio to create nifty striping effects.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCloseSurface (int )</computeroutput> - Indicate whether the surface is to be closed. If this boolean is on, then the first and last polyline are used to generate a stripe that closes the surface. (Note: to close the surface in the other direction, repeat the first point in the polyline as the last point in the polyline.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCloseSurface ()</computeroutput> - Indicate whether the surface is to be closed. If this boolean is on, then the first and last polyline are used to generate a stripe that closes the surface. (Note: to close the surface in the other direction, repeat the first point in the polyline as the last point in the polyline.)  </para></listitem>
<listitem>
<para><computeroutput>obj.CloseSurfaceOn ()</computeroutput> - Indicate whether the surface is to be closed. If this boolean is on, then the first and last polyline are used to generate a stripe that closes the surface. (Note: to close the surface in the other direction, repeat the first point in the polyline as the last point in the polyline.)  </para></listitem>
<listitem>
<para><computeroutput>obj.CloseSurfaceOff ()</computeroutput> - Indicate whether the surface is to be closed. If this boolean is on, then the first and last polyline are used to generate a stripe that closes the surface. (Note: to close the surface in the other direction, repeat the first point in the polyline as the last point in the polyline.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRuledMode (int )</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRuledModeMinValue ()</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRuledModeMaxValue ()</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRuledMode ()</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRuledModeToResample ()</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRuledModeToPointWalk ()</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetRuledModeAsString ()</computeroutput> - Set the mode by which to create the ruled surface. (Dramatically different results are possible depending on the chosen mode.) The resample mode evenly resamples the polylines (based on length) and generates triangle strips. The point walk mode uses the existing points and walks around the polyline using existing points.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetResolution (int , int )</computeroutput> - If the ruled surface generation mode is RESAMPLE, then these parameters are used to determine the resample rate. Resolution[0] defines the resolution in the direction of the polylines; Resolution[1] defines the resolution across the polylines (i.e., direction orthogonal to Resolution[0]).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetResolution (int a[2])</computeroutput> - If the ruled surface generation mode is RESAMPLE, then these parameters are used to determine the resample rate. Resolution[0] defines the resolution in the direction of the polylines; Resolution[1] defines the resolution across the polylines (i.e., direction orthogonal to Resolution[0]).  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetResolution ()</computeroutput> - If the ruled surface generation mode is RESAMPLE, then these parameters are used to determine the resample rate. Resolution[0] defines the resolution in the direction of the polylines; Resolution[1] defines the resolution across the polylines (i.e., direction orthogonal to Resolution[0]).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPassLines (int )</computeroutput> - Indicate whether the generating lines are to be passed to the output. By defualt lines are not passed to the output.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPassLines ()</computeroutput> - Indicate whether the generating lines are to be passed to the output. By defualt lines are not passed to the output.  </para></listitem>
<listitem>
<para><computeroutput>obj.PassLinesOn ()</computeroutput> - Indicate whether the generating lines are to be passed to the output. By defualt lines are not passed to the output.  </para></listitem>
<listitem>
<para><computeroutput>obj.PassLinesOff ()</computeroutput> - Indicate whether the generating lines are to be passed to the output. By defualt lines are not passed to the output.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrientLoops (int )</computeroutput> - Indicate whether the starting points of the loops need to be determined. If set to 0, then its assumes that the 0th point of each loop should be always connected By defualt the loops are not oriented.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOrientLoops ()</computeroutput> - Indicate whether the starting points of the loops need to be determined. If set to 0, then its assumes that the 0th point of each loop should be always connected By defualt the loops are not oriented.  </para></listitem>
<listitem>
<para><computeroutput>obj.OrientLoopsOn ()</computeroutput> - Indicate whether the starting points of the loops need to be determined. If set to 0, then its assumes that the 0th point of each loop should be always connected By defualt the loops are not oriented.  </para></listitem>
<listitem>
<para><computeroutput>obj.OrientLoopsOff ()</computeroutput> - Indicate whether the starting points of the loops need to be determined. If set to 0, then its assumes that the 0th point of each loop should be always connected By defualt the loops are not oriented.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
