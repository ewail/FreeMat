<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="functions_varargin" kind="page">
    <compoundname>functions_varargin</compoundname>
    <title>VARARGIN Variable Input Arguments</title>
    <detaileddescription>
<para>Section: <ref refid="sec_functions_1sec_functions" kindref="member">Functions and Scripts</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>FreeMat functions can take a variable number of input arguments by setting the last argument in the argument list to <computeroutput>varargin</computeroutput>. This special keyword indicates that all arguments to the function (beyond the last non-<computeroutput>varargin</computeroutput> keyword) are assigned to a cell array named <computeroutput>varargin</computeroutput> available to the function. Variable argument functions are usually used when writing driver functions, i.e., functions that need to pass arguments to another function. The general syntax for a function that takes a variable number of arguments is <verbatim>  function [out_1,...,out_M] = fname(in_1,..,in_M,varargin)
</verbatim> Inside the function body, <computeroutput>varargin</computeroutput> collects the arguments to <computeroutput>fname</computeroutput> that are not assigned to the <computeroutput>in_k</computeroutput>. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is a simple wrapper to <computeroutput>feval</computeroutput> that demonstrates the use of variable arguments functions.</para><para><verbatim>     wrapcall.m
</verbatim></para><para><verbatim>function wrapcall(fname,varargin)
  feval(fname,varargin{:});
</verbatim></para><para>Now we show a call of the <computeroutput>wrapcall</computeroutput> function with a number of arguments</para><para><verbatim>--&gt; wrapcall(&apos;printf&apos;,&apos;%f...%f\n&apos;,pi,e)
3.141593...2.718282
</verbatim></para><para>A more serious driver routine could, for example, optimize a one dimensional function that takes a number of auxilliary parameters that are passed through <computeroutput>varargin</computeroutput>. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
