<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkabstractvolumemapper" kind="page">
    <compoundname>vtkrendering_vtkabstractvolumemapper</compoundname>
    <title>vtkAbstractVolumeMapper</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkAbstractVolumeMapper is the abstract definition of a volume mapper. Specific subclasses deal with different specific types of data input</para><para>To create an instance of class vtkAbstractVolumeMapper, simply invoke its constructor as follows <verbatim>  obj = vtkAbstractVolumeMapper
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkAbstractVolumeMapper has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkAbstractVolumeMapper class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractVolumeMapper = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractVolumeMapper = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkDataSet )</computeroutput> - Set/Get the input data  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.GetDataSetInput ()</computeroutput> - Set/Get the input data  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.GetDataObjectInput ()</computeroutput> - Set/Get the input data  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBounds ()</computeroutput> - Return bounding box (array of six doubles) of data expressed as (xmin,xmax, ymin,ymax, zmin,zmax).  </para></listitem>
<listitem>
<para><computeroutput>obj.GetBounds (double bounds[6])</computeroutput> - Return bounding box (array of six doubles) of data expressed as (xmin,xmax, ymin,ymax, zmin,zmax).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarMode (int )</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetScalarMode ()</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarModeToDefault ()</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarModeToUsePointData ()</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarModeToUseCellData ()</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarModeToUsePointFieldData ()</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScalarModeToUseCellFieldData ()</computeroutput> - Control how the mapper works with scalar point data and cell attribute data. By default (ScalarModeToDefault), the mapper will use point data, and if no point data is available, then cell data is used. Alternatively you can explicitly set the mapper to use point data (ScalarModeToUsePointData) or cell data (ScalarModeToUseCellData). You can also choose to get the scalars from an array in point field data (ScalarModeToUsePointFieldData) or cell field data (ScalarModeToUseCellFieldData). If scalars are coming from a field data array, you must call SelectScalarArray.  </para></listitem>
<listitem>
<para><computeroutput>obj.SelectScalarArray (int arrayNum)</computeroutput> - When ScalarMode is set to UsePointFieldData or UseCellFieldData, you can specify which scalar array to use during rendering. The transfer function in the vtkVolumeProperty (attached to the calling vtkVolume) will decide how to convert vectors to colors.  </para></listitem>
<listitem>
<para><computeroutput>obj.SelectScalarArray (string arrayName)</computeroutput> - When ScalarMode is set to UsePointFieldData or UseCellFieldData, you can specify which scalar array to use during rendering. The transfer function in the vtkVolumeProperty (attached to the calling vtkVolume) will decide how to convert vectors to colors.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetArrayName ()</computeroutput> - Get the array name or number and component to use for rendering.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetArrayId ()</computeroutput> - Get the array name or number and component to use for rendering.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetArrayAccessMode ()</computeroutput> - Return the method for obtaining scalar data.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetScalarModeAsString ()</computeroutput> - Return the method for obtaining scalar data.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
