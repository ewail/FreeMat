<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="inspection_isa" kind="page">
    <compoundname>inspection_isa</compoundname>
    <title>ISA Test Type of Variable</title>
    <detaileddescription>
<para>Section: <ref refid="sec_inspection_1sec_inspection" kindref="member">Inspection Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Tests the type of a variable. The syntax for its use is <verbatim>   y = isa(x,type)
</verbatim> where <computeroutput>x</computeroutput> is the variable to test, and <computeroutput>type</computeroutput> is the type. Supported built-in types are <itemizedlist>
<listitem>
<para><computeroutput>&apos;cell&apos;</computeroutput> for cell-arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;struct&apos;</computeroutput> for structure-arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;logical&apos;</computeroutput> for logical arrays  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint8&apos;</computeroutput> for unsigned 8-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int8&apos;</computeroutput> for signed 8-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint16&apos;</computeroutput> for unsigned 16-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int16&apos;</computeroutput> for signed 16-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint32&apos;</computeroutput> for unsigned 32-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int32&apos;</computeroutput> for signed 32-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;uint64&apos;</computeroutput> for unsigned 64-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;int64&apos;</computeroutput> for signed 64-bit integers  </para></listitem>
<listitem>
<para><computeroutput>&apos;single&apos;</computeroutput> for 32-bit floating point numbers  </para></listitem>
<listitem>
<para><computeroutput>&apos;double&apos;</computeroutput> for 64-bit floating point numbers  </para></listitem>
<listitem>
<para><computeroutput>&apos;char&apos;</computeroutput> for string arrays  </para></listitem>
</itemizedlist>
If the argument is a user-defined type (via the <computeroutput>class</computeroutput> function), then the name of that class is returned. </para></sect1>
<sect1 id="variables_matrix_1Examples">
<title>Examples</title>
<para>Here are some examples of the <computeroutput>isa</computeroutput> call.</para><para><verbatim>--&gt; a = {1}

a = 
 [1] 

--&gt; isa(a,&apos;char&apos;)

ans = 
 0 

--&gt; isa(a,&apos;cell&apos;)

ans = 
 1 
</verbatim></para><para>Here we use <computeroutput>isa</computeroutput> along with shortcut boolean evaluation to safely determine if a variable contains the string <computeroutput>&apos;hello&apos;</computeroutput></para><para><verbatim>--&gt; a = &apos;hello&apos;

a = 
hello
--&gt; isa(a,&apos;char&apos;) &amp;&amp; strcmp(a,&apos;hello&apos;)

ans = 
 1 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
