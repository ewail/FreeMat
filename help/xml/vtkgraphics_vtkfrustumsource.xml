<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkfrustumsource" kind="page">
    <compoundname>vtkgraphics_vtkfrustumsource</compoundname>
    <title>vtkFrustumSource</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkFrustumSource creates a frustum defines by a set of planes. The frustum is represented with four-sided polygons. It is possible to specify extra lines to better visualize the field of view.</para><para>.SECTION Usage Typical use consists of 3 steps:<orderedlist>
<listitem><para>get the planes coefficients from a vtkCamera with vtkCamera::GetFrustumPlanes()</para></listitem><listitem><para>initialize the planes with vtkPlanes::SetFrustumPlanes() with the planes coefficients</para></listitem><listitem><para>pass the vtkPlanes to a vtkFrustumSource.</para></listitem></orderedlist>
</para><para>To create an instance of class vtkFrustumSource, simply invoke its constructor as follows <verbatim>  obj = vtkFrustumSource
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkFrustumSource has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkFrustumSource class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFrustumSource = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFrustumSource = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPlanes = obj.GetPlanes ()</computeroutput> - Return the 6 planes defining the frustum. Initial value is NULL. The 6 planes are defined in this order: left,right,bottom,top,far,near. If Planes==NULL or if Planes-&gt;GetNumberOfPlanes()!=6 when RequestData() is called, an error message will be emitted and RequestData() will return right away.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlanes (vtkPlanes planes)</computeroutput> - Set the 6 planes defining the frustum.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetShowLines ()</computeroutput> - Tells if some extra lines will be generated. Initial value is true.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShowLines (bool )</computeroutput> - Tells if some extra lines will be generated. Initial value is true.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShowLinesOn ()</computeroutput> - Tells if some extra lines will be generated. Initial value is true.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShowLinesOff ()</computeroutput> - Tells if some extra lines will be generated. Initial value is true.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetLinesLength ()</computeroutput> - Length of the extra lines. This a stricly positive value. Initial value is 1.0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLinesLength (double )</computeroutput> - Length of the extra lines. This a stricly positive value. Initial value is 1.0.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Modified GetMTime because of Planes.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
