<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkhyperoctreesamplefunction" kind="page">
    <compoundname>vtkgraphics_vtkhyperoctreesamplefunction</compoundname>
    <title>vtkHyperOctreeSampleFunction</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkHyperOctreeSampleFunction is a source object that evaluates an implicit function to drive the subdivision process. The user can specify the threshold over which a subdivision occurs, the maximum and minimum level of subdivisions and the dimension of the hyperoctree.</para><para>To create an instance of class vtkHyperOctreeSampleFunction, simply invoke its constructor as follows <verbatim>  obj = vtkHyperOctreeSampleFunction
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkHyperOctreeSampleFunction has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkHyperOctreeSampleFunction class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHyperOctreeSampleFunction = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHyperOctreeSampleFunction = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLevels ()</computeroutput> - Return the maximum number of levels of the hyperoctree. <simplesect kind="post"><para>positive_result: result&gt;=1  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetLevels (int levels)</computeroutput> - Set the maximum number of levels of the hyperoctree. If GetMinLevels()&gt;=levels, GetMinLevels() is changed to levels-1. <simplesect kind="pre"><para>positive_levels: levels&gt;=1 </para></simplesect>
<simplesect kind="post"><para>is_set: this-&gt;GetLevels()==levels </para><simplesectsep/><para>min_is_valid: this-&gt;GetMinLevels()&lt;this-&gt;GetLevels()  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMinLevels ()</computeroutput> - Return the minimal number of levels of systematic subdivision. <simplesect kind="post"><para>positive_result: result&gt;=0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetMinLevels (int minLevels)</computeroutput> - Set the minimal number of levels of systematic subdivision. <simplesect kind="pre"><para>positive_minLevels: minLevels&gt;=0 </para></simplesect>
<simplesect kind="post"><para>is_set: this-&gt;GetMinLevels()==minLevels  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>double = obj.GetThreshold ()</computeroutput> - Return the threshold over which a subdivision is required. <simplesect kind="post"><para>positive_result: result&gt;0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetThreshold (double threshold)</computeroutput> - Set the threshold over which a subdivision is required. <simplesect kind="pre"><para>positive_threshold: threshold&gt;=0 </para></simplesect>
<simplesect kind="post"><para>is_set: this-&gt;GetThreshold()==threshold  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimension ()</computeroutput> - Return the dimension of the tree (1D:binary tree(2 children), 2D:quadtree(4 children), 3D:octree (8 children)) <simplesect kind="post"><para>valid_result: result&gt;=1 &amp;&amp; result&lt;=3  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetDimension (int dim)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (double , double , double )</computeroutput> - Set the size on each axis.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (double a[3])</computeroutput> - Set the size on each axis.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetSize ()</computeroutput> - Return the size on each axis.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrigin (double , double , double )</computeroutput> - Set the origin (position of corner (0,0,0) of the root.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrigin (double a[3])</computeroutput> - Set the origin (position of corner (0,0,0) of the root.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetOrigin ()</computeroutput> - Set the origin (position of corner (0,0,0) of the root. Return the origin (position of corner (0,0,0) ) of the root.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetWidth ()</computeroutput> - Return the length along the x-axis. <simplesect kind="post"><para>positive_result: result&gt;0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetWidth (double width)</computeroutput> - Set the length along the x-axis. <simplesect kind="pre"><para>positive_width: width&gt;0 </para></simplesect>
<simplesect kind="post"><para>width_is_set: GetWidth()==width  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHeight ()</computeroutput> - Return the length along the y-axis. Relevant only if GetDimension()&gt;=2 <simplesect kind="post"><para>positive_result: result&gt;0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetHeight (double height)</computeroutput> - Set the length along the y-axis. Relevant only if GetDimension()&gt;=2 <simplesect kind="pre"><para>positive_height: height&gt;0 </para></simplesect>
<simplesect kind="post"><para>height_is_set: GetHeight()==height  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDepth ()</computeroutput> - Return the length along the z-axis. Relevant only if GetDimension()&gt;=3 <simplesect kind="post"><para>positive_result: result&gt;0  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetDepth (double depth)</computeroutput> - Return the length along the z-axis. Relevant only if GetDimension()&gt;=3 <simplesect kind="pre"><para>positive_depth: depth&gt;0 </para></simplesect>
<simplesect kind="post"><para>depth_is_set: GetDepth()==depth  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.SetImplicitFunction (vtkImplicitFunction )</computeroutput> - Specify the implicit function to use to generate data.  </para></listitem>
<listitem>
<para><computeroutput>vtkImplicitFunction = obj.GetImplicitFunction ()</computeroutput> - Specify the implicit function to use to generate data.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarType (int )</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOutputScalarType ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToDouble ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToFloat ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToLong ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedLong ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToInt ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedInt ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToShort ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedShort ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToChar ()</computeroutput> - Set what type of scalar data this source should generate.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutputScalarTypeToUnsignedChar ()</computeroutput> - Return the MTime also considering the implicit function.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Return the MTime also considering the implicit function.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
