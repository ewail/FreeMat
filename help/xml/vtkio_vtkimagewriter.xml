<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtkimagewriter" kind="page">
    <compoundname>vtkio_vtkimagewriter</compoundname>
    <title>vtkImageWriter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageWriter writes images to files with any data type. The data type of the file is the same scalar type as the input. The dimensionality determines whether the data will be written in one or multiple files. This class is used as the superclass of most image writing classes such as vtkBMPWriter etc. It supports streaming.</para><para>To create an instance of class vtkImageWriter, simply invoke its constructor as follows <verbatim>  obj = vtkImageWriter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageWriter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageWriter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageWriter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageWriter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileName (string )</computeroutput> - Specify file name for the image file. You should specify either a FileName or a FilePrefix. Use FilePrefix if the data is stored in multiple files.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFileName ()</computeroutput> - Specify file name for the image file. You should specify either a FileName or a FilePrefix. Use FilePrefix if the data is stored in multiple files.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilePrefix (string )</computeroutput> - Specify file prefix for the image file(s).You should specify either a FileName or FilePrefix. Use FilePrefix if the data is stored in multiple files.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilePrefix ()</computeroutput> - Specify file prefix for the image file(s).You should specify either a FileName or FilePrefix. Use FilePrefix if the data is stored in multiple files.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilePattern (string )</computeroutput> - The sprintf format used to build filename from FilePrefix and number.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilePattern ()</computeroutput> - The sprintf format used to build filename from FilePrefix and number.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileDimensionality (int )</computeroutput> - What dimension are the files to be written. Usually this is 2, or 3. If it is 2 and the input is a volume then the volume will be written as a series of 2d slices.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFileDimensionality ()</computeroutput> - What dimension are the files to be written. Usually this is 2, or 3. If it is 2 and the input is a volume then the volume will be written as a series of 2d slices.  </para></listitem>
<listitem>
<para><computeroutput>obj.Write ()</computeroutput> - The main interface which triggers the writer to start.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeleteFiles ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
