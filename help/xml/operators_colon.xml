<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="operators_colon" kind="page">
    <compoundname>operators_colon</compoundname>
    <title>COLON Index Generation Operator</title>
    <detaileddescription>
<para>Section: <ref refid="sec_operators_1sec_operators" kindref="member">Mathematical Operators</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>There are two distinct syntaxes for the colon <computeroutput>:</computeroutput> operator - the two argument form <verbatim>  y = a : c
</verbatim> and the three argument form <verbatim>  y = a : b : c
</verbatim> The two argument form is exactly equivalent to <computeroutput>a:1:c</computeroutput>. The output <computeroutput>y</computeroutput> is the vector <formula id="87">\[ y = [a,a+b,a+2b,\ldots,a+nb] \]</formula> where <computeroutput>a+nb &lt;= c</computeroutput>. There is a third form of the colon operator, the no-argument form used in indexing (see <computeroutput>indexing</computeroutput> for more details). </para></sect1>
<sect1 id="transforms_svd_1Function">
<title>Internals</title>
<para>The colon operator turns out to be trickier to implement than one might believe at first, primarily because the floating point versions should do the right thing, which is not the obvious behavior. For example, suppose the user issues a three point colon command <verbatim>   y = a : b : c
</verbatim> The first question that one might need to answer is: how many points in this vector? If you answered <formula id="88">\[ n = \frac{c-a}{b}+1 \]</formula> then you would be doing the straighforward, but not correct thing. because a, b, and c are all floating point values, there are errors associated with each of the quantities that can lead to n not being an integer. A better way (and the way FreeMat currently does the calculation) is to compute the bounding values (for b positive) <formula id="89">\[ n \in \left[\frac{(c-a) \rightarrow 0}{b \rightarrow \infty}, \frac{(c-a) \rightarrow \infty}{b \rightarrow 0} \right] + 1 \]</formula> where <formula id="90">\[ x \rightarrow y \]</formula> means we replace x by the floating point number that is closest to it in the direction of y. Once we have determined the number of points we have to compute the intermediate values <formula id="91">\[ [a, a+b, a+2*b, \ldots, a+n*b] \]</formula> but one can readily verify for themselves that this may <bold>not</bold> be the same as the vector <formula id="92">\[ \mathrm{fliplr} [c, c-b, c-2*b, \ldots, c-n*b] \]</formula> even for the case where <formula id="93">\[ c = a + n*b \]</formula> for some n. The reason is that the roundoff in the calculations may be different depending on the nature of the sum. FreeMat uses the following strategy to compute the double-colon vector: <orderedlist>
<listitem>
<para>The value <computeroutput>n</computeroutput> is computed by taking the floor of the larger value in the interval defined above.  </para></listitem>
<listitem>
<para>If <computeroutput>n</computeroutput> falls inside the interval defined above, then it is assumed that the user intended <computeroutput>c = a + n*b</computeroutput>, and the symmetric algorithm is used. Otherwise, the nonsymmetric algorithm is used.  </para></listitem>
<listitem>
<para>The symmetric algorithm computes the vector via <formula id="94">\[ [a, a+b, a+2b,\ldots,c-2b,c-b,c] \]</formula> working symmetrically from both ends of the vector (hence the nomenclature), while the nonsymmetric algorithm computes <formula id="95">\[ [a, a+b ,a+2b,\ldots,a+nb] \]</formula> In practice, the entries are computed by repeated accumulation instead of multiplying the step size by an integer.  </para></listitem>
<listitem>
<para>The real interval calculation is modified so that we get the exact same result with <computeroutput>a:b:c</computeroutput> and <computeroutput>c:-b:a</computeroutput> (which basically means that instead of moving towards infinity, we move towards the signed infinity where the sign is inherited from <computeroutput>b</computeroutput>).  </para></listitem>
</orderedlist>
If you think this is all very obscure, it is. But without it, you will be confronted by mysterious vectors where the last entry is dropped, or where the values show progressively larger amounts of accumulated roundoff error. </para></sect1>
<sect1 id="variables_matrix_1Examples">
<title>Examples</title>
<para>Some simple examples of index generation.</para><para><verbatim>--&gt; y = 1:4

y = 
 1 2 3 4 
</verbatim></para><para>Now by half-steps:</para><para><verbatim>--&gt; y = 1:.5:4

y = 
    1.0000    1.5000    2.0000    2.5000    3.0000    3.5000    4.0000 
</verbatim></para><para>Now going backwards (negative steps)</para><para><verbatim>--&gt; y = 4:-.5:1

y = 
    4.0000    3.5000    3.0000    2.5000    2.0000    1.5000    1.0000 
</verbatim></para><para>If the endpoints are the same, one point is generated, regardless of the step size (middle argument)</para><para><verbatim>--&gt; y = 4:1:4

y = 
 4 
</verbatim></para><para>If the endpoints define an empty interval, the output is an empty matrix:</para><para><verbatim>--&gt; y = 5:4

y = 
  Empty array 1x0
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
