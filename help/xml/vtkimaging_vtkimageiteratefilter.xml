<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimageiteratefilter" kind="page">
    <compoundname>vtkimaging_vtkimageiteratefilter</compoundname>
    <title>vtkImageIterateFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageIterateFilter is a filter superclass that supports calling execute multiple times per update. The largest hack/open issue is that the input and output caches are temporarily changed to &quot;fool&quot; the subclasses. I believe the correct solution is to pass the in and out cache to the subclasses methods as arguments. Now the data is passes. Can the caches be passed, and data retrieved from the cache?</para><para>To create an instance of class vtkImageIterateFilter, simply invoke its constructor as follows <verbatim>  obj = vtkImageIterateFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageIterateFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageIterateFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageIterateFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageIterateFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIteration ()</computeroutput> - Get which iteration is current being performed. Normally the user will not access this method.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfIterations ()</computeroutput> - Get which iteration is current being performed. Normally the user will not access this method.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
