<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="flow_switch" kind="page">
    <compoundname>flow_switch</compoundname>
    <title>SWITCH Switch statement</title>
    <detaileddescription>
<para>Section: <ref refid="sec_flow_1sec_flow" kindref="member">Flow Control</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>switch</computeroutput> statement is used to selective execute code based on the value of either scalar value or a string. The general syntax for a <computeroutput>switch</computeroutput> statement is <verbatim>  switch(expression)
    case test_expression_1
      statements
    case test_expression_2
      statements
    otherwise
      statements
  end
</verbatim> The <computeroutput>otherwise</computeroutput> clause is optional. Note that each test expression can either be a scalar value, a string to test against (if the switch expression is a string), or a <computeroutput>cell-array</computeroutput> of expressions to test against. Note that unlike <computeroutput>C</computeroutput> <computeroutput>switch</computeroutput> statements, the FreeMat <computeroutput>switch</computeroutput> does not have fall-through, meaning that the statements associated with the first matching case are executed, and then the <computeroutput>switch</computeroutput> ends. Also, if the <computeroutput>switch</computeroutput> expression matches multiple <computeroutput>case</computeroutput> expressions, only the first one is executed. </para></sect1>
<sect1 id="variables_matrix_1Examples">
<title>Examples</title>
<para>Here is an example of a <computeroutput>switch</computeroutput> expression that tests against a string input:</para><para><verbatim>     switch_test.m
</verbatim></para><para><verbatim>function c = switch_test(a)
  switch(a)
    case {&apos;lima beans&apos;,&apos;root beer&apos;}
      c = &apos;food&apos;;
    case {&apos;red&apos;,&apos;green&apos;,&apos;blue&apos;}
      c = &apos;color&apos;;
    otherwise
      c = &apos;not sure&apos;;
  end
</verbatim></para><para>Now we exercise the switch statements</para><para><verbatim>--&gt; switch_test(&apos;root beer&apos;)

ans = 
food
--&gt; switch_test(&apos;red&apos;)

ans = 
color
--&gt; switch_test(&apos;carpet&apos;)

ans = 
not sure
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
