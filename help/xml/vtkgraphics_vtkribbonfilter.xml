<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkribbonfilter" kind="page">
    <compoundname>vtkgraphics_vtkribbonfilter</compoundname>
    <title>vtkRibbonFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRibbonFilter is a filter to create oriented ribbons from lines defined in polygonal dataset. The orientation of the ribbon is along the line segments and perpendicular to &quot;projected&quot; line normals. Projected line normals are the original line normals projected to be perpendicular to the local line segment. An offset angle can be specified to rotate the ribbon with respect to the normal.</para><para>To create an instance of class vtkRibbonFilter, simply invoke its constructor as follows <verbatim>  obj = vtkRibbonFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRibbonFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRibbonFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRibbonFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRibbonFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWidth (double )</computeroutput> - Set the &quot;half&quot; width of the ribbon. If the width is allowed to vary, this is the minimum width. The default is 0.5  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetWidthMinValue ()</computeroutput> - Set the &quot;half&quot; width of the ribbon. If the width is allowed to vary, this is the minimum width. The default is 0.5  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetWidthMaxValue ()</computeroutput> - Set the &quot;half&quot; width of the ribbon. If the width is allowed to vary, this is the minimum width. The default is 0.5  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetWidth ()</computeroutput> - Set the &quot;half&quot; width of the ribbon. If the width is allowed to vary, this is the minimum width. The default is 0.5  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAngle (double )</computeroutput> - Set the offset angle of the ribbon from the line normal. (The angle is expressed in degrees.) The default is 0.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetAngleMinValue ()</computeroutput> - Set the offset angle of the ribbon from the line normal. (The angle is expressed in degrees.) The default is 0.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetAngleMaxValue ()</computeroutput> - Set the offset angle of the ribbon from the line normal. (The angle is expressed in degrees.) The default is 0.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetAngle ()</computeroutput> - Set the offset angle of the ribbon from the line normal. (The angle is expressed in degrees.) The default is 0.0  </para></listitem>
<listitem>
<para><computeroutput>obj.SetVaryWidth (int )</computeroutput> - Turn on/off the variation of ribbon width with scalar value. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetVaryWidth ()</computeroutput> - Turn on/off the variation of ribbon width with scalar value. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>obj.VaryWidthOn ()</computeroutput> - Turn on/off the variation of ribbon width with scalar value. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>obj.VaryWidthOff ()</computeroutput> - Turn on/off the variation of ribbon width with scalar value. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWidthFactor (double )</computeroutput> - Set the maximum ribbon width in terms of a multiple of the minimum width. The default is 2.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetWidthFactor ()</computeroutput> - Set the maximum ribbon width in terms of a multiple of the minimum width. The default is 2.0  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDefaultNormal (double , double , double )</computeroutput> - Set the default normal to use if no normals are supplied, and DefaultNormalOn is set. The default is (0,0,1)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDefaultNormal (double a[3])</computeroutput> - Set the default normal to use if no normals are supplied, and DefaultNormalOn is set. The default is (0,0,1)  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetDefaultNormal ()</computeroutput> - Set the default normal to use if no normals are supplied, and DefaultNormalOn is set. The default is (0,0,1)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseDefaultNormal (int )</computeroutput> - Set a boolean to control whether to use default normals. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseDefaultNormal ()</computeroutput> - Set a boolean to control whether to use default normals. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>obj.UseDefaultNormalOn ()</computeroutput> - Set a boolean to control whether to use default normals. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>obj.UseDefaultNormalOff ()</computeroutput> - Set a boolean to control whether to use default normals. The default is Off  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGenerateTCoords (int )</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetGenerateTCoordsMinValue ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetGenerateTCoordsMaxValue ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetGenerateTCoords ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGenerateTCoordsToOff ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGenerateTCoordsToNormalizedLength ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGenerateTCoordsToUseLength ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGenerateTCoordsToUseScalars ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetGenerateTCoordsAsString ()</computeroutput> - Control whether and how texture coordinates are produced. This is useful for striping the ribbon with time textures, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTextureLength (double )</computeroutput> - Control the conversion of units during the texture coordinates calculation. The TextureLength indicates what length (whether calculated from scalars or length) is mapped to the [0,1) texture space. The default is 1.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetTextureLengthMinValue ()</computeroutput> - Control the conversion of units during the texture coordinates calculation. The TextureLength indicates what length (whether calculated from scalars or length) is mapped to the [0,1) texture space. The default is 1.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetTextureLengthMaxValue ()</computeroutput> - Control the conversion of units during the texture coordinates calculation. The TextureLength indicates what length (whether calculated from scalars or length) is mapped to the [0,1) texture space. The default is 1.0  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetTextureLength ()</computeroutput> - Control the conversion of units during the texture coordinates calculation. The TextureLength indicates what length (whether calculated from scalars or length) is mapped to the [0,1) texture space. The default is 1.0  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
