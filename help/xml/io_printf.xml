<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="io_printf" kind="page">
    <compoundname>io_printf</compoundname>
    <title>PRINTF Formated Output Function (C-Style)</title>
    <detaileddescription>
<para>Section: <ref refid="sec_io_1sec_io" kindref="member">Input/Ouput Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Prints values to the output. The general syntax for its use is <verbatim>  printf(format,a1,a2,...)
</verbatim> Here <computeroutput>format</computeroutput> is the format string, which is a string that controls the format of the output. The values of the variables <computeroutput>a_i</computeroutput> are substituted into the output as required. It is an error if there are not enough variables to satisfy the format string. Note that this <computeroutput>printf</computeroutput> command is not vectorized! Each variable must be a scalar.</para><para>It is important to point out that the <computeroutput>printf</computeroutput> function does not add a newline (or carriage return) to the output by default. That can lead to some confusing behavior if you do not know what to expect. For example, the command <computeroutput>printf(&apos;Hello&apos;)</computeroutput> does not appear to produce any output. In fact, it does produce the text, but it then gets overwritten by the prompt. To see the text, you need <computeroutput>printf(&apos;Hello<linebreak/>
&apos;)</computeroutput>. This seems odd, but allows you to assemble a line using multiple <computeroutput>printf</computeroutput> commands, including the <computeroutput>&apos;<linebreak/>
&apos;</computeroutput> when you are done with the line. You can also use the <computeroutput>&apos;\r&apos;</computeroutput> character as an explicit carriage return (with no line feed). This allows you to write to the same line many times (to show a progress string, for example).</para></sect1>
<sect1 id="io_printf_1Format">
<title>of the format string</title>
<para>The format string is a character string, beginning and ending in its initial shift state, if any. The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier. In between there may be (in this order) zero or more flags, an optional minimum field width, and an optional precision.</para><para>The arguments must correspond properly (after type promotion) with the conversion specifier, and are used in the order given.</para></sect1>
<sect1 id="io_printf_1The">
<title>conversion specifier</title>
<para>The character <computeroutput>%</computeroutput> is followed by zero or more of the following flags: <itemizedlist>
<listitem>
<para><computeroutput>#</computeroutput> The value should be converted to an ``alternate form&apos;&apos;. For <computeroutput>o</computeroutput> conversions, the first character of the output string is made zero (by prefixing a <computeroutput>0</computeroutput> if it was not zero already). For <computeroutput>x</computeroutput> and <computeroutput>X</computeroutput> conversions, a nonzero result has the string <computeroutput>&apos;0x&apos;</computeroutput> (or <computeroutput>&apos;0X&apos;</computeroutput> for <computeroutput>X</computeroutput> conversions) prepended to it. For <computeroutput>a, A, e, E, f, F, g,</computeroutput> and <computeroutput>G</computeroutput> conversions, the result will always contain a decimal point, even if no digits follow it (normally, a decimal point appears in the results of those conversions only if a digit follows). For <computeroutput>g</computeroutput> and <computeroutput>G</computeroutput> conversions, trailing zeros are not removed from the result as they would otherwise be. For other conversions, the result is undefined.  </para></listitem>
<listitem>
<para><computeroutput>0</computeroutput> The value should be zero padded. For <computeroutput>d, i, o, u, x, X, a, A, e, E, f, F, g,</computeroutput> and <computeroutput>G</computeroutput> conversions, the converted value is padded on the left with zeros rather than blanks. If the <computeroutput>0</computeroutput> and <computeroutput>-</computeroutput> flags both appear, the <computeroutput>0</computeroutput> flag is ignored. If a precision is given with a numeric conversion <computeroutput>(d, i, o, u, x, and X)</computeroutput>, the <computeroutput>0</computeroutput> flag is ignored. For other conversions, the behavior is undefined.  </para></listitem>
<listitem>
<para><computeroutput>-</computeroutput> The converted value is to be left adjusted on the field boundary. (The default is right justification.) Except for <computeroutput>n</computeroutput> conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros. A <computeroutput>-</computeroutput> overrides a <computeroutput>0</computeroutput> if both are given.  </para></listitem>
<listitem>
<para><computeroutput>&apos; &apos;</computeroutput> (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.  </para></listitem>
<listitem>
<para><computeroutput>+</computeroutput> A sign (<computeroutput>+</computeroutput> or <computeroutput>-</computeroutput>) always be placed before a number produced by a signed conversion. By default a sign is used only for negative numbers. A <computeroutput>+</computeroutput> overrides a space if both are used.  </para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="io_printf_1The">
<title>conversion specifier</title>
<para>An optional decimal digit string (with nonzero first digit) specifying a minimum field width. If the converted value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the left-adjustment flag has been given). A negative field width is taken as a <computeroutput>&apos;-&apos;</computeroutput> flag followed by a positive field width. In no case does a non-existent or small field width cause truncation of a field; if the result of a conversion is wider than the field width, the field is expanded to contain the conversion result.</para></sect1>
<sect1 id="io_printf_1The">
<title>conversion specifier</title>
<para>An optional precision, in the form of a period (<computeroutput>&apos;.&apos;</computeroutput>) followed by an optional decimal digit string. If the precision is given as just <computeroutput>&apos;.&apos;</computeroutput>, or the precision is negative, the precision is taken to be zero. This gives the minimum number of digits to appear for <computeroutput>d, i, o, u, x</computeroutput>, and <computeroutput>X</computeroutput> conversions, the number of digits to appear after the radix character for <computeroutput>a, A, e, E, f</computeroutput>, and <computeroutput>F</computeroutput> conversions, the maximum number of significant digits for <computeroutput>g</computeroutput> and <computeroutput>G</computeroutput> conversions, or the maximum number of characters to be printed from a string for s conversions.</para></sect1>
<sect1 id="io_printf_1The">
<title>conversion specifier</title>
<para>A character that specifies the type of conversion to be applied. The conversion specifiers and their meanings are: <itemizedlist>
<listitem>
<para><computeroutput>d,i</computeroutput> The int argument is converted to signed decimal notation. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros. The default precision is <computeroutput>1</computeroutput>. When <computeroutput>0</computeroutput> is printed with an explicit precision <computeroutput>0</computeroutput>, the output is empty.  </para></listitem>
<listitem>
<para><computeroutput>o,u,x,X</computeroutput> The unsigned int argument is converted to unsigned octal (<computeroutput>o</computeroutput>), unsigned decimal (<computeroutput>u</computeroutput>), or unsigned hexadecimal (<computeroutput>x</computeroutput> and <computeroutput>X</computeroutput>) notation. The letters <computeroutput>abcdef</computeroutput> are used for <computeroutput>x</computeroutput> conversions; the letters <computeroutput>ABCDEF</computeroutput> are used for <computeroutput>X</computeroutput> conversions. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros. The default precision is <computeroutput>1</computeroutput>. When <computeroutput>0</computeroutput> is printed with an explicit precision <computeroutput>0</computeroutput>, the output is empty.  </para></listitem>
<listitem>
<para><computeroutput>e,E</computeroutput> The double argument is rounded and converted in the style <computeroutput>[-]d.ddde dd</computeroutput> where there is one digit before the decimal-point character and the number of digits after it is equal to the precision; if the precision is missing, it is taken as <computeroutput>6</computeroutput>; if the precision is zero, no decimal-point character appears. An <computeroutput>E</computeroutput> conversion uses the letter <computeroutput>E</computeroutput> (rather than <computeroutput>e</computeroutput>) to introduce the exponent. The exponent always contains at least two digits; if the value is zero, the exponent is <computeroutput>00</computeroutput>.  </para></listitem>
<listitem>
<para><computeroutput>f,F</computeroutput> The double argument is rounded and converted to decimal notation in the style <computeroutput>[-]ddd.ddd</computeroutput>, where the number of digits after the decimal-point character is equal to the precision specification. If the precision is missing, it is taken as <computeroutput>6</computeroutput>; if the precision is explicitly zero, no decimal-point character appears. If a decimal point appears, at least one digit appears before it.  </para></listitem>
<listitem>
<para><computeroutput>g,G</computeroutput> The double argument is converted in style <computeroutput>f</computeroutput> or <computeroutput>e</computeroutput> (or <computeroutput>F</computeroutput> or <computeroutput>E</computeroutput> for <computeroutput>G</computeroutput> conversions). The precision specifies the number of significant digits. If the precision is missing, <computeroutput>6</computeroutput> digits are given; if the precision is zero, it is treated as <computeroutput>1</computeroutput>. Style e is used if the exponent from its conversion is less than <computeroutput>-4</computeroutput> or greater than or equal to the precision. Trailing zeros are removed from the fractional part of the result; a decimal point appears only if it is followed by at least one digit.  </para></listitem>
<listitem>
<para><computeroutput>c</computeroutput> The int argument is converted to an unsigned char, and the resulting character is written.  </para></listitem>
<listitem>
<para><computeroutput>s</computeroutput> The string argument is printed.  </para></listitem>
<listitem>
<para><computeroutput>%</computeroutput> A <computeroutput>&apos;&apos;</computeroutput> is written. No argument is converted. The complete conversion specification is <computeroutput>&apos;%&apos;</computeroutput>.  </para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here are some examples of the use of <computeroutput>printf</computeroutput> with various arguments. First we print out an integer and double value.</para><para><verbatim>--&gt; printf(&apos;intvalue is %d, floatvalue is %f\n&apos;,3,1.53);
intvalue is 3, floatvalue is 1.530000
</verbatim></para><para>Next, we print out a string value.</para><para><verbatim>--&gt; printf(&apos;string value is %s\n&apos;,&apos;hello&apos;);
string value is hello
</verbatim></para><para>Now, we print out an integer using 12 digits, zeros up front.</para><para><verbatim>--&gt; printf(&apos;integer padded is %012d\n&apos;,32);
integer padded is 000000000032
</verbatim></para><para>Print out a double precision value with a sign, a total of 18 characters (zero prepended if necessary), a decimal point, and 12 digit precision.</para><para><verbatim>--&gt; printf(&apos;float value is %+018.12f\n&apos;,pi);
float value is +0003.141592653590
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
