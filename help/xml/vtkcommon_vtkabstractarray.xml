<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkabstractarray" kind="page">
    <compoundname>vtkcommon_vtkabstractarray</compoundname>
    <title>vtkAbstractArray</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkAbstractArray is an abstract superclass for data array objects. This class defines an API that all subclasses must support. The data type must be assignable and copy-constructible, but no other assumptions about its type are made. Most of the subclasses of this array deal with numeric data either as scalars or tuples of scalars. A program can use the IsNumeric() method to check whether an instance of vtkAbstractArray contains numbers. It is also possible to test for this by attempting to SafeDownCast an array to an instance of vtkDataArray, although this assumes that all numeric arrays will always be descended from vtkDataArray.</para><para>Every array has a character-string name. The naming of the array occurs automatically when it is instantiated, but you are free to change this name using the SetName() method. (The array name is used for data manipulation.)</para><para>To create an instance of class vtkAbstractArray, simply invoke its constructor as follows <verbatim>  obj = vtkAbstractArray
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkAbstractArray has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkAbstractArray class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractArray = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractArray = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Allocate (vtkIdType sz, vtkIdType ext)</computeroutput> - Allocate memory for this array. Delete old storage only if necessary. Note that ext is no longer used.  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Release storage and reset array to initial state.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataType ()</computeroutput> - Return the underlying data type. An integer indicating data type is returned as specified in vtkSetGet.h.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataTypeSize ()</computeroutput> - Return the size of the underlying data type. For a bit, 0 is returned. For string 0 is returned. Arrays with variable length components return 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetElementComponentSize ()</computeroutput> - Return the size, in bytes, of the lowest-level element of an array. For vtkDataArray and subclasses this is the size of the data type. For vtkStringArray, this is sizeof(vtkStdString::value_type), which winds up being sizeof(char).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfComponents (int )</computeroutput> - Set/Get the dimention (n) of the components. Must be &gt;= 1. Make sure that this is set before allocation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfComponentsMinValue ()</computeroutput> - Set/Get the dimention (n) of the components. Must be &gt;= 1. Make sure that this is set before allocation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfComponentsMaxValue ()</computeroutput> - Set/Get the dimention (n) of the components. Must be &gt;= 1. Make sure that this is set before allocation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfComponents ()</computeroutput> - Set the number of tuples (a component group) in the array. Note that this may allocate space depending on the number of components. Also note that if allocation is performed no copy is performed so existing data will be lost (if data conservation is sought, one may use the Resize method instead).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfTuples (vtkIdType number)</computeroutput> - Set the number of tuples (a component group) in the array. Note that this may allocate space depending on the number of components. Also note that if allocation is performed no copy is performed so existing data will be lost (if data conservation is sought, one may use the Resize method instead).  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfTuples ()</computeroutput> - Set the tuple at the ith location using the jth tuple in the source array. This method assumes that the two arrays have the same type and structure. Note that range checking and memory allocation is not performed; use in conjunction with SetNumberOfTuples() to allocate space.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTuple (vtkIdType i, vtkIdType j, vtkAbstractArray source)</computeroutput> - Set the tuple at the ith location using the jth tuple in the source array. This method assumes that the two arrays have the same type and structure. Note that range checking and memory allocation is not performed; use in conjunction with SetNumberOfTuples() to allocate space.  </para></listitem>
<listitem>
<para><computeroutput>obj.InsertTuple (vtkIdType i, vtkIdType j, vtkAbstractArray source)</computeroutput> - Insert the jth tuple in the source array, at ith location in this array. Note that memory allocation is performed as necessary to hold the data.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.InsertNextTuple (vtkIdType j, vtkAbstractArray source)</computeroutput> - Insert the jth tuple in the source array, at the end in this array. Note that memory allocation is performed as necessary to hold the data. Returns the location at which the data was inserted.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetTuples (vtkIdList ptIds, vtkAbstractArray output)</computeroutput> - Given a list of point ids, return an array of tuples. You must insure that the output array has been previously allocated with enough space to hold the data.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetTuples (vtkIdType p1, vtkIdType p2, vtkAbstractArray output)</computeroutput> - Get the tuples for the range of points ids specified (i.e., p1-&gt;p2 inclusive). You must insure that the output array has been previously allocated with enough space to hold the data.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkAbstractArray da)</computeroutput> - Deep copy of data. Implementation left to subclasses, which should support as many type conversions as possible given the data type.</para><para>Subclasses should call vtkAbstractArray::DeepCopy() so that the information object (if one exists) is copied from <emphasis>da</emphasis>.  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateTuple (vtkIdType i, vtkIdList ptIndices, vtkAbstractArray source, double weights)</computeroutput> - Set the ith tuple in this array as the interpolated tuple value, given the ptIndices in the source array and associated interpolation weights. This method assumes that the two arrays are of the same type and strcuture.  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateTuple (vtkIdType i, vtkIdType id1, vtkAbstractArray source1, vtkIdType id2, vtkAbstractArray source2, double t)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Squeeze ()</computeroutput> - Resize object to just fit data requirement. Reclaims extra memory.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Resize (vtkIdType numTuples)</computeroutput> - Resize the array while conserving the data. Returns 1 if resizing succeeded and 0 otherwise.  </para></listitem>
<listitem>
<para><computeroutput>obj.Reset ()</computeroutput> - Return the size of the data.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetSize ()</computeroutput> - What is the maximum id currently in the array.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetMaxId ()</computeroutput> - This method lets the user specify data to be held by the array. The array argument is a pointer to the data. size is the size of the array supplied by the user. Set save to 1 to keep the class from deleting the array when it cleans up or reallocates memory. The class uses the actual array provided; it does not copy the data from the supplied array.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetActualMemorySize ()</computeroutput> - Return the memory in kilobytes consumed by this data array. Used to support streaming and reading/writing data. The value returned is guaranteed to be greater than or equal to the memory required to actually represent the data represented by this object. The information returned is valid only after the pipeline has been updated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetName (string )</computeroutput> - Set/get array&apos;s name  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetName ()</computeroutput> - Set/get array&apos;s name  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetDataTypeAsString (void )</computeroutput> - Creates an array for dataType where dataType is one of VTK_BIT, VTK_CHAR, VTK_UNSIGNED_CHAR, VTK_SHORT, VTK_UNSIGNED_SHORT, VTK_INT, VTK_UNSIGNED_INT, VTK_LONG, VTK_UNSIGNED_LONG, VTK_DOUBLE, VTK_DOUBLE, VTK_ID_TYPE, VTK_STRING. Note that the data array returned has be deleted by the user.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsNumeric ()</computeroutput> - This method is here to make backward compatibility easier. It must return true if and only if an array contains numeric data.  </para></listitem>
<listitem>
<para><computeroutput>vtkArrayIterator = obj.NewIterator ()</computeroutput> - Subclasses must override this method and provide the right kind of templated vtkArrayIteratorTemplate.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetDataSize ()</computeroutput> - Tell the array explicitly that the data has changed. This is only necessary to call when you modify the array contents without using the array&apos;s API (i.e. you retrieve a pointer to the data and modify the array contents). You need to call this so that the fast lookup will know to rebuild itself. Otherwise, the lookup functions will give incorrect results.  </para></listitem>
<listitem>
<para><computeroutput>obj.DataChanged ()</computeroutput> - Tell the array explicitly that the data has changed. This is only necessary to call when you modify the array contents without using the array&apos;s API (i.e. you retrieve a pointer to the data and modify the array contents). You need to call this so that the fast lookup will know to rebuild itself. Otherwise, the lookup functions will give incorrect results.  </para></listitem>
<listitem>
<para><computeroutput>obj.ClearLookup ()</computeroutput> - Delete the associated fast lookup data structure on this array, if it exists. The lookup will be rebuilt on the next call to a lookup function.  </para></listitem>
<listitem>
<para><computeroutput>vtkInformation = obj.GetInformation ()</computeroutput> - Get an information object that can be used to annotate the array. This will always return an instance of vtkInformation, if one is not currently associated with the array it will be created.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.HasInformation ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
