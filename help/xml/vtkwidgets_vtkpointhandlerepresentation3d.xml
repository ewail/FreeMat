<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkpointhandlerepresentation3d" kind="page">
    <compoundname>vtkwidgets_vtkpointhandlerepresentation3d</compoundname>
    <title>vtkPointHandleRepresentation3D</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class is used to represent a vtkHandleWidget. It represents a position in 3D world coordinates using a x-y-z cursor. The cursor can be configured to show a bounding box and/or shadows.</para><para>To create an instance of class vtkPointHandleRepresentation3D, simply invoke its constructor as follows <verbatim>  obj = vtkPointHandleRepresentation3D
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPointHandleRepresentation3D has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPointHandleRepresentation3D class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>vtkPointHandleRepresentation3D = obj.NewInstance ()</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>vtkPointHandleRepresentation3D = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard methods for instances of this class.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWorldPosition (double p[3])</computeroutput> - Set the position of the point in world and display coordinates. Note that if the position is set outside of the bounding box, it will be clamped to the boundary of the bounding box. This method overloads the superclasses&apos; SetWorldPosition() and SetDisplayPosition() in order to set the focal point of the cursor properly.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDisplayPosition (double p[3])</computeroutput> - Set the position of the point in world and display coordinates. Note that if the position is set outside of the bounding box, it will be clamped to the boundary of the bounding box. This method overloads the superclasses&apos; SetWorldPosition() and SetDisplayPosition() in order to set the focal point of the cursor properly.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutline (int o)</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOutline ()</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.OutlineOn ()</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.OutlineOff ()</computeroutput> - Turn on/off the wireframe x-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXShadows (int o)</computeroutput> - Turn on/off the wireframe x-shadows.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetXShadows ()</computeroutput> - Turn on/off the wireframe x-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.XShadowsOn ()</computeroutput> - Turn on/off the wireframe x-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.XShadowsOff ()</computeroutput> - Turn on/off the wireframe y-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetYShadows (int o)</computeroutput> - Turn on/off the wireframe y-shadows.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetYShadows ()</computeroutput> - Turn on/off the wireframe y-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.YShadowsOn ()</computeroutput> - Turn on/off the wireframe y-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.YShadowsOff ()</computeroutput> - Turn on/off the wireframe z-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetZShadows (int o)</computeroutput> - Turn on/off the wireframe z-shadows.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetZShadows ()</computeroutput> - Turn on/off the wireframe z-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.ZShadowsOn ()</computeroutput> - Turn on/off the wireframe z-shadows.  </para></listitem>
<listitem>
<para><computeroutput>obj.ZShadowsOff ()</computeroutput> - If translation mode is on, as the widget is moved the bounding box, shadows, and cursor are all translated and sized simultaneously as the point moves (i.e., the left and middle mouse buttons act the same). If translation mode is off, the cursor does not scale itself (based on the specified handle size), and the bounding box and shadows do not move or size themselves as the cursor focal point moves, which is constrained by the bounds of the point representation. (Note that the bounds can be scaled up using the right mouse button, and the bounds can be manually set with the SetBounds() method.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTranslationMode (int )</computeroutput> - If translation mode is on, as the widget is moved the bounding box, shadows, and cursor are all translated and sized simultaneously as the point moves (i.e., the left and middle mouse buttons act the same). If translation mode is off, the cursor does not scale itself (based on the specified handle size), and the bounding box and shadows do not move or size themselves as the cursor focal point moves, which is constrained by the bounds of the point representation. (Note that the bounds can be scaled up using the right mouse button, and the bounds can be manually set with the SetBounds() method.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTranslationMode ()</computeroutput> - If translation mode is on, as the widget is moved the bounding box, shadows, and cursor are all translated and sized simultaneously as the point moves (i.e., the left and middle mouse buttons act the same). If translation mode is off, the cursor does not scale itself (based on the specified handle size), and the bounding box and shadows do not move or size themselves as the cursor focal point moves, which is constrained by the bounds of the point representation. (Note that the bounds can be scaled up using the right mouse button, and the bounds can be manually set with the SetBounds() method.)  </para></listitem>
<listitem>
<para><computeroutput>obj.TranslationModeOn ()</computeroutput> - If translation mode is on, as the widget is moved the bounding box, shadows, and cursor are all translated and sized simultaneously as the point moves (i.e., the left and middle mouse buttons act the same). If translation mode is off, the cursor does not scale itself (based on the specified handle size), and the bounding box and shadows do not move or size themselves as the cursor focal point moves, which is constrained by the bounds of the point representation. (Note that the bounds can be scaled up using the right mouse button, and the bounds can be manually set with the SetBounds() method.)  </para></listitem>
<listitem>
<para><computeroutput>obj.TranslationModeOff ()</computeroutput> - If translation mode is on, as the widget is moved the bounding box, shadows, and cursor are all translated and sized simultaneously as the point moves (i.e., the left and middle mouse buttons act the same). If translation mode is off, the cursor does not scale itself (based on the specified handle size), and the bounding box and shadows do not move or size themselves as the cursor focal point moves, which is constrained by the bounds of the point representation. (Note that the bounds can be scaled up using the right mouse button, and the bounds can be manually set with the SetBounds() method.)  </para></listitem>
<listitem>
<para><computeroutput>obj.AllOn ()</computeroutput> - Convenience methods to turn outline and shadows on and off.  </para></listitem>
<listitem>
<para><computeroutput>obj.AllOff ()</computeroutput> - Set/Get the handle properties when unselected and selected.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProperty (vtkProperty )</computeroutput> - Set/Get the handle properties when unselected and selected.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSelectedProperty (vtkProperty )</computeroutput> - Set/Get the handle properties when unselected and selected.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetProperty ()</computeroutput> - Set/Get the handle properties when unselected and selected.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedProperty ()</computeroutput> - Set/Get the handle properties when unselected and selected.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHotSpotSize (double )</computeroutput> - Set the &quot;hot spot&quot; size; i.e., the region around the focus, in which the motion vector is used to control the constrained sliding action. Note the size is specified as a fraction of the length of the diagonal of the point widget&apos;s bounding box.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHotSpotSizeMinValue ()</computeroutput> - Set the &quot;hot spot&quot; size; i.e., the region around the focus, in which the motion vector is used to control the constrained sliding action. Note the size is specified as a fraction of the length of the diagonal of the point widget&apos;s bounding box.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHotSpotSizeMaxValue ()</computeroutput> - Set the &quot;hot spot&quot; size; i.e., the region around the focus, in which the motion vector is used to control the constrained sliding action. Note the size is specified as a fraction of the length of the diagonal of the point widget&apos;s bounding box.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHotSpotSize ()</computeroutput> - Set the &quot;hot spot&quot; size; i.e., the region around the focus, in which the motion vector is used to control the constrained sliding action. Note the size is specified as a fraction of the length of the diagonal of the point widget&apos;s bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleSize (double size)</computeroutput> - Overload the superclasses SetHandleSize() method to update internal variables.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBounds ()</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.BuildRepresentation ()</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartWidgetInteraction (double eventPos[2])</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.WidgetInteraction (double eventPos[2])</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ComputeInteractionState (int X, int Y, int modify)</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double bounds[6])</computeroutput> - Methods to make this class properly act like a vtkWidgetRepresentation.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkProp prop)</computeroutput> - Methods to make this class behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetActors (vtkPropCollection )</computeroutput> - Methods to make this class behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - Methods to make this class behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOpaqueGeometry (vtkViewport viewport)</computeroutput> - Methods to make this class behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport viewport)</computeroutput> - Methods to make this class behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasTranslucentPolygonalGeometry ()</computeroutput> - Methods to make this class behave as a vtkProp.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
