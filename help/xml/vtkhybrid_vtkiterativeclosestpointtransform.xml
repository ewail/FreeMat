<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkhybrid_vtkiterativeclosestpointtransform" kind="page">
    <compoundname>vtkhybrid_vtkiterativeclosestpointtransform</compoundname>
    <title>vtkIterativeClosestPointTransform</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkhybrid_1sec_vtkhybrid" kindref="member">Visualization Toolkit Hybrid Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Match two surfaces using the iterative closest point (ICP) algorithm. The core of the algorithm is to match each vertex in one surface with the closest surface point on the other, then apply the transformation that modify one surface to best match the other (in a least square sense). This has to be iterated to get proper convergence of the surfaces. .SECTION Note Use vtkTransformPolyDataFilter to apply the resulting ICP transform to your data. You might also set it to your actor&apos;s user transform. .SECTION Note This class makes use of vtkLandmarkTransform internally to compute the best fit. Use the GetLandmarkTransform member to get a pointer to that transform and set its parameters. You might, for example, constrain the number of degrees of freedom of the solution (i.e. rigid body, similarity, etc.) by checking the vtkLandmarkTransform documentation for its SetMode member.</para><para>To create an instance of class vtkIterativeClosestPointTransform, simply invoke its constructor as follows <verbatim>  obj = vtkIterativeClosestPointTransform
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkIterativeClosestPointTransform has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkIterativeClosestPointTransform class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkIterativeClosestPointTransform = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkIterativeClosestPointTransform = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSource (vtkDataSet source)</computeroutput> - Specify the source and target data sets.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTarget (vtkDataSet target)</computeroutput> - Specify the source and target data sets.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.GetSource ()</computeroutput> - Specify the source and target data sets.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.GetTarget ()</computeroutput> - Specify the source and target data sets.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLocator (vtkCellLocator locator)</computeroutput> - Set/Get a spatial locator for speeding up the search process. An instance of vtkCellLocator is used by default.  </para></listitem>
<listitem>
<para><computeroutput>vtkCellLocator = obj.GetLocator ()</computeroutput> - Set/Get a spatial locator for speeding up the search process. An instance of vtkCellLocator is used by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumNumberOfIterations (int )</computeroutput> - Set/Get the maximum number of iterations. Default is 50.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumNumberOfIterations ()</computeroutput> - Set/Get the maximum number of iterations. Default is 50.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfIterations ()</computeroutput> - Get the number of iterations since the last update  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCheckMeanDistance (int )</computeroutput> - Force the algorithm to check the mean distance between two iterations. Default is Off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCheckMeanDistance ()</computeroutput> - Force the algorithm to check the mean distance between two iterations. Default is Off.  </para></listitem>
<listitem>
<para><computeroutput>obj.CheckMeanDistanceOn ()</computeroutput> - Force the algorithm to check the mean distance between two iterations. Default is Off.  </para></listitem>
<listitem>
<para><computeroutput>obj.CheckMeanDistanceOff ()</computeroutput> - Force the algorithm to check the mean distance between two iterations. Default is Off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMeanDistanceMode (int )</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMeanDistanceModeMinValue ()</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMeanDistanceModeMaxValue ()</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMeanDistanceMode ()</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMeanDistanceModeToRMS ()</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMeanDistanceModeToAbsoluteValue ()</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetMeanDistanceModeAsString ()</computeroutput> - Specify the mean distance mode. This mode expresses how the mean distance is computed. The RMS mode is the square root of the average of the sum of squares of the closest point distances. The Absolute Value mode is the mean of the sum of absolute values of the closest point distances. The default is VTK_ICP_MODE_RMS  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumMeanDistance (double )</computeroutput> - Set/Get the maximum mean distance between two iteration. If the mean distance is lower than this, the convergence stops. The default is 0.01.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMaximumMeanDistance ()</computeroutput> - Set/Get the maximum mean distance between two iteration. If the mean distance is lower than this, the convergence stops. The default is 0.01.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMeanDistance ()</computeroutput> - Get the mean distance between the last two iterations.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumNumberOfLandmarks (int )</computeroutput> - Set/Get the maximum number of landmarks sampled in your dataset. If your dataset is dense, then you will typically not need all the points to compute the ICP transform. The default is 200.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumNumberOfLandmarks ()</computeroutput> - Set/Get the maximum number of landmarks sampled in your dataset. If your dataset is dense, then you will typically not need all the points to compute the ICP transform. The default is 200.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStartByMatchingCentroids (int )</computeroutput> - Starts the process by translating source centroid to target centroid. The default is Off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetStartByMatchingCentroids ()</computeroutput> - Starts the process by translating source centroid to target centroid. The default is Off.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartByMatchingCentroidsOn ()</computeroutput> - Starts the process by translating source centroid to target centroid. The default is Off.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartByMatchingCentroidsOff ()</computeroutput> - Starts the process by translating source centroid to target centroid. The default is Off.  </para></listitem>
<listitem>
<para><computeroutput>vtkLandmarkTransform = obj.GetLandmarkTransform ()</computeroutput> - Get the internal landmark transform. Use it to constrain the number of degrees of freedom of the solution (i.e. rigid body, similarity, etc.).  </para></listitem>
<listitem>
<para><computeroutput>obj.Inverse ()</computeroutput> - Invert the transformation. This is done by switching the source and target.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractTransform = obj.MakeTransform ()</computeroutput> - Make another transform of the same type.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
