<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="io_load" kind="page">
    <compoundname>io_load</compoundname>
    <title>LOAD Load Variables From A File</title>
    <detaileddescription>
<para>Section: <ref refid="sec_io_1sec_io" kindref="member">Input/Ouput Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Loads a set of variables from a file in a machine independent format. The <computeroutput>load</computeroutput> function takes one argument: <verbatim>  load filename,
</verbatim> or alternately, <verbatim>  load(&apos;filename&apos;)
</verbatim> This command is the companion to <computeroutput>save</computeroutput>. It loads the contents of the file generated by <computeroutput>save</computeroutput> back into the current context. Global and persistent variables are also loaded and flagged appropriately. By default, FreeMat assumes that files that end in a <computeroutput>.mat</computeroutput> or <computeroutput>.MAT</computeroutput> extension are MATLAB-formatted files. Also, FreeMat assumes that files that end in <computeroutput>.txt</computeroutput> or <computeroutput>.TXT</computeroutput> are ASCII files. For other filenames, FreeMat first tries to open the file as a FreeMat binary format file (as created by the <computeroutput>save</computeroutput> function). If the file fails to open as a FreeMat binary file, then FreeMat attempts to read it as an ASCII file.</para><para>You can force FreeMat to assume a particular format for the file by using alternate forms of the <computeroutput>load</computeroutput> command. In particular, <verbatim>  load -ascii filename
</verbatim> will load the data in file <computeroutput>filename</computeroutput> as an ASCII file (space delimited numeric text) loaded into a single variable in the current workspace with the name <computeroutput>filename</computeroutput> (without the extension).</para><para>For MATLAB-formatted data files, you can use <verbatim>  load -mat filename
</verbatim> which forces FreeMat to assume that <computeroutput>filename</computeroutput> is a MAT-file, regardless of the extension on the filename.</para><para>You can also specify which variables to load from a file (not from an ASCII file - only single 2-D variables can be successfully saved and retrieved from ASCII files) using the additional syntaxes of the <computeroutput>load</computeroutput> command. In particular, you can specify a set of variables to load by name <verbatim>  load filename Var_1 Var_2 Var_3 ...
</verbatim> where <computeroutput>Var_n</computeroutput> is the name of a variable to load from the file. Alternately, you can use the regular expression syntax <verbatim>  load filename -regexp expr_1 expr_2 expr_3 ...
</verbatim> where <computeroutput>expr_n</computeroutput> is a regular expression (roughly as expected by <computeroutput>regexp</computeroutput>). Note that a simpler regular expression mechanism is used for this syntax than the full mechanism used by the <computeroutput>regexp</computeroutput> command.</para><para>Finally, you can use <computeroutput>load</computeroutput> to create a variable containing the contents of the file, instead of automatically inserting the variables into the curent workspace. For this form of <computeroutput>load</computeroutput> you must use the function syntax, and capture the output: <verbatim>  V = load(&apos;arg1&apos;,&apos;arg2&apos;,...)
</verbatim> which returns a structure <computeroutput>V</computeroutput> with one field for each variable retrieved from the file. For ASCII files, <computeroutput>V</computeroutput> is a double precision matrix.</para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is a simple example of <computeroutput>save</computeroutput>/<computeroutput>load</computeroutput>. First, we save some variables to a file.</para><para><verbatim>--&gt; D = {1,5,&apos;hello&apos;};
--&gt; s = &apos;test string&apos;;
--&gt; x = randn(512,1);
--&gt; z = zeros(512);
--&gt; who
  Variable Name       Type   Flags             Size
              D      cell                    [1x3]
              s      char                    [1x11]
              x    double                    [512x1]
              z    double                    [512x512]
--&gt; save loadsave.dat
</verbatim></para><para>Next, we clear the variables, and then load them back from the file.</para><para><verbatim>--&gt; clear D s x z
--&gt; who
  Variable Name       Type   Flags             Size
            ans    double                    [0x0]
--&gt; load loadsave.dat
--&gt; who
  Variable Name       Type   Flags             Size
              D      cell                    [1x3]
            ans    double                    [0x0]
              s      char                    [1x11]
              x    double                    [512x1]
              z    double                    [512x512]
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
