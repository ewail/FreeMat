<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimagerectilinearwipe" kind="page">
    <compoundname>vtkimaging_vtkimagerectilinearwipe</compoundname>
    <title>vtkImageRectilinearWipe</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageRectilinearWipe makes a rectilinear combination of two images. The two input images must correspond in size, scalar type and number of components. The resulting image has four possible configurations called: Quad - alternate input 0 and input 1 horizontally and vertically. Select this with SetWipeModeToQuad. The Position specifies the location of the quad intersection. Corner - 3 of one input and 1 of the other. Select the location of input 0 with with SetWipeModeToLowerLeft, SetWipeModeToLowerRight, SetWipeModeToUpperLeft and SetWipeModeToUpperRight. The Position selects the location of the corner. Horizontal - alternate input 0 and input 1 with a vertical split. Select this with SetWipeModeToHorizontal. Position[0] specifies the location of the vertical transition between input 0 and input 1. Vertical - alternate input 0 and input 1 with a horizontal split. Only the y The intersection point of the rectilinear points is controlled with the Point ivar.</para><para>To create an instance of class vtkImageRectilinearWipe, simply invoke its constructor as follows <verbatim>  obj = vtkImageRectilinearWipe
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageRectilinearWipe has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageRectilinearWipe class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageRectilinearWipe = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageRectilinearWipe = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (int , int )</computeroutput> - Set/Get the location of the image transition. Note that position is specified in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (int a[2])</computeroutput> - Set/Get the location of the image transition. Note that position is specified in pixels.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetPosition ()</computeroutput> - Set/Get the location of the image transition. Note that position is specified in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput1 (vtkDataObject in)</computeroutput> - Set the two inputs to this filter.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput2 (vtkDataObject in)</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipe (int )</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetWipeMinValue ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetWipeMaxValue ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetWipe ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToQuad ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToHorizontal ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToVertical ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToLowerLeft ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToLowerRight ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToUpperLeft ()</computeroutput> - Specify the wipe mode. This mode determnis how input 0 and input 1 are combined to produce the output. Each mode uses one or both of the values stored in Position. SetWipeToQuad - alternate input 0 and input 1 horizontally and vertically. The Position specifies the location of the quad intersection. SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one input and 1 of the other. Select the location of input 0 to the LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the location of the corner. SetWipeToHorizontal - alternate input 0 and input 1 with a vertical split. Position[0] specifies the location of the vertical transition between input 0 and input 1. SetWipeToVertical - alternate input 0 and input 1 with a horizontal split. Position[1] specifies the location of the horizonal transition between input 0 and input 1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWipeToUpperRight ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
