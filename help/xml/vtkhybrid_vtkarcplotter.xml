<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkhybrid_vtkarcplotter" kind="page">
    <compoundname>vtkhybrid_vtkarcplotter</compoundname>
    <title>vtkArcPlotter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkhybrid_1sec_vtkhybrid" kindref="member">Visualization Toolkit Hybrid Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkArcPlotter performs plotting of attribute data along polylines defined with an input vtkPolyData data object. Any type of attribute data can be plotted including scalars, vectors, tensors, normals, texture coordinates, and field data. Either one or multiple data components can be plotted.</para><para>To use this class you must specify an input data set that contains one or more polylines, and some attribute data including which component of the attribute data. (By default, this class processes the first component of scalar data.) You will also need to set an offset radius (the distance of the polyline to the median line of the plot), a width for the plot (the distance that the minimum and maximum plot values are mapped into), an possibly an offset (used to offset attribute data with multiple components).</para><para>Normally the filter automatically computes normals for generating the offset arc plot. However, you can specify a default normal and use that instead.</para><para>To create an instance of class vtkArcPlotter, simply invoke its constructor as follows <verbatim>  obj = vtkArcPlotter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkArcPlotter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkArcPlotter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkArcPlotter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkArcPlotter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCamera (vtkCamera )</computeroutput> - Specify a camera used to orient the plot along the arc. If no camera is specified, then the orientation of the plot is arbitrary.  </para></listitem>
<listitem>
<para><computeroutput>vtkCamera = obj.GetCamera ()</computeroutput> - Specify a camera used to orient the plot along the arc. If no camera is specified, then the orientation of the plot is arbitrary.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotMode (int )</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPlotMode ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotModeToPlotScalars ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotModeToPlotVectors ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotModeToPlotNormals ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotModeToPlotTCoords ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotModeToPlotTensors ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotModeToPlotFieldData ()</computeroutput> - Specify which data to plot: scalars, vectors, normals, texture coords, tensors, or field data. If the data has more than one component, use the method SetPlotComponent to control which component to plot.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlotComponent (int )</computeroutput> - Set/Get the component number to plot if the data has more than one component. If the value of the plot component is == (-1), then all the components will be plotted.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPlotComponent ()</computeroutput> - Set/Get the component number to plot if the data has more than one component. If the value of the plot component is == (-1), then all the components will be plotted.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRadius (double )</computeroutput> - Set the radius of the &quot;median&quot; value of the first plotted component.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadiusMinValue ()</computeroutput> - Set the radius of the &quot;median&quot; value of the first plotted component.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadiusMaxValue ()</computeroutput> - Set the radius of the &quot;median&quot; value of the first plotted component.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadius ()</computeroutput> - Set the radius of the &quot;median&quot; value of the first plotted component.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHeight (double )</computeroutput> - Set the height of the plot. (The radius combined with the height define the location of the plot relative to the generating polyline.)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHeightMinValue ()</computeroutput> - Set the height of the plot. (The radius combined with the height define the location of the plot relative to the generating polyline.)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHeightMaxValue ()</computeroutput> - Set the height of the plot. (The radius combined with the height define the location of the plot relative to the generating polyline.)  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHeight ()</computeroutput> - Set the height of the plot. (The radius combined with the height define the location of the plot relative to the generating polyline.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOffset (double )</computeroutput> - Specify an offset that translates each subsequent plot (if there is more than one component plotted) from the defining arc (i.e., polyline).  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetOffsetMinValue ()</computeroutput> - Specify an offset that translates each subsequent plot (if there is more than one component plotted) from the defining arc (i.e., polyline).  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetOffsetMaxValue ()</computeroutput> - Specify an offset that translates each subsequent plot (if there is more than one component plotted) from the defining arc (i.e., polyline).  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetOffset ()</computeroutput> - Specify an offset that translates each subsequent plot (if there is more than one component plotted) from the defining arc (i.e., polyline).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseDefaultNormal (int )</computeroutput> - Set a boolean to control whether to use default normals. By default, normals are automatically computed from the generating polyline and camera.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseDefaultNormal ()</computeroutput> - Set a boolean to control whether to use default normals. By default, normals are automatically computed from the generating polyline and camera.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseDefaultNormalOn ()</computeroutput> - Set a boolean to control whether to use default normals. By default, normals are automatically computed from the generating polyline and camera.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseDefaultNormalOff ()</computeroutput> - Set a boolean to control whether to use default normals. By default, normals are automatically computed from the generating polyline and camera.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDefaultNormal (float , float , float )</computeroutput> - Set the default normal to use if you do not wish automatic normal calculation. The arc plot will be generated using this normal.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDefaultNormal (float a[3])</computeroutput> - Set the default normal to use if you do not wish automatic normal calculation. The arc plot will be generated using this normal.  </para></listitem>
<listitem>
<para><computeroutput>float = obj. GetDefaultNormal ()</computeroutput> - Set the default normal to use if you do not wish automatic normal calculation. The arc plot will be generated using this normal.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFieldDataArray (int )</computeroutput> - Set/Get the field data array to plot. This instance variable is only applicable if field data is plotted.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFieldDataArrayMinValue ()</computeroutput> - Set/Get the field data array to plot. This instance variable is only applicable if field data is plotted.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFieldDataArrayMaxValue ()</computeroutput> - Set/Get the field data array to plot. This instance variable is only applicable if field data is plotted.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFieldDataArray ()</computeroutput> - Set/Get the field data array to plot. This instance variable is only applicable if field data is plotted.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - New GetMTime because of camera dependency.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
