<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkcamera" kind="page">
    <compoundname>vtkrendering_vtkcamera</compoundname>
    <title>vtkCamera</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCamera is a virtual camera for 3D rendering. It provides methods to position and orient the view point and focal point. Convenience methods for moving about the focal point also are provided. More complex methods allow the manipulation of the computer graphics model including view up vector, clipping planes, and camera perspective.</para><para>To create an instance of class vtkCamera, simply invoke its constructor as follows <verbatim>  obj = vtkCamera
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCamera has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCamera class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCamera = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCamera = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (double x, double y, double z)</computeroutput> - Set/Get the position of the camera in world coordinates. The default position is (0,0,1).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (double a[3])</computeroutput> - Set/Get the position of the camera in world coordinates. The default position is (0,0,1).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetPosition ()</computeroutput> - Set/Get the position of the camera in world coordinates. The default position is (0,0,1).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFocalPoint (double x, double y, double z)</computeroutput> - Set/Get the focal of the camera in world coordinates. The default focal point is the origin.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFocalPoint (double a[3])</computeroutput> - Set/Get the focal of the camera in world coordinates. The default focal point is the origin.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetFocalPoint ()</computeroutput> - Set/Get the focal of the camera in world coordinates. The default focal point is the origin.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetViewUp (double vx, double vy, double vz)</computeroutput> - Set/Get the view up direction for the camera. The default is (0,1,0).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetViewUp (double a[3])</computeroutput> - Set/Get the view up direction for the camera. The default is (0,1,0).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetViewUp ()</computeroutput> - Set/Get the view up direction for the camera. The default is (0,1,0).  </para></listitem>
<listitem>
<para><computeroutput>obj.OrthogonalizeViewUp ()</computeroutput> - Recompute the ViewUp vector to force it to be perpendicular to camera-&gt;focalpoint vector. Unless you are going to use Yaw or Azimuth on the camera, there is no need to do this.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDistance (double )</computeroutput> - Move the focal point so that it is the specified distance from the camera position. This distance must be positive.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDistance ()</computeroutput> - Return the distance from the camera position to the focal point. This distance is positive.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetDirectionOfProjection ()</computeroutput> - Get the vector in the direction from the camera position to the focal point. This is usually the opposite of the ViewPlaneNormal, the vector perpendicular to the screen, unless the view is oblique.  </para></listitem>
<listitem>
<para><computeroutput>obj.Dolly (double value)</computeroutput> - Divide the camera&apos;s distance from the focal point by the given dolly value. Use a value greater than one to dolly-in toward the focal point, and use a value less than one to dolly-out away from the focal point.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRoll (double angle)</computeroutput> - Set the roll angle of the camera about the direction of projection.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRoll ()</computeroutput> - Set the roll angle of the camera about the direction of projection.  </para></listitem>
<listitem>
<para><computeroutput>obj.Roll (double angle)</computeroutput> - Rotate the camera about the direction of projection. This will spin the camera about its axis.  </para></listitem>
<listitem>
<para><computeroutput>obj.Azimuth (double angle)</computeroutput> - Rotate the camera about the view up vector centered at the focal point. Note that the view up vector is whatever was set via SetViewUp, and is not necessarily perpendicular to the direction of projection. The result is a horizontal rotation of the camera.  </para></listitem>
<listitem>
<para><computeroutput>obj.Yaw (double angle)</computeroutput> - Rotate the focal point about the view up vector, using the camera&apos;s position as the center of rotation. Note that the view up vector is whatever was set via SetViewUp, and is not necessarily perpendicular to the direction of projection. The result is a horizontal rotation of the scene.  </para></listitem>
<listitem>
<para><computeroutput>obj.Elevation (double angle)</computeroutput> - Rotate the camera about the cross product of the negative of the direction of projection and the view up vector, using the focal point as the center of rotation. The result is a vertical rotation of the scene.  </para></listitem>
<listitem>
<para><computeroutput>obj.Pitch (double angle)</computeroutput> - Rotate the focal point about the cross product of the view up vector and the direction of projection, using the camera&apos;s position as the center of rotation. The result is a vertical rotation of the camera.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParallelProjection (int flag)</computeroutput> - Set/Get the value of the ParallelProjection instance variable. This determines if the camera should do a perspective or parallel projection.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetParallelProjection ()</computeroutput> - Set/Get the value of the ParallelProjection instance variable. This determines if the camera should do a perspective or parallel projection.  </para></listitem>
<listitem>
<para><computeroutput>obj.ParallelProjectionOn ()</computeroutput> - Set/Get the value of the ParallelProjection instance variable. This determines if the camera should do a perspective or parallel projection.  </para></listitem>
<listitem>
<para><computeroutput>obj.ParallelProjectionOff ()</computeroutput> - Set/Get the value of the ParallelProjection instance variable. This determines if the camera should do a perspective or parallel projection.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseHorizontalViewAngle (int flag)</computeroutput> - Set/Get the value of the UseHorizontalViewAngle instance variable. If set, the camera&apos;s view angle represents a horizontal view angle, rather than the default vertical view angle. This is useful if the application uses a display device which whose specs indicate a particular horizontal view angle, or if the application varies the window height but wants to keep the perspective transform unchanges.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseHorizontalViewAngle ()</computeroutput> - Set/Get the value of the UseHorizontalViewAngle instance variable. If set, the camera&apos;s view angle represents a horizontal view angle, rather than the default vertical view angle. This is useful if the application uses a display device which whose specs indicate a particular horizontal view angle, or if the application varies the window height but wants to keep the perspective transform unchanges.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseHorizontalViewAngleOn ()</computeroutput> - Set/Get the value of the UseHorizontalViewAngle instance variable. If set, the camera&apos;s view angle represents a horizontal view angle, rather than the default vertical view angle. This is useful if the application uses a display device which whose specs indicate a particular horizontal view angle, or if the application varies the window height but wants to keep the perspective transform unchanges.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseHorizontalViewAngleOff ()</computeroutput> - Set/Get the value of the UseHorizontalViewAngle instance variable. If set, the camera&apos;s view angle represents a horizontal view angle, rather than the default vertical view angle. This is useful if the application uses a display device which whose specs indicate a particular horizontal view angle, or if the application varies the window height but wants to keep the perspective transform unchanges.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetViewAngle (double angle)</computeroutput> - Set/Get the camera view angle, which is the angular height of the camera view measured in degrees. The default angle is 30 degrees. This method has no effect in parallel projection mode. The formula for setting the angle up for perfect perspective viewing is: angle = 2*atan((h/2)/d) where h is the height of the RenderWindow (measured by holding a ruler up to your screen) and d is the distance from your eyes to the screen.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetViewAngle ()</computeroutput> - Set/Get the camera view angle, which is the angular height of the camera view measured in degrees. The default angle is 30 degrees. This method has no effect in parallel projection mode. The formula for setting the angle up for perfect perspective viewing is: angle = 2*atan((h/2)/d) where h is the height of the RenderWindow (measured by holding a ruler up to your screen) and d is the distance from your eyes to the screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParallelScale (double scale)</computeroutput> - Set/Get the scaling used for a parallel projection, i.e. the height of the viewport in world-coordinate distances. The default is 1. Note that the &quot;scale&quot; parameter works as an &quot;inverse scale&quot; <mdash/> larger numbers produce smaller images. This method has no effect in perspective projection mode.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetParallelScale ()</computeroutput> - Set/Get the scaling used for a parallel projection, i.e. the height of the viewport in world-coordinate distances. The default is 1. Note that the &quot;scale&quot; parameter works as an &quot;inverse scale&quot; <mdash/> larger numbers produce smaller images. This method has no effect in perspective projection mode.  </para></listitem>
<listitem>
<para><computeroutput>obj.Zoom (double factor)</computeroutput> - In perspective mode, decrease the view angle by the specified factor. In parallel mode, decrease the parallel scale by the specified factor. A value greater than 1 is a zoom-in, a value less than 1 is a zoom-out.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetClippingRange (double dNear, double dFar)</computeroutput> - Set/Get the location of the near and far clipping planes along the direction of projection. Both of these values must be positive. How the clipping planes are set can have a large impact on how well z-buffering works. In particular the front clipping plane can make a very big difference. Setting it to 0.01 when it really could be 1.0 can have a big impact on your z-buffer resolution farther away. The default clipping range is (0.1,1000).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetClippingRange (double a[2])</computeroutput> - Set/Get the location of the near and far clipping planes along the direction of projection. Both of these values must be positive. How the clipping planes are set can have a large impact on how well z-buffering works. In particular the front clipping plane can make a very big difference. Setting it to 0.01 when it really could be 1.0 can have a big impact on your z-buffer resolution farther away. The default clipping range is (0.1,1000).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetClippingRange ()</computeroutput> - Set/Get the location of the near and far clipping planes along the direction of projection. Both of these values must be positive. How the clipping planes are set can have a large impact on how well z-buffering works. In particular the front clipping plane can make a very big difference. Setting it to 0.01 when it really could be 1.0 can have a big impact on your z-buffer resolution farther away. The default clipping range is (0.1,1000).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetThickness (double )</computeroutput> - Set the distance between clipping planes. This method adjusts the far clipping plane to be set a distance &apos;thickness&apos; beyond the near clipping plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetThickness ()</computeroutput> - Set the distance between clipping planes. This method adjusts the far clipping plane to be set a distance &apos;thickness&apos; beyond the near clipping plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWindowCenter (double x, double y)</computeroutput> - Set/Get the center of the window in viewport coordinates. The viewport coordinate range is ([-1,+1],[-1,+1]). This method is for if you have one window which consists of several viewports, or if you have several screens which you want to act together as one large screen.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetWindowCenter ()</computeroutput> - Set/Get the center of the window in viewport coordinates. The viewport coordinate range is ([-1,+1],[-1,+1]). This method is for if you have one window which consists of several viewports, or if you have several screens which you want to act together as one large screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetObliqueAngles (double alpha, double beta)</computeroutput> - Get/Set the oblique viewing angles. The first angle, alpha, is the angle (measured from the horizontal) that rays along the direction of projection will follow once projected onto the 2D screen. The second angle, beta, is the angle between the view plane and the direction of projection. This creates a shear transform x&apos; = x + dz*cos(alpha)/tan(beta), y&apos; = dz*sin(alpha)/tan(beta) where dz is the distance of the point from the focal plane. The angles are (45,90) by default. Oblique projections commonly use (30,63.435).  </para></listitem>
<listitem>
<para><computeroutput>obj.ApplyTransform (vtkTransform t)</computeroutput> - Apply a transform to the camera. The camera position, focal-point, and view-up are re-calculated using the transform&apos;s matrix to multiply the old points by the new transform.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetViewPlaneNormal ()</computeroutput> - Get the ViewPlaneNormal. This vector will point opposite to the direction of projection, unless you have created an sheared output view using SetViewShear/SetObliqueAngles.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetViewShear (double dxdz, double dydz, double center)</computeroutput> - Set/get the shear transform of the viewing frustum. Parameters are dx/dz, dy/dz, and center. center is a factor that describes where to shear around. The distance dshear from the camera where no shear occurs is given by (dshear = center * FocalDistance).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetViewShear (double d[3])</computeroutput> - Set/get the shear transform of the viewing frustum. Parameters are dx/dz, dy/dz, and center. center is a factor that describes where to shear around. The distance dshear from the camera where no shear occurs is given by (dshear = center * FocalDistance).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetViewShear ()</computeroutput> - Set/get the shear transform of the viewing frustum. Parameters are dx/dz, dy/dz, and center. center is a factor that describes where to shear around. The distance dshear from the camera where no shear occurs is given by (dshear = center * FocalDistance).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEyeAngle (double )</computeroutput> - Set/Get the separation between eyes (in degrees). This is used when generating stereo images.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEyeAngle ()</computeroutput> - Set/Get the separation between eyes (in degrees). This is used when generating stereo images.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFocalDisk (double )</computeroutput> - Set the size of the cameras lens in world coordinates. This is only used when the renderer is doing focal depth rendering. When that is being done the size of the focal disk will effect how significant the depth effects will be.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFocalDisk ()</computeroutput> - Set the size of the cameras lens in world coordinates. This is only used when the renderer is doing focal depth rendering. When that is being done the size of the focal disk will effect how significant the depth effects will be.  </para></listitem>
<listitem>
<para><computeroutput>vtkMatrix4x4 = obj.GetViewTransformMatrix ()</computeroutput> - Return the matrix of the view transform. The ViewTransform depends on only three ivars: the Position, the FocalPoint, and the ViewUp vector. All the other methods are there simply for the sake of the users&apos; convenience.  </para></listitem>
<listitem>
<para><computeroutput>vtkTransform = obj.GetViewTransformObject ()</computeroutput> - Return the projection transform matrix, which converts from camera coordinates to viewport coordinates. The &apos;aspect&apos; is the width/height for the viewport, and the nearz and farz are the Z-buffer values that map to the near and far clipping planes. The viewport coordinates of a point located inside the frustum are in the range ([-1,+1],[-1,+1],[nearz,farz]). WARNING: the name of the method is wrong, it should be GetProjectionTransformMatrix() (it is used also in parallel projection)  <simplesect kind="pre"><para>source_exists!=0 </para><simplesectsep/><para>not_this: source!=this  </para></simplesect>
</para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkCamera source)</computeroutput> - Copy the properties of `source&apos; into `this&apos;. Copy the contents of the matrices. <simplesect kind="pre"><para>source_exists!=0 </para><simplesectsep/><para>not_this: source!=this  </para></simplesect>
</para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
