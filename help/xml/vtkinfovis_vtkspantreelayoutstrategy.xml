<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtkspantreelayoutstrategy" kind="page">
    <compoundname>vtkinfovis_vtkspantreelayoutstrategy</compoundname>
    <title>vtkSpanTreeLayoutStrategy</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkSpanTreeLayout is a strategy for drawing directed graphs that works by first extracting a spanning tree (more accurately, a spanning forest), and using this both to position graph vertices and to plan the placement of non-tree edges. The latter are drawn with the aid of edge points to produce a tidy drawing.</para><para>The approach is best suited to &quot;quasi-trees&quot;, graphs where the number of edges is of the same order as the number of nodes; it is less well suited to denser graphs. The boolean flag DepthFirstSpanningTree determines whether a depth-first or breadth-first strategy is used to construct the underlying forest, and the choice of strategy affects the output layout significantly. Informal experiments suggest that the breadth-first strategy is better for denser graphs.</para><para>Different layouts could also be produced by plugging in alternative tree layout strategies. To work with the method of routing non-tree edges, any strategy should draw a tree so that levels are equally spaced along the z-axis, precluding for example the use of a radial or balloon layout.</para><para>vtkSpanTreeLayout is based on an approach to 3D graph layout first developed as part of the &quot;tulip&quot; tool by Dr. David Auber at LaBRI, U.Bordeaux: see www.tulip-software.org</para><para>This implementation departs from the original version in that: (a) it is reconstructed to use Titan/VTK data structures; (b) it uses a faster method for dealing with non-tree edges, requiring at most two edge points per edge (c) allows for plugging in different tree layout methods (d) allows selection of two different strategies for building the underlying layout tree, which can yield significantly different results depending on the data.</para><para>.SECTION Thanks Thanks to David Duke from the University of Leeds for providing this implementation.</para><para>To create an instance of class vtkSpanTreeLayoutStrategy, simply invoke its constructor as follows <verbatim>  obj = vtkSpanTreeLayoutStrategy
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSpanTreeLayoutStrategy has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSpanTreeLayoutStrategy class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSpanTreeLayoutStrategy = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSpanTreeLayoutStrategy = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDepthFirstSpanningTree (bool )</computeroutput> - If set, base the layout on a depth-first spanning tree, rather than the default breadth-first spanning tree. Switching between DFT and BFT may significantly change the layout, and choice must be made on a per-graph basis. Default value is off.  </para></listitem>
<listitem>
<para><computeroutput>bool = obj.GetDepthFirstSpanningTree ()</computeroutput> - If set, base the layout on a depth-first spanning tree, rather than the default breadth-first spanning tree. Switching between DFT and BFT may significantly change the layout, and choice must be made on a per-graph basis. Default value is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.DepthFirstSpanningTreeOn ()</computeroutput> - If set, base the layout on a depth-first spanning tree, rather than the default breadth-first spanning tree. Switching between DFT and BFT may significantly change the layout, and choice must be made on a per-graph basis. Default value is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.DepthFirstSpanningTreeOff ()</computeroutput> - If set, base the layout on a depth-first spanning tree, rather than the default breadth-first spanning tree. Switching between DFT and BFT may significantly change the layout, and choice must be made on a per-graph basis. Default value is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.Layout ()</computeroutput> - Perform the layout.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
