<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtkmergegraphs" kind="page">
    <compoundname>vtkinfovis_vtkmergegraphs</compoundname>
    <title>vtkMergeGraphs</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkMergeGraphs combines information from two graphs into one. Both graphs must have pedigree ids assigned to the vertices. The output will contain the vertices/edges in the first graph, in addition to:</para><para><itemizedlist>
<listitem><para>vertices in the second graph whose pedigree id does not match a vertex in the first input</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>edges in the second graph</para></listitem></itemizedlist>
</para><para>The output will contain the same attribute structure as the input; fields associated only with the second input graph will not be passed to the output. When possible, the vertex/edge data for new vertices and edges will be populated with matching attributes on the second graph. To be considered a matching attribute, the array must have the same name, type, and number of components.</para><para>To create an instance of class vtkMergeGraphs, simply invoke its constructor as follows <verbatim>  obj = vtkMergeGraphs
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkMergeGraphs has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkMergeGraphs class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMergeGraphs = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMergeGraphs = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ExtendGraph (vtkMutableGraphHelper g1, vtkGraph g2)</computeroutput> - This is the core functionality of the algorithm. Adds edges and vertices from g2 into g1.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaxEdges (vtkIdType )</computeroutput> - The maximum number of edges in the combined graph. Default is -1, which specifies that there should be no limit on the number of edges.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetMaxEdges ()</computeroutput> - The maximum number of edges in the combined graph. Default is -1, which specifies that there should be no limit on the number of edges.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
