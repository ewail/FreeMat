<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkdistributedgraphhelper" kind="page">
    <compoundname>vtkfiltering_vtkdistributedgraphhelper</compoundname>
    <title>vtkDistributedGraphHelper</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>A distributed graph helper can be attached to an empty vtkGraph object to turn the vtkGraph into a distributed graph, whose vertices and edges are distributed across several different processors. vtkDistributedGraphHelper is an abstract class. Use a subclass of vtkDistributedGraphHelper, such as vtkPBGLDistributedGraphHelper, to build distributed graphs.</para><para>The distributed graph helper provides facilities used by vtkGraph to communicate with other processors that store other parts of the same distributed graph. The only user-level functionality provided by vtkDistributedGraphHelper involves this communication among processors and the ability to map between &quot;distributed&quot; vertex and edge IDs and their component parts (processor and local index). For example, the Synchronize() method provides a barrier that allows all processors to catch up to the same point in the code before any processor can leave that Synchronize() call. For example, one would call Synchronize() after adding many edges to a distributed graph, so that all processors can handle the addition of inter-processor edges and continue, after the Synchronize() call, with a consistent view of the distributed graph. For more information about manipulating (distributed) graphs, see the vtkGraph documentation.</para><para>To create an instance of class vtkDistributedGraphHelper, simply invoke its constructor as follows <verbatim>  obj = vtkDistributedGraphHelper
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkDistributedGraphHelper has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkDistributedGraphHelper class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDistributedGraphHelper = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDistributedGraphHelper = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetVertexOwner (vtkIdType v) const</computeroutput> - Returns owner of vertex v, by extracting top ceil(log2 P) bits of v.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetVertexIndex (vtkIdType v) const</computeroutput> - Returns local index of vertex v, by masking off top ceil(log2 P) bits of v.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetEdgeOwner (vtkIdType e_id) const</computeroutput> - Returns owner of edge with ID e_id, by extracting top ceil(log2 P) bits of e_id.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetEdgeIndex (vtkIdType e_id) const</computeroutput> - Returns local index of edge with ID e_id, by masking off top ceil(log2 P) bits of e_id.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.MakeDistributedId (int owner, vtkIdType local)</computeroutput> - Builds a distributed ID consisting of the given owner and the local ID.  </para></listitem>
<listitem>
<para><computeroutput>obj.Synchronize ()</computeroutput> - Synchronizes all of the processors involved in this distributed graph, so that all processors have a consistent view of the distributed graph for the computation that follows. This routine should be invoked after adding new edges into the distributed graph, so that other processors will see those edges (or their corresponding back-edges).  </para></listitem>
<listitem>
<para><computeroutput>vtkDistributedGraphHelper = obj.Clone ()</computeroutput> - Clones the distributed graph helper, returning another distributed graph helper of the same kind that can be used in another vtkGraph.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
