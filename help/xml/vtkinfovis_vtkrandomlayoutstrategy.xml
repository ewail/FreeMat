<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkinfovis_vtkrandomlayoutstrategy" kind="page">
    <compoundname>vtkinfovis_vtkrandomlayoutstrategy</compoundname>
    <title>vtkRandomLayoutStrategy</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkinfovis_1sec_vtkinfovis" kindref="member">Visualization Toolkit Infovis Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Assigns points to the vertices of a graph randomly within a bounded range.</para><para>.SECION Thanks Thanks to Brian Wylie from Sandia National Laboratories for adding incremental layout capabilities.</para><para>To create an instance of class vtkRandomLayoutStrategy, simply invoke its constructor as follows <verbatim>  obj = vtkRandomLayoutStrategy
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRandomLayoutStrategy has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRandomLayoutStrategy class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRandomLayoutStrategy = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRandomLayoutStrategy = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRandomSeed (int )</computeroutput> - Seed the random number generator used to compute point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRandomSeedMinValue ()</computeroutput> - Seed the random number generator used to compute point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRandomSeedMaxValue ()</computeroutput> - Seed the random number generator used to compute point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRandomSeed ()</computeroutput> - Seed the random number generator used to compute point positions. This has a significant effect on their final positions when the layout is complete.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGraphBounds (double , double , double , double , double , double )</computeroutput> - Set / get the region in space in which to place the final graph. The GraphBounds only affects the results if AutomaticBoundsComputation is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGraphBounds (double a[6])</computeroutput> - Set / get the region in space in which to place the final graph. The GraphBounds only affects the results if AutomaticBoundsComputation is off.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetGraphBounds ()</computeroutput> - Set / get the region in space in which to place the final graph. The GraphBounds only affects the results if AutomaticBoundsComputation is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAutomaticBoundsComputation (int )</computeroutput> - Turn on/off automatic graph bounds calculation. If this boolean is off, then the manually specified GraphBounds is used. If on, then the input&apos;s bounds us used as the graph bounds.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAutomaticBoundsComputation ()</computeroutput> - Turn on/off automatic graph bounds calculation. If this boolean is off, then the manually specified GraphBounds is used. If on, then the input&apos;s bounds us used as the graph bounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.AutomaticBoundsComputationOn ()</computeroutput> - Turn on/off automatic graph bounds calculation. If this boolean is off, then the manually specified GraphBounds is used. If on, then the input&apos;s bounds us used as the graph bounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.AutomaticBoundsComputationOff ()</computeroutput> - Turn on/off automatic graph bounds calculation. If this boolean is off, then the manually specified GraphBounds is used. If on, then the input&apos;s bounds us used as the graph bounds.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetThreeDimensionalLayout (int )</computeroutput> - Turn on/off layout of graph in three dimensions. If off, graph layout occurs in two dimensions. By default, three dimensional layout is on.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetThreeDimensionalLayout ()</computeroutput> - Turn on/off layout of graph in three dimensions. If off, graph layout occurs in two dimensions. By default, three dimensional layout is on.  </para></listitem>
<listitem>
<para><computeroutput>obj.ThreeDimensionalLayoutOn ()</computeroutput> - Turn on/off layout of graph in three dimensions. If off, graph layout occurs in two dimensions. By default, three dimensional layout is on.  </para></listitem>
<listitem>
<para><computeroutput>obj.ThreeDimensionalLayoutOff ()</computeroutput> - Turn on/off layout of graph in three dimensions. If off, graph layout occurs in two dimensions. By default, three dimensional layout is on.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGraph (vtkGraph graph)</computeroutput> - Set the graph to layout.  </para></listitem>
<listitem>
<para><computeroutput>obj.Layout ()</computeroutput> - Perform the random layout.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
