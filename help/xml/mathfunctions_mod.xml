<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="mathfunctions_mod" kind="page">
    <compoundname>mathfunctions_mod</compoundname>
    <title>MOD Modulus Operation</title>
    <detaileddescription>
<para>Section: <ref refid="sec_mathfunctions_1sec_mathfunctions" kindref="member">Mathematical Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Computes the modulus of an array. The syntax for its use is <verbatim>   y = mod(x,n)
</verbatim> where <computeroutput>x</computeroutput> is matrix, and <computeroutput>n</computeroutput> is the base of the modulus. The effect of the <computeroutput>mod</computeroutput> operator is to add or subtract multiples of <computeroutput>n</computeroutput> to the vector <computeroutput>x</computeroutput> so that each element <computeroutput>x_i</computeroutput> is between <computeroutput>0</computeroutput> and <computeroutput>n</computeroutput> (strictly). Note that <computeroutput>n</computeroutput> does not have to be an integer. Also, <computeroutput>n</computeroutput> can either be a scalar (same base for all elements of <computeroutput>x</computeroutput>), or a vector (different base for each element of <computeroutput>x</computeroutput>).</para><para>Note that the following are defined behaviors: <orderedlist>
<listitem>
<para><computeroutput>mod(x,0) = x</computeroutput>@  </para></listitem>
<listitem>
<para><computeroutput>mod(x,x) = 0</computeroutput>@  </para></listitem>
<listitem>
<para><computeroutput>mod(x,n)</computeroutput>@ has the same sign as <computeroutput>n</computeroutput> for all other cases.  </para></listitem>
</orderedlist>
</para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>The following examples show some uses of <computeroutput>mod</computeroutput> arrays.</para><para><verbatim>--&gt; mod(18,12)

ans = 
 6 

--&gt; mod(6,5)

ans = 
 1 

--&gt; mod(2*pi,pi)

ans = 
 0 
</verbatim></para><para>Here is an example of using <computeroutput>mod</computeroutput> to determine if integers are even or odd:</para><para><verbatim>--&gt; mod([1,3,5,2],2)

ans = 
 1 1 1 0 
</verbatim></para><para>Here we use the second form of <computeroutput>mod</computeroutput>, with each element using a separate base.</para><para><verbatim>--&gt; mod([9 3 2 0],[1 0 2 2])

ans = 
 0 3 0 0 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
