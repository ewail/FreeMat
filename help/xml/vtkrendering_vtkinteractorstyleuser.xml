<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkinteractorstyleuser" kind="page">
    <compoundname>vtkrendering_vtkinteractorstyleuser</compoundname>
    <title>vtkInteractorStyleUser</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The most common way to customize user interaction is to write a subclass of vtkInteractorStyle: vtkInteractorStyleUser allows you to customize the interaction to without subclassing vtkInteractorStyle. This is particularly useful for setting up custom interaction modes in scripting languages such as Tcl and Python. This class allows you to hook into the MouseMove, ButtonPress/Release, KeyPress/Release, etc. events. If you want to hook into just a single mouse button, but leave the interaction modes for the others unchanged, you must use e.g. SetMiddleButtonPressMethod() instead of the more general SetButtonPressMethod().</para><para>To create an instance of class vtkInteractorStyleUser, simply invoke its constructor as follows <verbatim>  obj = vtkInteractorStyleUser
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkInteractorStyleUser has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkInteractorStyleUser class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorStyleUser = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInteractorStyleUser = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetLastPos ()</computeroutput> - Get the most recent mouse position during mouse motion. In your user interaction method, you must use this to track the mouse movement. Do not use GetEventPosition(), which records the last position where a mouse button was pressed.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetOldPos ()</computeroutput> - Get the previous mouse position during mouse motion, or after a key press. This can be used to calculate the relative displacement of the mouse.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShiftKey ()</computeroutput> - Test whether modifiers were held down when mouse button or key was pressed  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCtrlKey ()</computeroutput> - Test whether modifiers were held down when mouse button or key was pressed  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetChar ()</computeroutput> - Get the character for a Char event.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetKeySym ()</computeroutput> - Get the KeySym (in the same format as Tk KeySyms) for a KeyPress or KeyRelease method.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetButton ()</computeroutput> - Get the mouse button that was last pressed inside the window (returns zero when the button is released).  </para></listitem>
<listitem>
<para><computeroutput>obj.OnMouseMove ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnLeftButtonDown ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnLeftButtonUp ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnMiddleButtonDown ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnMiddleButtonUp ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnRightButtonDown ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnRightButtonUp ()</computeroutput> - Generic event bindings  </para></listitem>
<listitem>
<para><computeroutput>obj.OnChar ()</computeroutput> - Keyboard functions  </para></listitem>
<listitem>
<para><computeroutput>obj.OnKeyPress ()</computeroutput> - Keyboard functions  </para></listitem>
<listitem>
<para><computeroutput>obj.OnKeyRelease ()</computeroutput> - Keyboard functions  </para></listitem>
<listitem>
<para><computeroutput>obj.OnExpose ()</computeroutput> - These are more esoteric events, but are useful in some cases.  </para></listitem>
<listitem>
<para><computeroutput>obj.OnConfigure ()</computeroutput> - These are more esoteric events, but are useful in some cases.  </para></listitem>
<listitem>
<para><computeroutput>obj.OnEnter ()</computeroutput> - These are more esoteric events, but are useful in some cases.  </para></listitem>
<listitem>
<para><computeroutput>obj.OnLeave ()</computeroutput> - These are more esoteric events, but are useful in some cases.  </para></listitem>
<listitem>
<para><computeroutput>obj.OnTimer ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
