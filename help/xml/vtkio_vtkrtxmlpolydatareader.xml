<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtkrtxmlpolydatareader" kind="page">
    <compoundname>vtkio_vtkrtxmlpolydatareader</compoundname>
    <title>vtkRTXMLPolyDataReader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkRTXMLPolyDataReader reads the VTK XML PolyData file format in real time.</para><para>To create an instance of class vtkRTXMLPolyDataReader, simply invoke its constructor as follows <verbatim>  obj = vtkRTXMLPolyDataReader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkRTXMLPolyDataReader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkRTXMLPolyDataReader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRTXMLPolyDataReader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkRTXMLPolyDataReader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLocation (string dataLocation)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetDataLocation ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdateToNextFile ()</computeroutput> - Reader will read in the next available data file The filename is this-&gt;NextFileName maintained internally  </para></listitem>
<listitem>
<para><computeroutput>int = obj.NewDataAvailable ()</computeroutput> - check if there is new data file available in the given DataLocation  </para></listitem>
<listitem>
<para><computeroutput>obj.ResetReader ()</computeroutput> - ResetReader check the data directory specified in this-&gt;DataLocation, and reset the Internal data structure specifically: this-&gt;Internal-&gt;ProcessedFileList for monitoring the arriving new data files if SetDataLocation(char*) is set by the user, this ResetReader() should also be invoked.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetNextFileName ()</computeroutput> - Return the name of the next available data file assume NewDataAvailable() return VTK_OK  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
