<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="variables_matrix" kind="page">
    <compoundname>variables_matrix</compoundname>
    <title>MATRIX Matrix Definitions</title>
    <detaileddescription>
<para>Section: <ref refid="sec_variables_1sec_variables" kindref="member">Variables and Arrays</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The matrix is the basic datatype of FreeMat. Matrices can be defined using the following syntax <verbatim>  A = [row_def1;row_def2;...,row_defN]
</verbatim> where each row consists of one or more elements, seperated by commas <verbatim>  row_defi = element_i1,element_i2,...,element_iM
</verbatim> Each element can either be a scalar value or another matrix, provided that the resulting matrix definition makes sense. In general this means that all of the elements belonging to a row have the same number of rows themselves, and that all of the row definitions have the same number of columns. Matrices are actually special cases of N-dimensional arrays where <computeroutput>N&lt;=2</computeroutput>. Higher dimensional arrays cannot be constructed using the bracket notation described above. The type of a matrix defined in this way (using the bracket notation) is determined by examining the types of the elements. The resulting type is chosen so no information is lost on any of the elements (or equivalently, by choosing the highest order type from those present in the elements). </para></sect1>
<sect1 id="variables_matrix_1Examples">
<title>Examples</title>
<para>Here is an example of a matrix of <computeroutput>int32</computeroutput> elements (note that untyped integer constants default to type <computeroutput>int32</computeroutput>).</para><para><verbatim>--&gt; A = [1,2;5,8]

A = 
 1 2 
 5 8 
</verbatim></para><para>Now we define a new matrix by adding a column to the right of <computeroutput>A</computeroutput>, and using float constants.</para><para><verbatim>--&gt; B = [A,[3.2f;5.1f]]

B = 
    1.0000    2.0000    3.2000 
    5.0000    8.0000    5.1000 
</verbatim></para><para>Next, we add extend <computeroutput>B</computeroutput> by adding a row at the bottom. Note how the use of an untyped floating point constant forces the result to be of type <computeroutput>double</computeroutput></para><para><verbatim>--&gt; C = [B;5.2,1.0,0.0]

C = 
    1.0000    2.0000    3.2000 
    5.0000    8.0000    5.1000 
    5.2000    1.0000         0 
</verbatim></para><para>If we instead add a row of <computeroutput>complex</computeroutput> values (recall that <computeroutput>i</computeroutput> is a <computeroutput>complex</computeroutput> constant, not a <computeroutput>dcomplex</computeroutput> constant)</para><para><verbatim>--&gt; D = [B;2.0f+3.0f*i,i,0.0f]

D = 
   1.0000 +  0.0000i   2.0000 +  0.0000i   3.2000 +  0.0000i 
   5.0000 +  0.0000i   8.0000 +  0.0000i   5.1000 +  0.0000i 
   2.0000 +  3.0000i   0.0000 +  1.0000i        0           
</verbatim></para><para>Likewise, but using <computeroutput>dcomplex</computeroutput> constants</para><para><verbatim>--&gt; E = [B;2.0+3.0*i,i,0.0]

E = 
   1.0000 +  0.0000i   2.0000 +  0.0000i   3.2000 +  0.0000i 
   5.0000 +  0.0000i   8.0000 +  0.0000i   5.1000 +  0.0000i 
   2.0000 +  3.0000i   0.0000 +  1.0000i        0           
</verbatim></para><para>Finally, in FreeMat, you can construct matrices with strings as contents, but you have to make sure that if the matrix has more than one row, that all the strings have the same length.</para><para><verbatim>--&gt; F = [&apos;hello&apos;;&apos;there&apos;]

F = 
hello
there
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
