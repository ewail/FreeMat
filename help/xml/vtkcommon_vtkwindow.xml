<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkwindow" kind="page">
    <compoundname>vtkcommon_vtkwindow</compoundname>
    <title>vtkWindow</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkWindow is an abstract object to specify the behavior of a rendering window. It contains vtkViewports.</para><para>To create an instance of class vtkWindow, simply invoke its constructor as follows <verbatim>  obj = vtkWindow
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkWindow has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkWindow class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWindow = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkWindow = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWindowInfo (string )</computeroutput> - These are window system independent methods that are used to help interface vtkWindow to native windowing systems.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetParentInfo (string )</computeroutput> - These are window system independent methods that are used to help interface vtkWindow to native windowing systems.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPosition ()</computeroutput> - Set/Get the position in screen coordinates of the rendering window.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (int , int )</computeroutput> - Set/Get the position in screen coordinates of the rendering window.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (int a[2])</computeroutput> - Set/Get the position in screen coordinates of the rendering window.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSize ()</computeroutput> - Set/Get the size of the window in screen coordinates in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (int , int )</computeroutput> - Set/Get the size of the window in screen coordinates in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSize (int a[2])</computeroutput> - Set/Get the size of the window in screen coordinates in pixels.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMapped (int )</computeroutput> - Keep track of whether the rendering window has been mapped to screen.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMapped ()</computeroutput> - Keep track of whether the rendering window has been mapped to screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.MappedOn ()</computeroutput> - Keep track of whether the rendering window has been mapped to screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.MappedOff ()</computeroutput> - Keep track of whether the rendering window has been mapped to screen.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetErase (int )</computeroutput> - Turn on/off erasing the screen between images. This allows multiple exposure sequences if turned on. You will need to turn double buffering off or make use of the SwapBuffers methods to prevent you from swapping buffers between exposures.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetErase ()</computeroutput> - Turn on/off erasing the screen between images. This allows multiple exposure sequences if turned on. You will need to turn double buffering off or make use of the SwapBuffers methods to prevent you from swapping buffers between exposures.  </para></listitem>
<listitem>
<para><computeroutput>obj.EraseOn ()</computeroutput> - Turn on/off erasing the screen between images. This allows multiple exposure sequences if turned on. You will need to turn double buffering off or make use of the SwapBuffers methods to prevent you from swapping buffers between exposures.  </para></listitem>
<listitem>
<para><computeroutput>obj.EraseOff ()</computeroutput> - Turn on/off erasing the screen between images. This allows multiple exposure sequences if turned on. You will need to turn double buffering off or make use of the SwapBuffers methods to prevent you from swapping buffers between exposures.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDoubleBuffer (int )</computeroutput> - Keep track of whether double buffering is on or off  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDoubleBuffer ()</computeroutput> - Keep track of whether double buffering is on or off  </para></listitem>
<listitem>
<para><computeroutput>obj.DoubleBufferOn ()</computeroutput> - Keep track of whether double buffering is on or off  </para></listitem>
<listitem>
<para><computeroutput>obj.DoubleBufferOff ()</computeroutput> - Keep track of whether double buffering is on or off  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetWindowName ()</computeroutput> - Get name of rendering window  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWindowName (string )</computeroutput> - Get name of rendering window  </para></listitem>
<listitem>
<para><computeroutput>obj.Render ()</computeroutput> - Ask each viewport owned by this Window to render its image and synchronize this process.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPixelData (int x, int y, int x2, int y2, int front, vtkUnsignedCharArray data)</computeroutput> - Get the pixel data of an image, transmitted as RGBRGBRGB. The front argument indicates if the front buffer should be used or the back buffer. It is the caller&apos;s responsibility to delete the resulting array. It is very important to realize that the memory in this array is organized from the bottom of the window to the top. The origin of the screen is in the lower left corner. The y axis increases as you go up the screen. So the storage of pixels is from left to right and from bottom to top. (x,y) is any corner of the rectangle. (x2,y2) is its opposite corner on the diagonal.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDPI ()</computeroutput> - Return a best estimate to the dots per inch of the display device being rendered (or printed).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDPI (int )</computeroutput> - Return a best estimate to the dots per inch of the display device being rendered (or printed).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDPIMinValue ()</computeroutput> - Return a best estimate to the dots per inch of the display device being rendered (or printed).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDPIMaxValue ()</computeroutput> - Return a best estimate to the dots per inch of the display device being rendered (or printed).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOffScreenRendering (int )</computeroutput> - Create a window in memory instead of on the screen. This may not be supported for every type of window and on some windows you may need to invoke this prior to the first render.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOffScreenRendering ()</computeroutput> - Create a window in memory instead of on the screen. This may not be supported for every type of window and on some windows you may need to invoke this prior to the first render.  </para></listitem>
<listitem>
<para><computeroutput>obj.OffScreenRenderingOn ()</computeroutput> - Create a window in memory instead of on the screen. This may not be supported for every type of window and on some windows you may need to invoke this prior to the first render.  </para></listitem>
<listitem>
<para><computeroutput>obj.OffScreenRenderingOff ()</computeroutput> - Create a window in memory instead of on the screen. This may not be supported for every type of window and on some windows you may need to invoke this prior to the first render.  </para></listitem>
<listitem>
<para><computeroutput>obj.MakeCurrent ()</computeroutput> - Make the window current. May be overridden in subclasses to do for example a glXMakeCurrent or a wglMakeCurrent.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTileScale (int , int )</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTileScale (int a[2])</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetTileScale ()</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTileScale (int s)</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTileViewport (double , double , double , double )</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTileViewport (double a[4])</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetTileViewport ()</computeroutput> - These methods are used by vtkWindowToImageFilter to tell a VTK window to simulate a larger window by tiling. For 3D geometry these methods have no impact. It is just in handling annotation that this information must be available to the mappers and the coordinate calculations.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
