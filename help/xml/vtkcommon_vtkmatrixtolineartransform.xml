<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkmatrixtolineartransform" kind="page">
    <compoundname>vtkcommon_vtkmatrixtolineartransform</compoundname>
    <title>vtkMatrixToLinearTransform</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This is a very simple class which allows a vtkMatrix4x4 to be used in place of a vtkLinearTransform or vtkAbstractTransform. For example, if you use it as a proxy between a matrix and vtkTransformPolyDataFilter then any modifications to the matrix will automatically be reflected in the output of the filter.</para><para>To create an instance of class vtkMatrixToLinearTransform, simply invoke its constructor as follows <verbatim>  obj = vtkMatrixToLinearTransform
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkMatrixToLinearTransform has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkMatrixToLinearTransform class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMatrixToLinearTransform = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMatrixToLinearTransform = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInput (vtkMatrix4x4 )</computeroutput> - Set the input matrix. Any modifications to the matrix will be reflected in the transformation.  </para></listitem>
<listitem>
<para><computeroutput>vtkMatrix4x4 = obj.GetInput ()</computeroutput> - Set the input matrix. Any modifications to the matrix will be reflected in the transformation.  </para></listitem>
<listitem>
<para><computeroutput>obj.Inverse ()</computeroutput> - The input matrix is left as-is, but the transformation matrix is inverted.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Get the MTime: this is the bit of magic that makes everything work.  </para></listitem>
<listitem>
<para><computeroutput>vtkAbstractTransform = obj.MakeTransform ()</computeroutput> - Make a new transform of the same type.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMatrix (vtkMatrix4x4 matrix)</computeroutput> -  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
