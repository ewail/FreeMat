<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkborderrepresentation" kind="page">
    <compoundname>vtkwidgets_vtkborderrepresentation</compoundname>
    <title>vtkBorderRepresentation</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class is used to represent and render a vtBorderWidget. To use this class, you need to specify the two corners of a rectangular region.</para><para>The class is typically subclassed so that specialized representations can be created. The class defines an API and a default implementation that the vtkBorderRepresentation interacts with to render itself in the scene.</para><para>To create an instance of class vtkBorderRepresentation, simply invoke its constructor as follows <verbatim>  obj = vtkBorderRepresentation
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkBorderRepresentation has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkBorderRepresentation class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Define standard methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Define standard methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkBorderRepresentation = obj.NewInstance ()</computeroutput> - Define standard methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkBorderRepresentation = obj.SafeDownCast (vtkObject o)</computeroutput> - Define standard methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkCoordinate = obj.GetPositionCoordinate ()</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (double, double)</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition (double a[2])</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPosition ()</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>vtkCoordinate = obj.GetPosition2Coordinate ()</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition2 (double, double)</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPosition2 (double a[2])</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPosition2 ()</computeroutput> - Specify opposite corners of the box defining the boundary of the widget. By default, these coordinates are in the normalized viewport coordinate system, with Position the lower left of the outline, and Position2 relative to Position. Note that using these methods are affected by the ProportionalResize flag. That is, if the aspect ratio of the representation is to be preserved (e.g., ProportionalResize is on), then the rectangle (Position,Position2) is a bounding rectangle. Also,  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShowBorder (int )</computeroutput> - Specify when and if the border should appear. If ShowBorder is &quot;on&quot;, then the border will always appear. If ShowBorder is &quot;off&quot; then the border will never appear. If ShowBorder is &quot;active&quot; then the border will appear when the mouse pointer enters the region bounded by the border widget.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShowBorderMinValue ()</computeroutput> - Specify when and if the border should appear. If ShowBorder is &quot;on&quot;, then the border will always appear. If ShowBorder is &quot;off&quot; then the border will never appear. If ShowBorder is &quot;active&quot; then the border will appear when the mouse pointer enters the region bounded by the border widget.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShowBorderMaxValue ()</computeroutput> - Specify when and if the border should appear. If ShowBorder is &quot;on&quot;, then the border will always appear. If ShowBorder is &quot;off&quot; then the border will never appear. If ShowBorder is &quot;active&quot; then the border will appear when the mouse pointer enters the region bounded by the border widget.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShowBorder ()</computeroutput> - Specify when and if the border should appear. If ShowBorder is &quot;on&quot;, then the border will always appear. If ShowBorder is &quot;off&quot; then the border will never appear. If ShowBorder is &quot;active&quot; then the border will appear when the mouse pointer enters the region bounded by the border widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShowBorderToOff ()</computeroutput> - Specify when and if the border should appear. If ShowBorder is &quot;on&quot;, then the border will always appear. If ShowBorder is &quot;off&quot; then the border will never appear. If ShowBorder is &quot;active&quot; then the border will appear when the mouse pointer enters the region bounded by the border widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShowBorderToOn ()</computeroutput> - Specify when and if the border should appear. If ShowBorder is &quot;on&quot;, then the border will always appear. If ShowBorder is &quot;off&quot; then the border will never appear. If ShowBorder is &quot;active&quot; then the border will appear when the mouse pointer enters the region bounded by the border widget.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetShowBorderToActive ()</computeroutput> - Specify the properties of the border.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty2D = obj.GetBorderProperty ()</computeroutput> - Specify the properties of the border.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetProportionalResize (int )</computeroutput> - Indicate whether resizing operations should keep the x-y directions proportional to one another. Also, if ProportionalResize is on, then the rectangle (Position,Position2) is a bounding rectangle, and the representation will be placed in the rectangle in such a way as to preserve the aspect ratio of the representation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetProportionalResize ()</computeroutput> - Indicate whether resizing operations should keep the x-y directions proportional to one another. Also, if ProportionalResize is on, then the rectangle (Position,Position2) is a bounding rectangle, and the representation will be placed in the rectangle in such a way as to preserve the aspect ratio of the representation.  </para></listitem>
<listitem>
<para><computeroutput>obj.ProportionalResizeOn ()</computeroutput> - Indicate whether resizing operations should keep the x-y directions proportional to one another. Also, if ProportionalResize is on, then the rectangle (Position,Position2) is a bounding rectangle, and the representation will be placed in the rectangle in such a way as to preserve the aspect ratio of the representation.  </para></listitem>
<listitem>
<para><computeroutput>obj.ProportionalResizeOff ()</computeroutput> - Indicate whether resizing operations should keep the x-y directions proportional to one another. Also, if ProportionalResize is on, then the rectangle (Position,Position2) is a bounding rectangle, and the representation will be placed in the rectangle in such a way as to preserve the aspect ratio of the representation.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMinimumSize (int , int )</computeroutput> - Specify a minimum and/or maximum size (in pixels) that this representation can take. These methods require two values: size values in the x and y directions, respectively.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMinimumSize (int a[2])</computeroutput> - Specify a minimum and/or maximum size (in pixels) that this representation can take. These methods require two values: size values in the x and y directions, respectively.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetMinimumSize ()</computeroutput> - Specify a minimum and/or maximum size (in pixels) that this representation can take. These methods require two values: size values in the x and y directions, respectively.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumSize (int , int )</computeroutput> - Specify a minimum and/or maximum size (in pixels) that this representation can take. These methods require two values: size values in the x and y directions, respectively.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumSize (int a[2])</computeroutput> - Specify a minimum and/or maximum size (in pixels) that this representation can take. These methods require two values: size values in the x and y directions, respectively.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetMaximumSize ()</computeroutput> - Specify a minimum and/or maximum size (in pixels) that this representation can take. These methods require two values: size values in the x and y directions, respectively.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTolerance (int )</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetToleranceMinValue ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetToleranceMaxValue ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTolerance ()</computeroutput> - The tolerance representing the distance to the widget (in pixels) in which the cursor is considered to be on the widget, or on a widget feature (e.g., a corner point or edge).  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetSelectionPoint ()</computeroutput> - After a selection event within the region interior to the border; the normalized selection coordinates may be obtained.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMoving (int )</computeroutput> - This is a modifier of the interaction state. When set, widget interaction allows the border (and stuff inside of it) to be translated with mouse motion.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMoving ()</computeroutput> - This is a modifier of the interaction state. When set, widget interaction allows the border (and stuff inside of it) to be translated with mouse motion.  </para></listitem>
<listitem>
<para><computeroutput>obj.MovingOn ()</computeroutput> - This is a modifier of the interaction state. When set, widget interaction allows the border (and stuff inside of it) to be translated with mouse motion.  </para></listitem>
<listitem>
<para><computeroutput>obj.MovingOff ()</computeroutput> - This is a modifier of the interaction state. When set, widget interaction allows the border (and stuff inside of it) to be translated with mouse motion.  </para></listitem>
<listitem>
<para><computeroutput>obj.BuildRepresentation ()</computeroutput> - Subclasses should implement these methods. See the superclasses&apos; documentation for more information.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartWidgetInteraction (double eventPos[2])</computeroutput> - Subclasses should implement these methods. See the superclasses&apos; documentation for more information.  </para></listitem>
<listitem>
<para><computeroutput>obj.WidgetInteraction (double eventPos[2])</computeroutput> - Subclasses should implement these methods. See the superclasses&apos; documentation for more information.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetSize (double size[2])</computeroutput> - Subclasses should implement these methods. See the superclasses&apos; documentation for more information.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.ComputeInteractionState (int X, int Y, int modify)</computeroutput> - Subclasses should implement these methods. See the superclasses&apos; documentation for more information.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetActors2D (vtkPropCollection )</computeroutput> - These methods are necessary to make this representation behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - These methods are necessary to make this representation behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOverlay (vtkViewport )</computeroutput> - These methods are necessary to make this representation behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOpaqueGeometry (vtkViewport )</computeroutput> - These methods are necessary to make this representation behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderTranslucentPolygonalGeometry (vtkViewport )</computeroutput> - These methods are necessary to make this representation behave as a vtkProp.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasTranslucentPolygonalGeometry ()</computeroutput> - These methods are necessary to make this representation behave as a vtkProp.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
