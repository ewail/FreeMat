<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkexplicitcell" kind="page">
    <compoundname>vtkfiltering_vtkexplicitcell</compoundname>
    <title>vtkExplicitCell</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkExplicitCell is an abstract superclass for cells that cannot be represented implicitly. An implicit representation requires only a cell type and connectivity list (e.g., triangle). Explicit cells require information beyond this; e.g., a NURBS surface or cells that require explicit face/edge descriptions. Most cells in VTK are implicitly represented.</para><para>To create an instance of class vtkExplicitCell, simply invoke its constructor as follows <verbatim>  obj = vtkExplicitCell
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkExplicitCell has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkExplicitCell class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkExplicitCell = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkExplicitCell = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsExplicitCell ()</computeroutput> - Set/Get the cell id. This is necessary for explicit cells because they often need to keep extra information (typically contained in the cell data of a point set). This information might be things like knot points/weights, boundaries, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCellId (vtkIdType )</computeroutput> - Set/Get the cell id. This is necessary for explicit cells because they often need to keep extra information (typically contained in the cell data of a point set). This information might be things like knot points/weights, boundaries, etc.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetCellId ()</computeroutput> - Set/Get the cell id. This is necessary for explicit cells because they often need to keep extra information (typically contained in the cell data of a point set). This information might be things like knot points/weights, boundaries, etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataSet (vtkDataSet )</computeroutput> - Set/Get the mesh that owns this cell. This is necessary for explicit cells because they often need to keep extra information (typically contained in the cell data of a point set). This information might be things like knot points/weights, boundaries, etc.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataSet = obj.GetDataSet ()</computeroutput> - Set/Get the mesh that owns this cell. This is necessary for explicit cells because they often need to keep extra information (typically contained in the cell data of a point set). This information might be things like knot points/weights, boundaries, etc.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
