<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkprogrammablesource" kind="page">
    <compoundname>vtkgraphics_vtkprogrammablesource</compoundname>
    <title>vtkProgrammableSource</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkProgrammableSource is a source object that is programmable by the user. To use this object, you must specify a function that creates the output. It is possible to generate an output dataset of any (concrete) type; it is up to the function to properly initialize and define the output. Typically, you use one of the methods to get a concrete output type (e.g., GetPolyDataOutput() or GetStructuredPointsOutput()), and then manipulate the output in the user-specified function.</para><para>Example use of this include writing a function to read a data file or interface to another system. (You might want to do this in favor of deriving a new class.) Another important use of this class is that it allows users of interpreters (e.g., Tcl or Java) the ability to write source objects without having to recompile C++ code or generate new libraries.</para><para>To create an instance of class vtkProgrammableSource, simply invoke its constructor as follows <verbatim>  obj = vtkProgrammableSource
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkProgrammableSource has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkProgrammableSource class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkProgrammableSource = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkProgrammableSource = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyData = obj.GetPolyDataOutput ()</computeroutput> - Get the output as a concrete type. This method is typically used by the writer of the source function to get the output as a particular type (i.e., it essentially does type casting). It is the users responsibility to know the correct type of the output data.  </para></listitem>
<listitem>
<para><computeroutput>vtkStructuredPoints = obj.GetStructuredPointsOutput ()</computeroutput> - Get the output as a concrete type.  </para></listitem>
<listitem>
<para><computeroutput>vtkStructuredGrid = obj.GetStructuredGridOutput ()</computeroutput> - Get the output as a concrete type.  </para></listitem>
<listitem>
<para><computeroutput>vtkUnstructuredGrid = obj.GetUnstructuredGridOutput ()</computeroutput> - Get the output as a concrete type.  </para></listitem>
<listitem>
<para><computeroutput>vtkRectilinearGrid = obj.GetRectilinearGridOutput ()</computeroutput> - Get the output as a concrete type.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
