<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkfileoutputwindow" kind="page">
    <compoundname>vtkcommon_vtkfileoutputwindow</compoundname>
    <title>vtkFileOutputWindow</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Writes debug/warning/error output to a log file instead of the console. To use this class, instantiate it and then call SetInstance(this).</para><para>To create an instance of class vtkFileOutputWindow, simply invoke its constructor as follows <verbatim>  obj = vtkFileOutputWindow
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkFileOutputWindow has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkFileOutputWindow class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFileOutputWindow = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkFileOutputWindow = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.DisplayText (string )</computeroutput> - Put the text into the log file. New lines are converted to carriage return new lines.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileName (string )</computeroutput> - Sets the name for the log file.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFileName ()</computeroutput> - Sets the name for the log file.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFlush (int )</computeroutput> - Turns on buffer flushing for the output to the log file.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetFlush ()</computeroutput> - Turns on buffer flushing for the output to the log file.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlushOn ()</computeroutput> - Turns on buffer flushing for the output to the log file.  </para></listitem>
<listitem>
<para><computeroutput>obj.FlushOff ()</computeroutput> - Turns on buffer flushing for the output to the log file.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAppend (int )</computeroutput> - Setting append will cause the log file to be opened in append mode. Otherwise, if the log file exists, it will be overwritten each time the vtkFileOutputWindow is created.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAppend ()</computeroutput> - Setting append will cause the log file to be opened in append mode. Otherwise, if the log file exists, it will be overwritten each time the vtkFileOutputWindow is created.  </para></listitem>
<listitem>
<para><computeroutput>obj.AppendOn ()</computeroutput> - Setting append will cause the log file to be opened in append mode. Otherwise, if the log file exists, it will be overwritten each time the vtkFileOutputWindow is created.  </para></listitem>
<listitem>
<para><computeroutput>obj.AppendOff ()</computeroutput> - Setting append will cause the log file to be opened in append mode. Otherwise, if the log file exists, it will be overwritten each time the vtkFileOutputWindow is created.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
