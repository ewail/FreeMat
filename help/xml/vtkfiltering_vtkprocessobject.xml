<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkfiltering_vtkprocessobject" kind="page">
    <compoundname>vtkfiltering_vtkprocessobject</compoundname>
    <title>vtkProcessObject</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkfiltering_1sec_vtkfiltering" kindref="member">Visualization Toolkit Filtering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkProcessObject is an abstract object that specifies behavior and interface of visualization network process objects (sources, filters, mappers). Source objects are creators of visualization data; filters input, process, and output visualization data; and mappers transform data into another form (like rendering primitives or write data to a file).</para><para>vtkProcessObject fires events for Start and End events before and after object execution (via Execute()). These events can be used for any purpose (e.g., debugging info, highlighting/notifying user interface, etc.)</para><para>Another event, Progress, can be observed. Some filters fire this event periodically during their execution. The use is similar to that of Start and End events. Filters may also check their AbortExecute flag to determine whether to prematurely end their execution.</para><para>An important feature of subclasses of vtkProcessObject is that it is possible to control the memory-management model (i.e., retain output versus delete output data). If enabled the ReleaseDataFlag enables the deletion of the output data once the downstream process object finishes processing the data (please see text).</para><para>To create an instance of class vtkProcessObject, simply invoke its constructor as follows <verbatim>  obj = vtkProcessObject
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkProcessObject has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkProcessObject class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkProcessObject = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkProcessObject = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfInputs ()</computeroutput> - Return an array with all the inputs of this process object. This is useful for tracing back in the pipeline to construct graphs etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.SqueezeInputArray ()</computeroutput> - This method will rearrange the input array so that all NULL entries are removed.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveAllInputs ()</computeroutput> - Remove all the input data.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInputConnection (vtkAlgorithmOutput input)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInputConnection (int port, vtkAlgorithmOutput input)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddInputConnection (int port, vtkAlgorithmOutput input)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddInputConnection (vtkAlgorithmOutput input)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveInputConnection (int port, vtkAlgorithmOutput input)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNthInputConnection (int port, int index, vtkAlgorithmOutput input)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfInputConnections (int port, int n)</computeroutput> - Reimplemented from vtkAlgorithm to maintain backward compatibility for vtkProcessObject.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
