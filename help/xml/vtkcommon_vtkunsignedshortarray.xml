<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkunsignedshortarray" kind="page">
    <compoundname>vtkcommon_vtkunsignedshortarray</compoundname>
    <title>vtkUnsignedShortArray</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkUnsignedShortArray is an array of values of type unsigned short. It provides methods for insertion and retrieval of values and will automatically resize itself to hold new data.</para><para>To create an instance of class vtkUnsignedShortArray, simply invoke its constructor as follows <verbatim>  obj = vtkUnsignedShortArray
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkUnsignedShortArray has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkUnsignedShortArray class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkUnsignedShortArray = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkUnsignedShortArray = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataType ()</computeroutput> - Copy the tuple value into a user-provided array.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetTupleValue (vtkIdType i, short tuple)</computeroutput> - Set the tuple value at the ith location in the array.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTupleValue (vtkIdType i, short tuple)</computeroutput> - Insert (memory allocation performed) the tuple into the ith location in the array.  </para></listitem>
<listitem>
<para><computeroutput>obj.InsertTupleValue (vtkIdType i, short tuple)</computeroutput> - Insert (memory allocation performed) the tuple onto the end of the array.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.InsertNextTupleValue (short tuple)</computeroutput> - Get the data at a particular index.  </para></listitem>
<listitem>
<para><computeroutput>short = obj.GetValue (vtkIdType id)</computeroutput> - Set the data at a particular index. Does not do range checking. Make sure you use the method SetNumberOfValues() before inserting data.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetValue (vtkIdType id, short value)</computeroutput> - Specify the number of values for this object to hold. Does an allocation as well as setting the MaxId ivar. Used in conjunction with SetValue() method for fast insertion.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfValues (vtkIdType number)</computeroutput> - Insert data at a specified position in the array.  </para></listitem>
<listitem>
<para><computeroutput>obj.InsertValue (vtkIdType id, short f)</computeroutput> - Insert data at the end of the array. Return its location in the array.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.InsertNextValue (short f)</computeroutput> - Get the address of a particular data index. Make sure data is allocated for the number of items requested. Set MaxId according to the number of data values requested.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetArray (short array, vtkIdType size, int save)</computeroutput> - This method lets the user specify data to be held by the array. The array argument is a pointer to the data. size is the size of the array supplied by the user. Set save to 1 to keep the class from deleting the array when it cleans up or reallocates memory. The class uses the actual array provided; it does not copy the data from the suppled array.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetArray (short array, vtkIdType size, int save, int deleteMethod)</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
