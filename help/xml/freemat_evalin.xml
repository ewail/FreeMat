<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="freemat_evalin" kind="page">
    <compoundname>freemat_evalin</compoundname>
    <title>EVALIN Evaluate a String in Workspace</title>
    <detaileddescription>
<para>Section: <ref refid="sec_freemat_1sec_freemat" kindref="member">FreeMat Functions</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>The <computeroutput>evalin</computeroutput> function is similar to the <computeroutput>eval</computeroutput> function, with an additional argument up front that indicates the workspace that the expressions are to be evaluated in. The various syntaxes for <computeroutput>evalin</computeroutput> are: <verbatim>   evalin(workspace,expression)
   x = evalin(workspace,expression)
   [x,y,z] = evalin(workspace,expression)
   evalin(workspace,try_clause,catch_clause)
   x = evalin(workspace,try_clause,catch_clause)
   [x,y,z] = evalin(workspace,try_clause,catch_clause)
</verbatim> The argument <computeroutput>workspace</computeroutput> must be either &apos;caller&apos; or &apos;base&apos;. If it is &apos;caller&apos;, then the expression is evaluated in the caller&apos;s work space. That does not mean the caller of <computeroutput>evalin</computeroutput>, but the caller of the current function or script. On the other hand if the argument is &apos;base&apos;, then the expression is evaluated in the base work space. See <computeroutput>eval</computeroutput> for details on the use of each variation. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
