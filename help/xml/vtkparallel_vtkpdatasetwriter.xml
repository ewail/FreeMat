<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkpdatasetwriter" kind="page">
    <compoundname>vtkparallel_vtkpdatasetwriter</compoundname>
    <title>vtkPDataSetWriter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkPDataSetWriter will write a piece of a file, and will also create a metadata file that lists all of the files in a data set.</para><para>To create an instance of class vtkPDataSetWriter, simply invoke its constructor as follows <verbatim>  obj = vtkPDataSetWriter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPDataSetWriter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPDataSetWriter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPDataSetWriter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPDataSetWriter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Write ()</computeroutput> - Write the pvtk file and cooresponding vtk files.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfPieces (int num)</computeroutput> - This is how many pieces the whole data set will be divided into.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfPieces ()</computeroutput> - This is how many pieces the whole data set will be divided into.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetGhostLevel (int )</computeroutput> - Extra ghost cells will be written out to each piece file if this value is larger than 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetGhostLevel ()</computeroutput> - Extra ghost cells will be written out to each piece file if this value is larger than 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStartPiece (int )</computeroutput> - This is the range of pieces that that this writer is responsible for writing. All pieces must be written by some process. The process that writes piece 0 also writes the pvtk file that lists all the piece file names.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetStartPiece ()</computeroutput> - This is the range of pieces that that this writer is responsible for writing. All pieces must be written by some process. The process that writes piece 0 also writes the pvtk file that lists all the piece file names.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEndPiece (int )</computeroutput> - This is the range of pieces that that this writer is responsible for writing. All pieces must be written by some process. The process that writes piece 0 also writes the pvtk file that lists all the piece file names.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetEndPiece ()</computeroutput> - This is the range of pieces that that this writer is responsible for writing. All pieces must be written by some process. The process that writes piece 0 also writes the pvtk file that lists all the piece file names.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilePattern (string )</computeroutput> - This file pattern uses the file name and piece number to contruct a file name for the piece file.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilePattern ()</computeroutput> - This file pattern uses the file name and piece number to contruct a file name for the piece file.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseRelativeFileNames (int )</computeroutput> - This flag determines whether to use absolute paths for the piece files. By default the pieces are put in the main directory, and the piece file names in the meta data pvtk file are relative to this directory. This should make moving the whole lot to another directory, an easier task.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseRelativeFileNames ()</computeroutput> - This flag determines whether to use absolute paths for the piece files. By default the pieces are put in the main directory, and the piece file names in the meta data pvtk file are relative to this directory. This should make moving the whole lot to another directory, an easier task.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseRelativeFileNamesOn ()</computeroutput> - This flag determines whether to use absolute paths for the piece files. By default the pieces are put in the main directory, and the piece file names in the meta data pvtk file are relative to this directory. This should make moving the whole lot to another directory, an easier task.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseRelativeFileNamesOff ()</computeroutput> - This flag determines whether to use absolute paths for the piece files. By default the pieces are put in the main directory, and the piece file names in the meta data pvtk file are relative to this directory. This should make moving the whole lot to another directory, an easier task.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
