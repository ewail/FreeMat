<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimagegradient" kind="page">
    <compoundname>vtkimaging_vtkimagegradient</compoundname>
    <title>vtkImageGradient</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageGradient computes the gradient vector of an image. The vector results are stored as scalar components. The Dimensionality determines whether to perform a 2d or 3d gradient. The default is two dimensional XY gradient. OutputScalarType is always double. Gradient is computed using central differences.</para><para>To create an instance of class vtkImageGradient, simply invoke its constructor as follows <verbatim>  obj = vtkImageGradient
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageGradient has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageGradient class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageGradient = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageGradient = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDimensionality (int )</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionalityMinValue ()</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionalityMaxValue ()</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionality ()</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleBoundaries (int )</computeroutput> - Get/Set whether to handle boundaries. If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels. If disabled, the output whole extent of the image is reduced by one pixel.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetHandleBoundaries ()</computeroutput> - Get/Set whether to handle boundaries. If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels. If disabled, the output whole extent of the image is reduced by one pixel.  </para></listitem>
<listitem>
<para><computeroutput>obj.HandleBoundariesOn ()</computeroutput> - Get/Set whether to handle boundaries. If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels. If disabled, the output whole extent of the image is reduced by one pixel.  </para></listitem>
<listitem>
<para><computeroutput>obj.HandleBoundariesOff ()</computeroutput> - Get/Set whether to handle boundaries. If enabled, boundary pixels are treated as duplicated so that central differencing works for the boundary pixels. If disabled, the output whole extent of the image is reduced by one pixel.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
