<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkquadricclustering" kind="page">
    <compoundname>vtkgraphics_vtkquadricclustering</compoundname>
    <title>vtkQuadricClustering</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkQuadricClustering is a filter to reduce the number of triangles in a triangle mesh, forming a good approximation to the original geometry. The input to vtkQuadricClustering is a vtkPolyData object, and all types of polygonal data are handled.</para><para>The algorithm used is the one described by Peter Lindstrom in his Siggraph 2000 paper, &quot;Out-of-Core Simplification of Large Polygonal Models.&quot; The general approach of the algorithm is to cluster vertices in a uniform binning of space, accumulating the quadric of each triangle (pushed out to the triangles vertices) within each bin, and then determining an optimal position for a single vertex in a bin by using the accumulated quadric. In more detail, the algorithm first gets the bounds of the input poly data. It then breaks this bounding volume into a user-specified number of spatial bins. It then reads each triangle from the input and hashes its vertices into these bins. (If this is the first time a bin has been visited, initialize its quadric to the 0 matrix.) The algorithm computes the error quadric for this triangle and adds it to the existing quadric of the bin in which each vertex is contained. Then, if 2 or more vertices of the triangle fall in the same bin, the triangle is dicarded. If the triangle is not discarded, it adds the triangle to the list of output triangles as a list of vertex identifiers. (There is one vertex id per bin.) After all the triangles have been read, the representative vertex for each bin is computed (an optimal location is found) using the quadric for that bin. This determines the spatial location of the vertices of each of the triangles in the output.</para><para>To use this filter, specify the divisions defining the spatial subdivision in the x, y, and z directions. You must also specify an input vtkPolyData. Then choose to either 1) use the original points that minimize the quadric error to produce the output triangles or 2) compute an optimal position in each bin to produce the output triangles (recommended and default behavior).</para><para>This filter can take multiple inputs. To do this, the user must explicity call StartAppend, Append (once for each input), and EndAppend. StartAppend sets up the data structure to hold the quadric matrices. Append processes each triangle in the input poly data it was called on, hashes its vertices to the appropriate bins, determines whether to keep this triangle, and updates the appropriate quadric matrices. EndAppend determines the spatial location of each of the representative vertices for the visited bins. While this approach does not fit into the visualization architecture and requires manual control, it has the advantage that extremely large data can be processed in pieces and appended to the filter piece-by-piece.</para><para>To create an instance of class vtkQuadricClustering, simply invoke its constructor as follows <verbatim>  obj = vtkQuadricClustering
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkQuadricClustering has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkQuadricClustering class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard instantition, type and print methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard instantition, type and print methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadricClustering = obj.NewInstance ()</computeroutput> - Standard instantition, type and print methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadricClustering = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard instantition, type and print methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfXDivisions (int num)</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfYDivisions (int num)</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfZDivisions (int num)</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfXDivisions ()</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfYDivisions ()</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfZDivisions ()</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfDivisions (int div[3])</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfDivisions (int div0, int div1, int div2)</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfDivisions ()</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetNumberOfDivisions (int div[3])</computeroutput> - Set/Get the number of divisions along each axis for the spatial bins. The number of spatial bins is NumberOfXDivisions*NumberOfYDivisions* NumberOfZDivisions. The filter may choose to ignore large numbers of divisions if the input has few points and AutoAdjustNumberOfDivisions is enabled.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAutoAdjustNumberOfDivisions (int )</computeroutput> - Enable automatic adjustment of number of divisions. If off, the number of divisions specified by the user is always used (as long as it is valid). The default is On  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAutoAdjustNumberOfDivisions ()</computeroutput> - Enable automatic adjustment of number of divisions. If off, the number of divisions specified by the user is always used (as long as it is valid). The default is On  </para></listitem>
<listitem>
<para><computeroutput>obj.AutoAdjustNumberOfDivisionsOn ()</computeroutput> - Enable automatic adjustment of number of divisions. If off, the number of divisions specified by the user is always used (as long as it is valid). The default is On  </para></listitem>
<listitem>
<para><computeroutput>obj.AutoAdjustNumberOfDivisionsOff ()</computeroutput> - Enable automatic adjustment of number of divisions. If off, the number of divisions specified by the user is always used (as long as it is valid). The default is On  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDivisionOrigin (double x, double y, double z)</computeroutput> - This is an alternative way to set up the bins. If you are trying to match boundaries between pieces, then you should use these methods rather than SetNumberOfDivisions. To use these methods, specify the origin and spacing of the spatial binning.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDivisionOrigin (double o[3])</computeroutput> - This is an alternative way to set up the bins. If you are trying to match boundaries between pieces, then you should use these methods rather than SetNumberOfDivisions. To use these methods, specify the origin and spacing of the spatial binning.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetDivisionOrigin ()</computeroutput> - This is an alternative way to set up the bins. If you are trying to match boundaries between pieces, then you should use these methods rather than SetNumberOfDivisions. To use these methods, specify the origin and spacing of the spatial binning.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDivisionSpacing (double x, double y, double z)</computeroutput> - This is an alternative way to set up the bins. If you are trying to match boundaries between pieces, then you should use these methods rather than SetNumberOfDivisions. To use these methods, specify the origin and spacing of the spatial binning.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDivisionSpacing (double s[3])</computeroutput> - This is an alternative way to set up the bins. If you are trying to match boundaries between pieces, then you should use these methods rather than SetNumberOfDivisions. To use these methods, specify the origin and spacing of the spatial binning.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetDivisionSpacing ()</computeroutput> - This is an alternative way to set up the bins. If you are trying to match boundaries between pieces, then you should use these methods rather than SetNumberOfDivisions. To use these methods, specify the origin and spacing of the spatial binning.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseInputPoints (int )</computeroutput> - Normally the point that minimizes the quadric error function is used as the output of the bin. When this flag is on, the bin point is forced to be one of the points from the input (the one with the smallest error). This option does not work (i.e., input points cannot be used) when the append methods (StartAppend(), Append(), EndAppend()) are being called directly.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseInputPoints ()</computeroutput> - Normally the point that minimizes the quadric error function is used as the output of the bin. When this flag is on, the bin point is forced to be one of the points from the input (the one with the smallest error). This option does not work (i.e., input points cannot be used) when the append methods (StartAppend(), Append(), EndAppend()) are being called directly.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseInputPointsOn ()</computeroutput> - Normally the point that minimizes the quadric error function is used as the output of the bin. When this flag is on, the bin point is forced to be one of the points from the input (the one with the smallest error). This option does not work (i.e., input points cannot be used) when the append methods (StartAppend(), Append(), EndAppend()) are being called directly.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseInputPointsOff ()</computeroutput> - Normally the point that minimizes the quadric error function is used as the output of the bin. When this flag is on, the bin point is forced to be one of the points from the input (the one with the smallest error). This option does not work (i.e., input points cannot be used) when the append methods (StartAppend(), Append(), EndAppend()) are being called directly.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseFeatureEdges (int )</computeroutput> - By default, this flag is off. When &quot;UseFeatureEdges&quot; is on, then quadrics are computed for boundary edges/feature edges. They influence the quadrics (position of points), but not the mesh. Which features to use can be controlled by the filter &quot;FeatureEdges&quot;.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseFeatureEdges ()</computeroutput> - By default, this flag is off. When &quot;UseFeatureEdges&quot; is on, then quadrics are computed for boundary edges/feature edges. They influence the quadrics (position of points), but not the mesh. Which features to use can be controlled by the filter &quot;FeatureEdges&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseFeatureEdgesOn ()</computeroutput> - By default, this flag is off. When &quot;UseFeatureEdges&quot; is on, then quadrics are computed for boundary edges/feature edges. They influence the quadrics (position of points), but not the mesh. Which features to use can be controlled by the filter &quot;FeatureEdges&quot;.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseFeatureEdgesOff ()</computeroutput> - By default, this flag is off. When &quot;UseFeatureEdges&quot; is on, then quadrics are computed for boundary edges/feature edges. They influence the quadrics (position of points), but not the mesh. Which features to use can be controlled by the filter &quot;FeatureEdges&quot;.  </para></listitem>
<listitem>
<para><computeroutput>vtkFeatureEdges = obj.GetFeatureEdges ()</computeroutput> - By default, this flag is off. It only has an effect when &quot;UseFeatureEdges&quot; is also on. When &quot;UseFeaturePoints&quot; is on, then quadrics are computed for boundary / feature points used in the boundary / feature edges. They influence the quadrics (position of points), but not the mesh.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseFeaturePoints (int )</computeroutput> - By default, this flag is off. It only has an effect when &quot;UseFeatureEdges&quot; is also on. When &quot;UseFeaturePoints&quot; is on, then quadrics are computed for boundary / feature points used in the boundary / feature edges. They influence the quadrics (position of points), but not the mesh.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseFeaturePoints ()</computeroutput> - By default, this flag is off. It only has an effect when &quot;UseFeatureEdges&quot; is also on. When &quot;UseFeaturePoints&quot; is on, then quadrics are computed for boundary / feature points used in the boundary / feature edges. They influence the quadrics (position of points), but not the mesh.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseFeaturePointsOn ()</computeroutput> - By default, this flag is off. It only has an effect when &quot;UseFeatureEdges&quot; is also on. When &quot;UseFeaturePoints&quot; is on, then quadrics are computed for boundary / feature points used in the boundary / feature edges. They influence the quadrics (position of points), but not the mesh.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseFeaturePointsOff ()</computeroutput> - By default, this flag is off. It only has an effect when &quot;UseFeatureEdges&quot; is also on. When &quot;UseFeaturePoints&quot; is on, then quadrics are computed for boundary / feature points used in the boundary / feature edges. They influence the quadrics (position of points), but not the mesh.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFeaturePointsAngle (double )</computeroutput> - Set/Get the angle to use in determining whether a point on a boundary / feature edge is a feature point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFeaturePointsAngleMinValue ()</computeroutput> - Set/Get the angle to use in determining whether a point on a boundary / feature edge is a feature point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFeaturePointsAngleMaxValue ()</computeroutput> - Set/Get the angle to use in determining whether a point on a boundary / feature edge is a feature point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFeaturePointsAngle ()</computeroutput> - Set/Get the angle to use in determining whether a point on a boundary / feature edge is a feature point.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseInternalTriangles (int )</computeroutput> - When this flag is on (and it is on by default), then triangles that are completely contained in a bin are added to the bin quadrics. When the the flag is off the filter operates faster, but the surface may not be as well behaved.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseInternalTriangles ()</computeroutput> - When this flag is on (and it is on by default), then triangles that are completely contained in a bin are added to the bin quadrics. When the the flag is off the filter operates faster, but the surface may not be as well behaved.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseInternalTrianglesOn ()</computeroutput> - When this flag is on (and it is on by default), then triangles that are completely contained in a bin are added to the bin quadrics. When the the flag is off the filter operates faster, but the surface may not be as well behaved.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseInternalTrianglesOff ()</computeroutput> - When this flag is on (and it is on by default), then triangles that are completely contained in a bin are added to the bin quadrics. When the the flag is off the filter operates faster, but the surface may not be as well behaved.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartAppend (double bounds)</computeroutput> - These methods provide an alternative way of executing the filter. PolyData can be added to the result in pieces (append). In this mode, the user must specify the bounds of the entire model as an argument to the &quot;StartAppend&quot; method.  </para></listitem>
<listitem>
<para><computeroutput>obj.StartAppend (double x0, double x1, double y0, double y1, double z0, double z1)</computeroutput> - These methods provide an alternative way of executing the filter. PolyData can be added to the result in pieces (append). In this mode, the user must specify the bounds of the entire model as an argument to the &quot;StartAppend&quot; method.  </para></listitem>
<listitem>
<para><computeroutput>obj.Append (vtkPolyData piece)</computeroutput> - These methods provide an alternative way of executing the filter. PolyData can be added to the result in pieces (append). In this mode, the user must specify the bounds of the entire model as an argument to the &quot;StartAppend&quot; method.  </para></listitem>
<listitem>
<para><computeroutput>obj.EndAppend ()</computeroutput> - These methods provide an alternative way of executing the filter. PolyData can be added to the result in pieces (append). In this mode, the user must specify the bounds of the entire model as an argument to the &quot;StartAppend&quot; method.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCopyCellData (int )</computeroutput> - This flag makes the filter copy cell data from input to output (the best it can). It uses input cells that trigger the addition of output cells (no averaging). This is off by default, and does not work when append is being called explicitely (non-pipeline usage).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetCopyCellData ()</computeroutput> - This flag makes the filter copy cell data from input to output (the best it can). It uses input cells that trigger the addition of output cells (no averaging). This is off by default, and does not work when append is being called explicitely (non-pipeline usage).  </para></listitem>
<listitem>
<para><computeroutput>obj.CopyCellDataOn ()</computeroutput> - This flag makes the filter copy cell data from input to output (the best it can). It uses input cells that trigger the addition of output cells (no averaging). This is off by default, and does not work when append is being called explicitely (non-pipeline usage).  </para></listitem>
<listitem>
<para><computeroutput>obj.CopyCellDataOff ()</computeroutput> - This flag makes the filter copy cell data from input to output (the best it can). It uses input cells that trigger the addition of output cells (no averaging). This is off by default, and does not work when append is being called explicitely (non-pipeline usage).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPreventDuplicateCells (int )</computeroutput> - Specify a boolean indicating whether to remove duplicate cells (i.e. triangles). This is a little slower, and takes more memory, but in some cases can reduce the number of cells produced by an order of magnitude. By default, this flag is true.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPreventDuplicateCells ()</computeroutput> - Specify a boolean indicating whether to remove duplicate cells (i.e. triangles). This is a little slower, and takes more memory, but in some cases can reduce the number of cells produced by an order of magnitude. By default, this flag is true.  </para></listitem>
<listitem>
<para><computeroutput>obj.PreventDuplicateCellsOn ()</computeroutput> - Specify a boolean indicating whether to remove duplicate cells (i.e. triangles). This is a little slower, and takes more memory, but in some cases can reduce the number of cells produced by an order of magnitude. By default, this flag is true.  </para></listitem>
<listitem>
<para><computeroutput>obj.PreventDuplicateCellsOff ()</computeroutput> - Specify a boolean indicating whether to remove duplicate cells (i.e. triangles). This is a little slower, and takes more memory, but in some cases can reduce the number of cells produced by an order of magnitude. By default, this flag is true.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
