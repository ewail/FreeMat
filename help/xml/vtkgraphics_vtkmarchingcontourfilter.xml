<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkmarchingcontourfilter" kind="page">
    <compoundname>vtkgraphics_vtkmarchingcontourfilter</compoundname>
    <title>vtkMarchingContourFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkMarchingContourFilter is a filter that takes as input any dataset and generates on output isosurfaces and/or isolines. The exact form of the output depends upon the dimensionality of the input data. Data consisting of 3D cells will generate isosurfaces, data consisting of 2D cells will generate isolines, and data with 1D or 0D cells will generate isopoints. Combinations of output type are possible if the input dimension is mixed.</para><para>This filter will identify special dataset types (e.g., structured points) and use the appropriate specialized filter to process the data. For examples, if the input dataset type is a volume, this filter will create an internal vtkMarchingCubes instance and use it. This gives much better performance.</para><para>To use this filter you must specify one or more contour values. You can either use the method SetValue() to specify each contour value, or use GenerateValues() to generate a series of evenly spaced contours. It is also possible to accelerate the operation of this filter (at the cost of extra memory) by using a vtkScalarTree. A scalar tree is used to quickly locate cells that contain a contour surface. This is especially effective if multiple contours are being extracted. If you want to use a scalar tree, invoke the method UseScalarTreeOn().</para><para>To create an instance of class vtkMarchingContourFilter, simply invoke its constructor as follows <verbatim>  obj = vtkMarchingContourFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkMarchingContourFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkMarchingContourFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMarchingContourFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkMarchingContourFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetValue (int i, double value)</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetValue (int i)</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetValues (double contourValues)</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfContours (int number)</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfContours ()</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateValues (int numContours, double range[2])</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateValues (int numContours, double rangeStart, double rangeEnd)</computeroutput> - Methods to set / get contour values.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Modified GetMTime Because we delegate to vtkContourValues  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeNormals (int )</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeNormals ()</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeNormalsOn ()</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeNormalsOff ()</computeroutput> - Set/Get the computation of normals. Normal computation is fairly expensive in both time and storage. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeGradients (int )</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeGradients ()</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeGradientsOn ()</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeGradientsOff ()</computeroutput> - Set/Get the computation of gradients. Gradient computation is fairly expensive in both time and storage. Note that if ComputeNormals is on, gradients will have to be calculated, but will not be stored in the output dataset. If the output data will be processed by filters that modify topology or geometry, it may be wise to turn Normals and Gradients off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetComputeScalars (int )</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetComputeScalars ()</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeScalarsOn ()</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>obj.ComputeScalarsOff ()</computeroutput> - Set/Get the computation of scalars.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetUseScalarTree (int )</computeroutput> - Enable the use of a scalar tree to accelerate contour extraction.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetUseScalarTree ()</computeroutput> - Enable the use of a scalar tree to accelerate contour extraction.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseScalarTreeOn ()</computeroutput> - Enable the use of a scalar tree to accelerate contour extraction.  </para></listitem>
<listitem>
<para><computeroutput>obj.UseScalarTreeOff ()</computeroutput> - Enable the use of a scalar tree to accelerate contour extraction.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLocator (vtkIncrementalPointLocator locator)</computeroutput> - Set / get a spatial locator for merging points. By default, an instance of vtkMergePoints is used.  </para></listitem>
<listitem>
<para><computeroutput>vtkIncrementalPointLocator = obj.GetLocator ()</computeroutput> - Set / get a spatial locator for merging points. By default, an instance of vtkMergePoints is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.CreateDefaultLocator ()</computeroutput> - Create default locator. Used to create one when none is specified. The locator is used to merge coincident points.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
