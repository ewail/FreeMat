<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtklightkit" kind="page">
    <compoundname>vtkrendering_vtklightkit</compoundname>
    <title>vtkLightKit</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkLightKit is designed to make general purpose lighting of vtk scenes simple, flexible, and attractive (or at least not horribly ugly without significant effort). Use a LightKit when you want more control over your lighting than you can get with the default vtk light, which is a headlight located at the camera. (HeadLights are very simple to use, but they don&apos;t show the shape of objects very well, don&apos;t give a good sense of &quot;up&quot; and &quot;down&quot;, and don&apos;t evenly light the object.)</para><para>A LightKit consists of three lights, a key light, a fill light, and a headlight. The main light is the key light. It is usually positioned so that it appears like an overhead light (like the sun, or a ceiling light). It is generally positioned to shine down on the scene from about a 45 degree angle vertically and at least a little offset side to side. The key light usually at least about twice as bright as the total of all other lights in the scene to provide good modeling of object features.</para><para>The other lights in the kit (the fill light, headlight, and a pair of back lights) are weaker sources that provide extra illumination to fill in the spots that the key light misses. The fill light is usually positioned across from or opposite from the key light (though still on the same side of the object as the camera) in order to simulate diffuse reflections from other objects in the scene. The headlight, always located at the position of the camera, reduces the contrast between areas lit by the key and fill light. The two back lights, one on the left of the object as seen from the observer and one on the right, fill on the high-contrast areas behind the object. To enforce the relationship between the different lights, the intensity of the fill, back and headlights are set as a ratio to the key light brightness. Thus, the brightness of all the lights in the scene can be changed by changing the key light intensity.</para><para>All lights are directional lights (infinitely far away with no falloff). Lights move with the camera.</para><para>For simplicity, the position of lights in the LightKit can only be specified using angles: the elevation (latitude) and azimuth (longitude) of each light with respect to the camera, expressed in degrees. (Lights always shine on the camera&apos;s lookat point.) For example, a light at (elevation=0, azimuth=0) is located at the camera (a headlight). A light at (elevation=90, azimuth=0) is above the lookat point, shining down. Negative azimuth values move the lights clockwise as seen above, positive values counter-clockwise. So, a light at (elevation=45, azimuth=-20) is above and in front of the object and shining slightly from the left side.</para><para>vtkLightKit limits the colors that can be assigned to any light to those of incandescent sources such as light bulbs and sunlight. It defines a special color spectrum called &quot;warmth&quot; from which light colors can be chosen, where 0 is cold blue, 0.5 is neutral white, and 1 is deep sunset red. Colors close to 0.5 are &quot;cool whites&quot; and &quot;warm whites,&quot; respectively.</para><para>Since colors far from white on the warmth scale appear less bright, key-to-fill and key-to-headlight ratios are skewed by key, fill, and headlight colors. If the flag MaintainLuminance is set, vtkLightKit will attempt to compensate for these perceptual differences by increasing the brightness of more saturated colors.</para><para>A LightKit is not explicitly part of the vtk pipeline. Rather, it is a composite object that controls the behavior of lights using a unified user interface. Every time a parameter of vtkLightKit is adjusted, the properties of its lights are modified.</para><para>.SECTION Credits vtkLightKit was originally written and contributed to vtk by Michael Halle (<ulink url="mailto:mhalle@bwh.harvard.edu">mhalle@bwh.harvard.edu</ulink>) at the Surgical Planning Lab, Brigham and Women&apos;s Hospital.</para><para>To create an instance of class vtkLightKit, simply invoke its constructor as follows <verbatim>  obj = vtkLightKit
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkLightKit has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkLightKit class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkLightKit = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkLightKit = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyLightIntensity (double )</computeroutput> - Set/Get the intensity of the key light. The key light is the brightest light in the scene. The intensities of the other two lights are ratios of the key light&apos;s intensity.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyLightIntensity ()</computeroutput> - Set/Get the intensity of the key light. The key light is the brightest light in the scene. The intensities of the other two lights are ratios of the key light&apos;s intensity.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyToFillRatio (double )</computeroutput> - Set/Get the key-to-fill ratio. This ratio controls how bright the fill light is compared to the key light: larger values correspond to a dimmer fill light. The purpose of the fill light is to light parts of the object not lit by the key light, while still maintaining constrast. This type of lighting may correspond to indirect illumination from the key light, bounced off a wall, floor, or other object. The fill light should never be brighter than the key light: a good range for the key-to-fill ratio is between 2 and 10.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToFillRatioMinValue ()</computeroutput> - Set/Get the key-to-fill ratio. This ratio controls how bright the fill light is compared to the key light: larger values correspond to a dimmer fill light. The purpose of the fill light is to light parts of the object not lit by the key light, while still maintaining constrast. This type of lighting may correspond to indirect illumination from the key light, bounced off a wall, floor, or other object. The fill light should never be brighter than the key light: a good range for the key-to-fill ratio is between 2 and 10.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToFillRatioMaxValue ()</computeroutput> - Set/Get the key-to-fill ratio. This ratio controls how bright the fill light is compared to the key light: larger values correspond to a dimmer fill light. The purpose of the fill light is to light parts of the object not lit by the key light, while still maintaining constrast. This type of lighting may correspond to indirect illumination from the key light, bounced off a wall, floor, or other object. The fill light should never be brighter than the key light: a good range for the key-to-fill ratio is between 2 and 10.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToFillRatio ()</computeroutput> - Set/Get the key-to-fill ratio. This ratio controls how bright the fill light is compared to the key light: larger values correspond to a dimmer fill light. The purpose of the fill light is to light parts of the object not lit by the key light, while still maintaining constrast. This type of lighting may correspond to indirect illumination from the key light, bounced off a wall, floor, or other object. The fill light should never be brighter than the key light: a good range for the key-to-fill ratio is between 2 and 10.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyToHeadRatio (double )</computeroutput> - Set/Get the key-to-headlight ratio. Similar to the key-to-fill ratio, this ratio controls how bright the headlight light is compared to the key light: larger values correspond to a dimmer headlight light. The headlight is special kind of fill light, lighting only the parts of the object that the camera can see. As such, a headlight tends to reduce the contrast of a scene. It can be used to fill in &quot;shadows&quot; of the object missed by the key and fill lights. The headlight should always be significantly dimmer than the key light: ratios of 2 to 15 are typical.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToHeadRatioMinValue ()</computeroutput> - Set/Get the key-to-headlight ratio. Similar to the key-to-fill ratio, this ratio controls how bright the headlight light is compared to the key light: larger values correspond to a dimmer headlight light. The headlight is special kind of fill light, lighting only the parts of the object that the camera can see. As such, a headlight tends to reduce the contrast of a scene. It can be used to fill in &quot;shadows&quot; of the object missed by the key and fill lights. The headlight should always be significantly dimmer than the key light: ratios of 2 to 15 are typical.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToHeadRatioMaxValue ()</computeroutput> - Set/Get the key-to-headlight ratio. Similar to the key-to-fill ratio, this ratio controls how bright the headlight light is compared to the key light: larger values correspond to a dimmer headlight light. The headlight is special kind of fill light, lighting only the parts of the object that the camera can see. As such, a headlight tends to reduce the contrast of a scene. It can be used to fill in &quot;shadows&quot; of the object missed by the key and fill lights. The headlight should always be significantly dimmer than the key light: ratios of 2 to 15 are typical.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToHeadRatio ()</computeroutput> - Set/Get the key-to-headlight ratio. Similar to the key-to-fill ratio, this ratio controls how bright the headlight light is compared to the key light: larger values correspond to a dimmer headlight light. The headlight is special kind of fill light, lighting only the parts of the object that the camera can see. As such, a headlight tends to reduce the contrast of a scene. It can be used to fill in &quot;shadows&quot; of the object missed by the key and fill lights. The headlight should always be significantly dimmer than the key light: ratios of 2 to 15 are typical.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyToBackRatio (double )</computeroutput> - Set/Get the key-to-back light ratio. This ratio controls how bright the back lights are compared to the key light: larger values correspond to dimmer back lights. The back lights fill in the remaining high-contrast regions behind the object. Values between 2 and 10 are good.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToBackRatioMinValue ()</computeroutput> - Set/Get the key-to-back light ratio. This ratio controls how bright the back lights are compared to the key light: larger values correspond to dimmer back lights. The back lights fill in the remaining high-contrast regions behind the object. Values between 2 and 10 are good.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToBackRatioMaxValue ()</computeroutput> - Set/Get the key-to-back light ratio. This ratio controls how bright the back lights are compared to the key light: larger values correspond to dimmer back lights. The back lights fill in the remaining high-contrast regions behind the object. Values between 2 and 10 are good.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyToBackRatio ()</computeroutput> - Set/Get the key-to-back light ratio. This ratio controls how bright the back lights are compared to the key light: larger values correspond to dimmer back lights. The back lights fill in the remaining high-contrast regions behind the object. Values between 2 and 10 are good.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyLightWarmth (double )</computeroutput> - Set the warmth of each the lights. Warmth is a parameter that varies from 0 to 1, where 0 is &quot;cold&quot; (looks icy or lit by a very blue sky), 1 is &quot;warm&quot; (the red of a very red sunset, or the embers of a campfire), and 0.5 is a neutral white. The warmth scale is non-linear. Warmth values close to 0.5 are subtly &quot;warmer&quot; or &quot;cooler,&quot; much like a warmer tungsten incandescent bulb, a cooler halogen, or daylight (cooler still). Moving further away from 0.5, colors become more quickly varying towards blues and reds. With regards to aesthetics, extremes of warmth should be used sparingly.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyLightWarmth ()</computeroutput> - Set the warmth of each the lights. Warmth is a parameter that varies from 0 to 1, where 0 is &quot;cold&quot; (looks icy or lit by a very blue sky), 1 is &quot;warm&quot; (the red of a very red sunset, or the embers of a campfire), and 0.5 is a neutral white. The warmth scale is non-linear. Warmth values close to 0.5 are subtly &quot;warmer&quot; or &quot;cooler,&quot; much like a warmer tungsten incandescent bulb, a cooler halogen, or daylight (cooler still). Moving further away from 0.5, colors become more quickly varying towards blues and reds. With regards to aesthetics, extremes of warmth should be used sparingly.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFillLightWarmth (double )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFillLightWarmth ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHeadLightWarmth (double )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHeadLightWarmth ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBackLightWarmth (double )</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBackLightWarmth ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetKeyLightColor ()</computeroutput> - Returns the floating-point RGB values of each of the light&apos;s color.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetFillLightColor ()</computeroutput> - Returns the floating-point RGB values of each of the light&apos;s color.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetHeadLightColor ()</computeroutput> - Returns the floating-point RGB values of each of the light&apos;s color.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetBackLightColor ()</computeroutput> - Returns the floating-point RGB values of each of the light&apos;s color.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHeadlightWarmth (double v)</computeroutput> - To maintain a deprecation API:  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetHeadlightWarmth ()</computeroutput> - To maintain a deprecation API:  </para></listitem>
<listitem>
<para><computeroutput>obj.GetHeadlightColor (double color)</computeroutput> - To maintain a deprecation API:  </para></listitem>
<listitem>
<para><computeroutput>obj.MaintainLuminanceOn ()</computeroutput> - If MaintainLuminance is set, the LightKit will attempt to maintain the apparent intensity of lights based on their perceptual brightnesses. By default, MaintainLuminance is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.MaintainLuminanceOff ()</computeroutput> - If MaintainLuminance is set, the LightKit will attempt to maintain the apparent intensity of lights based on their perceptual brightnesses. By default, MaintainLuminance is off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaintainLuminance ()</computeroutput> - If MaintainLuminance is set, the LightKit will attempt to maintain the apparent intensity of lights based on their perceptual brightnesses. By default, MaintainLuminance is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaintainLuminance (int )</computeroutput> - If MaintainLuminance is set, the LightKit will attempt to maintain the apparent intensity of lights based on their perceptual brightnesses. By default, MaintainLuminance is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyLightAngle (double elevation, double azimuth)</computeroutput> - Get/Set the position of the key, fill, and back lights using angular methods. Elevation corresponds to latitude, azimuth to longitude. It is recommended that the key light always be on the viewer&apos;s side of the object and above the object, while the fill light generally lights the part of the object not lit by the fill light. The headlight, which is always located at the viewer, can then be used to reduce the contrast in the image. There are a pair of back lights. They are located at the same elevation and at opposing azimuths (ie, one to the left, and one to the right). They are generally set at the equator (elevation = 0), and at approximately 120 degrees (lighting from each side and behind).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyLightAngle (double angle[2])</computeroutput> - Get/Set the position of the key, fill, and back lights using angular methods. Elevation corresponds to latitude, azimuth to longitude. It is recommended that the key light always be on the viewer&apos;s side of the object and above the object, while the fill light generally lights the part of the object not lit by the fill light. The headlight, which is always located at the viewer, can then be used to reduce the contrast in the image. There are a pair of back lights. They are located at the same elevation and at opposing azimuths (ie, one to the left, and one to the right). They are generally set at the equator (elevation = 0), and at approximately 120 degrees (lighting from each side and behind).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyLightElevation (double x)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetKeyLightAzimuth (double x)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetKeyLightAngle ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyLightElevation ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetKeyLightAzimuth ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFillLightAngle (double elevation, double azimuth)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFillLightAngle (double angle[2])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFillLightElevation (double x)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFillLightAzimuth (double x)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetFillLightAngle ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFillLightElevation ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetFillLightAzimuth ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBackLightAngle (double elevation, double azimuth)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBackLightAngle (double angle[2])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBackLightElevation (double x)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBackLightAzimuth (double x)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetBackLightAngle ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBackLightElevation ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetBackLightAzimuth ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.AddLightsToRenderer (vtkRenderer renderer)</computeroutput> - Add lights to, or remove lights from, a renderer. Lights may be added to more than one renderer, if desired.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveLightsFromRenderer (vtkRenderer renderer)</computeroutput> - Add lights to, or remove lights from, a renderer. Lights may be added to more than one renderer, if desired.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkLightKit kit)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Modified ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.Update ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
