<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtktemporalstreamtracer" kind="page">
    <compoundname>vtkparallel_vtktemporalstreamtracer</compoundname>
    <title>vtkTemporalStreamTracer</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkTemporalStreamTracer is a filter that integrates a vector field to generate</para><para>To create an instance of class vtkTemporalStreamTracer, simply invoke its constructor as follows <verbatim>  obj = vtkTemporalStreamTracer
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkTemporalStreamTracer has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkTemporalStreamTracer class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkTemporalStreamTracer = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkTemporalStreamTracer = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimeStep (int )</computeroutput> - Set/Get the TimeStep. This is the primary means of advancing the particles. The TimeStep should be animated and this will drive the pipeline forcing timesteps to be fetched from upstream.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimeStep ()</computeroutput> - Set/Get the TimeStep. This is the primary means of advancing the particles. The TimeStep should be animated and this will drive the pipeline forcing timesteps to be fetched from upstream.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetIgnorePipelineTime (int )</computeroutput> - To get around problems with the Paraview Animation controls we can just animate the time step and ignore the TIME_ requests  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetIgnorePipelineTime ()</computeroutput> - To get around problems with the Paraview Animation controls we can just animate the time step and ignore the TIME_ requests  </para></listitem>
<listitem>
<para><computeroutput>obj.IgnorePipelineTimeOn ()</computeroutput> - To get around problems with the Paraview Animation controls we can just animate the time step and ignore the TIME_ requests  </para></listitem>
<listitem>
<para><computeroutput>obj.IgnorePipelineTimeOff ()</computeroutput> - To get around problems with the Paraview Animation controls we can just animate the time step and ignore the TIME_ requests  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimeStepResolution (double )</computeroutput> - If the data source does not have the correct time values present on each time step - setting this value to non unity can be used to adjust the time step size from 1s pre step to 1x_TimeStepResolution : Not functional in this version. Broke it  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
