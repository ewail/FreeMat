<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkio_vtknetcdfcfreader" kind="page">
    <compoundname>vtkio_vtknetcdfcfreader</compoundname>
    <title>vtkNetCDFCFReader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkio_1sec_vtkio" kindref="member">Visualization Toolkit IO Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Reads netCDF files that follow the CF convention. Details on this convention can be found at <ulink url="http://cf-pcmdi.llnl.gov/">http://cf-pcmdi.llnl.gov/</ulink>.</para><para>To create an instance of class vtkNetCDFCFReader, simply invoke its constructor as follows <verbatim>  obj = vtkNetCDFCFReader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkNetCDFCFReader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkNetCDFCFReader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkNetCDFCFReader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkNetCDFCFReader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSphericalCoordinates ()</computeroutput> - If on (the default), then 3D data with latitude/longitude dimensions will be read in as curvilinear data shaped like spherical coordinates. If false, then the data will always be read in Cartesian coordinates.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSphericalCoordinates (int )</computeroutput> - If on (the default), then 3D data with latitude/longitude dimensions will be read in as curvilinear data shaped like spherical coordinates. If false, then the data will always be read in Cartesian coordinates.  </para></listitem>
<listitem>
<para><computeroutput>obj.SphericalCoordinatesOn ()</computeroutput> - If on (the default), then 3D data with latitude/longitude dimensions will be read in as curvilinear data shaped like spherical coordinates. If false, then the data will always be read in Cartesian coordinates.  </para></listitem>
<listitem>
<para><computeroutput>obj.SphericalCoordinatesOff ()</computeroutput> - If on (the default), then 3D data with latitude/longitude dimensions will be read in as curvilinear data shaped like spherical coordinates. If false, then the data will always be read in Cartesian coordinates.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetVerticalScale ()</computeroutput> - The scale and bias of the vertical component of spherical coordinates. It is common to write the vertical component with respect to something other than the center of the sphere (for example, the surface). In this case, it might be necessary to scale and/or bias the vertical height. The height will become height*scale + bias. Keep in mind that if the positive attribute of the vertical dimension is down, then the height is negated. By default the scale is 1 and the bias is 0 (that is, no change). The scaling will be adjusted if it results in invalid (negative) vertical values.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetVerticalScale (double )</computeroutput> - The scale and bias of the vertical component of spherical coordinates. It is common to write the vertical component with respect to something other than the center of the sphere (for example, the surface). In this case, it might be necessary to scale and/or bias the vertical height. The height will become height*scale + bias. Keep in mind that if the positive attribute of the vertical dimension is down, then the height is negated. By default the scale is 1 and the bias is 0 (that is, no change). The scaling will be adjusted if it results in invalid (negative) vertical values.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetVerticalBias ()</computeroutput> - The scale and bias of the vertical component of spherical coordinates. It is common to write the vertical component with respect to something other than the center of the sphere (for example, the surface). In this case, it might be necessary to scale and/or bias the vertical height. The height will become height*scale + bias. Keep in mind that if the positive attribute of the vertical dimension is down, then the height is negated. By default the scale is 1 and the bias is 0 (that is, no change). The scaling will be adjusted if it results in invalid (negative) vertical values.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetVerticalBias (double )</computeroutput> - The scale and bias of the vertical component of spherical coordinates. It is common to write the vertical component with respect to something other than the center of the sphere (for example, the surface). In this case, it might be necessary to scale and/or bias the vertical height. The height will become height*scale + bias. Keep in mind that if the positive attribute of the vertical dimension is down, then the height is negated. By default the scale is 1 and the bias is 0 (that is, no change). The scaling will be adjusted if it results in invalid (negative) vertical values.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
