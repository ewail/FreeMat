<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkgenericrenderwindowinteractor" kind="page">
    <compoundname>vtkrendering_vtkgenericrenderwindowinteractor</compoundname>
    <title>vtkGenericRenderWindowInteractor</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkGenericRenderWindowInteractor provides a way to translate native mouse and keyboard events into vtk Events. By calling the methods on this class, vtk events will be invoked. This will allow scripting languages to use vtkInteractorStyles and 3D widgets.</para><para>To create an instance of class vtkGenericRenderWindowInteractor, simply invoke its constructor as follows <verbatim>  obj = vtkGenericRenderWindowInteractor
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkGenericRenderWindowInteractor has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkGenericRenderWindowInteractor class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericRenderWindowInteractor = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkGenericRenderWindowInteractor = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.MouseMoveEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.RightButtonPressEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.RightButtonReleaseEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.LeftButtonPressEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.LeftButtonReleaseEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.MiddleButtonPressEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.MiddleButtonReleaseEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.MouseWheelForwardEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.MouseWheelBackwardEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.ExposeEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.ConfigureEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.EnterEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.LeaveEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.TimerEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.KeyPressEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.KeyReleaseEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.CharEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.ExitEvent ()</computeroutput> - Fire various events. SetEventInformation should be called just prior to calling any of these methods. These methods will Invoke the corresponding vtk event.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTimerEventResetsTimer (int )</computeroutput> - Flag that indicates whether the TimerEvent method should call ResetTimer to simulate repeating timers with an endless stream of one shot timers. By default this flag is on and all repeating timers are implemented as a stream of sequential one shot timers. If the observer of CreateTimerEvent actually creates a &quot;natively repeating&quot; timer, setting this flag to off will prevent (perhaps many many) unnecessary calls to ResetTimer. Having the flag on by default means that &quot;natively one
 shot&quot; timers can be either one shot or repeating timers with no additional work. Also, &quot;natively repeating&quot; timers still work with the default setting, but with potentially many create and destroy calls.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTimerEventResetsTimer ()</computeroutput> - Flag that indicates whether the TimerEvent method should call ResetTimer to simulate repeating timers with an endless stream of one shot timers. By default this flag is on and all repeating timers are implemented as a stream of sequential one shot timers. If the observer of CreateTimerEvent actually creates a &quot;natively repeating&quot; timer, setting this flag to off will prevent (perhaps many many) unnecessary calls to ResetTimer. Having the flag on by default means that &quot;natively one
 shot&quot; timers can be either one shot or repeating timers with no additional work. Also, &quot;natively repeating&quot; timers still work with the default setting, but with potentially many create and destroy calls.  </para></listitem>
<listitem>
<para><computeroutput>obj.TimerEventResetsTimerOn ()</computeroutput> - Flag that indicates whether the TimerEvent method should call ResetTimer to simulate repeating timers with an endless stream of one shot timers. By default this flag is on and all repeating timers are implemented as a stream of sequential one shot timers. If the observer of CreateTimerEvent actually creates a &quot;natively repeating&quot; timer, setting this flag to off will prevent (perhaps many many) unnecessary calls to ResetTimer. Having the flag on by default means that &quot;natively one
 shot&quot; timers can be either one shot or repeating timers with no additional work. Also, &quot;natively repeating&quot; timers still work with the default setting, but with potentially many create and destroy calls.  </para></listitem>
<listitem>
<para><computeroutput>obj.TimerEventResetsTimerOff ()</computeroutput> - Flag that indicates whether the TimerEvent method should call ResetTimer to simulate repeating timers with an endless stream of one shot timers. By default this flag is on and all repeating timers are implemented as a stream of sequential one shot timers. If the observer of CreateTimerEvent actually creates a &quot;natively repeating&quot; timer, setting this flag to off will prevent (perhaps many many) unnecessary calls to ResetTimer. Having the flag on by default means that &quot;natively one
 shot&quot; timers can be either one shot or repeating timers with no additional work. Also, &quot;natively repeating&quot; timers still work with the default setting, but with potentially many create and destroy calls.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
