<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkimplicitplanewidget" kind="page">
    <compoundname>vtkwidgets_vtkimplicitplanewidget</compoundname>
    <title>vtkImplicitPlaneWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This 3D widget defines an infinite plane that can be interactively placed in a scene. The widget is represented by a plane with a normal vector; the plane is contained by a bounding box, and where the plane intersects the bounding box the edges are shown (possibly tubed). The normal can be selected and moved to rotate the plane; the plane itself can be selected and translated in various directions. As the plane is moved, the implicit plane function and polygon (representing the plane cut against the bounding box) is updated.</para><para>To use this object, just invoke SetInteractor() with the argument of the method a vtkRenderWindowInteractor. You may also wish to invoke &quot;PlaceWidget()&quot; to initially position the widget. If the &quot;i&quot; key (for &quot;interactor&quot;) is pressed, the vtkImplicitPlaneWidget will appear. (See superclass documentation for information about changing this behavior.) If you select the normal vector, the plane can be arbitrarily rotated. The plane can be translated along the normal by selecting the plane and moving it. The plane (the plane origin) can also be arbitrary moved by selecting the plane with the middle mouse button. The right mouse button can be used to uniformly scale the bounding box (moving &quot;up&quot; the box scales larger; moving &quot;down&quot; the box scales smaller). Events that occur outside of the widget (i.e., no part of the widget is picked) are propagated to any other registered obsevers (such as the interaction style). Turn off the widget by pressing the &quot;i&quot; key again (or invoke the Off() method).</para><para>The vtkImplicitPlaneWidget has several methods that can be used in conjunction with other VTK objects. The GetPolyData() method can be used to get a polygonal representation (the single polygon clipped by the bounding box). Typical usage of the widget is to make use of the StartInteractionEvent, InteractionEvent, and EndInteractionEvent events. The InteractionEvent is called on mouse motion; the other two events are called on button down and button up (either left or right button). (Note: there is also a PlaceWidgetEvent that is invoked when the widget is placed with PlaceWidget().)</para><para>Some additional features of this class include the ability to control the properties of the widget. You do this by setting property values on the normal vector (selected and unselected properties); the plane (selected and unselected properties); the outline (selected and unselected properties); and the edges. The edges may also be tubed or not.</para><para>To create an instance of class vtkImplicitPlaneWidget, simply invoke its constructor as follows <verbatim>  obj = vtkImplicitPlaneWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImplicitPlaneWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImplicitPlaneWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImplicitPlaneWidget = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImplicitPlaneWidget = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnabled (int )</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double bounds[6])</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget ()</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrigin (double x, double y, double z)</computeroutput> - Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrigin (double x[3])</computeroutput> - Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetOrigin ()</computeroutput> - Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetOrigin (double xyz[3])</computeroutput> - Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormal (double x, double y, double z)</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormal (double x[3])</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetNormal ()</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetNormal (double xyz[3])</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalToXAxis (int )</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNormalToXAxis ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToXAxisOn ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToXAxisOff ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalToYAxis (int )</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNormalToYAxis ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToYAxisOn ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToYAxisOff ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalToZAxis (int )</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNormalToZAxis ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToZAxisOn ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToZAxisOff ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. If one axis is set on, the other two will be set off. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTubing (int )</computeroutput> - Turn on/off tubing of the wire outline of the plane. The tube thickens the line by wrapping with a vtkTubeFilter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTubing ()</computeroutput> - Turn on/off tubing of the wire outline of the plane. The tube thickens the line by wrapping with a vtkTubeFilter.  </para></listitem>
<listitem>
<para><computeroutput>obj.TubingOn ()</computeroutput> - Turn on/off tubing of the wire outline of the plane. The tube thickens the line by wrapping with a vtkTubeFilter.  </para></listitem>
<listitem>
<para><computeroutput>obj.TubingOff ()</computeroutput> - Turn on/off tubing of the wire outline of the plane. The tube thickens the line by wrapping with a vtkTubeFilter.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDrawPlane (int plane)</computeroutput> - Enable/disable the drawing of the plane. In some cases the plane interferes with the object that it is operating on (i.e., the plane interferes with the cut surface it produces producing z-buffer artifacts.)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDrawPlane ()</computeroutput> - Enable/disable the drawing of the plane. In some cases the plane interferes with the object that it is operating on (i.e., the plane interferes with the cut surface it produces producing z-buffer artifacts.)  </para></listitem>
<listitem>
<para><computeroutput>obj.DrawPlaneOn ()</computeroutput> - Enable/disable the drawing of the plane. In some cases the plane interferes with the object that it is operating on (i.e., the plane interferes with the cut surface it produces producing z-buffer artifacts.)  </para></listitem>
<listitem>
<para><computeroutput>obj.DrawPlaneOff ()</computeroutput> - Enable/disable the drawing of the plane. In some cases the plane interferes with the object that it is operating on (i.e., the plane interferes with the cut surface it produces producing z-buffer artifacts.)  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutlineTranslation (int )</computeroutput> - Turn on/off the ability to translate the bounding box by grabbing it with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOutlineTranslation ()</computeroutput> - Turn on/off the ability to translate the bounding box by grabbing it with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>obj.OutlineTranslationOn ()</computeroutput> - Turn on/off the ability to translate the bounding box by grabbing it with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>obj.OutlineTranslationOff ()</computeroutput> - Turn on/off the ability to translate the bounding box by grabbing it with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutsideBounds (int )</computeroutput> - Turn on/off the ability to move the widget outside of the input&apos;s bound  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOutsideBounds ()</computeroutput> - Turn on/off the ability to move the widget outside of the input&apos;s bound  </para></listitem>
<listitem>
<para><computeroutput>obj.OutsideBoundsOn ()</computeroutput> - Turn on/off the ability to move the widget outside of the input&apos;s bound  </para></listitem>
<listitem>
<para><computeroutput>obj.OutsideBoundsOff ()</computeroutput> - Turn on/off the ability to move the widget outside of the input&apos;s bound  </para></listitem>
<listitem>
<para><computeroutput>obj.SetScaleEnabled (int )</computeroutput> - Turn on/off the ability to scale with the mouse  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetScaleEnabled ()</computeroutput> - Turn on/off the ability to scale with the mouse  </para></listitem>
<listitem>
<para><computeroutput>obj.ScaleEnabledOn ()</computeroutput> - Turn on/off the ability to scale with the mouse  </para></listitem>
<listitem>
<para><computeroutput>obj.ScaleEnabledOff ()</computeroutput> - Turn on/off the ability to scale with the mouse  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOriginTranslation (int )</computeroutput> - Turn on/off the ability to translate the origin (sphere) with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOriginTranslation ()</computeroutput> - Turn on/off the ability to translate the origin (sphere) with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>obj.OriginTranslationOn ()</computeroutput> - Turn on/off the ability to translate the origin (sphere) with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>obj.OriginTranslationOff ()</computeroutput> - Turn on/off the ability to translate the origin (sphere) with the left mouse button.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDiagonalRatio (double )</computeroutput> - By default the arrow is 30% of the diagonal length. DiagonalRatio control this ratio in the interval [0-2]  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDiagonalRatioMinValue ()</computeroutput> - By default the arrow is 30% of the diagonal length. DiagonalRatio control this ratio in the interval [0-2]  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDiagonalRatioMaxValue ()</computeroutput> - By default the arrow is 30% of the diagonal length. DiagonalRatio control this ratio in the interval [0-2]  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetDiagonalRatio ()</computeroutput> - By default the arrow is 30% of the diagonal length. DiagonalRatio control this ratio in the interval [0-2]  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPolyData (vtkPolyData pd)</computeroutput> - Grab the polydata that defines the plane. The polydata contains a single polygon that is clipped by the bounding box.  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataAlgorithm = obj.GetPolyDataAlgorithm ()</computeroutput> - Satisfies superclass API. This returns a pointer to the underlying PolyData (which represents the plane).  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPlane (vtkPlane plane)</computeroutput> - Get the implicit function for the plane. The user must provide the instance of the class vtkPlane. Note that vtkPlane is a subclass of vtkImplicitFunction, meaning that it can be used by a variety of filters to perform clipping, cutting, and selection of data.  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdatePlacement ()</computeroutput> - Satisfies the superclass API. This will change the state of the widget to match changes that have been made to the underlying PolyDataSource  </para></listitem>
<listitem>
<para><computeroutput>obj.SizeHandles ()</computeroutput> - Control widget appearance  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetNormalProperty ()</computeroutput> - Get the properties on the normal (line and cone).  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedNormalProperty ()</computeroutput> - Get the properties on the normal (line and cone).  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetPlaneProperty ()</computeroutput> - Get the plane properties. The properties of the plane when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedPlaneProperty ()</computeroutput> - Get the plane properties. The properties of the plane when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetOutlineProperty ()</computeroutput> - Get the property of the outline.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedOutlineProperty ()</computeroutput> - Get the property of the outline.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetEdgesProperty ()</computeroutput> - Get the property of the intersection edges. (This property also applies to the edges when tubed.)  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
