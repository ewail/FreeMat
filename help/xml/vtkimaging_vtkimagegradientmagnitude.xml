<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkimaging_vtkimagegradientmagnitude" kind="page">
    <compoundname>vtkimaging_vtkimagegradientmagnitude</compoundname>
    <title>vtkImageGradientMagnitude</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkimaging_1sec_vtkimaging" kindref="member">Visualization Toolkit Imaging Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkImageGradientMagnitude computes the gradient magnitude of an image. Setting the dimensionality determines whether the gradient is computed on 2D images, or 3D volumes. The default is two dimensional XY images.</para><para>To create an instance of class vtkImageGradientMagnitude, simply invoke its constructor as follows <verbatim>  obj = vtkImageGradientMagnitude
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkImageGradientMagnitude has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkImageGradientMagnitude class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageGradientMagnitude = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageGradientMagnitude = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetHandleBoundaries (int )</computeroutput> - If &quot;HandleBoundariesOn&quot; then boundary pixels are duplicated So central differences can get values.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetHandleBoundaries ()</computeroutput> - If &quot;HandleBoundariesOn&quot; then boundary pixels are duplicated So central differences can get values.  </para></listitem>
<listitem>
<para><computeroutput>obj.HandleBoundariesOn ()</computeroutput> - If &quot;HandleBoundariesOn&quot; then boundary pixels are duplicated So central differences can get values.  </para></listitem>
<listitem>
<para><computeroutput>obj.HandleBoundariesOff ()</computeroutput> - If &quot;HandleBoundariesOn&quot; then boundary pixels are duplicated So central differences can get values.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDimensionality (int )</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionalityMinValue ()</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionalityMaxValue ()</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimensionality ()</computeroutput> - Determines how the input is interpreted (set of 2d slices ...)  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
