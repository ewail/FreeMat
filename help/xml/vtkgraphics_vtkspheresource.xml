<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkspheresource" kind="page">
    <compoundname>vtkgraphics_vtkspheresource</compoundname>
    <title>vtkSphereSource</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkSphereSource creates a sphere (represented by polygons) of specified radius centered at the origin. The resolution (polygonal discretization) in both the latitude (phi) and longitude (theta) directions can be specified. It also is possible to create partial spheres by specifying maximum phi and theta angles. By default, the surface tessellation of the sphere uses triangles; however you can set LatLongTessellation to produce a tessellation using quadrilaterals.</para><para>To create an instance of class vtkSphereSource, simply invoke its constructor as follows <verbatim>  obj = vtkSphereSource
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkSphereSource has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkSphereSource class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphereSource = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkSphereSource = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRadius (double )</computeroutput> - Set radius of sphere. Default is .5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadiusMinValue ()</computeroutput> - Set radius of sphere. Default is .5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadiusMaxValue ()</computeroutput> - Set radius of sphere. Default is .5.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadius ()</computeroutput> - Set radius of sphere. Default is .5.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double , double , double )</computeroutput> - Set the center of the sphere. Default is 0,0,0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double a[3])</computeroutput> - Set the center of the sphere. Default is 0,0,0.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetCenter ()</computeroutput> - Set the center of the sphere. Default is 0,0,0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetThetaResolution (int )</computeroutput> - Set the number of points in the longitude direction (ranging from StartTheta to EndTheta).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetThetaResolutionMinValue ()</computeroutput> - Set the number of points in the longitude direction (ranging from StartTheta to EndTheta).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetThetaResolutionMaxValue ()</computeroutput> - Set the number of points in the longitude direction (ranging from StartTheta to EndTheta).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetThetaResolution ()</computeroutput> - Set the number of points in the longitude direction (ranging from StartTheta to EndTheta).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPhiResolution (int )</computeroutput> - Set the number of points in the latitude direction (ranging from StartPhi to EndPhi).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPhiResolutionMinValue ()</computeroutput> - Set the number of points in the latitude direction (ranging from StartPhi to EndPhi).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPhiResolutionMaxValue ()</computeroutput> - Set the number of points in the latitude direction (ranging from StartPhi to EndPhi).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPhiResolution ()</computeroutput> - Set the number of points in the latitude direction (ranging from StartPhi to EndPhi).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStartTheta (double )</computeroutput> - Set the starting longitude angle. By default StartTheta=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStartThetaMinValue ()</computeroutput> - Set the starting longitude angle. By default StartTheta=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStartThetaMaxValue ()</computeroutput> - Set the starting longitude angle. By default StartTheta=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStartTheta ()</computeroutput> - Set the starting longitude angle. By default StartTheta=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEndTheta (double )</computeroutput> - Set the ending longitude angle. By default EndTheta=360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEndThetaMinValue ()</computeroutput> - Set the ending longitude angle. By default EndTheta=360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEndThetaMaxValue ()</computeroutput> - Set the ending longitude angle. By default EndTheta=360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEndTheta ()</computeroutput> - Set the ending longitude angle. By default EndTheta=360 degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStartPhi (double )</computeroutput> - Set the starting latitude angle (0 is at north pole). By default StartPhi=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStartPhiMinValue ()</computeroutput> - Set the starting latitude angle (0 is at north pole). By default StartPhi=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStartPhiMaxValue ()</computeroutput> - Set the starting latitude angle (0 is at north pole). By default StartPhi=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetStartPhi ()</computeroutput> - Set the starting latitude angle (0 is at north pole). By default StartPhi=0 degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEndPhi (double )</computeroutput> - Set the ending latitude angle. By default EndPhi=180 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEndPhiMinValue ()</computeroutput> - Set the ending latitude angle. By default EndPhi=180 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEndPhiMaxValue ()</computeroutput> - Set the ending latitude angle. By default EndPhi=180 degrees.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetEndPhi ()</computeroutput> - Set the ending latitude angle. By default EndPhi=180 degrees.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLatLongTessellation (int )</computeroutput> - Cause the sphere to be tessellated with edges along the latitude and longitude lines. If off, triangles are generated at non-polar regions, which results in edges that are not parallel to latitude and longitude lines. If on, quadrilaterals are generated everywhere except at the poles. This can be useful for generating a wireframe sphere with natural latitude and longitude lines.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLatLongTessellation ()</computeroutput> - Cause the sphere to be tessellated with edges along the latitude and longitude lines. If off, triangles are generated at non-polar regions, which results in edges that are not parallel to latitude and longitude lines. If on, quadrilaterals are generated everywhere except at the poles. This can be useful for generating a wireframe sphere with natural latitude and longitude lines.  </para></listitem>
<listitem>
<para><computeroutput>obj.LatLongTessellationOn ()</computeroutput> - Cause the sphere to be tessellated with edges along the latitude and longitude lines. If off, triangles are generated at non-polar regions, which results in edges that are not parallel to latitude and longitude lines. If on, quadrilaterals are generated everywhere except at the poles. This can be useful for generating a wireframe sphere with natural latitude and longitude lines.  </para></listitem>
<listitem>
<para><computeroutput>obj.LatLongTessellationOff ()</computeroutput> - Cause the sphere to be tessellated with edges along the latitude and longitude lines. If off, triangles are generated at non-polar regions, which results in edges that are not parallel to latitude and longitude lines. If on, quadrilaterals are generated everywhere except at the poles. This can be useful for generating a wireframe sphere with natural latitude and longitude lines.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
