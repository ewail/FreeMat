<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="array_nan" kind="page">
    <compoundname>array_nan</compoundname>
    <title>NAN Not-a-Number Constant</title>
    <detaileddescription>
<para>Section: <ref refid="sec_array_1sec_array" kindref="member">Array Generation and Manipulations</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Returns a value that represents ``not-a-number&apos;&apos; for both 32 and 64-bit floating point values. This constant is meant to represent the result of arithmetic operations whose output cannot be meaningfully defined (like zero divided by zero). There are several forms for the <computeroutput>NaN</computeroutput> function. The first form returns a double precision <computeroutput>NaN</computeroutput>. <verbatim>   y = nan
</verbatim> The next form takes a class name that can be either <computeroutput>&apos;double&apos;</computeroutput> <verbatim>   y = nan(&apos;double&apos;)
</verbatim> or <computeroutput>&apos;single&apos;</computeroutput>: <verbatim>   y = nan(&apos;single&apos;)
</verbatim> With a single parameter it generates a square matrix of <computeroutput>nan</computeroutput>s. <verbatim>   y = nan(n)
</verbatim> Alternatively, you can specify the dimensions of the array via <verbatim>   y = nan(m,n,p,...)
</verbatim> or <verbatim>   y = nan([m,n,p,...])
</verbatim> Finally, you can add a classname of either <computeroutput>&apos;single&apos;</computeroutput> or <computeroutput>&apos;double&apos;</computeroutput>. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>The following examples demonstrate a few calculations with the not-a-number constant.</para><para><verbatim>--&gt; nan*0

ans = 
 NaN 

--&gt; nan-nan

ans = 
 NaN 
</verbatim></para><para>Note that <computeroutput>NaN</computeroutput>s are preserved under type conversion to floating point types (i.e., <computeroutput>float</computeroutput>, <computeroutput>double</computeroutput>, <computeroutput>complex</computeroutput> and <computeroutput>dcomplex</computeroutput> types), but not integer types.</para><para><verbatim>--&gt; uint32(nan)

ans = 
 0 

--&gt; complex(nan)

ans = 
 NaN 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
