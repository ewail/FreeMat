<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkquaternioninterpolator" kind="page">
    <compoundname>vtkrendering_vtkquaternioninterpolator</compoundname>
    <title>vtkQuaternionInterpolator</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This class is used to interpolate a series of quaternions representing the rotations of a 3D object. The interpolation may be linear in form (using spherical linear interpolation SLERP), or via spline interpolation (using SQUAD). In either case the interpolation is specialized to quaternions since the interpolation occurs on the surface of the unit quaternion sphere.</para><para>To use this class, specify at least two pairs of (t,q[4]) with the AddQuaternion() method. Next interpolate the tuples with the InterpolateQuaternion(t,q[4]) method, where &quot;t&quot; must be in the range of (t_min,t_max) parameter values specified by the AddQuaternion() method (t is clamped otherwise), and q[4] is filled in by the method.</para><para>There are several important background references. Ken Shoemake described the practical application of quaternions for the interpolation of rotation (K. Shoemake, &quot;Animating rotation with quaternion curves&quot;, Computer Graphics (Siggraph &apos;85) 19(3):245<ndash/>254, 1985). Another fine reference (available on-line) is E. B. Dam, M. Koch, and M. Lillholm, Technical Report DIKU-TR-98/5, Dept. of Computer Science, University of Copenhagen, Denmark.</para><para>To create an instance of class vtkQuaternionInterpolator, simply invoke its constructor as follows <verbatim>  obj = vtkQuaternionInterpolator
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkQuaternionInterpolator has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkQuaternionInterpolator class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkQuaternionInterpolator = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkQuaternionInterpolator = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfQuaternions ()</computeroutput> - Return the number of quaternions in the list of quaternions to be interpolated.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMinimumT ()</computeroutput> - Obtain some information about the interpolation range. The numbers returned (corresponding to parameter t, usually thought of as time) are undefined if the list of transforms is empty. This is a convenience method for interpolation.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetMaximumT ()</computeroutput> - Obtain some information about the interpolation range. The numbers returned (corresponding to parameter t, usually thought of as time) are undefined if the list of transforms is empty. This is a convenience method for interpolation.  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Reset the class so that it contains no data; i.e., the array of (t,q[4]) information is discarded.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddQuaternion (double t, double q[4])</computeroutput> - Add another quaternion to the list of quaternions to be interpolated. Note that using the same time t value more than once replaces the previous quaternion at t. At least one quaternions must be added to define an interpolation functios.  </para></listitem>
<listitem>
<para><computeroutput>obj.RemoveQuaternion (double t)</computeroutput> - Delete the quaternion at a particular parameter t. If there is no quaternion tuple defined at t, then the method does nothing.  </para></listitem>
<listitem>
<para><computeroutput>obj.InterpolateQuaternion (double t, double q[4])</computeroutput> - Interpolate the list of quaternions and determine a new quaternion (i.e., fill in the quaternion provided). If t is outside the range of (min,max) values, then t is clamped to lie within the range.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInterpolationType (int )</computeroutput> - Specify which type of function to use for interpolation. By default (SetInterpolationFunctionToSpline()), cubic spline interpolation using a modifed Kochanek basis is employed. Otherwise, if SetInterpolationFunctionToLinear() is invoked, linear spherical interpolation is used between each pair of quaternions.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInterpolationTypeMinValue ()</computeroutput> - Specify which type of function to use for interpolation. By default (SetInterpolationFunctionToSpline()), cubic spline interpolation using a modifed Kochanek basis is employed. Otherwise, if SetInterpolationFunctionToLinear() is invoked, linear spherical interpolation is used between each pair of quaternions.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInterpolationTypeMaxValue ()</computeroutput> - Specify which type of function to use for interpolation. By default (SetInterpolationFunctionToSpline()), cubic spline interpolation using a modifed Kochanek basis is employed. Otherwise, if SetInterpolationFunctionToLinear() is invoked, linear spherical interpolation is used between each pair of quaternions.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetInterpolationType ()</computeroutput> - Specify which type of function to use for interpolation. By default (SetInterpolationFunctionToSpline()), cubic spline interpolation using a modifed Kochanek basis is employed. Otherwise, if SetInterpolationFunctionToLinear() is invoked, linear spherical interpolation is used between each pair of quaternions.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInterpolationTypeToLinear ()</computeroutput> - Specify which type of function to use for interpolation. By default (SetInterpolationFunctionToSpline()), cubic spline interpolation using a modifed Kochanek basis is employed. Otherwise, if SetInterpolationFunctionToLinear() is invoked, linear spherical interpolation is used between each pair of quaternions.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetInterpolationTypeToSpline ()</computeroutput>  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
