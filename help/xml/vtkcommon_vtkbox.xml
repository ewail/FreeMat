<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkbox" kind="page">
    <compoundname>vtkcommon_vtkbox</compoundname>
    <title>vtkBox</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkBox computes the implicit function and/or gradient for a axis-aligned bounding box. (The superclasses transform can be used to modify this orientation.) Each side of the box is orthogonal to all other sides meeting along shared edges and all faces are orthogonal to the x-y-z coordinate axes. (If you wish to orient this box differently, recall that the superclass vtkImplicitFunction supports a transformation matrix.) vtkCube is a concrete implementation of vtkImplicitFunction.</para><para>To create an instance of class vtkBox, simply invoke its constructor as follows <verbatim>  obj = vtkBox
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkBox has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkBox class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkBox = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkBox = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.EvaluateFunction (double x[3])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>double = obj.EvaluateFunction (double x, double y, double z)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.EvaluateGradient (double x[3], double n[3])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXMin (double p[3])</computeroutput> - Set / get the bounding box using various methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXMin (double x, double y, double z)</computeroutput> - Set / get the bounding box using various methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetXMin (double p[3])</computeroutput> - Set / get the bounding box using various methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXMax (double p[3])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXMax (double x, double y, double z)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.GetXMax (double p[3])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBounds (double xMin, double xMax, double yMin, double yMax, double zMin, double zMax)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBounds (double bounds[6])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.GetBounds (double bounds[6])</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.AddBounds (double bounds[6])</computeroutput> - A special method that allows union set operation on bounding boxes. Start with a SetBounds(). Subsequent AddBounds() methods are union set operations on the original bounds. Retrieve the final bounds with a GetBounds() method.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
