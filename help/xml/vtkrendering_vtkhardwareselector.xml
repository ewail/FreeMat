<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkhardwareselector" kind="page">
    <compoundname>vtkrendering_vtkhardwareselector</compoundname>
    <title>vtkHardwareSelector</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkHardwareSelector is a helper that orchestrates color buffer based selection. This relies on OpenGL. vtkHardwareSelector can be used to select visible cells or points within a given rectangle of the RenderWindow. To use it, call in order: <itemizedlist>
<listitem><para>SetRenderer() - to select the renderer in which we want to select the cells/points. </para></listitem>
<listitem><para>SetArea() - to set the rectangular region in the render window to select in. </para></listitem>
<listitem><para>SetFieldAssociation() - to select the attribute to select i.e. cells/points etc. </para></listitem>
<listitem><para>Finally, call Select(). Select will cause the attached vtkRenderer to render in a special color mode, where each cell/point is given it own color so that later inspection of the Rendered Pixels can determine what cells are visible. Select() returns a new vtkSelection instance with the cells/points selected.</para></listitem>
</itemizedlist>
Limitations: Antialiasing will break this class. If your graphics card settings force their use this class will return invalid results.</para><para>Currently only cells from PolyDataMappers can be selected from. When vtkRenderer::Selector is non-null vtkPainterPolyDataMapper uses the vtkHardwareSelectionPolyDataPainter which make appropriate calls to BeginRenderProp(), EndRenderProp(), RenderAttributeId() to render colors correctly. Until alternatives to vtkHardwareSelectionPolyDataPainter exist that can do a similar coloration of other vtkDataSet types, only polygonal data can be selected. If you need to select other data types, consider using vtkDataSetMapper and turning on it&apos;s PassThroughCellIds feature, or using vtkFrustumExtractor.</para><para>Only Opaque geometry in Actors is selected from. Assemblies and LODMappers are not currently supported.</para><para>During selection, visible datasets that can not be selected from are temporarily hidden so as not to produce invalid indices from their colors.</para><para>To create an instance of class vtkHardwareSelector, simply invoke its constructor as follows <verbatim>  obj = vtkHardwareSelector
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkHardwareSelector has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkHardwareSelector class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHardwareSelector = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHardwareSelector = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRenderer (vtkRenderer )</computeroutput> - Get/Set the renderer to perform the selection on.  </para></listitem>
<listitem>
<para><computeroutput>vtkRenderer = obj.GetRenderer ()</computeroutput> - Get/Set the renderer to perform the selection on.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetArea (int , int , int , int )</computeroutput> - Get/Set the area to select as (xmin, ymin, xmax, ymax).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetArea (int a[4])</computeroutput> - Get/Set the area to select as (xmin, ymin, xmax, ymax).  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetArea ()</computeroutput> - Get/Set the area to select as (xmin, ymin, xmax, ymax).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFieldAssociation (int )</computeroutput> - Set the field type to select. Valid values are <itemizedlist>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_POINTS </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_CELLS </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_VERTICES </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_EDGES </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_ROWS Currently only FIELD_ASSOCIATION_POINTS and FIELD_ASSOCIATION_CELLS are supported.  </para></listitem>
<listitem><para><computeroutput>int = obj.GetFieldAssociation ()</computeroutput> - Set the field type to select. Valid values are </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_POINTS </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_CELLS </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_VERTICES </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_EDGES </para></listitem>
<listitem><para>vtkDataObject::FIELD_ASSOCIATION_ROWS Currently only FIELD_ASSOCIATION_POINTS and FIELD_ASSOCIATION_CELLS are supported.  </para></listitem>
<listitem><para><computeroutput>vtkSelection = obj.Select ()</computeroutput> - Perform the selection. Returns a new instance of vtkSelection containing the selection on success.  </para></listitem>
<listitem><para><computeroutput>bool = obj.CaptureBuffers ()</computeroutput> - It is possible to use the vtkHardwareSelector for a custom picking. (Look at vtkScenePicker). In that case instead of Select() on can use CaptureBuffers() to render the selection buffers and then get information about pixel locations suing GetPixelInformation(). Use ClearBuffers() to clear buffers after one&apos;s done with the scene. The optional final parameter maxDist will look for a cell within the specified number of pixels from display_position.  </para></listitem>
<listitem><para><computeroutput>obj.ClearBuffers ()</computeroutput> - Called by any vtkMapper or vtkProp subclass to render an attribute&apos;s id.  </para></listitem>
<listitem><para><computeroutput>obj.RenderAttributeId (vtkIdType attribid)</computeroutput> - Called by any vtkMapper or vtkProp subclass to render an attribute&apos;s id.  </para></listitem>
<listitem><para><computeroutput>obj.BeginRenderProp ()</computeroutput> - Called by the mapper (vtkHardwareSelectionPolyDataPainter) before and after rendering each prop.  </para></listitem>
<listitem><para><computeroutput>obj.EndRenderProp ()</computeroutput> - Called by the mapper (vtkHardwareSelectionPolyDataPainter) before and after rendering each prop.  </para></listitem>
<listitem><para><computeroutput>obj.SetProcessID (int )</computeroutput> - Get/Set the process id. If process id &lt; 0 (default -1), then the PROCESS_PASS is not rendered.  </para></listitem>
<listitem><para><computeroutput>int = obj.GetProcessID ()</computeroutput> - Get/Set the process id. If process id &lt; 0 (default -1), then the PROCESS_PASS is not rendered.  </para></listitem>
<listitem><para><computeroutput>int = obj.GetCurrentPass ()</computeroutput> - Get the current pass number.  </para></listitem>
<listitem><para><computeroutput>vtkSelection = obj.GenerateSelection ()</computeroutput> - Generates the vtkSelection from pixel buffers. Requires that CaptureBuffers() has already been called. Optionally you may pass a screen region (xmin, ymin, xmax, ymax) to generate a selection from. The region must be a subregion of the region specified by SetArea(), otherwise it will be clipped to that region.  </para></listitem>
<listitem><para><computeroutput>vtkSelection = obj.GenerateSelection (int r[4])</computeroutput> - Generates the vtkSelection from pixel buffers. Requires that CaptureBuffers() has already been called. Optionally you may pass a screen region (xmin, ymin, xmax, ymax) to generate a selection from. The region must be a subregion of the region specified by SetArea(), otherwise it will be clipped to that region.  </para></listitem>
<listitem><para><computeroutput>vtkSelection = obj.GenerateSelection (int x1, int y1, int x2, int y2)</computeroutput> - Generates the vtkSelection from pixel buffers. Requires that CaptureBuffers() has already been called. Optionally you may pass a screen region (xmin, ymin, xmax, ymax) to generate a selection from. The region must be a subregion of the region specified by SetArea(), otherwise it will be clipped to that region.  </para></listitem>
</itemizedlist>
</para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
