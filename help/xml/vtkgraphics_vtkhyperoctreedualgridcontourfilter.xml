<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkhyperoctreedualgridcontourfilter" kind="page">
    <compoundname>vtkgraphics_vtkhyperoctreedualgridcontourfilter</compoundname>
    <title>vtkHyperOctreeDualGridContourFilter</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>use of unsigned short to hold level index limits tree depth to 16.</para><para>To use this filter you must specify one or more contour values. You can either use the method SetValue() to specify each contour value, or use GenerateValues() to generate a series of evenly spaced contours. It is also possible to accelerate the operation of this filter (at the cost of extra memory) by using a vtkScalarTree. A scalar tree is used to quickly locate cells that contain a contour surface. This is especially effective if multiple contours are being extracted. If you want to use a scalar tree, invoke the method UseScalarTreeOn().</para><para>To create an instance of class vtkHyperOctreeDualGridContourFilter, simply invoke its constructor as follows <verbatim>  obj = vtkHyperOctreeDualGridContourFilter
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkHyperOctreeDualGridContourFilter has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkHyperOctreeDualGridContourFilter class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHyperOctreeDualGridContourFilter = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkHyperOctreeDualGridContourFilter = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetValue (int i, double value)</computeroutput> - Get the ith contour value.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetValue (int i)</computeroutput> - Get a pointer to an array of contour values. There will be GetNumberOfContours() values in the list.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetValues (double contourValues)</computeroutput> - Set the number of contours to place into the list. You only really need to use this method to reduce list size. The method SetValue() will automatically increase list size as needed.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfContours (int number)</computeroutput> - Get the number of contours in the list of contour values.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfContours ()</computeroutput> - Generate numContours equally spaced contour values between specified range. Contour values will include min/max range values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateValues (int numContours, double range[2])</computeroutput> - Generate numContours equally spaced contour values between specified range. Contour values will include min/max range values.  </para></listitem>
<listitem>
<para><computeroutput>obj.GenerateValues (int numContours, double rangeStart, double rangeEnd)</computeroutput> - Modified GetMTime Because we delegate to vtkContourValues  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMTime ()</computeroutput> - Modified GetMTime Because we delegate to vtkContourValues  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLocator (vtkIncrementalPointLocator locator)</computeroutput> - Set / get a spatial locator for merging points. By default, an instance of vtkMergePoints is used.  </para></listitem>
<listitem>
<para><computeroutput>vtkIncrementalPointLocator = obj.GetLocator ()</computeroutput> - Set / get a spatial locator for merging points. By default, an instance of vtkMergePoints is used.  </para></listitem>
<listitem>
<para><computeroutput>obj.CreateDefaultLocator ()</computeroutput> - Create default locator. Used to create one when none is specified. The locator is used to merge coincident points.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
