<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkplanewidget" kind="page">
    <compoundname>vtkwidgets_vtkplanewidget</compoundname>
    <title>vtkPlaneWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This 3D widget defines a finite (bounded) plane that can be interactively placed in a scene. The plane has four handles (at its corner vertices), a normal vector, and the plane itself. The handles are used to resize the plane; the normal vector to rotate it, and the plane can be picked and translated. Selecting the plane while pressing CTRL makes it spin around the normal. A nice feature of the object is that the vtkPlaneWidget, like any 3D widget, will work with the current interactor style. That is, if vtkPlaneWidget does not handle an event, then all other registered observers (including the interactor style) have an opportunity to process the event. Otherwise, the vtkPlaneWidget will terminate the processing of the event that it handles.</para><para>To use this object, just invoke SetInteractor() with the argument of the method a vtkRenderWindowInteractor. You may also wish to invoke &quot;PlaceWidget()&quot; to initially position the widget. If the &quot;i&quot; key (for &quot;interactor&quot;) is pressed, the vtkPlaneWidget will appear. (See superclass documentation for information about changing this behavior.) By grabbing the one of the four handles (use the left mouse button), the plane can be resized. By grabbing the plane itself, the entire plane can be arbitrarily translated. Pressing CTRL while grabbing the plane will spin the plane around the normal. If you select the normal vector, the plane can be arbitrarily rotated. Selecting any part of the widget with the middle mouse button enables translation of the plane along its normal. (Once selected using middle mouse, moving the mouse in the direction of the normal translates the plane in the direction of the normal; moving in the direction opposite the normal translates the plane in the direction opposite the normal.) Scaling (about the center of the plane) is achieved by using the right mouse button. By moving the mouse &quot;up&quot; the render window the plane will be made bigger; by moving &quot;down&quot; the render window the widget will be made smaller. Events that occur outside of the widget (i.e., no part of the widget is picked) are propagated to any other registered obsevers (such as the interaction style). Turn off the widget by pressing the &quot;i&quot; key again (or invoke the Off() method).</para><para>The vtkPlaneWidget has several methods that can be used in conjunction with other VTK objects. The Set/GetResolution() methods control the number of subdivisions of the plane; the GetPolyData() method can be used to get the polygonal representation and can be used for things like seeding stream lines. GetPlane() can be used to update a vtkPlane implicit function. Typical usage of the widget is to make use of the StartInteractionEvent, InteractionEvent, and EndInteractionEvent events. The InteractionEvent is called on mouse motion; the other two events are called on button down and button up (either left or right button).</para><para>Some additional features of this class include the ability to control the properties of the widget. You can set the properties of the selected and unselected representations of the plane. For example, you can set the property for the handles and plane. In addition there are methods to constrain the plane so that it is perpendicular to the x-y-z axes.</para><para>To create an instance of class vtkPlaneWidget, simply invoke its constructor as follows <verbatim>  obj = vtkPlaneWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPlaneWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPlaneWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPlaneWidget = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPlaneWidget = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetEnabled (int )</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double bounds[6])</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget ()</computeroutput> - Methods that satisfy the superclass&apos; API.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - Set/Get the resolution (number of subdivisions) of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetResolution (int r)</computeroutput> - Set/Get the resolution (number of subdivisions) of the plane.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetResolution ()</computeroutput> - Set/Get the resolution (number of subdivisions) of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrigin (double x, double y, double z)</computeroutput> - Set/Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOrigin (double x[3])</computeroutput> - Set/Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetOrigin ()</computeroutput> - Set/Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetOrigin (double xyz[3])</computeroutput> - Set/Get the origin of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPoint1 (double x, double y, double z)</computeroutput> - Set/Get the position of the point defining the first axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPoint1 (double x[3])</computeroutput> - Set/Get the position of the point defining the first axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPoint1 ()</computeroutput> - Set/Get the position of the point defining the first axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPoint1 (double xyz[3])</computeroutput> - Set/Get the position of the point defining the first axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPoint2 (double x, double y, double z)</computeroutput> - Set/Get the position of the point defining the second axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPoint2 (double x[3])</computeroutput> - Set/Get the position of the point defining the second axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetPoint2 ()</computeroutput> - Set/Get the position of the point defining the second axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPoint2 (double xyz[3])</computeroutput> - Set/Get the position of the point defining the second axis of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double x, double y, double z)</computeroutput> - Get the center of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double x[3])</computeroutput> - Get the center of the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCenter ()</computeroutput> - Get the center of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetCenter (double xyz[3])</computeroutput> - Get the center of the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormal (double x, double y, double z)</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormal (double x[3])</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetNormal ()</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetNormal (double xyz[3])</computeroutput> - Get the normal to the plane.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentation (int )</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepresentationMinValue ()</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepresentationMaxValue ()</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetRepresentation ()</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToOff ()</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToOutline ()</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToWireframe ()</computeroutput> - Control how the plane appears when GetPolyData() is invoked. If the mode is &quot;outline&quot;, then just the outline of the plane is shown. If the mode is &quot;wireframe&quot; then the plane is drawn with the outline plus the interior mesh (corresponding to the resolution specified). If the mode is &quot;surface&quot; then the plane is drawn as a surface.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRepresentationToSurface ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalToXAxis (int )</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNormalToXAxis ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToXAxisOn ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToXAxisOff ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalToYAxis (int )</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNormalToYAxis ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToYAxisOn ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToYAxisOff ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNormalToZAxis (int )</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNormalToZAxis ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToZAxisOn ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.NormalToZAxisOff ()</computeroutput> - Force the plane widget to be aligned with one of the x-y-z axes. Remember that when the state changes, a ModifiedEvent is invoked. This can be used to snap the plane to the axes if it is orginally not aligned.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPolyData (vtkPolyData pd)</computeroutput> - Grab the polydata (including points) that defines the plane. The polydata consists of (res+1)*(res+1) points, and res*res quadrilateral polygons, where res is the resolution of the plane. These point values are guaranteed to be up-to-date when either the InteractionEvent or EndInteraction events are invoked. The user provides the vtkPolyData and the points and polyplane are added to it.  </para></listitem>
<listitem>
<para><computeroutput>obj.GetPlane (vtkPlane plane)</computeroutput> - Get the planes describing the implicit function defined by the plane widget. The user must provide the instance of the class vtkPlane. Note that vtkPlane is a subclass of vtkImplicitFunction, meaning that it can be used by a variety of filters to perform clipping, cutting, and selection of data.  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataAlgorithm = obj.GetPolyDataAlgorithm ()</computeroutput> - Satisfies superclass API. This returns a pointer to the underlying PolyData. Make changes to this before calling the initial PlaceWidget() to have the initial placement follow suit. Or, make changes after the widget has been initialised and call UpdatePlacement() to realise.  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdatePlacement (void )</computeroutput> - Satisfies superclass API. This will change the state of the widget to match changes that have been made to the underlying PolyDataSource  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetHandleProperty ()</computeroutput> - Get the handle properties (the little balls are the handles). The properties of the handles when selected and normal can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedHandleProperty ()</computeroutput> - Get the handle properties (the little balls are the handles). The properties of the handles when selected and normal can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPlaneProperty (vtkProperty )</computeroutput> - Get the plane properties. The properties of the plane when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetPlaneProperty ()</computeroutput> - Get the plane properties. The properties of the plane when selected and unselected can be manipulated.  </para></listitem>
<listitem>
<para><computeroutput>vtkProperty = obj.GetSelectedPlaneProperty ()</computeroutput> - Get the plane properties. The properties of the plane when selected and unselected can be manipulated.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
