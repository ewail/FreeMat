<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkwidgets_vtkpolydatasourcewidget" kind="page">
    <compoundname>vtkwidgets_vtkpolydatasourcewidget</compoundname>
    <title>vtkPolyDataSourceWidget</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkwidgets_1sec_vtkwidgets" kindref="member">Visualization Toolkit Widget Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This abstract class serves as parent to 3D widgets that have simple vtkPolyDataSource instances defining their geometry.</para><para>In addition to what is offered by the vtk3DWidget parent, this class makes it possible to manipulate the underlying polydatasource and to PlaceWidget() according to that, instead of having to make use of SetInput() or SetProp3D().</para><para>Implementors of child classes HAVE to implement their PlaceWidget(bounds) to check for the existence of Input and Prop3D FIRST. If these don&apos;t exist, place according to the underlying PolyDataSource. Child classes also have to imprement UpdatePlacement(), which updates the widget according to the geometry of the underlying PolyDataSource.</para><para>To create an instance of class vtkPolyDataSourceWidget, simply invoke its constructor as follows <verbatim>  obj = vtkPolyDataSourceWidget
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPolyDataSourceWidget has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPolyDataSourceWidget class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataSourceWidget = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataSourceWidget = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget ()</computeroutput> - Overrides vtk3DWidget PlaceWidget() so that it doesn&apos;t complain if there&apos;s no Input and no Prop3D.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double bounds[6])</computeroutput> - We have to redeclare this abstract, PlaceWidget() requires it. You HAVE to override this in your concrete child classes. If there&apos;s no Prop3D and no Input, your PlaceWidget must make use of the underlying PolyDataSource to do its work.  </para></listitem>
<listitem>
<para><computeroutput>obj.PlaceWidget (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - Returns underlying vtkPolyDataSource that determines geometry. This can be modified after which PlaceWidget() or UpdatePlacement() can be called. UpdatePlacement() will always update the planewidget according to the geometry of the underlying PolyDataSource. PlaceWidget() will only make use of this geometry if there is no Input and no Prop3D set.  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataSource = obj.GetPolyDataSource ()</computeroutput> - Returns underlying vtkPolyDataSource that determines geometry. This can be modified after which PlaceWidget() or UpdatePlacement() can be called. UpdatePlacement() will always update the planewidget according to the geometry of the underlying PolyDataSource. PlaceWidget() will only make use of this geometry if there is no Input and no Prop3D set.  </para></listitem>
<listitem>
<para><computeroutput>vtkPolyDataAlgorithm = obj.GetPolyDataAlgorithm ()</computeroutput> - Returns underlying vtkPolyDataSource that determines geometry. This can be modified after which PlaceWidget() or UpdatePlacement() can be called. UpdatePlacement() will always update the planewidget according to the geometry of the underlying PolyDataSource. PlaceWidget() will only make use of this geometry if there is no Input and no Prop3D set.  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdatePlacement ()</computeroutput> - If you&apos;ve made changes to the underlying vtkPolyDataSource AFTER your initial call to PlaceWidget(), use this method to realise the changes in the widget.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
