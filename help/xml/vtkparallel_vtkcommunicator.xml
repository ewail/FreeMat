<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkcommunicator" kind="page">
    <compoundname>vtkparallel_vtkcommunicator</compoundname>
    <title>vtkCommunicator</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This is an abstact class which contains functionality for sending and receiving inter-process messages. It contains methods for marshaling an object into a string (currently used by the MPI communicator but not the shared memory communicator).</para><para>To create an instance of class vtkCommunicator, simply invoke its constructor as follows <verbatim>  obj = vtkCommunicator
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCommunicator has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCommunicator class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCommunicator = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCommunicator = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfProcesses (int num)</computeroutput> - Set the number of processes you will be using. This defaults to the maximum number available. If you set this to a value higher than the default, you will get an error.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfProcesses ()</computeroutput> - Set the number of processes you will be using. This defaults to the maximum number available. If you set this to a value higher than the default, you will get an error.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetLocalProcessId ()</computeroutput> - Tells you which process [0, NumProcess) you are in.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (vtkDataObject data, int remoteHandle, int tag)</computeroutput> - This method sends a data object to a destination. Tag eliminates ambiguity and is used to match sends to receives.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (vtkDataArray data, int remoteHandle, int tag)</computeroutput> - This method sends a data array to a destination. Tag eliminates ambiguity and is used to match sends to receives.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (int data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (int data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (long data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (string data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (string data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (float data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Send (double data, vtkIdType length, int remoteHandle, int tag)</computeroutput> - Convenience methods for sending data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (vtkDataObject data, int remoteHandle, int tag)</computeroutput> - This method receives a data object from a corresponding send. It blocks until the receive is finished.  </para></listitem>
<listitem>
<para><computeroutput>vtkDataObject = obj.ReceiveDataObject (int remoteHandle, int tag)</computeroutput> - The caller does not have to know the data type before this call is made. It returns the newly created object.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (vtkDataArray data, int remoteHandle, int tag)</computeroutput> - This method receives a data array from a corresponding send. It blocks until the receive is finished.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (int data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (int data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (long data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (string data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (string data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (float data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Receive (double data, vtkIdType maxlength, int remoteHandle, int tag)</computeroutput> - Convenience methods for receiving data arrays.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetCount ()</computeroutput> - Returns the number of words received by the most recent Receive(). Note that this is not the number of bytes received, but the number of items of the data-type received by the most recent Receive() eg. if Receive(int*,..) was used, then this returns the number of ints received; if Receive(double*,..) was used, then this returns the number of doubles received etc. The return value is valid only after a successful Receive().  </para></listitem>
<listitem>
<para><computeroutput>obj.Barrier ()</computeroutput> - Will block the processes until all other processes reach the Barrier function.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (int data, vtkIdType length, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (long data, vtkIdType length, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (string data, vtkIdType length, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (string data, vtkIdType length, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (float data, vtkIdType length, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (double data, vtkIdType length, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (vtkDataObject data, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Broadcast (vtkDataArray data, int srcProcessId)</computeroutput> - Broadcast sends the array in the process with id <computeroutput>srcProcessId</computeroutput> to all of the other processes. All processes must call these method with the same arguments in order for it to complete.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (int sendBuffer, int recvBuffer, vtkIdType length, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (long sendBuffer, long recvBuffer, vtkIdType length, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (string sendBuffer, string recvBuffer, vtkIdType length, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (string sendBuffer, string recvBuffer, vtkIdType length, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (float sendBuffer, float recvBuffer, vtkIdType length, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (double sendBuffer, double recvBuffer, vtkIdType length, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Gather (vtkDataArray sendBuffer, vtkDataArray recvBuffer, int destProcessId)</computeroutput> - Gather collects arrays in the process with id <computeroutput>destProcessId</computeroutput>. Each process (including the destination) sends the contents of its send buffer to the destination process. The destination process receives the messages and stores them in rank order. The <computeroutput>length</computeroutput> argument (which must be the same on all processes) is the length of the sendBuffers. The <computeroutput>recvBuffer</computeroutput> (on te destination process) must be of length length*numProcesses. Gather is the inverse operation of Scatter.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (int sendBuffer, int recvBuffer, vtkIdType length, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (long sendBuffer, long recvBuffer, vtkIdType length, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (string sendBuffer, string recvBuffer, vtkIdType length, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (string sendBuffer, string recvBuffer, vtkIdType length, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (float sendBuffer, float recvBuffer, vtkIdType length, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (double sendBuffer, double recvBuffer, vtkIdType length, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Scatter (vtkDataArray sendBuffer, vtkDataArray recvBuffer, int srcProcessId)</computeroutput> - Scatter takes an array in the process with id <computeroutput>srcProcessId</computeroutput> and distributes it. Each process (including the source) receives a portion of the send buffer. Process 0 receives the first <computeroutput>length</computeroutput> values, process 1 receives the second <computeroutput>length</computeroutput> values, and so on. Scatter is the inverse operation of Gather.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (int sendBuffer, int recvBuffer, vtkIdType length)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (long sendBuffer, long recvBuffer, vtkIdType length)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (string sendBuffer, string recvBuffer, vtkIdType length)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (string sendBuffer, string recvBuffer, vtkIdType length)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (float sendBuffer, float recvBuffer, vtkIdType length)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (double sendBuffer, double recvBuffer, vtkIdType length)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllGather (vtkDataArray sendBuffer, vtkDataArray recvBuffer)</computeroutput> - Same as gather except that the result ends up on all processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (int sendBuffer, int recvBuffer, vtkIdType length, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (long sendBuffer, long recvBuffer, vtkIdType length, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (string sendBuffer, string recvBuffer, vtkIdType length, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (string sendBuffer, string recvBuffer, vtkIdType length, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (float sendBuffer, float recvBuffer, vtkIdType length, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (double sendBuffer, double recvBuffer, vtkIdType length, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Reduce (vtkDataArray sendBuffer, vtkDataArray recvBuffer, int operation, int destProcessId)</computeroutput> - Reduce an array to the given destination process. This version of Reduce takes an identifier defined in the vtkCommunicator::StandardOperations enum to define the operation.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (int sendBuffer, int recvBuffer, vtkIdType length, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (long sendBuffer, long recvBuffer, vtkIdType length, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (string sendBuffer, string recvBuffer, vtkIdType length, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (string sendBuffer, string recvBuffer, vtkIdType length, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (float sendBuffer, float recvBuffer, vtkIdType length, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (double sendBuffer, double recvBuffer, vtkIdType length, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.AllReduce (vtkDataArray sendBuffer, vtkDataArray recvBuffer, int operation)</computeroutput> - Same as Reduce except that the result is placed in all of the processes.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
