<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="random_randp" kind="page">
    <compoundname>random_randp</compoundname>
    <title>RANDP Generate Poisson Random Variable</title>
    <detaileddescription>
<para>Section: <ref refid="sec_random_1sec_random" kindref="member">Random Number Generation</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Generates a vector Poisson random variables with the given parameters. The general syntax for its use is <verbatim>   y = randp(nu),
</verbatim> where <computeroutput>nu</computeroutput> is an array containing the rate parameters for the generated random variables. </para></sect1>
<sect1 id="transforms_svd_1Function">
<title>Internals</title>
<para>A Poisson random variable is generally defined by taking the limit of a binomial distribution as the sample size becomes large, with the expected number of successes being fixed (so that the probability of success decreases as <computeroutput>1/N</computeroutput>). The Poisson distribution is given by <formula id="150">\[ P_{\nu}(n) = \frac{\nu^n e^{-nu}}{n!}. \]</formula> </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is an exmaple of using <computeroutput>randp</computeroutput> to generate some Poisson random variables, and also using <computeroutput>randbin</computeroutput> to do the same using <computeroutput>N=1000</computeroutput> trials to approximate the Poisson result.</para><para><verbatim>--&gt; randp(33*ones(1,10))

ans = 
 39 39 27 27 35 31 29 28 33 25 

--&gt; randbin(1000*ones(1,10),33/1000*ones(1,10))

ans = 
 31 17 42 19 34 36 34 41 30 30 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
