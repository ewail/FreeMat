<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkvpicreader" kind="page">
    <compoundname>vtkparallel_vtkvpicreader</compoundname>
    <title>vtkVPICReader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkDataReader is a helper superclass that reads the vtk data file header, dataset type, and attribute data (point and cell attributes such as scalars, vectors, normals, etc.) from a vtk data file. See text for the format of the various vtk file types.</para><para>To create an instance of class vtkVPICReader, simply invoke its constructor as follows <verbatim>  obj = vtkVPICReader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkVPICReader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkVPICReader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVPICReader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVPICReader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileName (string )</computeroutput> - Specify file name of VPIC data file to read.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFileName ()</computeroutput> - Specify file name of VPIC data file to read.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStride (int , int , int )</computeroutput> - Set the stride in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStride (int a[3])</computeroutput> - Set the stride in each dimension  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetStride ()</computeroutput> - Set the stride in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXExtent (int , int )</computeroutput> - Set the simulation file decomposition in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXExtent (int a[2])</computeroutput> - Set the simulation file decomposition in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetYExtent (int , int )</computeroutput> - Set the simulation file decomposition in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetYExtent (int a[2])</computeroutput> - Set the simulation file decomposition in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetZExtent (int , int )</computeroutput> - Set the simulation file decomposition in each dimension  </para></listitem>
<listitem>
<para><computeroutput>obj.SetZExtent (int a[2])</computeroutput> - Set the simulation file decomposition in each dimension  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetXLayout ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetYLayout ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetZLayout ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkImageData = obj.GetOutput ()</computeroutput> - Get the reader&apos;s output  </para></listitem>
<listitem>
<para><computeroutput>vtkImageData = obj.GetOutput (int index)</computeroutput> - Get the reader&apos;s output  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfPointArrays ()</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetPointArrayName (int index)</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPointArrayStatus (string name)</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPointArrayStatus (string name, int status)</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>obj.DisableAllPointArrays ()</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
<listitem>
<para><computeroutput>obj.EnableAllPointArrays ()</computeroutput> - The following methods allow selective reading of solutions fields. By default, ALL data fields on the nodes are read, but this can be modified.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
