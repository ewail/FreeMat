<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkcursor2d" kind="page">
    <compoundname>vtkgraphics_vtkcursor2d</compoundname>
    <title>vtkCursor2D</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCursor2D is a class that generates a 2D cursor representation. The cursor consists of two intersection axes lines that meet at the cursor focus. Several optional features are available as well. An optional 2D bounding box may be enabled. An inner radius, centered at the focal point, can be set that erases the intersecting lines (e.g., it leaves a clear area under the focal point so you can see what you are selecting). And finally, an optional point can be enabled located at the focal point. All of these features can be turned on and off independently.</para><para>To create an instance of class vtkCursor2D, simply invoke its constructor as follows <verbatim>  obj = vtkCursor2D
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCursor2D has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCursor2D class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCursor2D = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCursor2D = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetModelBounds (double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</computeroutput> - Set / get the bounding box of the 2D cursor. This defines the outline of the cursor, and where the focal point should lie.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetModelBounds (double bounds[6])</computeroutput> - Set / get the bounding box of the 2D cursor. This defines the outline of the cursor, and where the focal point should lie.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetModelBounds ()</computeroutput> - Set / get the bounding box of the 2D cursor. This defines the outline of the cursor, and where the focal point should lie.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFocalPoint (double x[3])</computeroutput> - Set/Get the position of cursor focus. If translation mode is on, then the entire cursor (including bounding box, cursor, and shadows) is translated. Otherwise, the focal point will either be clamped to the bounding box, or wrapped, if Wrap is on. (Note: this behavior requires that the bounding box is set prior to the focal point.) Note that the method takes a 3D point but ignores the z-coordinate value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFocalPoint (double x, double y, double z)</computeroutput> - Set/Get the position of cursor focus. If translation mode is on, then the entire cursor (including bounding box, cursor, and shadows) is translated. Otherwise, the focal point will either be clamped to the bounding box, or wrapped, if Wrap is on. (Note: this behavior requires that the bounding box is set prior to the focal point.) Note that the method takes a 3D point but ignores the z-coordinate value.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetFocalPoint ()</computeroutput> - Set/Get the position of cursor focus. If translation mode is on, then the entire cursor (including bounding box, cursor, and shadows) is translated. Otherwise, the focal point will either be clamped to the bounding box, or wrapped, if Wrap is on. (Note: this behavior requires that the bounding box is set prior to the focal point.) Note that the method takes a 3D point but ignores the z-coordinate value.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetOutline (int )</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetOutline ()</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.OutlineOn ()</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.OutlineOff ()</computeroutput> - Turn on/off the wireframe bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetAxes (int )</computeroutput> - Turn on/off the wireframe axes.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetAxes ()</computeroutput> - Turn on/off the wireframe axes.  </para></listitem>
<listitem>
<para><computeroutput>obj.AxesOn ()</computeroutput> - Turn on/off the wireframe axes.  </para></listitem>
<listitem>
<para><computeroutput>obj.AxesOff ()</computeroutput> - Turn on/off the wireframe axes.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetRadius (double )</computeroutput> - Specify a radius for a circle. This erases the cursor lines around the focal point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadiusMinValue ()</computeroutput> - Specify a radius for a circle. This erases the cursor lines around the focal point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadiusMaxValue ()</computeroutput> - Specify a radius for a circle. This erases the cursor lines around the focal point.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetRadius ()</computeroutput> - Specify a radius for a circle. This erases the cursor lines around the focal point.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPoint (int )</computeroutput> - Turn on/off the point located at the cursor focus.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPoint ()</computeroutput> - Turn on/off the point located at the cursor focus.  </para></listitem>
<listitem>
<para><computeroutput>obj.PointOn ()</computeroutput> - Turn on/off the point located at the cursor focus.  </para></listitem>
<listitem>
<para><computeroutput>obj.PointOff ()</computeroutput> - Turn on/off the point located at the cursor focus.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetTranslationMode (int )</computeroutput> - Enable/disable the translation mode. If on, changes in cursor position cause the entire widget to translate along with the cursor. By default, translation mode is off.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetTranslationMode ()</computeroutput> - Enable/disable the translation mode. If on, changes in cursor position cause the entire widget to translate along with the cursor. By default, translation mode is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.TranslationModeOn ()</computeroutput> - Enable/disable the translation mode. If on, changes in cursor position cause the entire widget to translate along with the cursor. By default, translation mode is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.TranslationModeOff ()</computeroutput> - Enable/disable the translation mode. If on, changes in cursor position cause the entire widget to translate along with the cursor. By default, translation mode is off.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetWrap (int )</computeroutput> - Turn on/off cursor wrapping. If the cursor focus moves outside the specified bounds, the cursor will either be restrained against the nearest &quot;wall&quot; (Wrap=off), or it will wrap around (Wrap=on).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetWrap ()</computeroutput> - Turn on/off cursor wrapping. If the cursor focus moves outside the specified bounds, the cursor will either be restrained against the nearest &quot;wall&quot; (Wrap=off), or it will wrap around (Wrap=on).  </para></listitem>
<listitem>
<para><computeroutput>obj.WrapOn ()</computeroutput> - Turn on/off cursor wrapping. If the cursor focus moves outside the specified bounds, the cursor will either be restrained against the nearest &quot;wall&quot; (Wrap=off), or it will wrap around (Wrap=on).  </para></listitem>
<listitem>
<para><computeroutput>obj.WrapOff ()</computeroutput> - Turn on/off cursor wrapping. If the cursor focus moves outside the specified bounds, the cursor will either be restrained against the nearest &quot;wall&quot; (Wrap=off), or it will wrap around (Wrap=on).  </para></listitem>
<listitem>
<para><computeroutput>obj.AllOn ()</computeroutput> - Turn every part of the cursor on or off.  </para></listitem>
<listitem>
<para><computeroutput>obj.AllOff ()</computeroutput> - Turn every part of the cursor on or off.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
