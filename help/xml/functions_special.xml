<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="functions_special" kind="page">
    <compoundname>functions_special</compoundname>
    <title>SPECIAL Special Calling Syntax</title>
    <detaileddescription>
<para>Section: <ref refid="sec_functions_1sec_functions" kindref="member">Functions and Scripts</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>To reduce the effort to call certain functions, FreeMat supports a special calling syntax for functions that take string arguments. In particular, the three following syntaxes are equivalent, with one caveat: <verbatim>   functionname(&apos;arg1&apos;,&apos;arg2&apos;,...,&apos;argn&apos;)
</verbatim> or the parenthesis and commas can be removed <verbatim>   functionname &apos;arg1&apos; &apos;arg2&apos; ... &apos;argn&apos;
</verbatim> The quotes are also optional (providing, of course, that the argument strings have no spaces in them) <verbatim>   functionname arg1 arg2 ... argn
</verbatim> This special syntax enables you to type <computeroutput>hold on</computeroutput> instead of the more cumbersome <computeroutput>hold(&apos;on&apos;)</computeroutput>. The caveat is that FreeMat currently only recognizes the special calling syntax as the first statement on a line of input. Thus, the following construction <verbatim>  for i=1:10; plot(vec(i)); hold on; end
</verbatim> would not work. This limitation may be removed in a future version. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here is a function that takes two string arguments and returns the concatenation of them.</para><para><verbatim>     strcattest.m
</verbatim></para><para><verbatim>function strcattest(str1,str2)
  str3 = [str1,str2];
  printf(&apos;str1 = %s, str2 = %s, str3 = %s\n&apos;,str1,str2,str3);
</verbatim></para><para>We call <computeroutput>strcattest</computeroutput> using all three syntaxes.</para><para><verbatim>--&gt; strcattest(&apos;hi&apos;,&apos;ho&apos;)
str1 = hi, str2 = ho, str3 = hiho
--&gt; strcattest &apos;hi&apos; &apos;ho&apos;
str1 = hi, str2 = ho, str3 = hiho
--&gt; strcattest hi ho
str1 = hi, str2 = ho, str3 = hiho
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
