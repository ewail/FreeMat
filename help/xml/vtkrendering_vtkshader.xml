<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkshader" kind="page">
    <compoundname>vtkrendering_vtkshader</compoundname>
    <title>vtkShader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkShader is a base class for interfacing VTK to hardware shader libraries. vtkShader interprets a vtkXMLDataElement that describes a particular shader. Descendants of this class inherit this functionality and additionally interface to specific shader libraries like NVidia&apos;s Cg and OpenGL2.0 (GLSL) to perform operations, on individual shaders.</para><para>During each render, the vtkShaderProgram calls Compile(), PassShaderVariables(), Bind() and after the actor has been rendered, calls Unbind(), in that order.</para><para>To create an instance of class vtkShader, simply invoke its constructor as follows <verbatim>  obj = vtkShader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkShader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkShader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkShader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkShader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Compile ()</computeroutput> - Called to compile the shader code. The subclasses must only compile the code in this method. Returns if the compile was successful. Subclasses should compile the code only if it was not already compiled.  </para></listitem>
<listitem>
<para><computeroutput>obj.PassShaderVariables (vtkActor actor, vtkRenderer ren)</computeroutput> - Called to pass VTK actor/property/light values and other Shader variables over to the shader. This is called by the ShaderProgram during each render.  </para></listitem>
<listitem>
<para><computeroutput>obj.Bind ()</computeroutput> - Called to unbind the shader. As with Bind(), this is only applicable to Cg.  </para></listitem>
<listitem>
<para><computeroutput>obj.Unbind ()</computeroutput> - Release any graphics resources that are being consumed by this actor. The parameter window could be used to determine which graphic resources to release.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - Get/Set the XMLShader representation for this shader. A shader is not valid without a XMLShader.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXMLShader (vtkXMLShader )</computeroutput> - Get/Set the XMLShader representation for this shader. A shader is not valid without a XMLShader.  </para></listitem>
<listitem>
<para><computeroutput>vtkXMLShader = obj.GetXMLShader ()</computeroutput> - Get/Set the XMLShader representation for this shader. A shader is not valid without a XMLShader.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.HasShaderVariable (string name)</computeroutput> - Indicates if a variable by the given name exists.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddShaderVariable (string name, int num_of_elements, int values)</computeroutput> - Methods to add shader variables to this shader. The shader variable type must match with that declared in the Material xml, otherwise, the variable is not made available to the shader.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddShaderVariable (string name, int num_of_elements, float values)</computeroutput> - Methods to add shader variables to this shader. The shader variable type must match with that declared in the Material xml, otherwise, the variable is not made available to the shader.  </para></listitem>
<listitem>
<para><computeroutput>obj.AddShaderVariable (string name, int num_of_elements, double values)</computeroutput> - Methods to add shader variables to this shader. The shader variable type must match with that declared in the Material xml, otherwise, the variable is not made available to the shader.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShaderVariableSize (string name)</computeroutput> - Get number of elements in a Shader variable. Return 0 if failed to find the shader variable.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShaderVariableType (string name)</computeroutput> - Returns the type of a Shader variable with the given name. Return 0 on error.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShaderVariable (string name, int values)</computeroutput> - Methods to get the value of shader variables with the given name. Values must be at least the size of the shader variable (obtained by GetShaderVariableSize(). Returns if the operation was successful.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShaderVariable (string name, float values)</computeroutput> - Methods to get the value of shader variables with the given name. Values must be at least the size of the shader variable (obtained by GetShaderVariableSize(). Returns if the operation was successful.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetShaderVariable (string name, double values)</computeroutput> - Methods to get the value of shader variables with the given name. Values must be at least the size of the shader variable (obtained by GetShaderVariableSize(). Returns if the operation was successful.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetScope ()</computeroutput> - Returns the scope of the shader i.e. if it&apos;s a vertex or fragment shader. (vtkXMLShader::SCOPE_VERTEX or vtkXMLShader::SCOPE_FRAGMENT).  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
