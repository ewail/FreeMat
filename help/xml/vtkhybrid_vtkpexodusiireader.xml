<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkhybrid_vtkpexodusiireader" kind="page">
    <compoundname>vtkhybrid_vtkpexodusiireader</compoundname>
    <title>vtkPExodusIIReader</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkhybrid_1sec_vtkhybrid" kindref="member">Visualization Toolkit Hybrid Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkPExodusIIReader is a unstructured grid source object that reads ExodusII files. Most of the meta data associated with the file is loaded when UpdateInformation is called. This includes information like Title, number of blocks, number and names of arrays. This data can be retrieved from methods in this reader. Separate arrays that are meant to be a single vector, are combined internally for convenience. To be combined, the array names have to be identical except for a trailing X,Y and Z (or x,y,z). By default all cell and point arrays are loaded. However, the user can flag arrays not to load with the methods &quot;SetPointDataArrayLoadFlag&quot; and &quot;SetCellDataArrayLoadFlag&quot;. The reader responds to piece requests by loading only a range of the possible blocks. Unused points are filtered out internally.</para><para>To create an instance of class vtkPExodusIIReader, simply invoke its constructor as follows <verbatim>  obj = vtkPExodusIIReader
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkPExodusIIReader has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkPExodusIIReader class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPExodusIIReader = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkPExodusIIReader = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetController (vtkMultiProcessController c)</computeroutput> - Set/get the communication object used to relay a list of files from the rank 0 process to all others. This is the only interprocess communication required by vtkPExodusIIReader.  </para></listitem>
<listitem>
<para><computeroutput>vtkMultiProcessController = obj.GetController ()</computeroutput> - Set/get the communication object used to relay a list of files from the rank 0 process to all others. This is the only interprocess communication required by vtkPExodusIIReader.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilePattern (string )</computeroutput> - These methods tell the reader that the data is ditributed across multiple files. This is for distributed execution. It this case, pieces are mapped to files. The pattern should have one d to format the file number. FileNumberRange is used to generate file numbers. I was thinking of having an arbitrary list of file numbers. This may happen in the future. (That is why there is no GetFileNumberRange method.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilePattern ()</computeroutput> - These methods tell the reader that the data is ditributed across multiple files. This is for distributed execution. It this case, pieces are mapped to files. The pattern should have one d to format the file number. FileNumberRange is used to generate file numbers. I was thinking of having an arbitrary list of file numbers. This may happen in the future. (That is why there is no GetFileNumberRange method.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFilePrefix (string )</computeroutput> - These methods tell the reader that the data is ditributed across multiple files. This is for distributed execution. It this case, pieces are mapped to files. The pattern should have one d to format the file number. FileNumberRange is used to generate file numbers. I was thinking of having an arbitrary list of file numbers. This may happen in the future. (That is why there is no GetFileNumberRange method.  </para></listitem>
<listitem>
<para><computeroutput>string = obj.GetFilePrefix ()</computeroutput> - These methods tell the reader that the data is ditributed across multiple files. This is for distributed execution. It this case, pieces are mapped to files. The pattern should have one d to format the file number. FileNumberRange is used to generate file numbers. I was thinking of having an arbitrary list of file numbers. This may happen in the future. (That is why there is no GetFileNumberRange method.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileRange (int , int )</computeroutput> - Set the range of files that are being loaded. The range for single file should add to 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileRange (int r)</computeroutput> - Set the range of files that are being loaded. The range for single file should add to 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj. GetFileRange ()</computeroutput> - Set the range of files that are being loaded. The range for single file should add to 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetFileName (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFileNames ()</computeroutput> - Return the number of files to be read.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetNumberOfFiles ()</computeroutput> - Return the number of files to be read.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetTotalNumberOfElements ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetTotalNumberOfNodes ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.UpdateTimeInformation ()</computeroutput> - Calls UpdateTimeInformation() on all serial readers so they&apos;ll re-read their time info from the file. The last time step that they all have in common is stored in LastCommonTimeStep, which is used in RequestInformation() to override the output time-specific information keys with the range of times that ALL readers can actually read.  </para></listitem>
<listitem>
<para><computeroutput>obj.Broadcast (vtkMultiProcessController ctrl)</computeroutput> - Sends metadata (that read from the input file, not settings modified through this API) from the rank 0 node to all other processes in a job.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
