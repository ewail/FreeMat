<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="array_sort" kind="page">
    <compoundname>array_sort</compoundname>
    <title>SORT Sort</title>
    <detaileddescription>
<para>Section: <ref refid="sec_array_1sec_array" kindref="member">Array Generation and Manipulations</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>Sorts an n-dimensional array along the specified dimensional. The first form sorts the array along the first non-singular dimension. <verbatim>  B = sort(A)
</verbatim> Alternately, the dimension along which to sort can be explicitly specified <verbatim>  B = sort(A,dim)
</verbatim> FreeMat does not support vector arguments for <computeroutput>dim</computeroutput> - if you need <computeroutput>A</computeroutput> to be sorted along multiple dimensions (i.e., row first, then columns), make multiple calls to <computeroutput>sort</computeroutput>. Also, the direction of the sort can be specified using the <computeroutput>mode</computeroutput> argument <verbatim>  B = sort(A,dim,mode)
</verbatim> where <computeroutput>mode = &apos;ascend&apos;</computeroutput> means to sort the data in ascending order (the default), and <computeroutput>mode = &apos;descend&apos;</computeroutput> means to sort the data into descending order.</para><para>When two outputs are requested from <computeroutput>sort</computeroutput>, the indexes are also returned. Thus, for <verbatim>  [B,IX] = sort(A)
  [B,IX] = sort(A,dim)
  [B,IX] = sort(A,dim,mode)
</verbatim> an array <computeroutput>IX</computeroutput> of the same size as <computeroutput>A</computeroutput>, where <computeroutput>IX</computeroutput> records the indices of <computeroutput>A</computeroutput> (along the sorting dimension) corresponding to the output array <computeroutput>B</computeroutput>.</para><para>Two additional issues worth noting. First, a cell array can be sorted if each cell contains a <computeroutput>string</computeroutput>, in which case the strings are sorted by lexical order. The second issue is that FreeMat uses the same method as MATLAB to sort complex numbers. In particular, a complex number <computeroutput>a</computeroutput> is less than another complex number <computeroutput>b</computeroutput> if <computeroutput>abs(a) &lt; abs(b)</computeroutput>. If the magnitudes are the same then we test the angle of <computeroutput>a</computeroutput>, i.e. <computeroutput>angle(a) &lt; angle(b)</computeroutput>, where <computeroutput>angle(a)</computeroutput> is the phase of <computeroutput>a</computeroutput> between <computeroutput>-pi,pi</computeroutput>. </para></sect1>
<sect1 id="variables_struct_1Example">
<title>Example</title>
<para>Here are some examples of sorting on numerical arrays.</para><para><verbatim>--&gt; A = int32(10*rand(4,3))

A = 
 8 2 8 
 0 5 5 
 2 5 7 
 3 7 1 

--&gt; [B,IX] = sort(A)
B = 
 0 2 1 
 2 5 5 
 3 5 7 
 8 7 8 

IX = 
 2 1 4 
 3 2 2 
 4 3 3 
 1 4 1 

--&gt; [B,IX] = sort(A,2)
B = 
 2 8 8 
 0 5 5 
 2 5 7 
 1 3 7 

IX = 
 2 1 3 
 1 2 3 
 1 2 3 
 3 1 2 

--&gt; [B,IX] = sort(A,1,&apos;descend&apos;)
B = 
 8 7 8 
 3 5 7 
 2 5 5 
 0 2 1 

IX = 
 1 4 1 
 4 2 3 
 3 3 2 
 2 1 4 
</verbatim></para><para>Here we sort a cell array of strings.</para><para><verbatim>--&gt; a = {&apos;hello&apos;,&apos;abba&apos;,&apos;goodbye&apos;,&apos;jockey&apos;,&apos;cake&apos;}

a = 
 [hello] [abba] [goodbye] [jockey] [cake] 

--&gt; b = sort(a)

b = 
 [abba] [cake] [goodbye] [hello] [jockey] 
</verbatim> </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
