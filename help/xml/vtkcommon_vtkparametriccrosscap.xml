<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkparametriccrosscap" kind="page">
    <compoundname>vtkcommon_vtkparametriccrosscap</compoundname>
    <title>vtkParametricCrossCap</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkParametricCrossCap generates a cross-cap which is a non-orientable self-intersecting single-sided surface. This is one possible image of a projective plane in three-space.</para><para>For further information about this surface, please consult the technical description &quot;Parametric surfaces&quot; in <ulink url="http://www.vtk.org/documents.php">http://www.vtk.org/documents.php</ulink> in the &quot;VTK Technical Documents&quot; section in the VTk.org web pages.</para><para>.SECTION Thanks Andrew Maclean <ulink url="mailto:a.maclean@cas.edu.au">a.maclean@cas.edu.au</ulink> for creating and contributing the class.</para><para>To create an instance of class vtkParametricCrossCap, simply invoke its constructor as follows <verbatim>  obj = vtkParametricCrossCap
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkParametricCrossCap has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkParametricCrossCap class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkParametricCrossCap = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkParametricCrossCap = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDimension ()</computeroutput> - A cross-cap.</para><para>This function performs the mapping <formula id="164">$f(u,v) \rightarrow (x,y,x)$</formula>, returning it as Pt. It also returns the partial derivatives Du and Dv. <formula id="165">$Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv, dy/dv, dz/dv)$</formula> . Then the normal is <formula id="166">$N = Du X Dv$</formula> .  </para></listitem>
<listitem>
<para><computeroutput>obj.Evaluate (double uvw[3], double Pt[3], double Duvw[9])</computeroutput> - A cross-cap.</para><para>This function performs the mapping <formula id="164">$f(u,v) \rightarrow (x,y,x)$</formula>, returning it as Pt. It also returns the partial derivatives Du and Dv. <formula id="165">$Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv, dy/dv, dz/dv)$</formula> . Then the normal is <formula id="166">$N = Du X Dv$</formula> .  </para></listitem>
<listitem>
<para><computeroutput>double = obj.EvaluateScalar (double uvw[3], double Pt[3], double Duvw[9])</computeroutput> - Calculate a user defined scalar using one or all of uvw, Pt, Duvw.</para><para>uvw are the parameters with Pt being the the cartesian point, Duvw are the derivatives of this point with respect to u, v and w. Pt, Duvw are obtained from Evaluate().</para><para>This function is only called if the ScalarMode has the value vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED</para><para>If the user does not need to calculate a scalar, then the instantiated function should return zero.</para><para></para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
