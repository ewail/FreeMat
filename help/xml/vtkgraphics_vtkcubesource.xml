<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkgraphics_vtkcubesource" kind="page">
    <compoundname>vtkgraphics_vtkcubesource</compoundname>
    <title>vtkCubeSource</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkgraphics_1sec_vtkgraphics" kindref="member">Visualization Toolkit Graphics Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkCubeSource creates a cube centered at origin. The cube is represented with four-sided polygons. It is possible to specify the length, width, and height of the cube independently.</para><para>To create an instance of class vtkCubeSource, simply invoke its constructor as follows <verbatim>  obj = vtkCubeSource
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkCubeSource has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkCubeSource class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCubeSource = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkCubeSource = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetXLength (double )</computeroutput> - Set the length of the cube in the x-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetXLengthMinValue ()</computeroutput> - Set the length of the cube in the x-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetXLengthMaxValue ()</computeroutput> - Set the length of the cube in the x-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetXLength ()</computeroutput> - Set the length of the cube in the x-direction.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetYLength (double )</computeroutput> - Set the length of the cube in the y-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetYLengthMinValue ()</computeroutput> - Set the length of the cube in the y-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetYLengthMaxValue ()</computeroutput> - Set the length of the cube in the y-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetYLength ()</computeroutput> - Set the length of the cube in the y-direction.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetZLength (double )</computeroutput> - Set the length of the cube in the z-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetZLengthMinValue ()</computeroutput> - Set the length of the cube in the z-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetZLengthMaxValue ()</computeroutput> - Set the length of the cube in the z-direction.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetZLength ()</computeroutput> - Set the length of the cube in the z-direction.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double , double , double )</computeroutput> - Set the center of the cube.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCenter (double a[3])</computeroutput> - Set the center of the cube.  </para></listitem>
<listitem>
<para><computeroutput>double = obj. GetCenter ()</computeroutput> - Set the center of the cube.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBounds (double xMin, double xMax, double yMin, double yMax, double zMin, double zMax)</computeroutput> - Convenience method allows creation of cube by specifying bounding box.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetBounds (double bounds[6])</computeroutput> - Convenience method allows creation of cube by specifying bounding box.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
