<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkinformationobjectbasevectorkey" kind="page">
    <compoundname>vtkcommon_vtkinformationobjectbasevectorkey</compoundname>
    <title>vtkInformationObjectBaseVectorKey</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkInformationObjectBaseVectorKey is used to represent keys for double vector values in vtkInformation.h. NOTE the interface in this key differs from that in other similar keys because of our internal use of smart pointers.</para><para>To create an instance of class vtkInformationObjectBaseVectorKey, simply invoke its constructor as follows <verbatim>  obj = vtkInformationObjectBaseVectorKey
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkInformationObjectBaseVectorKey has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkInformationObjectBaseVectorKey class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInformationObjectBaseVectorKey = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInformationObjectBaseVectorKey = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkInformationObjectBaseVectorKey = obj.(string name, string location, string requiredClass)</computeroutput> - The name of the static instance and the class in which it is defined(location) should be passed to the constructor. Providing &quot;requiredClass&quot; name one can insure that only objects of type &quot;requiredClass&quot; are stored in vectors associated with the instance of this key type created. These should be string literals as they are not coppied.  </para></listitem>
<listitem>
<para><computeroutput>~vtkInformationObjectBaseVectorKey = obj.()</computeroutput> - The name of the static instance and the class in which it is defined(location) should be passed to the constructor. Providing &quot;requiredClass&quot; name one can insure that only objects of type &quot;requiredClass&quot; are stored in vectors associated with the instance of this key type created. These should be string literals as they are not coppied.</para><para></para></listitem>
<listitem>
<para><computeroutput>obj.Clear (vtkInformation info)</computeroutput> - Clear the vector.  </para></listitem>
<listitem>
<para><computeroutput>obj.Resize (vtkInformation info, int n)</computeroutput> - Resize (extend) the vector to hold n objects. Any new elements created will be null initialized.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Size (vtkInformation info)</computeroutput> - Get the vector&apos;s length.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Length (vtkInformation info)</computeroutput> - Put the value on the back of the vector, with ref counting.  </para></listitem>
<listitem>
<para><computeroutput>obj.Append (vtkInformation info, vtkObjectBase value)</computeroutput> - Put the value on the back of the vector, with ref counting.  </para></listitem>
<listitem>
<para><computeroutput>obj.Set (vtkInformation info, vtkObjectBase value, int i)</computeroutput> - Set element i of the vector to value. Resizes the vector if needed.  </para></listitem>
<listitem>
<para><computeroutput>vtkObjectBase = obj.Get (vtkInformation info, int idx)</computeroutput> - Get the vtkObjectBase at a specific location in the vector.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkInformation from, vtkInformation to)</computeroutput> - Copy the entry associated with this key from one information object to another. If there is no entry in the first information object for this key, the value is removed from the second.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
