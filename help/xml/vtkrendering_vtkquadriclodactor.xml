<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkrendering_vtkquadriclodactor" kind="page">
    <compoundname>vtkrendering_vtkquadriclodactor</compoundname>
    <title>vtkQuadricLODActor</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkrendering_1sec_vtkrendering" kindref="member">Visualization Toolkit Rendering Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkQuadricLODActor implements a specific strategy for level-of-detail using the vtkQuadricClustering decimation algorithm. It supports only two levels of detail: full resolution and a decimated version. The decimated LOD is generated using a tuned strategy to produce output consistent with the requested interactive frame rate (i.e., the vtkRenderWindowInteractor&apos;s DesiredUpdateRate). It also makes use of display lists for performance, and adjusts the vtkQuadricClustering algorithm to take into account the dimensionality of the data (e.g., 2D, x-y surfaces may be binned into n x n x 1 to reduce extra polygons in the z-direction). Finally, the filter may optionally be set in &quot;Static&quot; mode (this works with the vtkMapper::SetStatic() method). `Enabling Static results in a one time execution of the Mapper&apos;s pipeline. After that, the pipeline no longer updated (unless manually forced to do so).</para><para>To create an instance of class vtkQuadricLODActor, simply invoke its constructor as follows <verbatim>  obj = vtkQuadricLODActor
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkQuadricLODActor has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkQuadricLODActor class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput> - Standard class methods.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput> - Standard class methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadricLODActor = obj.NewInstance ()</computeroutput> - Standard class methods.  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadricLODActor = obj.SafeDownCast (vtkObject o)</computeroutput> - Standard class methods.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDeferLODConstruction (int )</computeroutput> - Specify whether to build the LOD immediately (i.e., on the first render) or to wait until the LOD is requested in a subsequent render. By default, LOD construction is not deferred (DeferLODConstruction is false).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDeferLODConstruction ()</computeroutput> - Specify whether to build the LOD immediately (i.e., on the first render) or to wait until the LOD is requested in a subsequent render. By default, LOD construction is not deferred (DeferLODConstruction is false).  </para></listitem>
<listitem>
<para><computeroutput>obj.DeferLODConstructionOn ()</computeroutput> - Specify whether to build the LOD immediately (i.e., on the first render) or to wait until the LOD is requested in a subsequent render. By default, LOD construction is not deferred (DeferLODConstruction is false).  </para></listitem>
<listitem>
<para><computeroutput>obj.DeferLODConstructionOff ()</computeroutput> - Specify whether to build the LOD immediately (i.e., on the first render) or to wait until the LOD is requested in a subsequent render. By default, LOD construction is not deferred (DeferLODConstruction is false).  </para></listitem>
<listitem>
<para><computeroutput>obj.SetStatic (int )</computeroutput> - Turn on/off a flag to control whether the underlying pipeline is static. If static, this means that the data pipeline executes once and then not again until the user manually modifies this class. By default, Static is off because trying to debug this is tricky, and you should only use it when you know what you are doing.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetStatic ()</computeroutput> - Turn on/off a flag to control whether the underlying pipeline is static. If static, this means that the data pipeline executes once and then not again until the user manually modifies this class. By default, Static is off because trying to debug this is tricky, and you should only use it when you know what you are doing.  </para></listitem>
<listitem>
<para><computeroutput>obj.StaticOn ()</computeroutput> - Turn on/off a flag to control whether the underlying pipeline is static. If static, this means that the data pipeline executes once and then not again until the user manually modifies this class. By default, Static is off because trying to debug this is tricky, and you should only use it when you know what you are doing.  </para></listitem>
<listitem>
<para><computeroutput>obj.StaticOff ()</computeroutput> - Turn on/off a flag to control whether the underlying pipeline is static. If static, this means that the data pipeline executes once and then not again until the user manually modifies this class. By default, Static is off because trying to debug this is tricky, and you should only use it when you know what you are doing.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfiguration (int )</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataConfigurationMinValue ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataConfigurationMaxValue ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataConfiguration ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToUnknown ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToXLine ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToYLine ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToZLine ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToXYPlane ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToYZPlane ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToXZPlane ()</computeroutput> - Force the binning of the quadric clustering according to application knowledge relative to the dimension of the data. For example, if you know your data lies in a 2D x-y plane, the performance of the quadric clustering algorithm can be greatly improved by indicating this (i.e., the number of resulting triangles, and the quality of the decimation version is better). Setting this parameter forces the binning to be configured consistent with the dimnesionality of the data, and the collapse dimension ratio is ignored. Specifying the value of DataConfiguration to UNKNOWN (the default value) means that the class will attempt to figure the dimension of the class automatically using the CollapseDimensionRatio ivar.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetDataConfigurationToXYZVolume ()</computeroutput> - If the data configuration is set to UNKNOWN, this class attempts to figure out the dimensionality of the data using CollapseDimensionRatio. This ivar is the ratio of short edge of the input bounding box to its long edge, which is then used to collapse the data dimension (and set the quadric bin size in that direction to one). By default, this value is 0.05.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCollapseDimensionRatio (double )</computeroutput> - If the data configuration is set to UNKNOWN, this class attempts to figure out the dimensionality of the data using CollapseDimensionRatio. This ivar is the ratio of short edge of the input bounding box to its long edge, which is then used to collapse the data dimension (and set the quadric bin size in that direction to one). By default, this value is 0.05.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCollapseDimensionRatioMinValue ()</computeroutput> - If the data configuration is set to UNKNOWN, this class attempts to figure out the dimensionality of the data using CollapseDimensionRatio. This ivar is the ratio of short edge of the input bounding box to its long edge, which is then used to collapse the data dimension (and set the quadric bin size in that direction to one). By default, this value is 0.05.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCollapseDimensionRatioMaxValue ()</computeroutput> - If the data configuration is set to UNKNOWN, this class attempts to figure out the dimensionality of the data using CollapseDimensionRatio. This ivar is the ratio of short edge of the input bounding box to its long edge, which is then used to collapse the data dimension (and set the quadric bin size in that direction to one). By default, this value is 0.05.  </para></listitem>
<listitem>
<para><computeroutput>double = obj.GetCollapseDimensionRatio ()</computeroutput> - If the data configuration is set to UNKNOWN, this class attempts to figure out the dimensionality of the data using CollapseDimensionRatio. This ivar is the ratio of short edge of the input bounding box to its long edge, which is then used to collapse the data dimension (and set the quadric bin size in that direction to one). By default, this value is 0.05.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetLODFilter (vtkQuadricClustering lodFilter)</computeroutput> - This class will create a vtkQuadricClustering algorithm automatically. However, if you would like to specify the filter to use, or to access it and configure it, these method provide access to the filter.  </para></listitem>
<listitem>
<para><computeroutput>vtkQuadricClustering = obj.GetLODFilter ()</computeroutput> - This class will create a vtkQuadricClustering algorithm automatically. However, if you would like to specify the filter to use, or to access it and configure it, these method provide access to the filter.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetMaximumDisplayListSize (int )</computeroutput> - Specify the maximum display list size. This variable is used to determine whether to use display lists (ImmediateModeRenderingOff) or not. Controlling display list size is important to prevent program crashes (i.e., overly large display lists on some graphics hardware will cause faults). The display list size is the length of the vtkCellArray representing the topology of the input vtkPolyData.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumDisplayListSizeMinValue ()</computeroutput> - Specify the maximum display list size. This variable is used to determine whether to use display lists (ImmediateModeRenderingOff) or not. Controlling display list size is important to prevent program crashes (i.e., overly large display lists on some graphics hardware will cause faults). The display list size is the length of the vtkCellArray representing the topology of the input vtkPolyData.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumDisplayListSizeMaxValue ()</computeroutput> - Specify the maximum display list size. This variable is used to determine whether to use display lists (ImmediateModeRenderingOff) or not. Controlling display list size is important to prevent program crashes (i.e., overly large display lists on some graphics hardware will cause faults). The display list size is the length of the vtkCellArray representing the topology of the input vtkPolyData.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetMaximumDisplayListSize ()</computeroutput> - Specify the maximum display list size. This variable is used to determine whether to use display lists (ImmediateModeRenderingOff) or not. Controlling display list size is important to prevent program crashes (i.e., overly large display lists on some graphics hardware will cause faults). The display list size is the length of the vtkCellArray representing the topology of the input vtkPolyData.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPropType (int )</computeroutput> - Indicate that this actor is actually a follower. By default, the prop type is a vtkActor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPropTypeMinValue ()</computeroutput> - Indicate that this actor is actually a follower. By default, the prop type is a vtkActor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPropTypeMaxValue ()</computeroutput> - Indicate that this actor is actually a follower. By default, the prop type is a vtkActor.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetPropType ()</computeroutput> - Indicate that this actor is actually a follower. By default, the prop type is a vtkActor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPropTypeToFollower ()</computeroutput> - Indicate that this actor is actually a follower. By default, the prop type is a vtkActor.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetPropTypeToActor ()</computeroutput> - Set/Get the camera to follow. This method is only applicable when the prop type is set to a vtkFollower.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetCamera (vtkCamera )</computeroutput> - Set/Get the camera to follow. This method is only applicable when the prop type is set to a vtkFollower.  </para></listitem>
<listitem>
<para><computeroutput>vtkCamera = obj.GetCamera ()</computeroutput> - Set/Get the camera to follow. This method is only applicable when the prop type is set to a vtkFollower.  </para></listitem>
<listitem>
<para><computeroutput>obj.Render (vtkRenderer , vtkMapper )</computeroutput> - This causes the actor to be rendered. Depending on the frame rate request, it will use either a full resolution render or an interactive render (i.e., it will use the decimated geometry).  </para></listitem>
<listitem>
<para><computeroutput>int = obj.RenderOpaqueGeometry (vtkViewport viewport)</computeroutput> - This method is used internally by the rendering process. We overide the superclass method to properly set the estimated render time.  </para></listitem>
<listitem>
<para><computeroutput>obj.ReleaseGraphicsResources (vtkWindow )</computeroutput> - Release any graphics resources that are being consumed by this actor. The parameter window could be used to determine which graphic resources to release.  </para></listitem>
<listitem>
<para><computeroutput>obj.ShallowCopy (vtkProp prop)</computeroutput> - Shallow copy of an LOD actor. Overloads the virtual vtkProp method.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
