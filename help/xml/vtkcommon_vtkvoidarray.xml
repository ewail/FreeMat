<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkcommon_vtkvoidarray" kind="page">
    <compoundname>vtkcommon_vtkvoidarray</compoundname>
    <title>vtkVoidArray</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkcommon_1sec_vtkcommon" kindref="member">Visualization Toolkit Common Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>vtkVoidArray is an array of pointers to void. It provides methods for insertion and retrieval of these pointers values, and will automatically resize itself to hold new data.</para><para>To create an instance of class vtkVoidArray, simply invoke its constructor as follows <verbatim>  obj = vtkVoidArray
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkVoidArray has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkVoidArray class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVoidArray = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkVoidArray = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.Allocate (vtkIdType sz, vtkIdType ext)</computeroutput> - Allocate memory for this array. Delete old storage only if necessary. Note that the parameter ext is no longer used.  </para></listitem>
<listitem>
<para><computeroutput>obj.Initialize ()</computeroutput> - Release storage and reset array to initial state.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataType ()</computeroutput> - Return the size of the data contained in the array.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetDataTypeSize ()</computeroutput> - Set the number of void* pointers held in the array.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetNumberOfPointers (vtkIdType number)</computeroutput> - Get the number of void* pointers held in the array.  </para></listitem>
<listitem>
<para><computeroutput>vtkIdType = obj.GetNumberOfPointers ()</computeroutput> - Get the void* pointer at the ith location.  </para></listitem>
<listitem>
<para><computeroutput>obj.Reset ()</computeroutput> - Resize the array to just fit the inserted memory. Reclaims extra memory.  </para></listitem>
<listitem>
<para><computeroutput>obj.Squeeze ()</computeroutput> - Get the address of a particular data index. Performs no checks to verify that the memory has been allocated etc.  </para></listitem>
<listitem>
<para><computeroutput>obj.DeepCopy (vtkVoidArray va)</computeroutput> - Deep copy of another void array.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
