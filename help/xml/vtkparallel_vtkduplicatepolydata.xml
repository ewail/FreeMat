<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.1">
  <compounddef id="vtkparallel_vtkduplicatepolydata" kind="page">
    <compoundname>vtkparallel_vtkduplicatepolydata</compoundname>
    <title>vtkDuplicatePolyData</title>
    <detaileddescription>
<para>Section: <ref refid="sec_vtkparallel_1sec_vtkparallel" kindref="member">Visualization Toolkit Parallel Classes</ref> </para><sect1 id="vtkwidgets_vtkxyplotwidget_1Usage">
<title>Usage</title>
<para>This filter collects poly data and duplicates it on every node. Converts data parallel so every node has a complete copy of the data. The filter is used at the end of a pipeline for driving a tiled display.</para><para>To create an instance of class vtkDuplicatePolyData, simply invoke its constructor as follows <verbatim>  obj = vtkDuplicatePolyData
</verbatim> </para></sect1>
<sect1 id="vtkwidgets_vtkxyplotwidget_1Methods">
<title>Methods</title>
<para>The class vtkDuplicatePolyData has several methods that can be used. They are listed below. Note that the documentation is translated automatically from the VTK sources, and may not be completely intelligible. When in doubt, consult the VTK website. In the methods listed below, <computeroutput>obj</computeroutput> is an instance of the vtkDuplicatePolyData class. <itemizedlist>
<listitem>
<para><computeroutput>string = obj.GetClassName ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>int = obj.IsA (string name)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDuplicatePolyData = obj.NewInstance ()</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>vtkDuplicatePolyData = obj.SafeDownCast (vtkObject o)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetController (vtkMultiProcessController )</computeroutput> - By defualt this filter uses the global controller, but this method can be used to set another instead.  </para></listitem>
<listitem>
<para><computeroutput>vtkMultiProcessController = obj.GetController ()</computeroutput> - By defualt this filter uses the global controller, but this method can be used to set another instead.  </para></listitem>
<listitem>
<para><computeroutput>obj.InitializeSchedule (int numProcs)</computeroutput>  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSynchronous (int )</computeroutput> - This flag causes sends and receives to be matched. When this flag is off, two sends occur then two receives. I want to see if it makes a difference in performance. The flag is on by default.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetSynchronous ()</computeroutput> - This flag causes sends and receives to be matched. When this flag is off, two sends occur then two receives. I want to see if it makes a difference in performance. The flag is on by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.SynchronousOn ()</computeroutput> - This flag causes sends and receives to be matched. When this flag is off, two sends occur then two receives. I want to see if it makes a difference in performance. The flag is on by default.  </para></listitem>
<listitem>
<para><computeroutput>obj.SynchronousOff ()</computeroutput> - This flag causes sends and receives to be matched. When this flag is off, two sends occur then two receives. I want to see if it makes a difference in performance. The flag is on by default.  </para></listitem>
<listitem>
<para><computeroutput>vtkSocketController = obj.GetSocketController ()</computeroutput> - This duplicate filter works in client server mode when this controller is set. We have a client flag to diferentiate the client and server because the socket controller is odd: Proth processes think their id is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetSocketController (vtkSocketController controller)</computeroutput> - This duplicate filter works in client server mode when this controller is set. We have a client flag to diferentiate the client and server because the socket controller is odd: Proth processes think their id is 0.  </para></listitem>
<listitem>
<para><computeroutput>obj.SetClientFlag (int )</computeroutput> - This duplicate filter works in client server mode when this controller is set. We have a client flag to diferentiate the client and server because the socket controller is odd: Proth processes think their id is 0.  </para></listitem>
<listitem>
<para><computeroutput>int = obj.GetClientFlag ()</computeroutput> - This duplicate filter works in client server mode when this controller is set. We have a client flag to diferentiate the client and server because the socket controller is odd: Proth processes think their id is 0.  </para></listitem>
<listitem>
<para><computeroutput>long = obj.GetMemorySize ()</computeroutput> - This returns to size of the output (on this process). This method is not really used. It is needed to have the same API as vtkCollectPolyData.  </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
